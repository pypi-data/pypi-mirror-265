# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'EcrRegistryCredentialsAuth',
    'K8sRuntimeLabel',
    'ManagedK8sRuntimeExec',
    'ManagedK8sRuntimeLabel',
    'ReleaseChannelConstant',
    'ReleaseChannelConvergenceProtection',
    'ReleaseChannelConvergenceProtectionDeployment',
    'ReleaseChannelConvergenceProtectionPostApproval',
    'ReleaseChannelConvergenceProtectionPostDeployment',
    'ReleaseChannelConvergenceProtectionPreApproval',
    'ReleaseChannelConvergenceProtectionRef',
    'ReleaseChannelConvergenceProtectionRefParameter',
    'ReleaseChannelConvergenceProtectionRefParameterSecretValue',
    'ReleaseChannelManualApprovalPrecondition',
    'ReleaseChannelPolicy',
    'ReleaseChannelPolicyDefaultEnv',
    'ReleaseChannelPolicyDefaultEnvKubernetesSecret',
    'ReleaseChannelPolicyDefaultEnvSecret',
    'ReleaseChannelProtection',
    'ReleaseChannelProtectionDeployment',
    'ReleaseChannelProtectionPostApproval',
    'ReleaseChannelProtectionPostDeployment',
    'ReleaseChannelProtectionPreApproval',
    'ReleaseChannelProtectionRef',
    'ReleaseChannelProtectionRefParameter',
    'ReleaseChannelProtectionRefParameterSecretValue',
    'ReleaseChannelReleaseChannelStablePrecondition',
    'ReleaseChannelRuntime',
    'ReleaseChannelServiceInstanceProtection',
    'ReleaseChannelServiceInstanceProtectionDeployment',
    'ReleaseChannelServiceInstanceProtectionPostApproval',
    'ReleaseChannelServiceInstanceProtectionPostDeployment',
    'ReleaseChannelServiceInstanceProtectionPreApproval',
    'ReleaseChannelServiceInstanceProtectionRef',
    'ReleaseChannelServiceInstanceProtectionRefParameter',
    'ReleaseChannelServiceInstanceProtectionRefParameterSecretValue',
    'ReleaseChannelSharedManualApprovalPrecondition',
    'GetK8sRuntimeLabelResult',
    'GetReleaseChannelConstantResult',
    'GetReleaseChannelConvergenceProtectionResult',
    'GetReleaseChannelConvergenceProtectionDeploymentResult',
    'GetReleaseChannelConvergenceProtectionPostApprovalResult',
    'GetReleaseChannelConvergenceProtectionPostDeploymentResult',
    'GetReleaseChannelConvergenceProtectionPreApprovalResult',
    'GetReleaseChannelConvergenceProtectionRefResult',
    'GetReleaseChannelConvergenceProtectionRefParameterResult',
    'GetReleaseChannelConvergenceProtectionRefParameterSecretValueResult',
    'GetReleaseChannelManualApprovalPreconditionResult',
    'GetReleaseChannelPolicyResult',
    'GetReleaseChannelPolicyDefaultEnvResult',
    'GetReleaseChannelPolicyDefaultEnvKubernetesSecretResult',
    'GetReleaseChannelPolicyDefaultEnvSecretResult',
    'GetReleaseChannelProtectionResult',
    'GetReleaseChannelProtectionDeploymentResult',
    'GetReleaseChannelProtectionPostApprovalResult',
    'GetReleaseChannelProtectionPostDeploymentResult',
    'GetReleaseChannelProtectionPreApprovalResult',
    'GetReleaseChannelProtectionRefResult',
    'GetReleaseChannelProtectionRefParameterResult',
    'GetReleaseChannelProtectionRefParameterSecretValueResult',
    'GetReleaseChannelReleaseChannelStablePreconditionResult',
    'GetReleaseChannelRuntimeResult',
    'GetReleaseChannelServiceInstanceProtectionResult',
    'GetReleaseChannelServiceInstanceProtectionDeploymentResult',
    'GetReleaseChannelServiceInstanceProtectionPostApprovalResult',
    'GetReleaseChannelServiceInstanceProtectionPostDeploymentResult',
    'GetReleaseChannelServiceInstanceProtectionPreApprovalResult',
    'GetReleaseChannelServiceInstanceProtectionRefResult',
    'GetReleaseChannelServiceInstanceProtectionRefParameterResult',
    'GetReleaseChannelServiceInstanceProtectionRefParameterSecretValueResult',
    'GetReleaseChannelSharedManualApprovalPreconditionResult',
]

@pulumi.output_type
class EcrRegistryCredentialsAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EcrRegistryCredentialsAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EcrRegistryCredentialsAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EcrRegistryCredentialsAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key_id: str,
                 secret_access_key: str):
        """
        :param str access_key_id: AWS Access Key ID with permissions to the ECR registry
        :param str secret_access_key: AWS Secret Access Key with permissions to the ECR registry
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        AWS Access Key ID with permissions to the ECR registry
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        """
        AWS Secret Access Key with permissions to the ECR registry
        """
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class K8sRuntimeLabel(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: Label name
        :param str value: Label value
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label name
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Label value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ManagedK8sRuntimeExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiVersion":
            suggest = "api_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedK8sRuntimeExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedK8sRuntimeExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedK8sRuntimeExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_version: str,
                 command: str,
                 args: Optional[Sequence[str]] = None,
                 env: Optional[Mapping[str, str]] = None):
        """
        :param str api_version: API version of the exec credential plugin
        :param str command: Command to execute
        :param Sequence[str] args: Arguments to pass when executing the command
        :param Mapping[str, str] env: Environment variables to set when executing the command
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "command", command)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if env is not None:
            pulumi.set(__self__, "env", env)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> str:
        """
        API version of the exec credential plugin
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def command(self) -> str:
        """
        Command to execute
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Arguments to pass when executing the command
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Environment variables to set when executing the command
        """
        return pulumi.get(self, "env")


@pulumi.output_type
class ManagedK8sRuntimeLabel(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: Label name
        :param str value: Label value
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label name
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Label value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReleaseChannelConstant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelConstant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelConstant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelConstant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 string_value: str):
        """
        :param str name: name of the constant
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class ReleaseChannelConvergenceProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postApproval":
            suggest = "post_approval"
        elif key == "postDeployment":
            suggest = "post_deployment"
        elif key == "preApproval":
            suggest = "pre_approval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelConvergenceProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelConvergenceProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelConvergenceProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref: 'outputs.ReleaseChannelConvergenceProtectionRef',
                 deployment: Optional['outputs.ReleaseChannelConvergenceProtectionDeployment'] = None,
                 name: Optional[str] = None,
                 post_approval: Optional['outputs.ReleaseChannelConvergenceProtectionPostApproval'] = None,
                 post_deployment: Optional['outputs.ReleaseChannelConvergenceProtectionPostDeployment'] = None,
                 pre_approval: Optional['outputs.ReleaseChannelConvergenceProtectionPreApproval'] = None):
        """
        :param 'ReleaseChannelConvergenceProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'ReleaseChannelConvergenceProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param str name: name of the protection
        :param 'ReleaseChannelConvergenceProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'ReleaseChannelConvergenceProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'ReleaseChannelConvergenceProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.ReleaseChannelConvergenceProtectionRef':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ReleaseChannelConvergenceProtectionDeployment']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.ReleaseChannelConvergenceProtectionPostApproval']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.ReleaseChannelConvergenceProtectionPostDeployment']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.ReleaseChannelConvergenceProtectionPreApproval']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionDeployment(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionPostApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionPostDeployment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkDuration":
            suggest = "check_duration"
        elif key == "delayCheckDuration":
            suggest = "delay_check_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelConvergenceProtectionPostDeployment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelConvergenceProtectionPostDeployment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelConvergenceProtectionPostDeployment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionPreApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionRef(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.ReleaseChannelConvergenceProtectionRefParameter']] = None):
        """
        :param str name: name of the constant
        :param Sequence['ReleaseChannelConvergenceProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ReleaseChannelConvergenceProtectionRefParameter']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionRefParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImageTagValue":
            suggest = "docker_image_tag_value"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "secretValue":
            suggest = "secret_value"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelConvergenceProtectionRefParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelConvergenceProtectionRefParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelConvergenceProtectionRefParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.ReleaseChannelConvergenceProtectionRefParameterSecretValue'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'ReleaseChannelConvergenceProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.ReleaseChannelConvergenceProtectionRefParameterSecretValue']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class ReleaseChannelConvergenceProtectionRefParameterSecretValue(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ReleaseChannelManualApprovalPrecondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "everyAction":
            suggest = "every_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelManualApprovalPrecondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelManualApprovalPrecondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelManualApprovalPrecondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 every_action: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param str description: description of the manual approval
        :param str name: name of the manual approval
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if every_action is not None:
            pulumi.set(__self__, "every_action", every_action)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of the manual approval
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="everyAction")
    def every_action(self) -> Optional[bool]:
        return pulumi.get(self, "every_action")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the manual approval
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ReleaseChannelPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultEnv":
            suggest = "default_env"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_env: Optional[Mapping[str, 'outputs.ReleaseChannelPolicyDefaultEnv']] = None):
        """
        :param Mapping[str, 'ReleaseChannelPolicyDefaultEnvArgs'] default_env: default environment variables for services in this Release Channel
        """
        if default_env is not None:
            pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Optional[Mapping[str, 'outputs.ReleaseChannelPolicyDefaultEnv']]:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")


@pulumi.output_type
class ReleaseChannelPolicyDefaultEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kubernetesSecret":
            suggest = "kubernetes_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelPolicyDefaultEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelPolicyDefaultEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelPolicyDefaultEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kubernetes_secret: Optional['outputs.ReleaseChannelPolicyDefaultEnvKubernetesSecret'] = None,
                 secret: Optional['outputs.ReleaseChannelPolicyDefaultEnvSecret'] = None,
                 value: Optional[str] = None):
        """
        :param 'ReleaseChannelPolicyDefaultEnvKubernetesSecretArgs' kubernetes_secret: Reference to a secret value stored in Kubernetes.
        :param 'ReleaseChannelPolicyDefaultEnvSecretArgs' secret: Reference to a secret value stored in Prodvana.
        :param str value: Non-sensitive environment variable value
        """
        if kubernetes_secret is not None:
            pulumi.set(__self__, "kubernetes_secret", kubernetes_secret)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="kubernetesSecret")
    def kubernetes_secret(self) -> Optional['outputs.ReleaseChannelPolicyDefaultEnvKubernetesSecret']:
        """
        Reference to a secret value stored in Kubernetes.
        """
        return pulumi.get(self, "kubernetes_secret")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.ReleaseChannelPolicyDefaultEnvSecret']:
        """
        Reference to a secret value stored in Prodvana.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Non-sensitive environment variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReleaseChannelPolicyDefaultEnvKubernetesSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretName":
            suggest = "secret_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelPolicyDefaultEnvKubernetesSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelPolicyDefaultEnvKubernetesSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelPolicyDefaultEnvKubernetesSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[str] = None,
                 secret_name: Optional[str] = None):
        """
        :param str key: Name of the secret.
        :param str secret_name: Name of the secret object
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        Name of the secret object
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class ReleaseChannelPolicyDefaultEnvSecret(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ReleaseChannelProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postApproval":
            suggest = "post_approval"
        elif key == "postDeployment":
            suggest = "post_deployment"
        elif key == "preApproval":
            suggest = "pre_approval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref: 'outputs.ReleaseChannelProtectionRef',
                 deployment: Optional['outputs.ReleaseChannelProtectionDeployment'] = None,
                 name: Optional[str] = None,
                 post_approval: Optional['outputs.ReleaseChannelProtectionPostApproval'] = None,
                 post_deployment: Optional['outputs.ReleaseChannelProtectionPostDeployment'] = None,
                 pre_approval: Optional['outputs.ReleaseChannelProtectionPreApproval'] = None):
        """
        :param 'ReleaseChannelProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'ReleaseChannelProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param str name: name of the protection
        :param 'ReleaseChannelProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'ReleaseChannelProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'ReleaseChannelProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.ReleaseChannelProtectionRef':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ReleaseChannelProtectionDeployment']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.ReleaseChannelProtectionPostApproval']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.ReleaseChannelProtectionPostDeployment']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.ReleaseChannelProtectionPreApproval']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class ReleaseChannelProtectionDeployment(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelProtectionPostApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelProtectionPostDeployment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkDuration":
            suggest = "check_duration"
        elif key == "delayCheckDuration":
            suggest = "delay_check_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelProtectionPostDeployment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelProtectionPostDeployment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelProtectionPostDeployment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelProtectionPreApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelProtectionRef(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.ReleaseChannelProtectionRefParameter']] = None):
        """
        :param str name: name of the constant
        :param Sequence['ReleaseChannelProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ReleaseChannelProtectionRefParameter']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ReleaseChannelProtectionRefParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImageTagValue":
            suggest = "docker_image_tag_value"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "secretValue":
            suggest = "secret_value"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelProtectionRefParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelProtectionRefParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelProtectionRefParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.ReleaseChannelProtectionRefParameterSecretValue'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'ReleaseChannelProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.ReleaseChannelProtectionRefParameterSecretValue']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class ReleaseChannelProtectionRefParameterSecretValue(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ReleaseChannelReleaseChannelStablePrecondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "releaseChannel":
            suggest = "release_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelReleaseChannelStablePrecondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelReleaseChannelStablePrecondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelReleaseChannelStablePrecondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 release_channel: str):
        """
        :param str release_channel: name of a release channel that must be in a stable deployment state
        """
        pulumi.set(__self__, "release_channel", release_channel)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> str:
        """
        name of a release channel that must be in a stable deployment state
        """
        return pulumi.get(self, "release_channel")


@pulumi.output_type
class ReleaseChannelRuntime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ecsPrefix":
            suggest = "ecs_prefix"
        elif key == "k8sNamespace":
            suggest = "k8s_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelRuntime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelRuntime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelRuntime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ecs_prefix: Optional[str] = None,
                 k8s_namespace: Optional[str] = None,
                 name: Optional[str] = None,
                 runtime: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str ecs_prefix: Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        :param str k8s_namespace: Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        :param str name: optional identifier for this runtime connection within this release channel
        :param str runtime: name of the a runtime
        :param str type: type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
        """
        if ecs_prefix is not None:
            pulumi.set(__self__, "ecs_prefix", ecs_prefix)
        if k8s_namespace is not None:
            pulumi.set(__self__, "k8s_namespace", k8s_namespace)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="ecsPrefix")
    def ecs_prefix(self) -> Optional[str]:
        """
        Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
        """
        return pulumi.get(self, "ecs_prefix")

    @property
    @pulumi.getter(name="k8sNamespace")
    def k8s_namespace(self) -> Optional[str]:
        """
        Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
        """
        return pulumi.get(self, "k8s_namespace")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        optional identifier for this runtime connection within this release channel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def runtime(self) -> Optional[str]:
        """
        name of the a runtime
        """
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "postApproval":
            suggest = "post_approval"
        elif key == "postDeployment":
            suggest = "post_deployment"
        elif key == "preApproval":
            suggest = "pre_approval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelServiceInstanceProtection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelServiceInstanceProtection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelServiceInstanceProtection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref: 'outputs.ReleaseChannelServiceInstanceProtectionRef',
                 deployment: Optional['outputs.ReleaseChannelServiceInstanceProtectionDeployment'] = None,
                 name: Optional[str] = None,
                 post_approval: Optional['outputs.ReleaseChannelServiceInstanceProtectionPostApproval'] = None,
                 post_deployment: Optional['outputs.ReleaseChannelServiceInstanceProtectionPostDeployment'] = None,
                 pre_approval: Optional['outputs.ReleaseChannelServiceInstanceProtectionPreApproval'] = None):
        """
        :param 'ReleaseChannelServiceInstanceProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'ReleaseChannelServiceInstanceProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param str name: name of the protection
        :param 'ReleaseChannelServiceInstanceProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'ReleaseChannelServiceInstanceProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'ReleaseChannelServiceInstanceProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.ReleaseChannelServiceInstanceProtectionRef':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.ReleaseChannelServiceInstanceProtectionDeployment']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.ReleaseChannelServiceInstanceProtectionPostApproval']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.ReleaseChannelServiceInstanceProtectionPostDeployment']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.ReleaseChannelServiceInstanceProtectionPreApproval']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionDeployment(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionPostApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionPostDeployment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkDuration":
            suggest = "check_duration"
        elif key == "delayCheckDuration":
            suggest = "delay_check_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelServiceInstanceProtectionPostDeployment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelServiceInstanceProtectionPostDeployment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelServiceInstanceProtectionPostDeployment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None,
                 enabled: Optional[bool] = None):
        """
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionPreApproval(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionRef(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.ReleaseChannelServiceInstanceProtectionRefParameter']] = None):
        """
        :param str name: name of the constant
        :param Sequence['ReleaseChannelServiceInstanceProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ReleaseChannelServiceInstanceProtectionRefParameter']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionRefParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerImageTagValue":
            suggest = "docker_image_tag_value"
        elif key == "intValue":
            suggest = "int_value"
        elif key == "secretValue":
            suggest = "secret_value"
        elif key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReleaseChannelServiceInstanceProtectionRefParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReleaseChannelServiceInstanceProtectionRefParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReleaseChannelServiceInstanceProtectionRefParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.ReleaseChannelServiceInstanceProtectionRefParameterSecretValue'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'ReleaseChannelServiceInstanceProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.ReleaseChannelServiceInstanceProtectionRefParameterSecretValue']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class ReleaseChannelServiceInstanceProtectionRefParameterSecretValue(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ReleaseChannelSharedManualApprovalPrecondition(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: name of the manual approval
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the manual approval
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetK8sRuntimeLabelResult(dict):
    def __init__(__self__, *,
                 label: str,
                 value: str):
        """
        :param str label: Label name
        :param str value: Label value
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Label name
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Label value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReleaseChannelConstantResult(dict):
    def __init__(__self__, *,
                 name: str,
                 string_value: str):
        """
        :param str name: name of the constant
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 ref: 'outputs.GetReleaseChannelConvergenceProtectionRefResult',
                 deployment: Optional['outputs.GetReleaseChannelConvergenceProtectionDeploymentResult'] = None,
                 post_approval: Optional['outputs.GetReleaseChannelConvergenceProtectionPostApprovalResult'] = None,
                 post_deployment: Optional['outputs.GetReleaseChannelConvergenceProtectionPostDeploymentResult'] = None,
                 pre_approval: Optional['outputs.GetReleaseChannelConvergenceProtectionPreApprovalResult'] = None):
        """
        :param str name: name of the protection
        :param 'GetReleaseChannelConvergenceProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'GetReleaseChannelConvergenceProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param 'GetReleaseChannelConvergenceProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'GetReleaseChannelConvergenceProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'GetReleaseChannelConvergenceProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.GetReleaseChannelConvergenceProtectionRefResult':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.GetReleaseChannelConvergenceProtectionDeploymentResult']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.GetReleaseChannelConvergenceProtectionPostApprovalResult']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.GetReleaseChannelConvergenceProtectionPostDeploymentResult']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.GetReleaseChannelConvergenceProtectionPreApprovalResult']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionPostApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionPostDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        pulumi.set(__self__, "enabled", enabled)
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionPreApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionRefResult(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.GetReleaseChannelConvergenceProtectionRefParameterResult']] = None):
        """
        :param str name: name of the constant
        :param Sequence['GetReleaseChannelConvergenceProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetReleaseChannelConvergenceProtectionRefParameterResult']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionRefParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.GetReleaseChannelConvergenceProtectionRefParameterSecretValueResult'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'GetReleaseChannelConvergenceProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.GetReleaseChannelConvergenceProtectionRefParameterSecretValueResult']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class GetReleaseChannelConvergenceProtectionRefParameterSecretValueResult(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetReleaseChannelManualApprovalPreconditionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 description: Optional[str] = None,
                 every_action: Optional[bool] = None):
        """
        :param str name: name of the manual approval
        :param str description: description of the manual approval
        :param bool every_action: whether to require manual approval for every action, or just the first
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if every_action is not None:
            pulumi.set(__self__, "every_action", every_action)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the manual approval
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of the manual approval
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="everyAction")
    def every_action(self) -> Optional[bool]:
        """
        whether to require manual approval for every action, or just the first
        """
        return pulumi.get(self, "every_action")


@pulumi.output_type
class GetReleaseChannelPolicyResult(dict):
    def __init__(__self__, *,
                 default_env: Mapping[str, 'outputs.GetReleaseChannelPolicyDefaultEnvResult']):
        """
        :param Mapping[str, 'GetReleaseChannelPolicyDefaultEnvArgs'] default_env: default environment variables for services in this Release Channel
        """
        pulumi.set(__self__, "default_env", default_env)

    @property
    @pulumi.getter(name="defaultEnv")
    def default_env(self) -> Mapping[str, 'outputs.GetReleaseChannelPolicyDefaultEnvResult']:
        """
        default environment variables for services in this Release Channel
        """
        return pulumi.get(self, "default_env")


@pulumi.output_type
class GetReleaseChannelPolicyDefaultEnvResult(dict):
    def __init__(__self__, *,
                 kubernetes_secret: Optional['outputs.GetReleaseChannelPolicyDefaultEnvKubernetesSecretResult'] = None,
                 secret: Optional['outputs.GetReleaseChannelPolicyDefaultEnvSecretResult'] = None,
                 value: Optional[str] = None):
        """
        :param 'GetReleaseChannelPolicyDefaultEnvKubernetesSecretArgs' kubernetes_secret: Reference to a secret value stored in Kubernetes.
        :param 'GetReleaseChannelPolicyDefaultEnvSecretArgs' secret: Reference to a secret value stored in Prodvana.
        :param str value: Non-sensitive environment variable value
        """
        if kubernetes_secret is not None:
            pulumi.set(__self__, "kubernetes_secret", kubernetes_secret)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="kubernetesSecret")
    def kubernetes_secret(self) -> Optional['outputs.GetReleaseChannelPolicyDefaultEnvKubernetesSecretResult']:
        """
        Reference to a secret value stored in Kubernetes.
        """
        return pulumi.get(self, "kubernetes_secret")

    @property
    @pulumi.getter
    def secret(self) -> Optional['outputs.GetReleaseChannelPolicyDefaultEnvSecretResult']:
        """
        Reference to a secret value stored in Prodvana.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Non-sensitive environment variable value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetReleaseChannelPolicyDefaultEnvKubernetesSecretResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 secret_name: Optional[str] = None):
        """
        :param str key: Name of the secret.
        :param str secret_name: Name of the secret object
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[str]:
        """
        Name of the secret object
        """
        return pulumi.get(self, "secret_name")


@pulumi.output_type
class GetReleaseChannelPolicyDefaultEnvSecretResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 version: Optional[str] = None):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetReleaseChannelProtectionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 ref: 'outputs.GetReleaseChannelProtectionRefResult',
                 deployment: Optional['outputs.GetReleaseChannelProtectionDeploymentResult'] = None,
                 post_approval: Optional['outputs.GetReleaseChannelProtectionPostApprovalResult'] = None,
                 post_deployment: Optional['outputs.GetReleaseChannelProtectionPostDeploymentResult'] = None,
                 pre_approval: Optional['outputs.GetReleaseChannelProtectionPreApprovalResult'] = None):
        """
        :param str name: name of the protection
        :param 'GetReleaseChannelProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'GetReleaseChannelProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param 'GetReleaseChannelProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'GetReleaseChannelProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'GetReleaseChannelProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.GetReleaseChannelProtectionRefResult':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.GetReleaseChannelProtectionDeploymentResult']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.GetReleaseChannelProtectionPostApprovalResult']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.GetReleaseChannelProtectionPostDeploymentResult']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.GetReleaseChannelProtectionPreApprovalResult']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class GetReleaseChannelProtectionDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelProtectionPostApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelProtectionPostDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        pulumi.set(__self__, "enabled", enabled)
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")


@pulumi.output_type
class GetReleaseChannelProtectionPreApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelProtectionRefResult(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.GetReleaseChannelProtectionRefParameterResult']] = None):
        """
        :param str name: name of the constant
        :param Sequence['GetReleaseChannelProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetReleaseChannelProtectionRefParameterResult']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetReleaseChannelProtectionRefParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.GetReleaseChannelProtectionRefParameterSecretValueResult'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'GetReleaseChannelProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.GetReleaseChannelProtectionRefParameterSecretValueResult']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class GetReleaseChannelProtectionRefParameterSecretValueResult(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetReleaseChannelReleaseChannelStablePreconditionResult(dict):
    def __init__(__self__, *,
                 release_channel: str):
        """
        :param str release_channel: name of a release channel that must be in a stable deployment state
        """
        pulumi.set(__self__, "release_channel", release_channel)

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> str:
        """
        name of a release channel that must be in a stable deployment state
        """
        return pulumi.get(self, "release_channel")


@pulumi.output_type
class GetReleaseChannelRuntimeResult(dict):
    def __init__(__self__, *,
                 ecs_prefix: str,
                 k8s_namespace: str,
                 name: str,
                 type: str,
                 runtime: Optional[str] = None):
        """
        :param str ecs_prefix: ECS prefix
        :param str k8s_namespace: Kubernetes namespace
        :param str name: optional identifier for this runtime connection within this release channel
        :param str type: type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
        :param str runtime: name of the a runtime
        """
        pulumi.set(__self__, "ecs_prefix", ecs_prefix)
        pulumi.set(__self__, "k8s_namespace", k8s_namespace)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if runtime is not None:
            pulumi.set(__self__, "runtime", runtime)

    @property
    @pulumi.getter(name="ecsPrefix")
    def ecs_prefix(self) -> str:
        """
        ECS prefix
        """
        return pulumi.get(self, "ecs_prefix")

    @property
    @pulumi.getter(name="k8sNamespace")
    def k8s_namespace(self) -> str:
        """
        Kubernetes namespace
        """
        return pulumi.get(self, "k8s_namespace")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        optional identifier for this runtime connection within this release channel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def runtime(self) -> Optional[str]:
        """
        name of the a runtime
        """
        return pulumi.get(self, "runtime")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 ref: 'outputs.GetReleaseChannelServiceInstanceProtectionRefResult',
                 deployment: Optional['outputs.GetReleaseChannelServiceInstanceProtectionDeploymentResult'] = None,
                 post_approval: Optional['outputs.GetReleaseChannelServiceInstanceProtectionPostApprovalResult'] = None,
                 post_deployment: Optional['outputs.GetReleaseChannelServiceInstanceProtectionPostDeploymentResult'] = None,
                 pre_approval: Optional['outputs.GetReleaseChannelServiceInstanceProtectionPreApprovalResult'] = None):
        """
        :param str name: name of the protection
        :param 'GetReleaseChannelServiceInstanceProtectionRefArgs' ref: reference to a protection stored in Prodvana
        :param 'GetReleaseChannelServiceInstanceProtectionDeploymentArgs' deployment: deployment lifecycle options
        :param 'GetReleaseChannelServiceInstanceProtectionPostApprovalArgs' post_approval: post-approval lifecycle options
        :param 'GetReleaseChannelServiceInstanceProtectionPostDeploymentArgs' post_deployment: post-deployment lifecycle options
        :param 'GetReleaseChannelServiceInstanceProtectionPreApprovalArgs' pre_approval: pre-approval lifecycle options
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ref", ref)
        if deployment is not None:
            pulumi.set(__self__, "deployment", deployment)
        if post_approval is not None:
            pulumi.set(__self__, "post_approval", post_approval)
        if post_deployment is not None:
            pulumi.set(__self__, "post_deployment", post_deployment)
        if pre_approval is not None:
            pulumi.set(__self__, "pre_approval", pre_approval)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the protection
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ref(self) -> 'outputs.GetReleaseChannelServiceInstanceProtectionRefResult':
        """
        reference to a protection stored in Prodvana
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter
    def deployment(self) -> Optional['outputs.GetReleaseChannelServiceInstanceProtectionDeploymentResult']:
        """
        deployment lifecycle options
        """
        return pulumi.get(self, "deployment")

    @property
    @pulumi.getter(name="postApproval")
    def post_approval(self) -> Optional['outputs.GetReleaseChannelServiceInstanceProtectionPostApprovalResult']:
        """
        post-approval lifecycle options
        """
        return pulumi.get(self, "post_approval")

    @property
    @pulumi.getter(name="postDeployment")
    def post_deployment(self) -> Optional['outputs.GetReleaseChannelServiceInstanceProtectionPostDeploymentResult']:
        """
        post-deployment lifecycle options
        """
        return pulumi.get(self, "post_deployment")

    @property
    @pulumi.getter(name="preApproval")
    def pre_approval(self) -> Optional['outputs.GetReleaseChannelServiceInstanceProtectionPreApprovalResult']:
        """
        pre-approval lifecycle options
        """
        return pulumi.get(self, "pre_approval")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionPostApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionPostDeploymentResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 check_duration: Optional[str] = None,
                 delay_check_duration: Optional[str] = None):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        :param str check_duration: how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param str delay_check_duration: delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        pulumi.set(__self__, "enabled", enabled)
        if check_duration is not None:
            pulumi.set(__self__, "check_duration", check_duration)
        if delay_check_duration is not None:
            pulumi.set(__self__, "delay_check_duration", delay_check_duration)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="checkDuration")
    def check_duration(self) -> Optional[str]:
        """
        how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "check_duration")

    @property
    @pulumi.getter(name="delayCheckDuration")
    def delay_check_duration(self) -> Optional[str]:
        """
        delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "delay_check_duration")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionPreApprovalResult(dict):
    def __init__(__self__, *,
                 enabled: bool):
        """
        :param bool enabled: whether to enable deployment lifecycle options
        """
        pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable deployment lifecycle options
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionRefResult(dict):
    def __init__(__self__, *,
                 name: str,
                 parameters: Optional[Sequence['outputs.GetReleaseChannelServiceInstanceProtectionRefParameterResult']] = None):
        """
        :param str name: name of the constant
        :param Sequence['GetReleaseChannelServiceInstanceProtectionRefParameterArgs'] parameters: parameters to pass to the protection
        """
        pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.GetReleaseChannelServiceInstanceProtectionRefParameterResult']]:
        """
        parameters to pass to the protection
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionRefParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 docker_image_tag_value: Optional[str] = None,
                 int_value: Optional[int] = None,
                 secret_value: Optional['outputs.GetReleaseChannelServiceInstanceProtectionRefParameterSecretValueResult'] = None,
                 string_value: Optional[str] = None):
        """
        :param str name: name of the constant
        :param str docker_image_tag_value: parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param int int_value: parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param 'GetReleaseChannelServiceInstanceProtectionRefParameterSecretValueArgs' secret_value: parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        :param str string_value: string value of the constant
        """
        pulumi.set(__self__, "name", name)
        if docker_image_tag_value is not None:
            pulumi.set(__self__, "docker_image_tag_value", docker_image_tag_value)
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the constant
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="dockerImageTagValue")
    def docker_image_tag_value(self) -> Optional[str]:
        """
        parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "docker_image_tag_value")

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[int]:
        """
        parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "int_value")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional['outputs.GetReleaseChannelServiceInstanceProtectionRefParameterSecretValueResult']:
        """
        parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
        """
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        string value of the constant
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class GetReleaseChannelServiceInstanceProtectionRefParameterSecretValueResult(dict):
    def __init__(__self__, *,
                 key: str,
                 version: str):
        """
        :param str key: Name of the secret.
        :param str version: Version of the secret
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Name of the secret.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the secret
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetReleaseChannelSharedManualApprovalPreconditionResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: name of the manual approval
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the manual approval
        """
        return pulumi.get(self, "name")


