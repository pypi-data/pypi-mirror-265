# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManagedK8sRuntimeArgs', 'ManagedK8sRuntime']

@pulumi.input_type
class ManagedK8sRuntimeArgs:
    def __init__(__self__, *,
                 agent_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 config_context: Optional[pulumi.Input[str]] = None,
                 config_context_auth_info: Optional[pulumi.Input[str]] = None,
                 config_context_cluster: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_: Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ManagedK8sRuntime resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] agent_env: Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        :param pulumi.Input[str] client_certificate: PEM-encoded client certificate for TLS authentication.
        :param pulumi.Input[str] client_key: PEM-encoded client certificate key for TLS authentication.
        :param pulumi.Input[str] cluster_ca_certificate: PEM-encoded root certificates bundle for TLS authentication.
        :param pulumi.Input[str] config_context: Context to use from the kube config file.
        :param pulumi.Input[str] config_context_auth_info: Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        :param pulumi.Input[str] config_context_cluster: Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        :param pulumi.Input[str] config_path: Path to the kube config file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_paths: A list of paths to kube config files.
        :param pulumi.Input['ManagedK8sRuntimeExecArgs'] exec_: Exec configuration for authentication to the Kubernetes cluster
        :param pulumi.Input[str] host: The address of the Kubernetes cluster (scheme://hostname:port)
        :param pulumi.Input[bool] insecure: Whether server should be accessed without verifying the TLS certificate
        :param pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]] labels: List of labels to apply to the runtime
        :param pulumi.Input[str] name: Runtime name
        :param pulumi.Input[str] password: Password for basic authentication to the Kubernetes cluster
        :param pulumi.Input[str] proxy_url: Proxy URL to use when accessing the Kubernetes cluster
        :param pulumi.Input[str] timeout: How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param pulumi.Input[str] tls_server_name: Server name passed to the server for SNI and is used in the client to check server certificates against
        :param pulumi.Input[str] token: Token to authenticate an service account
        :param pulumi.Input[str] username: Username for basic authentication to the Kubernetes cluster
        """
        if agent_env is not None:
            pulumi.set(__self__, "agent_env", agent_env)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if config_context is not None:
            pulumi.set(__self__, "config_context", config_context)
        if config_context_auth_info is not None:
            pulumi.set(__self__, "config_context_auth_info", config_context_auth_info)
        if config_context_cluster is not None:
            pulumi.set(__self__, "config_context_cluster", config_context_cluster)
        if config_path is not None:
            pulumi.set(__self__, "config_path", config_path)
        if config_paths is not None:
            pulumi.set(__self__, "config_paths", config_paths)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="agentEnv")
    def agent_env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        """
        return pulumi.get(self, "agent_env")

    @agent_env.setter
    def agent_env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "agent_env", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate for TLS authentication.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate key for TLS authentication.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded root certificates bundle for TLS authentication.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_certificate", value)

    @property
    @pulumi.getter(name="configContext")
    def config_context(self) -> Optional[pulumi.Input[str]]:
        """
        Context to use from the kube config file.
        """
        return pulumi.get(self, "config_context")

    @config_context.setter
    def config_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context", value)

    @property
    @pulumi.getter(name="configContextAuthInfo")
    def config_context_auth_info(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_auth_info")

    @config_context_auth_info.setter
    def config_context_auth_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_auth_info", value)

    @property
    @pulumi.getter(name="configContextCluster")
    def config_context_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_cluster")

    @config_context_cluster.setter
    def config_context_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_cluster", value)

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the kube config file.
        """
        return pulumi.get(self, "config_path")

    @config_path.setter
    def config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_path", value)

    @property
    @pulumi.getter(name="configPaths")
    def config_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of paths to kube config files.
        """
        return pulumi.get(self, "config_paths")

    @config_paths.setter
    def config_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_paths", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']]:
        """
        Exec configuration for authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the Kubernetes cluster (scheme://hostname:port)
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether server should be accessed without verifying the TLS certificate
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]]:
        """
        List of labels to apply to the runtime
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy URL to use when accessing the Kubernetes cluster
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name passed to the server for SNI and is used in the client to check server certificates against
        """
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token to authenticate an service account
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _ManagedK8sRuntimeState:
    def __init__(__self__, *,
                 agent_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 agent_externally_managed: Optional[pulumi.Input[bool]] = None,
                 agent_namespace: Optional[pulumi.Input[str]] = None,
                 agent_runtime_id: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 config_context: Optional[pulumi.Input[str]] = None,
                 config_context_auth_info: Optional[pulumi.Input[str]] = None,
                 config_context_cluster: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_: Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ManagedK8sRuntime resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] agent_env: Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        :param pulumi.Input[bool] agent_externally_managed: If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
        :param pulumi.Input[str] agent_namespace: The namespace of the agent
        :param pulumi.Input[str] agent_runtime_id: The runtime identifier of the agent
        :param pulumi.Input[str] client_certificate: PEM-encoded client certificate for TLS authentication.
        :param pulumi.Input[str] client_key: PEM-encoded client certificate key for TLS authentication.
        :param pulumi.Input[str] cluster_ca_certificate: PEM-encoded root certificates bundle for TLS authentication.
        :param pulumi.Input[str] config_context: Context to use from the kube config file.
        :param pulumi.Input[str] config_context_auth_info: Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        :param pulumi.Input[str] config_context_cluster: Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        :param pulumi.Input[str] config_path: Path to the kube config file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_paths: A list of paths to kube config files.
        :param pulumi.Input['ManagedK8sRuntimeExecArgs'] exec_: Exec configuration for authentication to the Kubernetes cluster
        :param pulumi.Input[str] host: The address of the Kubernetes cluster (scheme://hostname:port)
        :param pulumi.Input[bool] insecure: Whether server should be accessed without verifying the TLS certificate
        :param pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]] labels: List of labels to apply to the runtime
        :param pulumi.Input[str] name: Runtime name
        :param pulumi.Input[str] password: Password for basic authentication to the Kubernetes cluster
        :param pulumi.Input[str] proxy_url: Proxy URL to use when accessing the Kubernetes cluster
        :param pulumi.Input[str] timeout: How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param pulumi.Input[str] tls_server_name: Server name passed to the server for SNI and is used in the client to check server certificates against
        :param pulumi.Input[str] token: Token to authenticate an service account
        :param pulumi.Input[str] username: Username for basic authentication to the Kubernetes cluster
        """
        if agent_env is not None:
            pulumi.set(__self__, "agent_env", agent_env)
        if agent_externally_managed is not None:
            pulumi.set(__self__, "agent_externally_managed", agent_externally_managed)
        if agent_namespace is not None:
            pulumi.set(__self__, "agent_namespace", agent_namespace)
        if agent_runtime_id is not None:
            pulumi.set(__self__, "agent_runtime_id", agent_runtime_id)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if config_context is not None:
            pulumi.set(__self__, "config_context", config_context)
        if config_context_auth_info is not None:
            pulumi.set(__self__, "config_context_auth_info", config_context_auth_info)
        if config_context_cluster is not None:
            pulumi.set(__self__, "config_context_cluster", config_context_cluster)
        if config_path is not None:
            pulumi.set(__self__, "config_path", config_path)
        if config_paths is not None:
            pulumi.set(__self__, "config_paths", config_paths)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="agentEnv")
    def agent_env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        """
        return pulumi.get(self, "agent_env")

    @agent_env.setter
    def agent_env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "agent_env", value)

    @property
    @pulumi.getter(name="agentExternallyManaged")
    def agent_externally_managed(self) -> Optional[pulumi.Input[bool]]:
        """
        If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
        """
        return pulumi.get(self, "agent_externally_managed")

    @agent_externally_managed.setter
    def agent_externally_managed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agent_externally_managed", value)

    @property
    @pulumi.getter(name="agentNamespace")
    def agent_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace of the agent
        """
        return pulumi.get(self, "agent_namespace")

    @agent_namespace.setter
    def agent_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_namespace", value)

    @property
    @pulumi.getter(name="agentRuntimeId")
    def agent_runtime_id(self) -> Optional[pulumi.Input[str]]:
        """
        The runtime identifier of the agent
        """
        return pulumi.get(self, "agent_runtime_id")

    @agent_runtime_id.setter
    def agent_runtime_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_runtime_id", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate for TLS authentication.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate key for TLS authentication.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded root certificates bundle for TLS authentication.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_certificate", value)

    @property
    @pulumi.getter(name="configContext")
    def config_context(self) -> Optional[pulumi.Input[str]]:
        """
        Context to use from the kube config file.
        """
        return pulumi.get(self, "config_context")

    @config_context.setter
    def config_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context", value)

    @property
    @pulumi.getter(name="configContextAuthInfo")
    def config_context_auth_info(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_auth_info")

    @config_context_auth_info.setter
    def config_context_auth_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_auth_info", value)

    @property
    @pulumi.getter(name="configContextCluster")
    def config_context_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_cluster")

    @config_context_cluster.setter
    def config_context_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_cluster", value)

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the kube config file.
        """
        return pulumi.get(self, "config_path")

    @config_path.setter
    def config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_path", value)

    @property
    @pulumi.getter(name="configPaths")
    def config_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of paths to kube config files.
        """
        return pulumi.get(self, "config_paths")

    @config_paths.setter
    def config_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "config_paths", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']]:
        """
        Exec configuration for authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ManagedK8sRuntimeExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the Kubernetes cluster (scheme://hostname:port)
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether server should be accessed without verifying the TLS certificate
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]]:
        """
        List of labels to apply to the runtime
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ManagedK8sRuntimeLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy URL to use when accessing the Kubernetes cluster
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        """
        How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Server name passed to the server for SNI and is used in the client to check server certificates against
        """
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token to authenticate an service account
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class ManagedK8sRuntime(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 config_context: Optional[pulumi.Input[str]] = None,
                 config_context_auth_info: Optional[pulumi.Input[str]] = None,
                 config_context_cluster: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_: Optional[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeExecArgs']]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeLabelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ManagedK8sRuntime resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] agent_env: Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        :param pulumi.Input[str] client_certificate: PEM-encoded client certificate for TLS authentication.
        :param pulumi.Input[str] client_key: PEM-encoded client certificate key for TLS authentication.
        :param pulumi.Input[str] cluster_ca_certificate: PEM-encoded root certificates bundle for TLS authentication.
        :param pulumi.Input[str] config_context: Context to use from the kube config file.
        :param pulumi.Input[str] config_context_auth_info: Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        :param pulumi.Input[str] config_context_cluster: Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        :param pulumi.Input[str] config_path: Path to the kube config file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_paths: A list of paths to kube config files.
        :param pulumi.Input[pulumi.InputType['ManagedK8sRuntimeExecArgs']] exec_: Exec configuration for authentication to the Kubernetes cluster
        :param pulumi.Input[str] host: The address of the Kubernetes cluster (scheme://hostname:port)
        :param pulumi.Input[bool] insecure: Whether server should be accessed without verifying the TLS certificate
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeLabelArgs']]]] labels: List of labels to apply to the runtime
        :param pulumi.Input[str] name: Runtime name
        :param pulumi.Input[str] password: Password for basic authentication to the Kubernetes cluster
        :param pulumi.Input[str] proxy_url: Proxy URL to use when accessing the Kubernetes cluster
        :param pulumi.Input[str] timeout: How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param pulumi.Input[str] tls_server_name: Server name passed to the server for SNI and is used in the client to check server certificates against
        :param pulumi.Input[str] token: Token to authenticate an service account
        :param pulumi.Input[str] username: Username for basic authentication to the Kubernetes cluster
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ManagedK8sRuntimeArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ManagedK8sRuntime resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ManagedK8sRuntimeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedK8sRuntimeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 config_context: Optional[pulumi.Input[str]] = None,
                 config_context_auth_info: Optional[pulumi.Input[str]] = None,
                 config_context_cluster: Optional[pulumi.Input[str]] = None,
                 config_path: Optional[pulumi.Input[str]] = None,
                 config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_: Optional[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeExecArgs']]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeLabelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedK8sRuntimeArgs.__new__(ManagedK8sRuntimeArgs)

            __props__.__dict__["agent_env"] = agent_env
            __props__.__dict__["client_certificate"] = client_certificate
            __props__.__dict__["client_key"] = client_key
            __props__.__dict__["cluster_ca_certificate"] = cluster_ca_certificate
            __props__.__dict__["config_context"] = config_context
            __props__.__dict__["config_context_auth_info"] = config_context_auth_info
            __props__.__dict__["config_context_cluster"] = config_context_cluster
            __props__.__dict__["config_path"] = config_path
            __props__.__dict__["config_paths"] = config_paths
            __props__.__dict__["exec_"] = exec_
            __props__.__dict__["host"] = host
            __props__.__dict__["insecure"] = insecure
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = password
            __props__.__dict__["proxy_url"] = proxy_url
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["tls_server_name"] = tls_server_name
            __props__.__dict__["token"] = token
            __props__.__dict__["username"] = username
            __props__.__dict__["agent_externally_managed"] = None
            __props__.__dict__["agent_namespace"] = None
            __props__.__dict__["agent_runtime_id"] = None
        super(ManagedK8sRuntime, __self__).__init__(
            'prodvana:index/managedK8sRuntime:ManagedK8sRuntime',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            agent_externally_managed: Optional[pulumi.Input[bool]] = None,
            agent_namespace: Optional[pulumi.Input[str]] = None,
            agent_runtime_id: Optional[pulumi.Input[str]] = None,
            client_certificate: Optional[pulumi.Input[str]] = None,
            client_key: Optional[pulumi.Input[str]] = None,
            cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
            config_context: Optional[pulumi.Input[str]] = None,
            config_context_auth_info: Optional[pulumi.Input[str]] = None,
            config_context_cluster: Optional[pulumi.Input[str]] = None,
            config_path: Optional[pulumi.Input[str]] = None,
            config_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            exec_: Optional[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeExecArgs']]] = None,
            host: Optional[pulumi.Input[str]] = None,
            insecure: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeLabelArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            proxy_url: Optional[pulumi.Input[str]] = None,
            timeout: Optional[pulumi.Input[str]] = None,
            tls_server_name: Optional[pulumi.Input[str]] = None,
            token: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'ManagedK8sRuntime':
        """
        Get an existing ManagedK8sRuntime resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] agent_env: Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        :param pulumi.Input[bool] agent_externally_managed: If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
        :param pulumi.Input[str] agent_namespace: The namespace of the agent
        :param pulumi.Input[str] agent_runtime_id: The runtime identifier of the agent
        :param pulumi.Input[str] client_certificate: PEM-encoded client certificate for TLS authentication.
        :param pulumi.Input[str] client_key: PEM-encoded client certificate key for TLS authentication.
        :param pulumi.Input[str] cluster_ca_certificate: PEM-encoded root certificates bundle for TLS authentication.
        :param pulumi.Input[str] config_context: Context to use from the kube config file.
        :param pulumi.Input[str] config_context_auth_info: Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        :param pulumi.Input[str] config_context_cluster: Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        :param pulumi.Input[str] config_path: Path to the kube config file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] config_paths: A list of paths to kube config files.
        :param pulumi.Input[pulumi.InputType['ManagedK8sRuntimeExecArgs']] exec_: Exec configuration for authentication to the Kubernetes cluster
        :param pulumi.Input[str] host: The address of the Kubernetes cluster (scheme://hostname:port)
        :param pulumi.Input[bool] insecure: Whether server should be accessed without verifying the TLS certificate
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ManagedK8sRuntimeLabelArgs']]]] labels: List of labels to apply to the runtime
        :param pulumi.Input[str] name: Runtime name
        :param pulumi.Input[str] password: Password for basic authentication to the Kubernetes cluster
        :param pulumi.Input[str] proxy_url: Proxy URL to use when accessing the Kubernetes cluster
        :param pulumi.Input[str] timeout: How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        :param pulumi.Input[str] tls_server_name: Server name passed to the server for SNI and is used in the client to check server certificates against
        :param pulumi.Input[str] token: Token to authenticate an service account
        :param pulumi.Input[str] username: Username for basic authentication to the Kubernetes cluster
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManagedK8sRuntimeState.__new__(_ManagedK8sRuntimeState)

        __props__.__dict__["agent_env"] = agent_env
        __props__.__dict__["agent_externally_managed"] = agent_externally_managed
        __props__.__dict__["agent_namespace"] = agent_namespace
        __props__.__dict__["agent_runtime_id"] = agent_runtime_id
        __props__.__dict__["client_certificate"] = client_certificate
        __props__.__dict__["client_key"] = client_key
        __props__.__dict__["cluster_ca_certificate"] = cluster_ca_certificate
        __props__.__dict__["config_context"] = config_context
        __props__.__dict__["config_context_auth_info"] = config_context_auth_info
        __props__.__dict__["config_context_cluster"] = config_context_cluster
        __props__.__dict__["config_path"] = config_path
        __props__.__dict__["config_paths"] = config_paths
        __props__.__dict__["exec_"] = exec_
        __props__.__dict__["host"] = host
        __props__.__dict__["insecure"] = insecure
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["proxy_url"] = proxy_url
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["tls_server_name"] = tls_server_name
        __props__.__dict__["token"] = token
        __props__.__dict__["username"] = username
        return ManagedK8sRuntime(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agentEnv")
    def agent_env(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        """
        return pulumi.get(self, "agent_env")

    @property
    @pulumi.getter(name="agentExternallyManaged")
    def agent_externally_managed(self) -> pulumi.Output[bool]:
        """
        If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
        """
        return pulumi.get(self, "agent_externally_managed")

    @property
    @pulumi.getter(name="agentNamespace")
    def agent_namespace(self) -> pulumi.Output[str]:
        """
        The namespace of the agent
        """
        return pulumi.get(self, "agent_namespace")

    @property
    @pulumi.getter(name="agentRuntimeId")
    def agent_runtime_id(self) -> pulumi.Output[str]:
        """
        The runtime identifier of the agent
        """
        return pulumi.get(self, "agent_runtime_id")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Output[str]:
        """
        PEM-encoded client certificate for TLS authentication.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> pulumi.Output[str]:
        """
        PEM-encoded client certificate key for TLS authentication.
        """
        return pulumi.get(self, "client_key")

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> pulumi.Output[str]:
        """
        PEM-encoded root certificates bundle for TLS authentication.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @property
    @pulumi.getter(name="configContext")
    def config_context(self) -> pulumi.Output[str]:
        """
        Context to use from the kube config file.
        """
        return pulumi.get(self, "config_context")

    @property
    @pulumi.getter(name="configContextAuthInfo")
    def config_context_auth_info(self) -> pulumi.Output[str]:
        """
        Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_auth_info")

    @property
    @pulumi.getter(name="configContextCluster")
    def config_context_cluster(self) -> pulumi.Output[str]:
        """
        Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        """
        return pulumi.get(self, "config_context_cluster")

    @property
    @pulumi.getter(name="configPath")
    def config_path(self) -> pulumi.Output[str]:
        """
        Path to the kube config file.
        """
        return pulumi.get(self, "config_path")

    @property
    @pulumi.getter(name="configPaths")
    def config_paths(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of paths to kube config files.
        """
        return pulumi.get(self, "config_paths")

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> pulumi.Output[Optional['outputs.ManagedK8sRuntimeExec']]:
        """
        Exec configuration for authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "exec_")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The address of the Kubernetes cluster (scheme://hostname:port)
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def insecure(self) -> pulumi.Output[bool]:
        """
        Whether server should be accessed without verifying the TLS certificate
        """
        return pulumi.get(self, "insecure")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Sequence['outputs.ManagedK8sRuntimeLabel']]:
        """
        List of labels to apply to the runtime
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Runtime name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> pulumi.Output[str]:
        """
        Proxy URL to use when accessing the Kubernetes cluster
        """
        return pulumi.get(self, "proxy_url")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[str]:
        """
        How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> pulumi.Output[str]:
        """
        Server name passed to the server for SNI and is used in the client to check server certificates against
        """
        return pulumi.get(self, "tls_server_name")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        Token to authenticate an service account
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username for basic authentication to the Kubernetes cluster
        """
        return pulumi.get(self, "username")

