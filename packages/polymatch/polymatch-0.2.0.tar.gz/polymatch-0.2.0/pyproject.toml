[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "polymatch"
dynamic = ["version"]
description = "A polymorphic pattern matching library for Python"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [{ name = "linuxdaemon", email = "linuxdaemon@snoonet.org" }]
keywords = ["library", "pattern-matching", "utility", "regex"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = []

[project.optional-dependencies]
regex = ['regex']

[project.urls]
Homepage = "https://github.com/TotallyNotRobots/polymatch"

[tool.hatch.version]
path = "polymatch/__init__.py"

[tool.hatch.env]
requires = ["hatch-containers"]

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest>=6.0", "pre-commit", "mypy>=1.8"]
features = ["regex"]

[tool.hatch.envs.default.scripts]
test = "pytest"
test-cov = ["coverage run -pm pytest"]
cov-report = [
    "- coverage combine",
    "coverage xml",
    "coverage report --show-missing",
]
cov = ["- coverage erase", "test-cov", "cov-report"]
cov-all = ["- coverage erase", "hatch run testall:test-cov", "cov-report"]

setup-pre-commit = "python3 -m pre_commit install --install-hooks"
setup-dev = ["setup-pre-commit"]

pre-commit = "python3 -m pre_commit run {args:--all}"

[tool.hatch.envs.testall]
type = "container"
dependencies = ["coverage[toml]>=6.5", "pytest>=6.0"]

[[tool.hatch.envs.testall.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--doctest-modules"
testpaths = ["polymatch", "tests"]
filterwarnings = ["error"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    'if __name__ == .__main__.:',
]

[tool.coverage.run]
branch = true
relative_files = true
