heat_template_version: 2015-10-15

description: template to deploy devstack nodes

parameters:
  public_net:
    type: string
    label: public net ID
    description: Public network for the node FIPs
  image:
    type: string
    label: Image name or ID
    description: Image to be used for the kuryr nodes
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used for the image
    default: m1.small
  key:
    type: string
    label: key name
    description: Keypair to be used for the instance
  public_key:
    type: string
    label: key content for stack user authorized_keys
    description: private key to configure all nodes
  private_key:
    type: string
    label: key content to access other nodes
    description: private key to configure all nodes
  vm_net:
    type: string
    label: VM Network
    description: Neutron network for VMs
  vm_subnet:
    type: string
    label: VM Subnet
    description: Neutron subnet for VMs
  vm_sg:
    type: string
    label: kubernetes API sg
    description: Security Group for Kubernetes API
  name:
    type: string
    label: Instance name
    description: devstack node instance name
  local_conf:
    type: string
    label: local.conf file to use
    description: URL of local.conf file to use when deploying DevStack
  gerrit_change:
    type: string
    label: Gerrit change to deploy Kuryr from
    description: Gerrit change number to clone Kuryr from
  git_hash:
    type: string
    label: Commit from which to deploy Kuryr
    description: Commit hash from which Kuryr should be deployed
  bashrc:
    type: string
    label: bashrc file URL
    description: URL of bashrc file that will be injected for stack user
    default: ""
  branch:
    type: string
    label: Branch which should be deployed
    description: E.g. master or stable/queens
    default: ""
  devstack_branch:
    type: string
    label: Branch which should be deployed
    description: E.g. master or stable/queens
    default: ""
  ssh_key:
    type: string
    label: Additional SSH key
    description: To be added for stack user.
    default: ""

resources:
  instance_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: vm_net }
      security_groups:
        - default
        - { get_param: vm_sg }
      fixed_ips:
        - subnet: { get_param: vm_subnet }

  instance_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: instance_port }

  instance:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: instance_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __distro_deps__: { get_file: distro_deps.sh }
            __gerrit_change__: { get_param: gerrit_change }
            __git_hash__: { get_param: git_hash }
            __local_conf__: { get_param: local_conf }
            __bashrc__: { get_param: bashrc }
            __pubkey__: { get_param: public_key }
            __branch__: { get_param: branch }
            __devstack_branch__: { get_param: devstack_branch }
            __ssh_key__: { get_param: ssh_key }
          template: |
            #!/bin/bash
            set -ex

            # Wait a bit for connectivity
            sleep 30

            # Stack user config
            groupadd stack
            useradd -s /bin/bash -d /opt/stack -m stack -g stack
            mkdir /opt/stack/.ssh
            cat > /opt/stack/.ssh/authorized_keys << EOF
            __pubkey__
            EOF
            if [[ ! -z "__ssh_key__" ]]; then
              curl "__ssh_key__" >> /opt/stack/.ssh/authorized_keys
            fi
            echo "stack ALL=(ALL) NOPASSWD: ALL" | tee /etc/sudoers.d/stack
            curl "__bashrc__" >> /opt/stack/.bashrc
            chown -R stack:stack /opt/stack
            chmod 755 /opt/stack

            # Deps for devstack
            __distro_deps__

            # Stacking
            sudo -i -u stack /bin/bash - <<"EOF"
            function get_from_gerrit() {
                local gerrit_change
                local ref

                gerrit_change="__gerrit_change__"
                echo "Finding latest ref for change ${gerrit_change}"
                ref=$(curl -s "https://review.opendev.org/changes/${gerrit_change}?o=CURRENT_REVISION" | tail -n +2 | jq -r '.revisions[].ref')
                echo "Fetching ref ${ref}"
                git fetch https://opendev.org/openstack/kuryr-kubernetes "${ref}" && git checkout FETCH_HEAD
            }

            function get_from_sha() {
                local commit_sha

                commit_sha="__git_hash__"
                echo "Sha to fetch: ${commit_sha}"
                git checkout "$commit_sha"
            }

            cd /opt/stack
            git clone https://opendev.org/openstack-dev/devstack
            if [[ ! -z "__devstack_branch__" ]]; then
                pushd devstack
                git checkout "__devstack_branch__"
                popd
            fi
            git clone https://github.com/openstack/kuryr-kubernetes
            pushd kuryr-kubernetes

            if [[ ! -z "__git_hash__" ]]; then
                get_from_sha
            elif [[ ! -z "__gerrit_change__" ]]; then
                get_from_gerrit
            elif [[ ! -z "__branch__" ]]; then
                git checkout "__branch__"
            else
                "Deploying from master"
            fi
            popd
            pushd devstack

            if [[ -z "__local_conf__" ]]; then
              # The change is already downloaded, do not reclone
              sed -e 's/# RECLONE=/RECLONE=/' /opt/stack/kuryr-kubernetes/devstack/local.conf.sample > /opt/stack/devstack/local.conf
            else
              curl "__local_conf__" > /opt/stack/devstack/local.conf
            fi
            popd

            touch stacking

            pushd devstack
            ./stack.sh >> /opt/stack/devstack.log 2>&1
            popd

            touch ready
            EOF
outputs:
  node_fip:
    description: FIP address of the node
    value: { get_attr: [instance_fip, floating_ip_address] }
