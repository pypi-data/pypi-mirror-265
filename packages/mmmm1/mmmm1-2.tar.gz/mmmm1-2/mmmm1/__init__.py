import pyperclip as pc
    
def imports():
    s = '''from sympy import *
from sympy.plotting import *
    '''
    return pc.copy(s)
    
def poleznost():
    s = '''x1, x2 = symbols('x1 x2')
u_pl = ln(x1 + 1) + 3*ln(x2)
plot3d(u_pl, (x1, 12, 22), (x2, 14,24), title="–§—É–Ω–∫—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏")
#a) –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ x1 –≤ —Ñ—É–Ω–∫—Ü–∏—é
u_pl_x1 = u_pl.subs(x1, 10)
print(u_pl_x1)
plot(u_pl_x1, (x2, 1, 22))

–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–æ: –ï—Å–ª–∏ $x_2^2 > x_2^1$, —Ç–æ $U(x_2^2, x_1) > U(x_2^1, x_1)$
print(u_pl.diff(x1))
–° —É—á—ë—Ç–æ–º, —á—Ç–æ $x_1$ > -1 –∏ $x_2$ > 0, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤—Å–µ–≥–¥–∞ –±–æ–ª—å—à–µ 0. –°–≤–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.
–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ ùë•2 –≤ —Ñ—É–Ω–∫—Ü–∏—é
u_pl_x2 = u_pl.subs(x2, 15)
print(u_pl_x2)

–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–æ: –ï—Å–ª–∏ $x_1^2 > x_1^1$, —Ç–æ $U(x_1^2, x_2) > U(x_1^1, x_2)$
u_pl.diff(x2)
–° —É—á—ë—Ç–æ–º, —á—Ç–æ $x_1$ > -1 –∏ $x_2$ > 0, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤—Å–µ–≥–¥–∞ –±–æ–ª—å—à–µ 0. –°–≤–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.

# –±) –ß–∞—Å—Ç–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ x1:
dU_dx1 = u_pl.diff(x1)
dU_dx2 = u_pl.diff(x2)
print(dU_dx1)
#–ß–∞—Å—Ç–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ  ùë•2
print(dU_dx2)
#–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –∑–∞–º–µ—â–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –±–ª–∞–≥–∞ –≤—Ç–æ—Ä—ã–º
MRS1 = dU_dx1 / dU_dx2
print(MRS1)
#–ü—Ä–µ–¥–µ–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –∑–∞–º–µ—â–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –±–ª–∞–≥–∞ –ø–µ—Ä–≤—ã–º
MRS2 = dU_dx2 / dU_dx1
print(MRS2)
#–ó–Ω–∞—á–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –ø–æ  ùë•1
print(dU_dx1 * x1 / u_pl)
#–ó–Ω–∞—á–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –ø–æ  ùë•2
print(dU_dx2 * x2 / u_pl)
#–§—É–Ω–∫—Ü–∏—è —ç–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è U –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç $X_i$
    '''
    return pc.copy(s)
    
def kobb_duglas_bez_y0_c0():
    s = '''K, L, alpha, beta, r, w, Y0, lamda = symbols("K, L, alpha, beta, r, w, Y0, lamda", positive = True)
Y = K**alpha * L**beta
print(Y)
C = r*K + w*L
print(C)
Lgr = C + lamda*(Y0 - Y)
print(Lgr)
S_lr = solve([Lgr.diff(K), Lgr.diff(L), Lgr.diff(lamda)], [K, L, lamda], dict=True)[0]
print(S_lr)
K_lr = simplify(separatevars(S_lr[K]))
print(K_lr)
L_lr = simplify(separatevars(S_lr[L]))
print(L_lr)
lamda_lr = simplify(separatevars(S_lr[lamda]))
print(lamda_lr)
C_min = simplify(separatevars(C.subs([(K, K_lr), (L, L_lr), (lamda, lamda_lr)])))
print(C_min)
K_lr.subs([(alpha, 0.2), (beta, 0.8), (w, 3), (r, 5), (Y0, 1732)]) # —Ç—Ä–µ–±—É–µ—Ç—Å—è
L_lr.subs([(alpha, 0.2), (beta, 0.8), (w, 3), (r, 5), (Y0, 1732)]) # —Ç—Ä–µ–±—É–µ—Ç—Å—è
lamda_lr.subs([(alpha, 0.2), (beta, 0.8), (w, 3), (r, 5), (Y0, 1732)]) # –Ω–µ —Ñ–∞–∫—Ç?
C_min.subs([(alpha, 0.2), (beta, 0.8), (w, 3), (r, 5), (Y0, 1732)]) # –Ω–µ —Ñ–∞–∫—Ç?
    '''
    return pc.copy(s)

def lagranzh_roy():
    s = '''x1,x2, p1, p2, alpha, beta, I, lamda  = symbols("x1, x2, p1, p2, alpha, beta, I, lamda")
c = p1*x1 + p2*x2
u = (x1-9)**alpha * (x2-7)**beta
L = u + lamda * (I - c)
print(c)
print(u)
L = L.subs([(alpha, 0.3), (beta, 0.6), (p1, 6), (p2, 7), (I, 194)])
print(L)
A = nsolve([L.diff(x1), L.diff(x2), L.diff(lamda)], [x1,x2,lamda], [1,1,1], dict=True)[0]
print(A)
x1_best = re(A[x1])
x2_best = re(A[x2])
lamda_best = re(A[lamda])
print(x1_best)
print(x2_best)
print(lamda_best)
u = u.subs([(x1,x1_best), (x2, x2_best), (alpha, 0.3), (beta, 0.6)])
print(u)
u_new = u - lamda_best * x1_best * 0.01
print(u_new) # –¢–æ–∂–¥–µ—Å—Ç–≤–æ –†–æ—è
#–ü—É—Å—Ç—å —Ü–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –±–ª–∞–≥–æ –≤–æ–∑–≤–æ—Å–ª–∞ –Ω–∞ 0.01
x1,x2, p1, p2, alpha, beta, I, lamda  = symbols("x1, x2, p1, p2, alpha, beta, I, lamda", positive=True)
c = p1*x1 + p2*x2
u = (x1-9.01)**alpha * (x2-7)**beta
L = u + lamda * (I - c)
L = L.subs([(alpha, 0.3), (beta, 0.6), (p1, 6), (p2, 7), (I, 194)])
A = nsolve([L.diff(x1), L.diff(x2), L.diff(lamda)], [x1,x2,lamda], [1,1,1], dict=True)[0]
x1_best = re(A[x1])
x2_best = re(A[x2])
lamda_best = re(A[lamda])
print(x1_best)
print(x2_best)
print(lamda_best)
u = u.subs([(x1,x1_best), (x2, x2_best), (alpha, 0.3), (beta, 0.6)])
print(u)
    '''
    return pc.copy(s)
    
def polezn_lagranzh():
    s = '''x1,x2, p1, p2, alpha, beta, lamda, u0  = symbols("x1, x2, p1, p2, alpha, beta, lamda, u0", positive=True)
c = 6*x1 + 4*x2
u = x1**0.4 * (x2-7)**0.6
L = c + lamda * (5.3 - u)
print(L)
Sol = solve([L.diff(x1), L.diff(x2), L.diff(lamda)],[x1,x2,lamda], dict=True)[0]
print(Sol)
x1_best = Sol[x1]
x2_best = Sol[x2]
lamda_best = Sol[lamda]
print(x1_best)
print(x2_best)
print(lamda_best)
C_min = c.subs([(x1, x1_best), (x2, x2_best)])
print(C_min)
x1_new = x1_best
print(x1_new)
x2_new = x2_best
print(x2_new)
lamda_new = lamda_best
print(lamda_new)
    '''
    return pc.copy(s)
    
def hiks():    
    s = '''p1, p2, u0, alpha, beta, a1, a2 = sp.symbols('p1 p2 u0 alpha beta a1 a2')
x1_star = (u0 / (p1 / p2 * beta/alpha)**beta)**(1 / (alpha + beta))+ a1
x2_star = (u0 * (p1 / p2 * beta/alpha)**alpha)**(1 / (alpha + beta))+ a2
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Å–≤–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
E = p1 * x1_star + p2 * x2_star
# –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –°–ª—É—Ü–∫–æ–≥–æ
S = sp.Matrix([[sp.diff(x1_star, p1), sp.diff(x1_star, p2)], [sp.diff(x2_star, p1), sp.diff(x2_star, p2)]])
#–ú–∞—Ç—Ä–∏—Ü–∞ –°–ª—É—Ü–∫–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Å–ø—Ä–æ—Å –Ω–∞ –±–ª–∞–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ —Ü–µ–Ω—ã –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Ö–æ–¥–∞. –û–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —ç—Ñ—Ñ–µ–∫—Ç–æ–º –¥–æ—Ö–æ–¥–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∑–∞–º–µ—â–µ–Ω–∏—è.
#–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –±–ª–∞–≥–∞ –≤ –º–æ–¥–µ–ª–∏ –•–∏–∫—Å–∞ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–ª–∞—Å—Å—É –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –±–ª–∞–≥. –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –º–∞—Ç—Ä–∏—Ü—ã –°–ª—É—Ü–∫–æ–≥–æ, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç,—á—Ç–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –Ω–∞ –±–ª–∞–≥–æ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –µ–≥–æ —Å–ø—Ä–æ—Å –ø—Ä–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Ö–æ–¥–∞.
    '''    
    return pc.copy(s)


def kobb_duglas_y0():
    s = '''r, w, Y0, lamda = symbols("r, w, Y0, lamda", positive = True)
C = r*K + w*L
Y = K**alpha * L**beta
print(C)
Lgr = C + lamda*(Y0 - Y)
print(Lgr)
S_lr = solve([Lgr.diff(K), Lgr.diff(L), Lgr.diff(lamda)], [K, L, lamda], dict=True)[0]
print(S_lr)
K_lr = simplify(separatevars(S_lr[K]))
print(K_lr)
L_lr = simplify(separatevars(S_lr[L]))
print(L_lr)
lamda_lr = simplify(separatevars(S_lr[lamda]))
print(lamda_lr)
C_min = simplify(separatevars(C.subs([(K, K_lr), (L, L_lr), (lamda, lamda_lr)])))
print(C_min)
K_lr.subs([(alpha, 0.4), (beta, 0.6), (w, 4), (r, 10), (Y0, 120)])
L_lr.subs([(alpha, 0.4), (beta, 0.6), (w, 4), (r, 10), (Y0, 120)])
lamda_lr.subs([(alpha, 0.4), (beta, 0.6), (w, 4), (r, 10), (Y0, 120)])
C_min.subs([(alpha, 0.4), (beta, 0.6), (w, 4), (r, 10), (Y0, 120)])
    '''
    return pc.copy(s)
   
def kobb_duglas_c0():
    s = '''r, w, Y0, lamda = symbols("r, w, Y0, lamda", positive = True)
K, L, alpha, beta, A = symbols("K, L, alpha, beta, A", positive = True)
C = r*K + w*L
Y = K**alpha * L**beta
Lgr = C + lamda*(Y0 - Y)
S_lr = solve([Lgr.diff(K), Lgr.diff(L), Lgr.diff(lamda)], [K, L, lamda], dict=True)[0]
K_lr = simplify(separatevars(S_lr[K]))
L_lr = simplify(separatevars(S_lr[L]))
lamda_lr = simplify(separatevars(S_lr[lamda]))
C_min = simplify(separatevars(C.subs([(K, K_lr), (L, L_lr), (lamda, lamda_lr)])))
print(K_lr.subs([(alpha, 0.54), (beta, 0.46), (w, 8), (r, 3), (Y0, 2150)]))
print(L_lr.subs([(alpha, 0.54), (beta, 0.46), (w, 8), (r, 3), (Y0, 2150)]))
print(lamda_lr.subs([(alpha, 0.54), (beta, 0.46), (w, 8), (r, 3), (Y0, 2150)]))
print(C_min.subs([(alpha, 0.54), (beta, 0.46), (w, 8), (r, 3), (Y0, 2150)]))
    '''
    return pc.copy(s)

def u0_i_vector_cen_P():
    s = '''x1, x2, alpha, beta, p1, p2, I, Lambda, u0, a = symbols('x1, x2, alpha, beta, p1, p2, I, lambda, u0, a', positive=True)
alpha, beta, a, p1, p2, u0 = 0.6, 0.3, 6, 3, 4.2, 5.3
u = x1**alpha * (x2-a)**beta
c = x1*p1 + x2*p2
print(u, c)
L = c + Lambda*(u0 - u)
print(L)
L.diff(x1)
print(L)
Sol = nsolve([L.diff(x1), L.diff(x2), L.diff(Lambda)], [x1, x2, Lambda],[7, 12, 10], dict=True)[0]; SolSol = nsolve([L.diff(x1), L.diff(x2), L.diff(Lambda)], [x1, x2, Lambda],[7, 12, 10], dict=True)[0]
print(Sol)
print(c.subs(Sol) == L.subs(Sol)) # –ü—Ä–µ–¥–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Ä–∞–≤–Ω—ã –º–Ω–æ–∂–µ—Ç–µ–ª—é –õ–∞–≥—Ä–∞–Ω–∂–∞
    '''
    return pc.copy(s)

def marshal_lagransh():
    s = '''a1, a2, p1, p2, I, x1, x2 = symbols('a1 a2 p1 p2 I x1 x2')
x1_star = 1 / p1 * a1 / (a1 + a2)
x2_star = 1 / p2 * a2 / (a1 + a2)
u = a1 * x1 ** a1 * x2 ** a2
u_star = u.subs({x1: x1_star, x2: x2_star})
V = u_star.simplify()
dV_dp2 = diff(V, p2)
x2_star_I = x2_star.subs({p1: I/x1})
dx2_star_dI = diff(x2_star_I, I).simplify()
Œª_star = solve(a1 * p1 * x1 ** (a1 - 1) * x2 ** a2 - p1, x1)[0]
print(V, dV_dp2, dx2_star_dI, Œª_star)
#–ö–æ—Å–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∏–º–µ–µ—Ç –≤–∏–¥:
print(V)
#–¢–æ–∂–¥–µ—Å—Ç–≤–æ –†–æ—è
print(dV_dp2)
    '''
    return pc.copy(s)

def firma_na_konk_rinke():
    s = '''price = 16  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
capital_price = 6  # –¶–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã –∫–∞–ø–∏—Ç–∞–ª–∞ 
capital_quantity = 56  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø–∏—Ç–∞–ª–∞
wage_rate = 3  # –°—Ç–∞–≤–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã 
production_function_coefficient = 0.5  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

# –ó–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
l = sp.Symbol('l')

# –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–∞–ø–∏—Ç–∞–ª –∏ —Ç—Ä—É–¥
capital_costs = capital_price * capital_quantity
labor_costs = wage_rate * l

# –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
production_function = (capital_quantity ** 0.5) * (l ** 0.5)

# –ü—Ä–∏–±—ã–ª—å
revenue = price * production_function
costs = capital_costs + labor_costs
profit = revenue - costs

# –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–¥–∞, –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É—é—â–µ–µ –ø—Ä–∏–±—ã–ª—å
optimal_labor_quantity = sp.solve(sp.diff(profit, l), l)[0]

# –í—ã–ø—É—Å–∫ –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä—É–¥–∞
optimal_output = production_function.subs(l, optimal_labor_quantity)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–¥–∞:", optimal_labor_quantity)
print("–í—ã–ø—É—Å–∫ —Ñ–∏—Ä–º—ã –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä—É–¥–∞:", optimal_output)
    '''
    return pc.copy(s)

def voprosa_4():
    s = '''from sympy import *
L, K, alpha, beta, lamda = symbols('L, K, alpha, beta, lamda')
alpha, beta = 0.6, 0.4
K = 75
Y = K **alpha*L**beta
w = 2
r = 4
p = 10
Lagr = p*Y - w*L - r*K
L_max = solve(diff(Lagr, L))[0]
C = w*L_max + r*K
print(C)
Delta_w = symbols('Delta_w')
from sympy import *
L, K, alpha, beta, lamda = symbols('L, K, alpha, beta, lamda')
alpha, beta = 0.6, 0.4
K = 75
Y = K **alpha*L**beta
w = 2 + Delta_w
r = 4
p = 10
Lagr = p*Y - w*L - r*K
L_max = solve(diff(Lagr, L), L)[0]
display((Y.subs(L, L_max)))
    '''
    return pc.copy(s)
