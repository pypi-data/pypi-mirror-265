# coding: utf-8

"""
    ioTium Orchestrator REST API

    The ioTium Orchestrator REST API allows you to interact with the Orchestrator programmatically. Use the REST APIs to script your interactions with, integrate with, or build your applications on top of ioTium Orchestrator.  # noqa: E501

    OpenAPI spec version: 21.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RoleCreationVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'permissions': 'list[str]',
        'create_under': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'permissions': 'permissions',
        'create_under': 'create_under'
    }

    def __init__(self, name=None, description=None, permissions=None, create_under=None, _configuration=None):  # noqa: E501
        """RoleCreationVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._permissions = None
        self._create_under = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.permissions = permissions
        if create_under is not None:
            self.create_under = create_under

    @property
    def name(self):
        """Gets the name of this RoleCreationVO.  # noqa: E501

        Name of the role  # noqa: E501

        :return: The name of this RoleCreationVO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleCreationVO.

        Name of the role  # noqa: E501

        :param name: The name of this RoleCreationVO.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 255):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and not re.search(r'^[A-Za-z0-9]+[A-Za-z0-9 .&,_-]*$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9]+[A-Za-z0-9 .&,_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this RoleCreationVO.  # noqa: E501

        Description about the role  # noqa: E501

        :return: The description of this RoleCreationVO.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleCreationVO.

        Description about the role  # noqa: E501

        :param description: The description of this RoleCreationVO.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1000):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def permissions(self):
        """Gets the permissions of this RoleCreationVO.  # noqa: E501

        List of permissions going to associate with this role.  # noqa: E501

        :return: The permissions of this RoleCreationVO.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RoleCreationVO.

        List of permissions going to associate with this role.  # noqa: E501

        :param permissions: The permissions of this RoleCreationVO.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def create_under(self):
        """Gets the create_under of this RoleCreationVO.  # noqa: E501

        The ID of an organization. The default value is the ID of the logged-in user organization.  # noqa: E501

        :return: The create_under of this RoleCreationVO.  # noqa: E501
        :rtype: str
        """
        return self._create_under

    @create_under.setter
    def create_under(self, create_under):
        """Sets the create_under of this RoleCreationVO.

        The ID of an organization. The default value is the ID of the logged-in user organization.  # noqa: E501

        :param create_under: The create_under of this RoleCreationVO.  # noqa: E501
        :type: str
        """

        self._create_under = create_under

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleCreationVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleCreationVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoleCreationVO):
            return True

        return self.to_dict() != other.to_dict()
