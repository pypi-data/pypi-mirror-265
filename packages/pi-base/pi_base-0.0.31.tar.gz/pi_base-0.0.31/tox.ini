# Tox pipelines

[tox]
min_version = 4.13.0
requires = tox-extras
envlist =
  lint
  # types
  test-{py39,py310,py311}
  reports
  # release

# Define the minimal tox version required to run;
# if the host tox is less than this the tool with create an environment and
# provision it with a tox that satisfies it under provision_tox_env.
# At least this version is needed for PEP 517/518 support.
minversion = 3.3.0

# Activate isolated build environment. tox will use a virtual environment
# to build a source distribution from the source tree. For build tools and
# arguments use the pyproject.toml file as specified in PEP-517 and PEP-518.
isolated_build = True


[testenv]
description = Common for all environments.
basepython = py39
# Both `skip_install = True` and `package = skip` per the docs are seemingly
# intended to just not install the package, but they also disable installing
# extras. So we rely on tox-extras plugin package that allows enabling extras
# by `tox_extras` instead of `extras`
skip_install = True
allowlist_externals =
  bash
  false
# For development, use `package=editable` as it skips building the wheel and uses `pip install -e`
# package = editable
package = wheel
# `wheel_build_env = .pkg` uses single wheel build and installs it into each environment.
# https://hynek.me/articles/turbo-charge-tox/
# Should not use that if need to compiled the package (pi_base has no compiled code)
wheel_build_env = .pkg

# Ensure non-existing environments will fail, existing ones will override `commands`.
commands =
  false

[testenv:format]
description = Fix formatting.
tox_extras = format
passenv = CODEMETER_HOST
commands =
  # Fix formatting
  ruff format .

[testenv:lint]
description = Run static checkers.
passenv = CODEMETER_HOST
tox_extras = 
  lint
  format
commands =
  # Check formatting
  ruff format . --check
  # Lint code and docstrings
  ruff check .

[testenv:types]
description = Run static type checkers.
passenv = CODEMETER_HOST
tox_extras = lint
commands =
  # Check type hinting
  # Use mypy (slower) or pyright (faster)
  # mypy . --explicit-package-bases
  # --explicit-package-bases works around mypy bug/feature erroring on duplicate file names (e.g. modpath.py) across the sourcetree.
  # pyright --stats --verbose {posargs}
  pyright --stats {posargs}
  # pyright {posargs}

[testenv:test-{py39,py310,py311}]
description = Run unit tests.
skip_install = False
setenv =
  PY_IGNORE_IMPORTMISMATCH=1 # https://github.com/pytest-dev/pytest/issues/2042
  COVERAGE_FILE = reports{/}.coverage.{envname}
passenv = CODEMETER_HOST
tox_extras = test
commands =
  # Run tests and doctests from .py files
  pytest --junitxml=reports/pytest.xml.{envname} {posargs:pi_base/tests}

# Fix coverage with pytest parallelism (if needed) using coverage-enable-subprocess
# https://hynek.me/articles/turbo-charge-tox/
# deps =
#     coverage[toml]
#     coverage-enable-subprocess
#     pytest
#     pytest-xdist
# set_env = COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
# commands = coverage run -m pytest {posargs:-n auto}
# Firther, this removes need for coverage-enable-subprocess (which relieas on features that can get deprecated soon):
# commands_pre = python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'

[testenv:.pkg]
description = Common wheel build for all environments.

[testenv:reports]
description = Combine test and coverage data from multiple test runs.
setenv =
  COVERAGE_FILE = reports/.coverage
depends = test-{py39,py310,py311}
tox_extras = reports
commands =
  junitparser merge --glob reports/pytest.xml.* reports/pytest.xml
  coverage combine --keep
  coverage html
  coverage xml

[testenv:docs]
description = Test and build the docs.
skip_install = False
setenv =
  DOCSDIR = {toxinidir}/docs
  BUILDDIR = {toxinidir}/docs/build
passenv = CODEMETER_HOST
tox_extras = doc
commands =
  # Remove build directory
  python -c 'import shutil; shutil.rmtree("{env:BUILDDIR}", ignore_errors=True);'
  # Delete all files generated by sphinx-apidoc
  python -c 'import glob, os; [os.remove(f) for f in glob.glob("docs/pi_base*")];'
  # Create dummy files to prevent warnings
  python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("pi_base.rst").write_text("");'
  python -c 'import pathlib; pathlib.Path("{env:DOCSDIR}").joinpath("license_compliance.rst").write_text("");'
  # Run doctests (only from .rst files in docs folder, doctests in .py files are covered by pytest)
  sphinx-build -b doctest -W -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/doctest" {posargs}
  # Autogenerate docs from code
  sphinx-apidoc -f --no-toc -o docs/ pi_base
  # Dump OSS license information into the docs directory
  python {env:DOCSDIR}/_scripts/generate_license_information.py
  # Build the docs
  sphinx-build -b html -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/html" {posargs}

[testenv:release]
description = Prepare package release, bump version.
passenv = CODEMETER_HOST
tox_extras =
  version
  release
commands =
  # When doing `git commit -m $message`, also do:
  #   addchangelogentry $message
  # Debug: fullrelease --no-input -v
  fullrelease --no-input
  # fullrelease is same as:
  #   prerelease --no-input -v
  #   release --no-input -v
  #   postrelease --no-input -v

[testenv:build]
description = Build the package.
passenv = CODEMETER_HOST
tox_extras = build
commands =
  # Clean up build directories
  python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
  # Build the package
  python -m build .







# UNUSED, old example:
# [testenv]
# deps =
#   check-manifest >= 0.42
#   # If your project uses README.rst, uncomment the following:
#   # readme_renderer
#   flake8
#   pytest
#   build
#   twine
# commands =
#   check-manifest --ignore 'tox.ini,pi_base/tests/**'
#   python -m build
#   python -m twine check dist/*
#   flake8 .
#   pytest pi_base/tests {posargs}
# 
# [flake8]
# exclude = .tox,*.egg,build,data
# select = E,W,F
