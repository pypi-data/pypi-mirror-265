# Import all ML models here
from xgboost import XGBRegressor, XGBRFRegressor, XGBClassifier, XGBRFClassifier
from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor, AdaBoostRegressor, BaggingRegressor, ExtraTreesRegressor, GradientBoostingClassifier, RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, ExtraTreesClassifier
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet, BayesianRidge, HuberRegressor, Lars, LassoLars, LassoLarsIC, OrthogonalMatchingPursuit, PassiveAggressiveRegressor, RANSACRegressor, SGDRegressor, TheilSenRegressor, LogisticRegression, Perceptron, RidgeClassifier, SGDClassifier
from sklearn.tree import DecisionTreeRegressor, ExtraTreeRegressor, DecisionTreeClassifier, ExtraTreeClassifier
from sklearn.svm import SVR, LinearSVR
from sklearn.neighbors import KNeighborsRegressor, RadiusNeighborsRegressor, KNeighborsClassifier, RadiusNeighborsClassifier
from sklearn.neural_network import MLPRegressor, BernoulliRBM, MLPClassifier, MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, accuracy_score, f1_score, precision_score, recall_score, roc_auc_score

def xgb_regressor(X_train, y_train, X_test, y_test):
    model = XGBRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> XGBRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def xgb_rf_regressor(X_train, y_train, X_test, y_test):
    model = XGBRFRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> XGBRFRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def gradient_boosting_regressor(X_train, y_train, X_test, y_test):
    model = GradientBoostingRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> GradientBoostingRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def random_forest_regressor(X_train, y_train, X_test, y_test):
    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> RandomForestRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def ada_boost_regressor(X_train, y_train, X_test, y_test):
    model = AdaBoostRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> AdaBoostRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def bagging_regressor(X_train, y_train, X_test, y_test):
    model = BaggingRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> BaggingRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def extra_trees_regressor(X_train, y_train, X_test, y_test):
    model = ExtraTreesRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> ExtraTreesRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def linear_regression(X_train, y_train, X_test, y_test):
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> LinearRegression")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def ridge(X_train, y_train, X_test, y_test):
    model = Ridge(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> Ridge")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def lasso(X_train, y_train, X_test, y_test):
    model = Lasso(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> Lasso")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def elastic_net(X_train, y_train, X_test, y_test):
    model = ElasticNet(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> ElasticNet")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def bayesian_ridge(X_train, y_train, X_test, y_test):
    model = BayesianRidge()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> BayesianRidge")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def huber_regressor(X_train, y_train, X_test, y_test):
    model = HuberRegressor()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> HuberRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def lars(X_train, y_train, X_test, y_test):
    model = Lars(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> Lars")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def lasso_lars(X_train, y_train, X_test, y_test):
    model = LassoLars(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> LassoLars")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def lasso_lars_ic(X_train, y_train, X_test, y_test):
    model = LassoLarsIC()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> LassoLarsIC")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def orthogonal_matching_pursuit(X_train, y_train, X_test, y_test):
    model = OrthogonalMatchingPursuit()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> OrthogonalMatchingPursuit")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def passive_aggressive_regressor(X_train, y_train, X_test, y_test):
    model = PassiveAggressiveRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> PassiveAggressiveRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def ransac_regressor(X_train, y_train, X_test, y_test):
    model = RANSACRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> RANSACRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def sgd_regressor(X_train, y_train, X_test, y_test):
    model = SGDRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> SGDRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def theil_sen_regressor(X_train, y_train, X_test, y_test):
    model = TheilSenRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> TheilSenRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def logistic_regression(X_train, y_train, X_test, y_test):
    model = LogisticRegression(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> LogisticRegression")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def perceptron(X_train, y_train, X_test, y_test):
    model = Perceptron(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> Perceptron")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def ridge_classifier(X_train, y_train, X_test, y_test):
    model = RidgeClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> RidgeClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def sgd_classifier(X_train, y_train, X_test, y_test):
    model = SGDClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> SGDClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def decision_tree_regressor(X_train, y_train, X_test, y_test):
    model = DecisionTreeRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> DecisionTreeRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def extra_tree_regressor(X_train, y_train, X_test, y_test):
    model = ExtraTreeRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> ExtraTreeRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def decision_tree_classifier(X_train, y_train, X_test, y_test):
    model = DecisionTreeClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> DecisionTreeClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def extra_tree_classifier(X_train, y_train, X_test, y_test):
    model = ExtraTreeClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> ExtraTreeClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def svr(X_train, y_train, X_test, y_test):
    model = SVR()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> SVR")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def linear_svr(X_train, y_train, X_test, y_test):
    model = LinearSVR(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> LinearSVR")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def knn_regressor(X_train, y_train, X_test, y_test):
    model = KNeighborsRegressor()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> KNeighborsRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def radius_neighbors_regressor(X_train, y_train, X_test, y_test):
    model = RadiusNeighborsRegressor()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> RadiusNeighborsRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def knn_classifier(X_train, y_train, X_test, y_test):
    model = KNeighborsClassifier()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> KNeighborsClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def radius_neighbors_classifier(X_train, y_train, X_test, y_test):
    model = RadiusNeighborsClassifier()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> RadiusNeighborsClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def mlp_regressor(X_train, y_train, X_test, y_test):
    model = MLPRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Model -> MLPRegressor")
    print("Mean Squared Error: ", mse)
    print("Mean Absolute Error: ", mae)
    print("R2 Score: ", r2)
    print("------------------------------")

def mlp_classifier(X_train, y_train, X_test, y_test):
    model = MLPClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> MLPClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def bernoulli_rbm(X_train, y_train, X_test, y_test):
    model = BernoulliRBM(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> BernoulliRBM")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def xgb_classifier(X_train, y_train, X_test, y_test):
    model = XGBClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> XGBClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def xgb_rf_classifier(X_train, y_train, X_test, y_test):
    model = XGBRFClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> XGBRFClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def gradient_boosting_classifier(X_train, y_train, X_test, y_test):
    model = GradientBoostingClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> GradientBoostingClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")
    
def random_forest_classifier(X_train, y_train, X_test, y_test):
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> RandomForestClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def ada_boost_classifier(X_train, y_train, X_test, y_test):
    model = AdaBoostClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> AdaBoostClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def bagging_classifier(X_train, y_train, X_test, y_test):
    model = BaggingClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> BaggingClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def extra_trees_classifier(X_train, y_train, X_test, y_test):
    model = ExtraTreesClassifier(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    print("Model -> ExtraTreesClassifier")
    print("Accuracy: ", accuracy)
    print("F1 Score: ", f1)
    print("Precision: ", precision)
    print("Recall: ", recall)
    print("ROC AUC: ", roc_auc)
    print("------------------------------")

def all_classifiers(X_train, y_train, X_test, y_test):
    logistic_regression(X_train, y_train, X_test, y_test)
    perceptron(X_train, y_train, X_test, y_test)
    ridge_classifier(X_train, y_train, X_test, y_test)
    sgd_classifier(X_train, y_train, X_test, y_test)
    decision_tree_classifier(X_train, y_train, X_test, y_test)
    extra_tree_classifier(X_train, y_train, X_test, y_test)
    knn_classifier(X_train, y_train, X_test, y_test)
    radius_neighbors_classifier(X_train, y_train, X_test, y_test)
    mlp_classifier(X_train, y_train, X_test, y_test)
    bernoulli_rbm(X_train, y_train, X_test, y_test)
    xgb_classifier(X_train, y_train, X_test, y_test)
    xgb_rf_classifier(X_train, y_train, X_test, y_test)
    gradient_boosting_classifier(X_train, y_train, X_test, y_test)
    random_forest_classifier(X_train, y_train, X_test, y_test)
    ada_boost_classifier(X_train, y_train, X_test, y_test)
    bagging_classifier(X_train, y_train, X_test, y_test)
    extra_trees_classifier(X_train, y_train, X_test, y_test)

def all_regressors(X_train, y_train, X_test, y_test):
    xgb_regressor(X_train, y_train, X_test, y_test)
    xgb_rf_regressor(X_train, y_train, X_test, y_test)
    gradient_boosting_regressor(X_train, y_train, X_test, y_test)
    random_forest_regressor(X_train, y_train, X_test, y_test)
    ada_boost_regressor(X_train, y_train, X_test, y_test)
    bagging_regressor(X_train, y_train, X_test, y_test)
    extra_trees_regressor(X_train, y_train, X_test, y_test)
    linear_regression(X_train, y_train, X_test, y_test)
    ridge(X_train, y_train, X_test, y_test)
    lasso(X_train, y_train, X_test, y_test)
    elastic_net(X_train, y_train, X_test, y_test)
    bayesian_ridge(X_train, y_train, X_test, y_test)
    huber_regressor(X_train, y_train, X_test, y_test)
    lars(X_train, y_train, X_test, y_test)
    lasso_lars(X_train, y_train, X_test, y_test)
    lasso_lars_ic(X_train, y_train, X_test, y_test)
    orthogonal_matching_pursuit(X_train, y_train, X_test, y_test)
    passive_aggressive_regressor(X_train, y_train, X_test, y_test)
    ransac_regressor(X_train, y_train, X_test, y_test)
    sgd_regressor(X_train, y_train, X_test, y_test)
    theil_sen_regressor(X_train, y_train, X_test, y_test)
    decision_tree_regressor(X_train, y_train, X_test, y_test)
    extra_tree_regressor(X_train, y_train, X_test, y_test)
    svr(X_train, y_train, X_test, y_test)
    linear_svr(X_train, y_train, X_test, y_test)
    knn_regressor(X_train, y_train, X_test, y_test)
    radius_neighbors_regressor(X_train, y_train, X_test, y_test)
    mlp_regressor(X_train, y_train, X_test, y_test)

def all_models(X_train, y_train, X_test, y_test):
    all_regressors(X_train, y_train, X_test, y_test)
    all_classifiers(X_train, y_train, X_test, y_test)
