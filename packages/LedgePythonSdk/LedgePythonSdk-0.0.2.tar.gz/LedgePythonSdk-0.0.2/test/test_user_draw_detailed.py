# coding: utf-8

"""
    @ledge/api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ledge_python_sdk.models.user_draw_detailed import UserDrawDetailed

class TestUserDrawDetailed(unittest.TestCase):
    """UserDrawDetailed unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UserDrawDetailed:
        """Test UserDrawDetailed
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UserDrawDetailed`
        """
        model = UserDrawDetailed()
        if include_optional:
            return UserDrawDetailed(
                transaction_id = '',
                draw_product_id = '',
                draw_schedule_id = '',
                user_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                draw_product = None,
                user = ledge_python_sdk.models.user.User(
                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    verified = True, 
                    merged_with = '', 
                    game_id = '', 
                    external_id = '', 
                    referred_by_id = '', 
                    enable_notifications = True, 
                    has_accepted_legal = True, 
                    has_onboarded = True, 
                    gender = 'male', 
                    birth_year = 1.337, 
                    avatar = '', 
                    remaining_referrals = 1.337, 
                    code = '', 
                    usertag = 1.337, 
                    username = '', 
                    name = '', 
                    phone_number = '', 
                    email = '', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', )
            )
        else:
            return UserDrawDetailed(
                transaction_id = '',
                draw_product_id = '',
                draw_schedule_id = '',
                user_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                draw_product = None,
                user = ledge_python_sdk.models.user.User(
                    last_login = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    verified = True, 
                    merged_with = '', 
                    game_id = '', 
                    external_id = '', 
                    referred_by_id = '', 
                    enable_notifications = True, 
                    has_accepted_legal = True, 
                    has_onboarded = True, 
                    gender = 'male', 
                    birth_year = 1.337, 
                    avatar = '', 
                    remaining_referrals = 1.337, 
                    code = '', 
                    usertag = 1.337, 
                    username = '', 
                    name = '', 
                    phone_number = '', 
                    email = '', 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', ),
        )
        """

    def testUserDrawDetailed(self):
        """Test UserDrawDetailed"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
