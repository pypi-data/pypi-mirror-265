# coding: utf-8

"""
    @ledge/api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ledge_python_sdk.models.draw_product_detailed import DrawProductDetailed
from ledge_python_sdk.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class DrawDetailed(BaseModel):
    """
    DrawDetailed
    """ # noqa: E501
    expired_ticket_id: Optional[StrictStr] = Field(alias="expiredTicketId")
    ticket_id: StrictStr = Field(alias="ticketId")
    object_id: StrictStr = Field(alias="objectId")
    updated_at: datetime = Field(alias="updatedAt")
    created_at: datetime = Field(alias="createdAt")
    id: StrictStr
    expired_ticket: Optional[Product] = Field(alias="expiredTicket")
    draw_products: List[DrawProductDetailed] = Field(alias="drawProducts")
    __properties: ClassVar[List[str]] = ["expiredTicketId", "ticketId", "objectId", "updatedAt", "createdAt", "id", "expiredTicket", "drawProducts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DrawDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expired_ticket
        if self.expired_ticket:
            _dict['expiredTicket'] = self.expired_ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in draw_products (list)
        _items = []
        if self.draw_products:
            for _item in self.draw_products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['drawProducts'] = _items
        # set to None if expired_ticket_id (nullable) is None
        # and model_fields_set contains the field
        if self.expired_ticket_id is None and "expired_ticket_id" in self.model_fields_set:
            _dict['expiredTicketId'] = None

        # set to None if expired_ticket (nullable) is None
        # and model_fields_set contains the field
        if self.expired_ticket is None and "expired_ticket" in self.model_fields_set:
            _dict['expiredTicket'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DrawDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expiredTicketId": obj.get("expiredTicketId"),
            "ticketId": obj.get("ticketId"),
            "objectId": obj.get("objectId"),
            "updatedAt": obj.get("updatedAt"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "expiredTicket": Product.from_dict(obj["expiredTicket"]) if obj.get("expiredTicket") is not None else None,
            "drawProducts": [DrawProductDetailed.from_dict(_item) for _item in obj["drawProducts"]] if obj.get("drawProducts") is not None else None
        })
        return _obj


