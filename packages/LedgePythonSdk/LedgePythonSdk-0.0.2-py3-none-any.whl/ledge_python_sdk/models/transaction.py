# coding: utf-8

"""
    @ledge/api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ledge_python_sdk.models.status_type import StatusType
from ledge_python_sdk.models.transaction_type import TransactionType
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    Model Transaction
    """ # noqa: E501
    status: StatusType
    object_id: Optional[StrictStr] = Field(alias="objectId")
    sell_product_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(alias="sellProductQuantity")
    sell_product_id: Optional[StrictStr] = Field(alias="sellProductId")
    buy_product_quantity: Union[StrictFloat, StrictInt] = Field(alias="buyProductQuantity")
    buy_product_id: StrictStr = Field(alias="buyProductId")
    transaction_type: TransactionType = Field(alias="transactionType")
    user_id: StrictStr = Field(alias="userId")
    updated_at: datetime = Field(alias="updatedAt")
    created_at: datetime = Field(alias="createdAt")
    id: StrictStr
    __properties: ClassVar[List[str]] = ["status", "objectId", "sellProductQuantity", "sellProductId", "buyProductQuantity", "buyProductId", "transactionType", "userId", "updatedAt", "createdAt", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if object_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_id is None and "object_id" in self.model_fields_set:
            _dict['objectId'] = None

        # set to None if sell_product_quantity (nullable) is None
        # and model_fields_set contains the field
        if self.sell_product_quantity is None and "sell_product_quantity" in self.model_fields_set:
            _dict['sellProductQuantity'] = None

        # set to None if sell_product_id (nullable) is None
        # and model_fields_set contains the field
        if self.sell_product_id is None and "sell_product_id" in self.model_fields_set:
            _dict['sellProductId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "objectId": obj.get("objectId"),
            "sellProductQuantity": obj.get("sellProductQuantity"),
            "sellProductId": obj.get("sellProductId"),
            "buyProductQuantity": obj.get("buyProductQuantity"),
            "buyProductId": obj.get("buyProductId"),
            "transactionType": obj.get("transactionType"),
            "userId": obj.get("userId"),
            "updatedAt": obj.get("updatedAt"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id")
        })
        return _obj


