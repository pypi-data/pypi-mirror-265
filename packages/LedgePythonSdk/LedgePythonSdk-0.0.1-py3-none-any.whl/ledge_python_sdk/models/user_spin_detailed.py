# coding: utf-8

"""
    @ledge/api

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from ledge_python_sdk.models.game import Game
from ledge_python_sdk.models.product import Product
from ledge_python_sdk.models.transaction import Transaction
from typing import Optional, Set
from typing_extensions import Self

class UserSpinDetailed(BaseModel):
    """
    UserSpinDetailed
    """ # noqa: E501
    default: StrictBool
    seen: StrictBool
    qty: Union[StrictFloat, StrictInt]
    product_id: StrictStr = Field(alias="productId")
    user_id: StrictStr = Field(alias="userId")
    updated_at: datetime = Field(alias="updatedAt")
    created_at: datetime = Field(alias="createdAt")
    id: StrictStr
    transactions: Optional[List[Transaction]]
    game: Optional[Game]
    product: Optional[Product]
    __properties: ClassVar[List[str]] = ["default", "seen", "qty", "productId", "userId", "updatedAt", "createdAt", "id", "transactions", "game", "product"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserSpinDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of game
        if self.game:
            _dict['game'] = self.game.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # set to None if transactions (nullable) is None
        # and model_fields_set contains the field
        if self.transactions is None and "transactions" in self.model_fields_set:
            _dict['transactions'] = None

        # set to None if game (nullable) is None
        # and model_fields_set contains the field
        if self.game is None and "game" in self.model_fields_set:
            _dict['game'] = None

        # set to None if product (nullable) is None
        # and model_fields_set contains the field
        if self.product is None and "product" in self.model_fields_set:
            _dict['product'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserSpinDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": obj.get("default"),
            "seen": obj.get("seen"),
            "qty": obj.get("qty"),
            "productId": obj.get("productId"),
            "userId": obj.get("userId"),
            "updatedAt": obj.get("updatedAt"),
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "transactions": [Transaction.from_dict(_item) for _item in obj["transactions"]] if obj.get("transactions") is not None else None,
            "game": Game.from_dict(obj["game"]) if obj.get("game") is not None else None,
            "product": Product.from_dict(obj["product"]) if obj.get("product") is not None else None
        })
        return _obj


