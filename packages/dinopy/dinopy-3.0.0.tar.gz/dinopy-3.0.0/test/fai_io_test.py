# -*- coding: utf-8 -*-
"""Tests for reading and writing of fai-files.

fai-files are fasta annotation files containing start, length and name of
each chromosome in the corresponding fasta file.
For a more detailed specification of fai-files see fai_io.py
"""
import unittest

import dinopy
from dinopy import conversion as cnv
from dinopy import fai_io
from dinopy.definitions import basenumbers


class TestFaiInputOutput(unittest.TestCase):
    """Test the functionality of Fai-IO."""

    def test_read_annotation_read(self):
        """Are fasta-annotations read correctly from a fai-file?"""
        fa_reader = dinopy.FastaReader('files/testgenome.fasta')
        fai = fa_reader._read_annotation_file()
        # we know there is testgenome.fasta.fai, generated by `samtools faidx testgenome.fasta`
        self.assertIsNotNone(fai)
        expected_result = [
            [b"chromosome_I", 96, 14, 32, 33],
            [b"chromosome_II", 160, 128, 32, 33],
            [b"chromosome_III", 126, 309, 32, 33],
        ]
        self.assertEqual(expected_result, fai)

    def test_read_annotation_read_win(self):
        """Are fasta-annotations read correctly from a fai-file with windows file endings?"""
        fa_reader = dinopy.FastaReader('files/testgenome_win.fasta')
        fai = fa_reader._read_annotation_file()
        # we know there is testgenome_win.fasta.fai, generated by `samtools faidx testgenome_win.fasta` with win endings.
        self.assertIsNotNone(fai)
        expected_result = [
            [b"chromosome_I", 96, 15, 32, 34],  # 34: 32 + len(b'\r\n')
            [b"chromosome_II", 160, 133, 32, 34],
            [b"chromosome_III", 126, 320, 32, 34],
        ]
        self.assertEqual(expected_result, fai)

    def test_read_annotation_file_error_handling(self):
        """Is the correct error returned, if no fai-file is present?"""
        fa_reader_fail = dinopy.FastaReader('files/testgenome_no_fai.fasta')
        with self.assertRaises(FileNotFoundError):
            fa_reader_fail._read_annotation_file()

    def test_write_annotation_file(self):
        """Is the written annotation file identical to the one written by samtools?"""
        fa_reader = dinopy.FastaReader('files/testgenome.fasta')
        fai = fa_reader._read_annotation_file()
        # let's write our genome to file. note that line-width changes from 32 to 80
        with dinopy.FastaWriter('files/testgenome_verify.fasta', write_fai=True, force_overwrite=True,
                                append=False) as fa_writer:
            genome = cnv.basenumbers_to_string(fa_reader.genome(dtype=basenumbers).sequence)
            chr_info = fai_io.fai_to_chromosome_info(fai)
            fa_writer.write_genome(genome, chr_info, dtype=str)

        # read fai file generated by FastaWriter
        fa_reader = dinopy.FastaReader('files/testgenome_verify.fasta')
        fai = fa_reader._read_annotation_file()

        # read fai file generated by `samtools faidx testgenome_verify2.fasta`
        fa_reader = dinopy.FastaReader('files/testgenome_verify2.fasta')
        fai_verify = fa_reader._read_annotation_file()

        # and compare it to the one we generated ourselves.
        self.assertEqual(fai, fai_verify)

    def test_write_annotation_file_win(self):
        """Is the written annotation file identical to the one written by samtools?"""
        fa_reader = dinopy.FastaReader('files/testgenome_win.fasta')
        fai = fa_reader._read_annotation_file()
        # let's write our genome to file. note that line-width changes from 32 to 80
        with dinopy.FastaWriter('files/testgenome_verify_win.fasta', write_fai=True, force_overwrite=True,
                                append=False) as fa_writer:
            genome = cnv.basenumbers_to_string(fa_reader.genome(dtype=basenumbers).sequence)
            chr_info = fai_io.fai_to_chromosome_info(fai)
            fa_writer.write_genome(genome, chr_info, dtype=str)

        # read fai file generated by FastaWriter
        fa_reader = dinopy.FastaReader('files/testgenome_verify_win.fasta')
        fai = fa_reader._read_annotation_file()

        # read fai file generated by `samtools faidx testgenome_verify2.fasta`
        fa_reader = dinopy.FastaReader('files/testgenome_verify2_win.fasta')
        fai_verify = fa_reader._read_annotation_file()

        # and compare it to the one we generated ourselves.
        # Note that:
        # FastaWriter always writes '\n' line endings (â†’ testgenome_verify_win.fasta)
        # while testgenome_verify2_win.fasta has got '\r\n' line endings
        # which leads to different .fai files. Wontfix.
        self.assertNotEqual(fai, fai_verify, "If these happen to be equal, something is awry, since '\\r\\n' != '\\n'.")

    def test_fai_validation(self):
        """Are fai entries validated correctly?"""
        valid_entries = [
            ("name", 0, 8, 15, 47),
            (b"name", 11, 23, 42, 9001),
            ["name", 0, 8, 15, 47],
            [b"name", 11, 23, 42, 9001],
        ]
        # check list if entries
        self.assertEqual(fai_io.is_valid_fai(valid_entries), True)
        # check individually
        for entry in valid_entries:
            self.assertEqual(fai_io.is_valid_fai_entry(entry), True)
        # check if invalid entries are identified correctly
        invalid_entries = [
            [0, 8, 15, 47, "name"],  # wrong order
            (42, 0, 8, 15, 47),  # first item is neither str nor bytes
            None,  # not iterable
            42,  # not iterable
            ["name", 0, 1, 2, 3, 4],  # too many items
            ["name", 0, 8, 15],  # too few items
        ]
        # check list if entries
        self.assertEqual(fai_io.is_valid_fai(invalid_entries), False)
        # check individually
        for entry in invalid_entries:
            self.assertEqual(fai_io.is_valid_fai_entry(entry), False)


if __name__ == "__main__":
    unittest.main()
