# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_models.ipynb.

# %% auto 0
__all__ = ['base_models', 'ModelInfo']

# %% ../nbs/00_models.ipynb 4
import os, csv
from pathlib import Path
from datetime import datetime, timedelta

base_models = {}

class ModelInfo:    
    def __init(self):
        pass
    
    def __repr__(self):
        return f"{self.name}: {self.huggingface_repo} => params: {self.params_B} B | disk: {self.disk_size_GB} GB | vram: {self.memory_size_MB/1000} GB ({self.precision} bits)"

    def print_name_and_url(self):
        print(f"{self.name}: https://huggingface.co/{self.huggingface_repo}")
    
    def print_model_card(self, print_name=True):
        if print_name: self.print_name_and_url()
        if self.is_best_model:
            print(f"** Best model - languages performance: {self.languages_perf} **")
        if self.moe_activated_params_B == 0:
            print(f"- parameters: {self.params_B} B")
        else:
            print(f"- activated parameters: {self.moe_activated_params_B} B, total parameters: {self.params_B} B (mixture of experts)")
        print(f"- context size: {self.context_size} tokens")
        print(f"- vocabulary: {self.vocabulary} token types")
        if self.training_tokens_T>0:
            print(f"- training tokens: {self.training_tokens_T} T")
        print(f"- model weights license: {self.license}")
        print(f"- publication date: {self.date}")
        
    def print_download_properties(self, print_name=True):
        print(f"{self.name}: {self.huggingface_repo}")
        if self.gated_access:
            print(f"** WARNING - Gated access: you need to request access on the Huggingface website **")
        print(f"- huggingface repo: {self.huggingface_repo}")
        if self.gated_access:
            print(f"- huggingface read access token: mandatory")
        print(f"- disk size: {self.disk_size_GB} GB")
        if self.safetensors:
            print(f"- weights format: Huggingface safetensors")
        else:
            print(f"- weights format: Pytorch .bin (pickle)")
        if self.install_commands:
            print("- model dependencies installation commands")
            self.print_install_commands(line_prefix="  - ")
            
    def print_install_commands(self, line_prefix="- "):
        for line in self.install_commands.splitlines():
            print(line_prefix + line)
        
    def print_load_properties(self, print_name=True):
        print(f"{self.name}: {self.huggingface_repo}")
        
    def print_perplexity_test(self, print_name=True):
        print(f"{self.name}: {self.huggingface_repo}")
    
try:
    libdata_path = Path(__file__).parent / "data"
except NameError:
    libdata_path = Path(os.getcwd()).parent / "wordslab_llms" / "data"
    if not libdata_path.exists():
        libdata_path = Path(os.getcwd()) / "wordslab_llms" / "data"
    
with open(libdata_path / 'base_models.csv', 'r') as file:
    csv_reader = csv.reader(file)
    # Skip first line with column titles
    next(csv_reader)
    for row in csv_reader:        
        modelinfo = ModelInfo()        
        
        modelinfo.date = row[0]
        modelinfo.name = row[1]
        modelinfo.disk_size_GB = row[2]
        modelinfo.gated_access = row[3]
        modelinfo.safetensors = row[4]
        modelinfo.tokenizer_remote_code = row[5]
        modelinfo.vocab_size_code = row[6]
        modelinfo.padding_token_code = row[7]
        modelinfo.model_remote_code = row[8]
        modelinfo.attention_implementation = row[9]
        modelinfo.model_load_dtype = row[10]
        modelinfo.model_max_length_code = row[11]
        modelinfo.huggingface_repo = row[12]
        modelinfo.vocabulary = row[13]
        modelinfo.params_B = row[14]
        modelinfo.moe_activated_params_B = row[15]
        modelinfo.context_size = row[16]
        modelinfo.training_tokens_T = row[17]
        modelinfo.license = row[18]
        modelinfo.quantization_type = row[19]
        modelinfo.precision = row[20]
        modelinfo.memory_size_MB = row[21]
        modelinfo.ppl_sequence_length = row[22]
        modelinfo.ppl_batch_size = row[23]
        modelinfo.ppl_memory_size_MB = row[24]
        modelinfo.install_commands = row[25]
        modelinfo.is_best_model = row[26]
        modelinfo.languages_perf = row[27]
        modelinfo.fr_tokens_M = row[28]
        modelinfo.fr_tokens_duration = row[29]
        modelinfo.fr_pplu_x1000 = row[30]
        modelinfo.fr_ppl = row[31]
        modelinfo.fr_ppl_duration = row[32]
        modelinfo.en_tokens_M = row[33]
        modelinfo.en_tokens_duration = row[34]
        modelinfo.en_pplu_x1000 = row[35]
        modelinfo.en_ppl = row[36]
        modelinfo.en_ppl_duration = row[37]
        modelinfo.de_tokens_M = row[38]
        modelinfo.de_tokens_duration = row[39]
        modelinfo.de_pplu_x1000 = row[40]
        modelinfo.de_ppl = row[41]
        modelinfo.de_ppl_duration = row[42]
        modelinfo.es_tokens_M = row[43]
        modelinfo.es_tokens_duration = row[44]
        modelinfo.es_pplu_x1000 = row[45]
        modelinfo.es_ppl = row[46]
        modelinfo.es_ppl_duration = row[47]
        
        modelinfo.date = datetime.strptime(modelinfo.date, "%m/%d/%Y").date()
        modelinfo.disk_size_GB = float(modelinfo.disk_size_GB) if modelinfo.disk_size_GB else 0.0
        
        modelinfo.gated_access = True if modelinfo.gated_access=='True' else False
        modelinfo.safetensors = True if modelinfo.safetensors=='True' else False
        modelinfo.tokenizer_remote_code = True if modelinfo.tokenizer_remote_code=='True' else False
        modelinfo.model_remote_code = True if modelinfo.model_remote_code=='True' else False
        
        modelinfo.vocabulary = int(modelinfo.vocabulary)
        modelinfo.params_B = float(modelinfo.params_B)
        modelinfo.moe_activated_params_B = float(modelinfo.moe_activated_params_B) if modelinfo.moe_activated_params_B else 0.0
        modelinfo.context_size = int(modelinfo.context_size)
        modelinfo.training_tokens_T = float(modelinfo.training_tokens_T) if modelinfo.training_tokens_T else 0.0
        modelinfo.precision = int(modelinfo.precision)
        modelinfo.memory_size_MB = int(modelinfo.memory_size_MB) if modelinfo.memory_size_MB else 0
        modelinfo.ppl_sequence_length = int(modelinfo.ppl_sequence_length) if modelinfo.ppl_sequence_length else 0
        modelinfo.ppl_batch_size = int(modelinfo.ppl_batch_size) if modelinfo.ppl_batch_size else 0
        modelinfo.ppl_memory_size_MB = int(modelinfo.ppl_batch_size)
        modelinfo.is_best_model = True if modelinfo.is_best_model=='True' else False
        
        modelinfo.fr_tokens_M = float(modelinfo.fr_tokens_M) if modelinfo.fr_tokens_M else 0.0
        modelinfo.fr_tokens_duration = (datetime.strptime(modelinfo.fr_tokens_duration, "%H:%M:%S") - datetime.strptime("00:00:00", "%H:%M:%S")) if modelinfo.fr_tokens_duration else timedelta()  
        modelinfo.fr_pplu_x1000 = float(modelinfo.fr_pplu_x1000) if modelinfo.fr_pplu_x1000 else 0.0
        modelinfo.fr_ppl = float(modelinfo.fr_ppl) if modelinfo.fr_ppl else 0.0
        modelinfo.fr_ppl_duration = row[32]
        modelinfo.en_tokens_M = float(modelinfo.en_tokens_M) if modelinfo.en_tokens_M else 0.0
        modelinfo.en_tokens_duration = row[34]
        modelinfo.fr_pplu_x1000 = float(modelinfo.en_pplu_x1000) if modelinfo.en_pplu_x1000 else 0.0
        modelinfo.en_ppl = float(modelinfo.en_ppl) if modelinfo.en_ppl else 0.0
        modelinfo.en_ppl_duration = row[37]
        modelinfo.de_tokens_M = float(modelinfo.de_tokens_M) if modelinfo.de_tokens_M else 0.0
        modelinfo.de_tokens_duration = row[39]
        modelinfo.de_pplu_x1000 = float(modelinfo.de_pplu_x1000) if modelinfo.de_pplu_x1000 else 0.0
        modelinfo.de_ppl = float(modelinfo.de_ppl) if modelinfo.de_ppl else 0.0
        modelinfo.de_ppl_duration = row[42]
        modelinfo.es_tokens_M = float(modelinfo.es_tokens_M) if modelinfo.es_tokens_M else 0.0
        modelinfo.es_tokens_duration = row[44]
        modelinfo.es_pplu_x1000 = float(modelinfo.es_pplu_x1000) if modelinfo.es_pplu_x1000 else 0.0
        modelinfo.es_ppl = float(modelinfo.es_ppl) if modelinfo.es_ppl else 0.0
        modelinfo.es_ppl_duration = row[47]
        
        base_models[modelinfo.name] = modelinfo
