{%- macro register_class_attributes(node) %}
        {%- if node.is_array %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_array_cls = {{get_fully_qualified_type_name(node)}}_array_cls(address=self.address+{{node.raw_address_offset}},
                                                                                  stride={{node.array_stride}},
                                                                                  dimensions=tuple({{node.array_dimensions}}),
                                                                                  logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                  inst_name='{{node.inst_name}}', parent=self,
                                                                                  callbacks=callbacks)
        {%- else %}
            {%- if node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(callbacks=callbacks,
                                                                 address=self.address+{{node.address_offset}},
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}', parent=self)
            {%- elif node.has_sw_readable and not node.has_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(callbacks=callbacks,
                                                                 address=self.address+{{node.address_offset}},
                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                   inst_name='{{node.inst_name}}', parent=self)
            {%- elif not node.has_sw_readable and node.has_sw_writable %}
    self.__{{node.inst_name}}:{{get_fully_qualified_type_name(node)}}_cls = {{get_fully_qualified_type_name(node)}}_cls(callbacks=callbacks,
                                                                                 address=self.address+{{node.address_offset}},
                                                                                 logger_handle=logger_handle+'.{{node.inst_name}}',
                                                                                 inst_name='{{node.inst_name}}', parent=self)
            {%- endif %}
        {%- endif %}

{%- endmacro %}

{%- macro child_readable_register_getter(node) %}
    def get_readable_registers(self, unroll:bool=False) -> Iterator[Union[Readable{% if asyncoutput %}Async{% endif %}Register, Tuple[Readable{% if asyncoutput %}Async{% endif %}Register, ...]]]:
        """
        generator that produces all the readable_registers of this node
        """
        {% for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode) %}
                {% if child_node.has_sw_readable %}
                    {% if child_node.is_array %}
        if unroll:
            for child in self.{{safe_node_name(child_node)}}:
                yield cast(Readable{% if asyncoutput %}Async{% endif %}Register, child)
        else:
            yield cast(Tuple[Readable{% if asyncoutput %}Async{% endif %}Register, ...], self.{{safe_node_name(child_node)}})
                    {% else %}
        yield cast(Readable{% if asyncoutput %}Async{% endif %}Register, self.{{safe_node_name(child_node)}})
                    {%- endif %}
                {%- endif -%}
            {%- endif -%}
        {% endfor %}

        # Empty generator in case there are no children of this type
        if False: yield
{%- endmacro %}

{%- macro child_writable_register_getter(node) %}
    def get_writable_registers(self, unroll:bool=False) -> Iterator[Union[Writable{% if asyncoutput %}Async{% endif %}Register, Tuple[Writable{% if asyncoutput %}Async{% endif %}Register, ...]]]:
        """
        generator that produces all the readable_registers of this node
        """
        {% for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode) %}
                {% if child_node.has_sw_writable %}
                    {% if child_node.is_array %}
        if unroll:
            for child in self.{{safe_node_name(child_node)}}:
                yield cast(Writable{% if asyncoutput %}Async{% endif %}Register, child)
        else:
            yield cast(Tuple[Writable{% if asyncoutput %}Async{% endif %}Register, ...], self.{{safe_node_name(child_node)}})
                    {% else %}
        yield cast(Writable{% if asyncoutput %}Async{% endif %}Register, self.{{safe_node_name(child_node)}})
                    {%- endif %}
                {%- endif -%}
            {%- endif -%}
        {% endfor %}

        # Empty generator in case there are no children of this type
        if False: yield
{%- endmacro %}

{%- macro child_register_getter(node) %}
{{ child_readable_register_getter(node) }}
{{ child_writable_register_getter(node) }}
{%- endmacro %}

