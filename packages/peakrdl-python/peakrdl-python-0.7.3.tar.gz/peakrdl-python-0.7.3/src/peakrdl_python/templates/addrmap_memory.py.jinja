
{% from 'reg_definitions.py.jinja' import register_class_attributes with context %}
{% from 'reg_definitions.py.jinja' import child_writable_register_getter with context %}
{% from 'reg_definitions.py.jinja' import child_readable_register_getter with context %}

{%- macro memory_class(node) %}
    {%- if node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Memory{% if asyncoutput %}Async{% endif %}ReadWrite):
    {%- elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Memory{% if asyncoutput %}Async{% endif %}ReadOnly):
    {%- elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_cls(Memory{% if asyncoutput %}Async{% endif %}WriteOnly):
    {%- endif %}
    """
    Class to represent a memory in the register model

    {{get_table_block(node) | indent}}
    """

    __slots__ : List[str] = [{%- for child_node in node.children(unroll=False) -%}{%- if isinstance(child_node, systemrdlRegNode) -%}'__{{child_node.inst_name}}'{% if not loop.last %}, {% endif %}{% endif %}{%- endfor %}]

    def __init__(self,
                 callbacks: {% if asyncoutput %}AsyncCallbackSet{% else %}NormalCallbackSet{% endif %},
                 address: int,
                 logger_handle: str,
                 inst_name: str,
                 parent:AddressMap):

        super().__init__(callbacks=callbacks,
                         address=address,
                         entries={{node.get_property('mementries')}},
                         {% if 'accesswidth' in node.list_properties() -%}accesswidth={{node.get_property('accesswidth')}}{%- else -%}accesswidth={{node.get_property('memwidth')}}{%- endif -%},
                         width={{node.get_property('memwidth')}},
                         logger_handle=logger_handle,
                         inst_name=inst_name,
                         parent=parent)

        {% for child_node in node.children(unroll=False) -%}
            {{ register_class_attributes(child_node) | indent }}
        {% endfor %}

        {%- for child_node in node.children(unroll=False) -%}
            {%- if isinstance(child_node, systemrdlRegNode)  %}
    @property
    def {{safe_node_name(child_node)}}(self) -> {% if child_node.is_array -%}{{get_fully_qualified_type_name(child_node)}}_array_cls{% else %}{{get_fully_qualified_type_name(child_node)}}_cls{%- endif -%}:
        """
        Property to access {{child_node.inst_name}} register {% if child_node.is_array -%}array{% endif %}

        {{get_table_block(child_node) | indent(8)}}
        """
        return self.__{{child_node.inst_name}}
            {% else %}
            {{ raise_template_error('unexpected type') }}
            {%- endif %}
        {% endfor %}

    {% if node.is_sw_readable %}
    {{ child_readable_register_getter(node) }}
    {% endif %}

    {% if node.is_sw_writable %}
    {{ child_writable_register_getter(node) }}
    {% endif %}

    @property
    def systemrdl_python_child_name_map(self) -> Dict[str, str]:
        """
        In some cases systemRDL names need to be converted make them python safe, this dictionary
        is used to map the original systemRDL names to the names of the python attributes of this
        class

        Returns: dictionary whose key is the systemRDL names and value it the property name
        """
        return {
            {%- for child_node in node.children(unroll=False) -%}
            '{{child_node.inst_name}}':'{{safe_node_name(child_node)}}',
            {%- endfor %}
            }

    {%- if node.is_array %}
        {%- if node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_array_cls(Memory{% if asyncoutput %}Async{% endif %}ReadWriteArray):
        {%- elif node.is_sw_readable and not node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_array_cls(Memory{% if asyncoutput %}Async{% endif %}ReadOnlyArray):
        {%- elif not node.is_sw_readable and node.is_sw_writable %}
class {{get_fully_qualified_type_name(node)}}_array_cls(Memory{% if asyncoutput %}Async{% endif %}WriteOnlyArray):
        {%- endif %}
    """
    Class to represent a memory array in the register model
    """
    __slots__: List[str] = []

    def __init__(self, logger_handle: str, inst_name: str,
                 parent: AddressMap,
                 callbacks: {% if asyncoutput %}AsyncCallbackSet{% else %}NormalCallbackSet{% endif %},
                 address: int,
                 stride: int,
                 dimensions: Tuple[int, ...]):

        super().__init__(logger_handle=logger_handle, inst_name=inst_name,
                         parent=parent, callbacks=callbacks, address=address,
                         stride=stride, dimensions=dimensions)

    @property
    def _element_datatype(self) -> Type[Node]:
        return {{get_fully_qualified_type_name(node)}}_cls
    {%- endif %}

{%- endmacro %}

