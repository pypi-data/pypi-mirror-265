# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class RunStatus(str, enum.Enum):
    PENDING = "pending"
    AWAITING_EXECUTION = "awaiting_execution"
    RUNNING_EXECUTION = "running_execution"
    AWAITING_SCORING = "awaiting_scoring"
    RUNNING_SCORING = "running_scoring"
    AWAITING_HUMAN_SCORING = "awaiting_human_scoring"
    COMPLETED = "completed"

    def visit(
        self,
        pending: typing.Callable[[], T_Result],
        awaiting_execution: typing.Callable[[], T_Result],
        running_execution: typing.Callable[[], T_Result],
        awaiting_scoring: typing.Callable[[], T_Result],
        running_scoring: typing.Callable[[], T_Result],
        awaiting_human_scoring: typing.Callable[[], T_Result],
        completed: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is RunStatus.PENDING:
            return pending()
        if self is RunStatus.AWAITING_EXECUTION:
            return awaiting_execution()
        if self is RunStatus.RUNNING_EXECUTION:
            return running_execution()
        if self is RunStatus.AWAITING_SCORING:
            return awaiting_scoring()
        if self is RunStatus.RUNNING_SCORING:
            return running_scoring()
        if self is RunStatus.AWAITING_HUMAN_SCORING:
            return awaiting_human_scoring()
        if self is RunStatus.COMPLETED:
            return completed()
