[ZABBIX]
FS_SIZE_ITEM_KEY = vfs.fs.size
TOTAL_ITEM_NAME = Total disk space
TOTAL_ITEM_KEY = vfs.fs.totalsize
USED_ITEM_KEY = vfs.fs.usedsize
USED_ITEM_NAME = Used disk space
# Host group total disk item
TOTAL_DISK_SPACE_ITEM_NAME = Total disk space in %s
TOTAL_FS_SIZE_ITEM = grpsum["%s","vfs.fs.totalsize",last]
TOTAL_FS_SIZE_PARAMS = sum(last_foreach(/*/vfs.fs.totalsize?[group="%s"]))
# Host group used disk item
USED_DISK_SPACE_ITEM_NAME = Used disk space in %s
USED_FS_SIZE_ITEM = grpsum["%s","vfs.fs.usedsize",last]
USED_FS_SIZE_PARAMS = sum(last_foreach(/*/vfs.fs.usedsize?[group="%s"]))
# Host group used disk percentage item
USED_DISK_SPACE_PERCENTAGE_ITEM_NAME = Used disk space in %s (percentage)
USED_DISK_SPACE_PERCENTAGE_ITEM = %s_used_disk_space_percentage
DISK_SPACE_PARAMS = 100*last(/%s/grpsum["%s","vfs.fs.usedsize",last])/last(/%s/grpsum["%s","vfs.fs.totalsize",last])
# Host group total vm item
TOTAL_VM_SIZE_ITEM_NAME = Total memory in group %s
TOTAL_VM_SIZE_ITEM = grpsum["%s","vm.memory.size[total]",last]
TOTAL_VM_SIZE_PARAMS = sum(last_foreach(/*/vm.memory.size[total]?[group="%s"]))
# Host group used vm item
USED_VM_SIZE_ITEM_NAME = Used memory in group %s
USED_VM_SIZE_ITEM = grpsum["%s","vm.memory.size[used]",last]
USED_VM_SIZE_PARAMS = sum(last_foreach(/*/vm.memory.size[used]?[group="%s"]))
# Host group used vm percentage item
VM_UTIL_ITEM_NAME = Memory utilization in group %s
USED_VM_SPACE_PERCENTAGE_ITEM = %s_used_memory_percentage
VM_SPACE_PARAMS = 100*last(/%s/grpsum["%s","vm.memory.size[used]",last])/
                  last(/%s/grpsum["%s","vm.memory.size[total]",last])
# Host group average cpu util item
AVG_CPU_UTIL_ITEM_NAME = Average cpu utilization in group %s
CPU_UTIL_ITEM = grpavg["%s","system.cpu.util",last]
CPU_UTIL_PARAMS = avg(last_foreach(/*/system.cpu.util?[group="%s"]))
DISCOVER_HOST_FIELDS = [
                       "dhostid", "check_type", "ipv4", "monitored",
                       "host", "status", "multi_inf", "os", "net", "poc"]
DF_CH = {
        "ipv4": "ipv4(s)",
        "host": "监控主机",
        "monitored": "是否监控",
        "status": "监控状态",
        "multi_inf": "是否多网卡",
        "net": "网段名称",
        "poc": "负责人",
        "os": "操作系统",
        }
DF_CH_FIELD_NAMES = ["ipv4(s)", "是否监控", "监控主机", "监控状态", "是否多网卡", "操作系统", "网段名称", "负责人"]
CHASSIS_MODE_TYPES = ["VMware", "KVM"]
RSYNCD_ITEM = proc.num[rsync,root,,--daemon]
INTERFACES_DATA_COLUMNS = ["zbx_host", "os", "location", "agent_interfaces", "other_ipv4s"]

[LDAP]
LDAP_DOMAIN = dc=shchinafortune,dc=local
LDAP_USER_GROUP_DN = ou=user groups,ou=zabbix,%(LDAP_DOMAIN)s
LDAP_USER_DN = ou=Person,%(LDAP_DOMAIN)s

[REXP]
PERSON_IN_CHARGE = ([^-]+)-([^-]+)-([^-]+)
LINUX_IP = ((?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))(?:\/(?:\d|[1-2]\d|3[0-2]))
WIN_IP = ((?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))
LINUX_HOST = linux
WIN_HOST = windows
HOSTNAME = _\d+$
REXP_CH = [\u4e00-\u9fa5]

[JMES]
SEARCH_GROUPIDS = [*].groupid
SEARCH_DRULEIDS = [*].druleid
SEARCH_HOSTIDS = [*].hostid
SEARCH_CHECK_IDS = [*].dchecks[] | [?type == '%s'].dcheckid
SEARCH_HOSTGROUP_HOSTS = [*].hosts[]
SEARCH_HOSTGROUP_HOSTS_HOSTNAME = %(SEARCH_HOSTGROUP_HOSTS)s.name
SEARCH_HOSTGROUP_HOSTS_HOST = %(SEARCH_HOSTGROUP_HOSTS)s.host
SEARCH_HOST_GROUP_NAMES = groups[*].name
SEARCH_HOST_IPS = interfaces[*].ip
SEARCH_AGENT_IPS = [*] | [?type == '1'].ip
SEARCH_HOST_PARENTS_TEMPLATES = parentTemplates[*].host
SEARCH_EACH_HOST_TEMPLATES = [*] | [*].[host, parentTemplates[].host | join(`, `, [])]
SEARCH_LDAP_CN = [*].dn
SEARCH_HOST_TAG = [*] | [?tag == '%s'].value
SEARCH_AVAILABLE_HOSTS = [*] | [?interfaces[0].available == '1']
SEARCH_MEDIATYPE_IDS = mediatypes[].mediatypeid
SEARCH_MEDIA_BY_MEDIATYPEID = medias[] | [?mediatypeid == '%s'] | [0]

[VCENTER]
VCENTER_CPU = (%s) * %s  %s核  %s线程
HOST_SERIAL_ORDERED_KEY = ["SerialNumberTag", "EnclosureSerialNumberTag", "ServiceTag"]

[EXCEL]
EXCEL_SUFFIX = .xlsx
PANDAS_WRITE_EXCEL_ENGINE = openpyxl

[CACHE]
CACHE_FILE = .cache
