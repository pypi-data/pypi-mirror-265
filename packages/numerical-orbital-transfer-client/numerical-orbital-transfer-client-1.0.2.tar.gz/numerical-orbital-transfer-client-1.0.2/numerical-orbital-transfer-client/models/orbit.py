# coding: utf-8

"""
    Spacestudio Orbital Transfer API

    Orbital Transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Orbit(BaseModel):
    """
    Orbit
    """ # noqa: E501
    var_date: Optional[datetime] = Field(default=None, description="The orbit reference date", alias="date")
    type: Optional[StrictStr] = None
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit altitude in meters")
    inclination: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit inclination in degrees")
    anomaly: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit anomaly in degrees")
    anomaly_type: Optional[StrictStr] = Field(default=None, description="The orbit anomaly type", alias="anomalyType")
    argument_of_perigee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit argument of perigee in degrees", alias="argumentOfPerigee")
    mean_osc_type: Optional[StrictStr] = Field(default=None, description="The orbit mean osculating type", alias="meanOscType")
    raan: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit right ascension of the ascending node in degrees")
    semi_major_axis: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit semi-major axis in meters", alias="semiMajorAxis")
    eccentricity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The orbit eccentricity")
    perigee_altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="perigeeAltitude")
    apogee_altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="apogeeAltitude")
    __properties: ClassVar[List[str]] = ["date", "type", "altitude", "inclination", "anomaly", "anomalyType", "argumentOfPerigee", "meanOscType", "raan", "semiMajorAxis", "eccentricity", "perigeeAltitude", "apogeeAltitude"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Circular', 'Elliptical']):
            raise ValueError("must be one of enum values ('Circular', 'Elliptical')")
        return value

    @field_validator('anomaly_type')
    def anomaly_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUE', 'MEAN', 'ECCENTRIC']):
            raise ValueError("must be one of enum values ('TRUE', 'MEAN', 'ECCENTRIC')")
        return value

    @field_validator('mean_osc_type')
    def mean_osc_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEAN', 'OSC']):
            raise ValueError("must be one of enum values ('MEAN', 'OSC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Orbit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Orbit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "type": obj.get("type"),
            "altitude": obj.get("altitude"),
            "inclination": obj.get("inclination"),
            "anomaly": obj.get("anomaly"),
            "anomalyType": obj.get("anomalyType"),
            "argumentOfPerigee": obj.get("argumentOfPerigee"),
            "meanOscType": obj.get("meanOscType"),
            "raan": obj.get("raan"),
            "semiMajorAxis": obj.get("semiMajorAxis"),
            "eccentricity": obj.get("eccentricity"),
            "perigeeAltitude": obj.get("perigeeAltitude"),
            "apogeeAltitude": obj.get("apogeeAltitude")
        })
        return _obj


