# coding: utf-8

"""
    Spacestudio Orbital Transfer API

    Orbital Transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CustomManeuveringStrategy(BaseModel):
    """
    CustomManeuveringStrategy
    """ # noqa: E501
    number_of_rest_orbits: Optional[StrictInt] = Field(default=None, description="The number of rest orbits", alias="numberOfRestOrbits")
    number_of_thrust_orbits: Optional[StrictInt] = Field(default=None, description="The number of thrust orbits", alias="numberOfThrustOrbits")
    number_of_shift_orbits: Optional[StrictInt] = Field(default=None, description="The number of shift orbits", alias="numberOfShiftOrbits")
    stop_thrusting_during_eclipse: Optional[StrictBool] = Field(default=None, description="Indicates whether to stop thrusting during eclipse or not", alias="stopThrustingDuringEclipse")
    dynamic_duty_cycle: Optional[StrictBool] = Field(default=None, description="Indicates whether to use dynamic duty cycle or not", alias="dynamicDutyCycle")
    thrust_arcs_position: Optional[List[StrictStr]] = Field(default=None, alias="thrustArcsPosition")
    mean_longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If thrustArcsPosition is set to MEAN_LONGITUDE, the mean longitude of the center of the arc", alias="meanLongitude")
    thrust_arc_definition: Optional[StrictStr] = Field(default=None, alias="thrustArcDefinition")
    orbital_duty_cycle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If thrustArcDefinition is set to DUTY_CYCLE, the orbital duty cycle", alias="orbitalDutyCycle")
    thrust_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="If thrustArcDefinition is set to THRUST_DURATION, the thrust duration", alias="thrustDuration")
    thrust_arcs_number: Optional[StrictInt] = Field(default=None, description="The number of thrust arcs", alias="thrustArcsNumber")
    __properties: ClassVar[List[str]] = ["numberOfRestOrbits", "numberOfThrustOrbits", "numberOfShiftOrbits", "stopThrustingDuringEclipse", "dynamicDutyCycle", "thrustArcsPosition", "meanLongitude", "thrustArcDefinition", "orbitalDutyCycle", "thrustDuration", "thrustArcsNumber"]

    @field_validator('thrust_arcs_position')
    def thrust_arcs_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['APOGEE', 'PERIGEE', 'ASCENDING_ANTINODE', 'DESCENDING_ANTINODE', 'ASCENDING_AND_DESCENDING_ANTINODES', 'MEAN_LONGITUDE']):
                raise ValueError("each list item must be one of ('APOGEE', 'PERIGEE', 'ASCENDING_ANTINODE', 'DESCENDING_ANTINODE', 'ASCENDING_AND_DESCENDING_ANTINODES', 'MEAN_LONGITUDE')")
        return value

    @field_validator('thrust_arc_definition')
    def thrust_arc_definition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DUTY_CYCLE', 'THRUST_DURATION']):
            raise ValueError("must be one of enum values ('DUTY_CYCLE', 'THRUST_DURATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomManeuveringStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomManeuveringStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numberOfRestOrbits": obj.get("numberOfRestOrbits"),
            "numberOfThrustOrbits": obj.get("numberOfThrustOrbits"),
            "numberOfShiftOrbits": obj.get("numberOfShiftOrbits"),
            "stopThrustingDuringEclipse": obj.get("stopThrustingDuringEclipse"),
            "dynamicDutyCycle": obj.get("dynamicDutyCycle"),
            "thrustArcsPosition": obj.get("thrustArcsPosition"),
            "meanLongitude": obj.get("meanLongitude"),
            "thrustArcDefinition": obj.get("thrustArcDefinition"),
            "orbitalDutyCycle": obj.get("orbitalDutyCycle"),
            "thrustDuration": obj.get("thrustDuration"),
            "thrustArcsNumber": obj.get("thrustArcsNumber")
        })
        return _obj


