# coding: utf-8

"""
    Spacestudio Orbital Transfer API

    Orbital Transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from numerical-orbital-transfer-client.models.propulsion_system import PropulsionSystem
from numerical-orbital-transfer-client.models.spacecraft_geometry import SpacecraftGeometry
from typing import Optional, Set
from typing_extensions import Self

class Spacecraft(BaseModel):
    """
    Spacecraft
    """ # noqa: E501
    platform_mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft platform mass in kilograms", alias="platformMass")
    on_board_average_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft on-board average power in Watts", alias="onBoardAveragePower")
    duty_cycle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft duty cycle", alias="dutyCycle")
    thrust_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft thrust duration in seconds", alias="thrustDuration")
    drag_coefficient: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft drag coefficient", alias="dragCoefficient")
    lift_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft lift ratio", alias="liftRatio")
    absorption_coefficient: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft absorption coefficient", alias="absorptionCoefficient")
    reflection_coefficient: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft reflection coefficient", alias="reflectionCoefficient")
    platform_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft platform power in Watts", alias="platformPower")
    max_angular_velocity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft maximum angular velocity in degrees per second", alias="maxAngularVelocity")
    min_angular_velocity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The spacecraft minimum angular velocity in degrees per second", alias="minAngularVelocity")
    spacecraft_geometry: Optional[SpacecraftGeometry] = Field(default=None, alias="spacecraftGeometry")
    propulsion_system: Optional[PropulsionSystem] = Field(default=None, alias="propulsionSystem")
    __properties: ClassVar[List[str]] = ["platformMass", "onBoardAveragePower", "dutyCycle", "thrustDuration", "dragCoefficient", "liftRatio", "absorptionCoefficient", "reflectionCoefficient", "platformPower", "maxAngularVelocity", "minAngularVelocity", "spacecraftGeometry", "propulsionSystem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Spacecraft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of spacecraft_geometry
        if self.spacecraft_geometry:
            _dict['spacecraftGeometry'] = self.spacecraft_geometry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of propulsion_system
        if self.propulsion_system:
            _dict['propulsionSystem'] = self.propulsion_system.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Spacecraft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platformMass": obj.get("platformMass"),
            "onBoardAveragePower": obj.get("onBoardAveragePower"),
            "dutyCycle": obj.get("dutyCycle"),
            "thrustDuration": obj.get("thrustDuration"),
            "dragCoefficient": obj.get("dragCoefficient"),
            "liftRatio": obj.get("liftRatio"),
            "absorptionCoefficient": obj.get("absorptionCoefficient"),
            "reflectionCoefficient": obj.get("reflectionCoefficient"),
            "platformPower": obj.get("platformPower"),
            "maxAngularVelocity": obj.get("maxAngularVelocity"),
            "minAngularVelocity": obj.get("minAngularVelocity"),
            "spacecraftGeometry": SpacecraftGeometry.from_dict(obj["spacecraftGeometry"]) if obj.get("spacecraftGeometry") is not None else None,
            "propulsionSystem": PropulsionSystem.from_dict(obj["propulsionSystem"]) if obj.get("propulsionSystem") is not None else None
        })
        return _obj


