# coding: utf-8

"""
    Spacestudio Orbital Transfer API

    Orbital Transfer API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from numerical-orbital-transfer-client.models.numerical_orbital_transfer_request import NumericalOrbitalTransferRequest

class TestNumericalOrbitalTransferRequest(unittest.TestCase):
    """NumericalOrbitalTransferRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalOrbitalTransferRequest:
        """Test NumericalOrbitalTransferRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalOrbitalTransferRequest`
        """
        model = NumericalOrbitalTransferRequest()
        if include_optional:
            return NumericalOrbitalTransferRequest(
                mission_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                maximum_duration = 56,
                propagation_type = 'NUMERICAL',
                spacecraft = numerical-orbital-transfer-client.models.spacecraft.Spacecraft(
                    platform_mass = 1.337, 
                    on_board_average_power = 1.337, 
                    duty_cycle = 1.337, 
                    thrust_duration = 1.337, 
                    drag_coefficient = 1.337, 
                    lift_ratio = 1.337, 
                    absorption_coefficient = 1.337, 
                    reflection_coefficient = 1.337, 
                    platform_power = 1.337, 
                    max_angular_velocity = 1.337, 
                    min_angular_velocity = 1.337, 
                    spacecraft_geometry = numerical-orbital-transfer-client.models.spacecraft_geometry.SpacecraftGeometry(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, 
                        inertial_center_in_spacecraft_frame_x = 1.337, 
                        inertial_center_in_spacecraft_frame_y = 1.337, 
                        inertial_center_in_spacecraft_frame_z = 1.337, 
                        inertia_xx = 1.337, 
                        inertia_xy = 1.337, 
                        inertia_xz = 1.337, 
                        inertia_yx = 1.337, 
                        inertia_yy = 1.337, 
                        inertia_yz = 1.337, 
                        inertia_zx = 1.337, 
                        inertia_zy = 1.337, 
                        inertia_zz = 1.337, 
                        thruster_axis_in_satellite_frame_x = 1.337, 
                        thruster_axis_in_satellite_frame_y = 1.337, 
                        thruster_axis_in_satellite_frame_z = 1.337, 
                        solar_array_efficiency = 1.337, 
                        solar_array_maximum_power = 1.337, 
                        solar_array_surface = 1.337, 
                        solar_array_axis_in_satellite_frame_x = 1.337, 
                        solar_array_axis_in_satellite_frame_y = 1.337, 
                        solar_array_axis_in_satellite_frame_z = 1.337, 
                        solar_array_normal_in_satellite_frame_x = 1.337, 
                        solar_array_normal_in_satellite_frame_y = 1.337, 
                        solar_array_normal_in_satellite_frame_z = 1.337, 
                        payload_pointing_axis_in_satellite_frame_x = 1.337, 
                        payload_pointing_axis_in_satellite_frame_y = 1.337, 
                        payload_pointing_axis_in_satellite_frame_z = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_x = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_y = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_z = 1.337, 
                        spherical_cross_section = 1.337, 
                        body_solar_array_faces = [
                            'PLUS_X'
                            ], 
                        solar_array_definition_type = 'MAXIMUM_POWER', 
                        solar_array_type = 'BODY', 
                        type = 'SPHERE', ), 
                    propulsion_system = numerical-orbital-transfer-client.models.propulsion_system.PropulsionSystem(
                        isp = 1.337, 
                        power = 1.337, 
                        thrust = 1.337, 
                        stand_by_power = 1.337, 
                        warm_up_power = 1.337, 
                        warm_up_duration = 1.337, 
                        propellant_mass = 1.337, 
                        total_mass = 1.337, 
                        total_impulse = 1.337, 
                        maximum_thrust_duration = 1.337, 
                        propellant_capacity_choice = 'PROPELLANT', 
                        propulsion_system_type = 'ELECTRICAL', ), ),
                initial_orbit = numerical-orbital-transfer-client.models.orbit.Orbit(
                    sso = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = numerical-orbital-transfer-client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = numerical-orbital-transfer-client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                target_orbit = numerical-orbital-transfer-client.models.orbit.Orbit(
                    sso = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = numerical-orbital-transfer-client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = numerical-orbital-transfer-client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                perturbations = [
                    numerical-orbital-transfer-client.models.perturbation.Perturbation()
                    ],
                ephemerides = [
                    'CARTESIAN'
                    ],
                ephemerides_time_step = 1.337,
                mean_ephemerides = True,
                osculating_ephemerides = True,
                custom_solar_flux = 1.337,
                custom_earth_potential_order = 1.337,
                custom_earth_potential_degree = 1.337,
                with_eclipse = True,
                custom_maneuvering_strategy = numerical-orbital-transfer-client.models.custom_maneuvering_strategy.CustomManeuveringStrategy(
                    number_of_rest_orbits = 56, 
                    number_of_thrust_orbits = 56, 
                    number_of_shift_orbits = 56, 
                    stop_thrusting_during_eclipse = True, 
                    dynamic_duty_cycle = True, 
                    thrust_arcs_position = [
                        'APOGEE'
                        ], 
                    mean_longitude = 1.337, 
                    thrust_arc_definition = 'DUTY_CYCLE', 
                    orbital_duty_cycle = 1.337, 
                    thrust_duration = 1.337, 
                    thrust_arcs_number = 56, )
            )
        else:
            return NumericalOrbitalTransferRequest(
                propagation_type = 'NUMERICAL',
                spacecraft = numerical-orbital-transfer-client.models.spacecraft.Spacecraft(
                    platform_mass = 1.337, 
                    on_board_average_power = 1.337, 
                    duty_cycle = 1.337, 
                    thrust_duration = 1.337, 
                    drag_coefficient = 1.337, 
                    lift_ratio = 1.337, 
                    absorption_coefficient = 1.337, 
                    reflection_coefficient = 1.337, 
                    platform_power = 1.337, 
                    max_angular_velocity = 1.337, 
                    min_angular_velocity = 1.337, 
                    spacecraft_geometry = numerical-orbital-transfer-client.models.spacecraft_geometry.SpacecraftGeometry(
                        x = 1.337, 
                        y = 1.337, 
                        z = 1.337, 
                        inertial_center_in_spacecraft_frame_x = 1.337, 
                        inertial_center_in_spacecraft_frame_y = 1.337, 
                        inertial_center_in_spacecraft_frame_z = 1.337, 
                        inertia_xx = 1.337, 
                        inertia_xy = 1.337, 
                        inertia_xz = 1.337, 
                        inertia_yx = 1.337, 
                        inertia_yy = 1.337, 
                        inertia_yz = 1.337, 
                        inertia_zx = 1.337, 
                        inertia_zy = 1.337, 
                        inertia_zz = 1.337, 
                        thruster_axis_in_satellite_frame_x = 1.337, 
                        thruster_axis_in_satellite_frame_y = 1.337, 
                        thruster_axis_in_satellite_frame_z = 1.337, 
                        solar_array_efficiency = 1.337, 
                        solar_array_maximum_power = 1.337, 
                        solar_array_surface = 1.337, 
                        solar_array_axis_in_satellite_frame_x = 1.337, 
                        solar_array_axis_in_satellite_frame_y = 1.337, 
                        solar_array_axis_in_satellite_frame_z = 1.337, 
                        solar_array_normal_in_satellite_frame_x = 1.337, 
                        solar_array_normal_in_satellite_frame_y = 1.337, 
                        solar_array_normal_in_satellite_frame_z = 1.337, 
                        payload_pointing_axis_in_satellite_frame_x = 1.337, 
                        payload_pointing_axis_in_satellite_frame_y = 1.337, 
                        payload_pointing_axis_in_satellite_frame_z = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_x = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_y = 1.337, 
                        antenna_pointing_axis_in_satellite_frame_z = 1.337, 
                        spherical_cross_section = 1.337, 
                        body_solar_array_faces = [
                            'PLUS_X'
                            ], 
                        solar_array_definition_type = 'MAXIMUM_POWER', 
                        solar_array_type = 'BODY', 
                        type = 'SPHERE', ), 
                    propulsion_system = numerical-orbital-transfer-client.models.propulsion_system.PropulsionSystem(
                        isp = 1.337, 
                        power = 1.337, 
                        thrust = 1.337, 
                        stand_by_power = 1.337, 
                        warm_up_power = 1.337, 
                        warm_up_duration = 1.337, 
                        propellant_mass = 1.337, 
                        total_mass = 1.337, 
                        total_impulse = 1.337, 
                        maximum_thrust_duration = 1.337, 
                        propellant_capacity_choice = 'PROPELLANT', 
                        propulsion_system_type = 'ELECTRICAL', ), ),
                initial_orbit = numerical-orbital-transfer-client.models.orbit.Orbit(
                    sso = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = numerical-orbital-transfer-client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = numerical-orbital-transfer-client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                target_orbit = numerical-orbital-transfer-client.models.orbit.Orbit(
                    sso = True, 
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = numerical-orbital-transfer-client.models.orbit_parameters.OrbitParameters(), 
                    advanced_parameters = numerical-orbital-transfer-client.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                ephemerides_time_step = 1.337,
        )
        """

    def testNumericalOrbitalTransferRequest(self):
        """Test NumericalOrbitalTransferRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
