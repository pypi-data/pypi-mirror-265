
""" this file contains the data preprocessing functions """
if True:
    import sys
    sys.path.append("../")

from lifecycle_ml_example.src.utils.logger_class import Logger
from lifecycle_ml_example.src.utils.config import load_config
from lifecycle_ml_example.src.data.data_manager import read_data
from lifecycle_ml_example.src.features.data_preprocessing import get_gold_data
from lifecycle_ml_example.src.models.training import make_training
from lifecycle_ml_example.src.models.training import save_model
from lifecycle_ml_example.src.models.inference import InferenceClassificationModel
import json
from fastapi import FastAPI
from typing import Optional
from pydantic import BaseModel


# App Declaration
app = FastAPI()
logger = Logger(__name__).logger
config = load_config()
predictor = InferenceClassificationModel(config)


@app.get("/", tags=['root'])
def read_root():
    return "Running..."


@app.get("/train", tags=['train'])
def train_model(path_data=None) -> bool:
    """
    Train a model using the provided data and configuration, and save the model to the specified path.

    Args:
        path_data (str, optional): The path to the data. If not provided, it is retrieved from the configuration.

    Returns:
        bool: True if the model training is successful.
    """

    # get data from config
    if path_data is None:
        path_data = config["data"]["path"]
    model_algorithm = config["model"]["algorithm"]
    path_save_model = config["model"]["path_save_model"]

    # load data
    df = read_data(path_data, local=True)

    # get gold data
    x_train, _, y_train, _ = get_gold_data(df, config)

    # train model
    model = make_training(model_algorithm, x_train, y_train)

    # save model
    save_model(model, path_save_model)

    return True


class InputPredict(BaseModel):
    destination: str
    passanger: str
    weather: str
    temperature: int
    time: str
    coupon: str
    expiration: str
    gender: str
    age: str
    maritalStatus: str
    has_children: int
    education: str
    occupation: str
    income: str
    car: Optional[str] = None
    Bar: str
    CoffeeHouse: str
    CarryAway: Optional[str] = None
    RestaurantLessThan20: str
    Restaurant20To50: str
    toCoupon_GEQ5min: int
    toCoupon_GEQ15min: int
    toCoupon_GEQ25min: int
    direction_same: int
    direction_opp: int

    class Config:
        schema_extra = {
            'example': {
                'destination': 'No Urgent Place',
                'passanger': 'Alone',
                'weather': 'Sunny',
                'temperature': 55,
                'time': '2PM',
                'coupon': 'Restaurant(<20)',
                'expiration': '1d',
                'gender': 'Female',
                'age': '21',
                'maritalStatus': 'Unmarried partner',
                'has_children': 1,
                'education': 'Some college - no degree',
                'occupation': 'Unemployed',
                'income': '$37500 - $49999',
                'car': None,
                'Bar': 'never',
                'CoffeeHouse': 'never',
                'CarryAway': None,
                'RestaurantLessThan20': '4~8',
                'Restaurant20To50': '1~3',
                'toCoupon_GEQ5min': 1,
                'toCoupon_GEQ15min': 0,
                'toCoupon_GEQ25min': 0,
                'direction_same': 0,
                'direction_opp': 1
            }
        }


@app.post("/predict", tags=['predict'])
async def predict(input_data: InputPredict):
    """
    A function to make predictions based on input data.

    Args:
        input_data (dict): The input data for making predictions.

    Returns:
        list: The list of predictions generated by the function.
    """
    logger.info(f"input_data: {input_data}")

    input_data = input_data.dict()
    # get predictions
    output = predictor.predict(input_data)

    # serialize output
    output = [float(x) for x in output]
    output = json.dumps({'predictions': output})
    logger.info(f"output: {output}")

    return output


if __name__ == "__main__":

    # run the app
    import uvicorn
    uvicorn.run(app, host="localhost", port=8000)
