# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from dataforseo_client.models.buy_on_google_merchant_serp_element_item import BuyOnGoogleMerchantSerpElementItem
    from dataforseo_client.models.google_shopping_paid_merchant_serp_element_item import GoogleShoppingPaidMerchantSerpElementItem
    from dataforseo_client.models.google_shopping_serp_merchant_serp_element_item import GoogleShoppingSerpMerchantSerpElementItem
    from dataforseo_client.models.google_shopping_sponsored_carousel_merchant_serp_element_item import GoogleShoppingSponsoredCarouselMerchantSerpElementItem
    from dataforseo_client.models.product_info_element_merchant_serp_element_item import ProductInfoElementMerchantSerpElementItem
    from dataforseo_client.models.related_searches_merchant_serp_element_item import RelatedSearchesMerchantSerpElementItem
    from dataforseo_client.models.shopping_specification_merchant_serp_element_item import ShoppingSpecificationMerchantSerpElementItem
    from dataforseo_client.models.shops_list_merchant_serp_element_item import ShopsListMerchantSerpElementItem

class BaseMerchantSerpElementItem(BaseModel):
    """
    BaseMerchantSerpElementItem
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="type of element")
    __properties: ClassVar[List[str]] = ["type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'buy_on_google': 'BuyOnGoogleMerchantSerpElementItem','google_shopping_paid': 'GoogleShoppingPaidMerchantSerpElementItem','google_shopping_serp': 'GoogleShoppingSerpMerchantSerpElementItem','google_shopping_sponsored_carousel': 'GoogleShoppingSponsoredCarouselMerchantSerpElementItem','product_info_element': 'ProductInfoElementMerchantSerpElementItem','related_searches': 'RelatedSearchesMerchantSerpElementItem','shopping_specification': 'ShoppingSpecificationMerchantSerpElementItem','shops_list': 'ShopsListMerchantSerpElementItem'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[BuyOnGoogleMerchantSerpElementItem, GoogleShoppingPaidMerchantSerpElementItem, GoogleShoppingSerpMerchantSerpElementItem, GoogleShoppingSponsoredCarouselMerchantSerpElementItem, ProductInfoElementMerchantSerpElementItem, RelatedSearchesMerchantSerpElementItem, ShoppingSpecificationMerchantSerpElementItem, ShopsListMerchantSerpElementItem]]:
        """Create an instance of BaseMerchantSerpElementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[BuyOnGoogleMerchantSerpElementItem, GoogleShoppingPaidMerchantSerpElementItem, GoogleShoppingSerpMerchantSerpElementItem, GoogleShoppingSponsoredCarouselMerchantSerpElementItem, ProductInfoElementMerchantSerpElementItem, RelatedSearchesMerchantSerpElementItem, ShoppingSpecificationMerchantSerpElementItem, ShopsListMerchantSerpElementItem]]:
        """Create an instance of BaseMerchantSerpElementItem from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'buy_on_google':
            return import_module("dataforseo_client.models.buy_on_google_merchant_serp_element_item").BuyOnGoogleMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'google_shopping_paid':
            return import_module("dataforseo_client.models.google_shopping_paid_merchant_serp_element_item").GoogleShoppingPaidMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'google_shopping_serp':
            return import_module("dataforseo_client.models.google_shopping_serp_merchant_serp_element_item").GoogleShoppingSerpMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'google_shopping_sponsored_carousel':
            return import_module("dataforseo_client.models.google_shopping_sponsored_carousel_merchant_serp_element_item").GoogleShoppingSponsoredCarouselMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'product_info_element':
            return import_module("dataforseo_client.models.product_info_element_merchant_serp_element_item").ProductInfoElementMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'related_searches':
            return import_module("dataforseo_client.models.related_searches_merchant_serp_element_item").RelatedSearchesMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'shopping_specification':
            return import_module("dataforseo_client.models.shopping_specification_merchant_serp_element_item").ShoppingSpecificationMerchantSerpElementItem.from_dict(obj)
        if object_type ==  'shops_list':
            return import_module("dataforseo_client.models.shops_list_merchant_serp_element_item").ShopsListMerchantSerpElementItem.from_dict(obj)

        raise ValueError("BaseMerchantSerpElementItem failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


