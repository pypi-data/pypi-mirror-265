# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class AutoNACResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An AutoNAC result, as saved in the DB.
    """


    class MetaOapg:
        required = {
            "benchmarkMetrics",
            "trainingMetrics",
            "memory",
            "archParams",
            "runId",
            "modelSize",
            "architecture",
        }
        
        class properties:
            archParams = schemas.DictSchema
        
            @staticmethod
            def benchmarkMetrics() -> typing.Type['AutoNACBenchmarkMetrics']:
                return AutoNACBenchmarkMetrics
            memory = schemas.NumberSchema
            modelSize = schemas.NumberSchema
        
            @staticmethod
            def trainingMetrics() -> typing.Type['AutoNACTrainingMetrics']:
                return AutoNACTrainingMetrics
            architecture = schemas.StrSchema
            runId = schemas.UUIDSchema
            isAvailable = schemas.BoolSchema
            updateTime = schemas.DateTimeSchema
            creationTime = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            __annotations__ = {
                "archParams": archParams,
                "benchmarkMetrics": benchmarkMetrics,
                "memory": memory,
                "modelSize": modelSize,
                "trainingMetrics": trainingMetrics,
                "architecture": architecture,
                "runId": runId,
                "isAvailable": isAvailable,
                "updateTime": updateTime,
                "creationTime": creationTime,
                "id": id,
                "deleted": deleted,
            }
    
    benchmarkMetrics: 'AutoNACBenchmarkMetrics'
    trainingMetrics: 'AutoNACTrainingMetrics'
    memory: MetaOapg.properties.memory
    archParams: MetaOapg.properties.archParams
    runId: MetaOapg.properties.runId
    modelSize: MetaOapg.properties.modelSize
    architecture: MetaOapg.properties.architecture
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archParams"]) -> MetaOapg.properties.archParams: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchmarkMetrics"]) -> 'AutoNACBenchmarkMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelSize"]) -> MetaOapg.properties.modelSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trainingMetrics"]) -> 'AutoNACTrainingMetrics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runId"]) -> MetaOapg.properties.runId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isAvailable"]) -> MetaOapg.properties.isAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateTime"]) -> MetaOapg.properties.updateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archParams", "benchmarkMetrics", "memory", "modelSize", "trainingMetrics", "architecture", "runId", "isAvailable", "updateTime", "creationTime", "id", "deleted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archParams"]) -> MetaOapg.properties.archParams: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchmarkMetrics"]) -> 'AutoNACBenchmarkMetrics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelSize"]) -> MetaOapg.properties.modelSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trainingMetrics"]) -> 'AutoNACTrainingMetrics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runId"]) -> MetaOapg.properties.runId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isAvailable"]) -> typing.Union[MetaOapg.properties.isAvailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateTime"]) -> typing.Union[MetaOapg.properties.updateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archParams", "benchmarkMetrics", "memory", "modelSize", "trainingMetrics", "architecture", "runId", "isAvailable", "updateTime", "creationTime", "id", "deleted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        benchmarkMetrics: 'AutoNACBenchmarkMetrics',
        trainingMetrics: 'AutoNACTrainingMetrics',
        memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, float, ],
        archParams: typing.Union[MetaOapg.properties.archParams, dict, frozendict.frozendict, ],
        runId: typing.Union[MetaOapg.properties.runId, str, uuid.UUID, ],
        modelSize: typing.Union[MetaOapg.properties.modelSize, decimal.Decimal, int, float, ],
        architecture: typing.Union[MetaOapg.properties.architecture, str, ],
        isAvailable: typing.Union[MetaOapg.properties.isAvailable, bool, schemas.Unset] = schemas.unset,
        updateTime: typing.Union[MetaOapg.properties.updateTime, str, datetime, schemas.Unset] = schemas.unset,
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AutoNACResult':
        return super().__new__(
            cls,
            *_args,
            benchmarkMetrics=benchmarkMetrics,
            trainingMetrics=trainingMetrics,
            memory=memory,
            archParams=archParams,
            runId=runId,
            modelSize=modelSize,
            architecture=architecture,
            isAvailable=isAvailable,
            updateTime=updateTime,
            creationTime=creationTime,
            id=id,
            deleted=deleted,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.auto_nac_benchmark_metrics import AutoNACBenchmarkMetrics
from deci_platform_client.model.auto_nac_training_metrics import AutoNACTrainingMetrics
