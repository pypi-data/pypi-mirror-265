# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class HardwareReturnSchema(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A logic schema of hardware
    """


    class MetaOapg:
        required = {
            "name",
            "label",
        }
        
        class properties:
        
            @staticmethod
            def name() -> typing.Type['HardwareType']:
                return HardwareType
        
            @staticmethod
            def label() -> typing.Type['HardwareTypeLabel']:
                return HardwareTypeLabel
        
            @staticmethod
            def vendor() -> typing.Type['HardwareVendor']:
                return HardwareVendor
        
            @staticmethod
            def machine() -> typing.Type['HardwareMachineModel']:
                return HardwareMachineModel
        
            @staticmethod
            def group() -> typing.Type['HardwareGroup']:
                return HardwareGroup
            future = schemas.BoolSchema
            deprecated = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "label": label,
                "vendor": vendor,
                "machine": machine,
                "group": group,
                "future": future,
                "deprecated": deprecated,
            }
    
    name: 'HardwareType'
    label: 'HardwareTypeLabel'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'HardwareType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> 'HardwareTypeLabel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> 'HardwareVendor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machine"]) -> 'HardwareMachineModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'HardwareGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["future"]) -> MetaOapg.properties.future: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deprecated"]) -> MetaOapg.properties.deprecated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "label", "vendor", "machine", "group", "future", "deprecated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'HardwareType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> 'HardwareTypeLabel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union['HardwareVendor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machine"]) -> typing.Union['HardwareMachineModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['HardwareGroup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["future"]) -> typing.Union[MetaOapg.properties.future, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deprecated"]) -> typing.Union[MetaOapg.properties.deprecated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "label", "vendor", "machine", "group", "future", "deprecated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: 'HardwareType',
        label: 'HardwareTypeLabel',
        vendor: typing.Union['HardwareVendor', schemas.Unset] = schemas.unset,
        machine: typing.Union['HardwareMachineModel', schemas.Unset] = schemas.unset,
        group: typing.Union['HardwareGroup', schemas.Unset] = schemas.unset,
        future: typing.Union[MetaOapg.properties.future, bool, schemas.Unset] = schemas.unset,
        deprecated: typing.Union[MetaOapg.properties.deprecated, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'HardwareReturnSchema':
        return super().__new__(
            cls,
            *_args,
            name=name,
            label=label,
            vendor=vendor,
            machine=machine,
            group=group,
            future=future,
            deprecated=deprecated,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.hardware_group import HardwareGroup
from deci_platform_client.model.hardware_machine_model import HardwareMachineModel
from deci_platform_client.model.hardware_type import HardwareType
from deci_platform_client.model.hardware_type_label import HardwareTypeLabel
from deci_platform_client.model.hardware_vendor import HardwareVendor
