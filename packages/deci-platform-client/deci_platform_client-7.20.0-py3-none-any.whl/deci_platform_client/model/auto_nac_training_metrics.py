# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class AutoNACTrainingMetrics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    AutoNAC training result metrics.
    """


    class MetaOapg:
        required = {
            "metricName",
            "metricValue",
        }
        
        class properties:
            metricName = schemas.StrSchema
            metricValue = schemas.NumberSchema
            __annotations__ = {
                "metricName": metricName,
                "metricValue": metricValue,
            }
    
    metricName: MetaOapg.properties.metricName
    metricValue: MetaOapg.properties.metricValue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricName"]) -> MetaOapg.properties.metricName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metricValue"]) -> MetaOapg.properties.metricValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["metricName", "metricValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricName"]) -> MetaOapg.properties.metricName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metricValue"]) -> MetaOapg.properties.metricValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["metricName", "metricValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metricName: typing.Union[MetaOapg.properties.metricName, str, ],
        metricValue: typing.Union[MetaOapg.properties.metricValue, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AutoNACTrainingMetrics':
        return super().__new__(
            cls,
            *_args,
            metricName=metricName,
            metricValue=metricValue,
            _configuration=_configuration,
            **kwargs,
        )
