# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class InferenceService(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "modelName",
            "hardwareName",
            "hardwareId",
            "modelId",
            "id",
            "inferenceEngine",
            "workspaceId",
        }
        
        class properties:
            id = schemas.UUIDSchema
            
            
            class workspaceId(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_0 = schemas.UUIDSchema
                    any_of_1 = schemas.StrSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.any_of_0,
                            cls.any_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'workspaceId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            modelId = schemas.UUIDSchema
            createdAt = schemas.DateTimeSchema
            inferenceEngine = schemas.StrSchema
            modelName = schemas.StrSchema
            hardwareId = schemas.UUIDSchema
            hardwareName = schemas.StrSchema
            basePath = schemas.StrSchema
            
            
            class status(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            InferenceServiceState,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "id": id,
                "workspaceId": workspaceId,
                "modelId": modelId,
                "createdAt": createdAt,
                "inferenceEngine": inferenceEngine,
                "modelName": modelName,
                "hardwareId": hardwareId,
                "hardwareName": hardwareName,
                "basePath": basePath,
                "status": status,
            }
    
    createdAt: MetaOapg.properties.createdAt
    modelName: MetaOapg.properties.modelName
    hardwareName: MetaOapg.properties.hardwareName
    hardwareId: MetaOapg.properties.hardwareId
    modelId: MetaOapg.properties.modelId
    id: MetaOapg.properties.id
    inferenceEngine: MetaOapg.properties.inferenceEngine
    workspaceId: MetaOapg.properties.workspaceId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inferenceEngine"]) -> MetaOapg.properties.inferenceEngine: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardwareId"]) -> MetaOapg.properties.hardwareId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardwareName"]) -> MetaOapg.properties.hardwareName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["basePath"]) -> MetaOapg.properties.basePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "workspaceId", "modelId", "createdAt", "inferenceEngine", "modelName", "hardwareId", "hardwareName", "basePath", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inferenceEngine"]) -> MetaOapg.properties.inferenceEngine: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelName"]) -> MetaOapg.properties.modelName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardwareId"]) -> MetaOapg.properties.hardwareId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardwareName"]) -> MetaOapg.properties.hardwareName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["basePath"]) -> typing.Union[MetaOapg.properties.basePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "workspaceId", "modelId", "createdAt", "inferenceEngine", "modelName", "hardwareId", "hardwareName", "basePath", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, ],
        modelName: typing.Union[MetaOapg.properties.modelName, str, ],
        hardwareName: typing.Union[MetaOapg.properties.hardwareName, str, ],
        hardwareId: typing.Union[MetaOapg.properties.hardwareId, str, uuid.UUID, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, uuid.UUID, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        inferenceEngine: typing.Union[MetaOapg.properties.inferenceEngine, str, ],
        workspaceId: typing.Union[MetaOapg.properties.workspaceId, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        basePath: typing.Union[MetaOapg.properties.basePath, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InferenceService':
        return super().__new__(
            cls,
            *_args,
            createdAt=createdAt,
            modelName=modelName,
            hardwareName=hardwareName,
            hardwareId=hardwareId,
            modelId=modelId,
            id=id,
            inferenceEngine=inferenceEngine,
            workspaceId=workspaceId,
            basePath=basePath,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.inference_service_state import InferenceServiceState
