# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class TemplateResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "template",
            "requiredPlaceholders",
            "optionalPlaceholders",
            "userInputPlaceholders",
        }
        
        class properties:
            template = schemas.StrSchema
            
            
            class requiredPlaceholders(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'requiredPlaceholders':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class optionalPlaceholders(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'optionalPlaceholders':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class userInputPlaceholders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userInputPlaceholders':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "template": template,
                "requiredPlaceholders": requiredPlaceholders,
                "optionalPlaceholders": optionalPlaceholders,
                "userInputPlaceholders": userInputPlaceholders,
            }
    
    template: MetaOapg.properties.template
    requiredPlaceholders: MetaOapg.properties.requiredPlaceholders
    optionalPlaceholders: MetaOapg.properties.optionalPlaceholders
    userInputPlaceholders: MetaOapg.properties.userInputPlaceholders
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiredPlaceholders"]) -> MetaOapg.properties.requiredPlaceholders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optionalPlaceholders"]) -> MetaOapg.properties.optionalPlaceholders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userInputPlaceholders"]) -> MetaOapg.properties.userInputPlaceholders: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["template", "requiredPlaceholders", "optionalPlaceholders", "userInputPlaceholders", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> MetaOapg.properties.template: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiredPlaceholders"]) -> MetaOapg.properties.requiredPlaceholders: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optionalPlaceholders"]) -> MetaOapg.properties.optionalPlaceholders: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userInputPlaceholders"]) -> MetaOapg.properties.userInputPlaceholders: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["template", "requiredPlaceholders", "optionalPlaceholders", "userInputPlaceholders", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        template: typing.Union[MetaOapg.properties.template, str, ],
        requiredPlaceholders: typing.Union[MetaOapg.properties.requiredPlaceholders, dict, frozendict.frozendict, ],
        optionalPlaceholders: typing.Union[MetaOapg.properties.optionalPlaceholders, dict, frozendict.frozendict, ],
        userInputPlaceholders: typing.Union[MetaOapg.properties.userInputPlaceholders, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TemplateResponse':
        return super().__new__(
            cls,
            *_args,
            template=template,
            requiredPlaceholders=requiredPlaceholders,
            optionalPlaceholders=optionalPlaceholders,
            userInputPlaceholders=userInputPlaceholders,
            _configuration=_configuration,
            **kwargs,
        )
