# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class StartAutonacRun(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "n_machines_always_up",
            "hardware",
        }
        
        class properties:
            hardware = schemas.StrSchema
            n_machines_always_up = schemas.IntSchema
            duration_seconds = schemas.IntSchema
            name = schemas.StrSchema
            __annotations__ = {
                "hardware": hardware,
                "n_machines_always_up": n_machines_always_up,
                "duration_seconds": duration_seconds,
                "name": name,
            }
    
    n_machines_always_up: MetaOapg.properties.n_machines_always_up
    hardware: MetaOapg.properties.hardware
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardware"]) -> MetaOapg.properties.hardware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["n_machines_always_up"]) -> MetaOapg.properties.n_machines_always_up: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_seconds"]) -> MetaOapg.properties.duration_seconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hardware", "n_machines_always_up", "duration_seconds", "name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardware"]) -> MetaOapg.properties.hardware: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["n_machines_always_up"]) -> MetaOapg.properties.n_machines_always_up: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_seconds"]) -> typing.Union[MetaOapg.properties.duration_seconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hardware", "n_machines_always_up", "duration_seconds", "name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        n_machines_always_up: typing.Union[MetaOapg.properties.n_machines_always_up, decimal.Decimal, int, ],
        hardware: typing.Union[MetaOapg.properties.hardware, str, ],
        duration_seconds: typing.Union[MetaOapg.properties.duration_seconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StartAutonacRun':
        return super().__new__(
            cls,
            *_args,
            n_machines_always_up=n_machines_always_up,
            hardware=hardware,
            duration_seconds=duration_seconds,
            name=name,
            _configuration=_configuration,
            **kwargs,
        )
