# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class EditModelForm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def dlTask() -> typing.Type['DeepLearningTask']:
                return DeepLearningTask
            
            
            class primaryBatchSize(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            BatchSize,
                            BatchSizeEdge,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'primaryBatchSize':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            primaryHardware = schemas.StrSchema
            
            
            class accuracyMetrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AccuracyMetric']:
                        return AccuracyMetric
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AccuracyMetric'], typing.List['AccuracyMetric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accuracyMetrics':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AccuracyMetric':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            owner = schemas.UUIDSchema
            
            
            class inputDimensions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inputDimensions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            channelFirst = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "dlTask": dlTask,
                "primaryBatchSize": primaryBatchSize,
                "primaryHardware": primaryHardware,
                "accuracyMetrics": accuracyMetrics,
                "name": name,
                "owner": owner,
                "inputDimensions": inputDimensions,
                "channelFirst": channelFirst,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dlTask"]) -> 'DeepLearningTask': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryBatchSize"]) -> MetaOapg.properties.primaryBatchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryHardware"]) -> MetaOapg.properties.primaryHardware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracyMetrics"]) -> MetaOapg.properties.accuracyMetrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputDimensions"]) -> MetaOapg.properties.inputDimensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channelFirst"]) -> MetaOapg.properties.channelFirst: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "dlTask", "primaryBatchSize", "primaryHardware", "accuracyMetrics", "name", "owner", "inputDimensions", "channelFirst", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dlTask"]) -> typing.Union['DeepLearningTask', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryBatchSize"]) -> typing.Union[MetaOapg.properties.primaryBatchSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryHardware"]) -> typing.Union[MetaOapg.properties.primaryHardware, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracyMetrics"]) -> typing.Union[MetaOapg.properties.accuracyMetrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputDimensions"]) -> typing.Union[MetaOapg.properties.inputDimensions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channelFirst"]) -> typing.Union[MetaOapg.properties.channelFirst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "dlTask", "primaryBatchSize", "primaryHardware", "accuracyMetrics", "name", "owner", "inputDimensions", "channelFirst", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        dlTask: typing.Union['DeepLearningTask', schemas.Unset] = schemas.unset,
        primaryBatchSize: typing.Union[MetaOapg.properties.primaryBatchSize, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        primaryHardware: typing.Union[MetaOapg.properties.primaryHardware, str, schemas.Unset] = schemas.unset,
        accuracyMetrics: typing.Union[MetaOapg.properties.accuracyMetrics, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, uuid.UUID, schemas.Unset] = schemas.unset,
        inputDimensions: typing.Union[MetaOapg.properties.inputDimensions, list, tuple, schemas.Unset] = schemas.unset,
        channelFirst: typing.Union[MetaOapg.properties.channelFirst, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditModelForm':
        return super().__new__(
            cls,
            *_args,
            description=description,
            dlTask=dlTask,
            primaryBatchSize=primaryBatchSize,
            primaryHardware=primaryHardware,
            accuracyMetrics=accuracyMetrics,
            name=name,
            owner=owner,
            inputDimensions=inputDimensions,
            channelFirst=channelFirst,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.accuracy_metric import AccuracyMetric
from deci_platform_client.model.batch_size import BatchSize
from deci_platform_client.model.batch_size_edge import BatchSizeEdge
from deci_platform_client.model.deep_learning_task import DeepLearningTask
