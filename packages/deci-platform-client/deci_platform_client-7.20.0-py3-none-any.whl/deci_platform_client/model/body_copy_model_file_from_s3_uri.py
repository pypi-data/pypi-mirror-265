# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class BodyCopyModelFileFromS3Uri(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "s3_uri",
        }
        
        class properties:
            
            
            class s3_uri(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 65536
                    min_length = 1
            
            
            class model_version(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^\d\.\d$',  # noqa: E501
                    }]
            __annotations__ = {
                "s3_uri": s3_uri,
                "model_version": model_version,
            }
    
    s3_uri: MetaOapg.properties.s3_uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["s3_uri"]) -> MetaOapg.properties.s3_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_version"]) -> MetaOapg.properties.model_version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["s3_uri", "model_version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["s3_uri"]) -> MetaOapg.properties.s3_uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_version"]) -> typing.Union[MetaOapg.properties.model_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["s3_uri", "model_version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        s3_uri: typing.Union[MetaOapg.properties.s3_uri, str, ],
        model_version: typing.Union[MetaOapg.properties.model_version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BodyCopyModelFileFromS3Uri':
        return super().__new__(
            cls,
            *_args,
            s3_uri=s3_uri,
            model_version=model_version,
            _configuration=_configuration,
            **kwargs,
        )
