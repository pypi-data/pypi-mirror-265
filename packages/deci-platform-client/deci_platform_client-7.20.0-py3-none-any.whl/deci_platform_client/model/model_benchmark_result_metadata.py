# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class ModelBenchmarkResultMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        
        class properties:
            batchSize = schemas.IntSchema
            batchInfTime = schemas.NumberSchema
            batchInfTimeVariance = schemas.NumberSchema
            memory = schemas.NumberSchema
            preInferenceMemoryUsed = schemas.NumberSchema
            postInferenceMemoryUsed = schemas.NumberSchema
            totalMemorySize = schemas.NumberSchema
            throughput = schemas.NumberSchema
            sampleInfTime = schemas.NumberSchema
            includeIo = schemas.BoolSchema
            frameworkType = schemas.StrSchema
            frameworkVersion = schemas.StrSchema
            inferenceHardware = schemas.StrSchema
            inferyVersion = schemas.StrSchema
            date = schemas.StrSchema
            ctime = schemas.IntSchema
            hToDMean = schemas.NumberSchema
            dToHMean = schemas.NumberSchema
            hToDVariance = schemas.NumberSchema
            dToHVariance = schemas.NumberSchema
            error = schemas.StrSchema
            __annotations__ = {
                "batchSize": batchSize,
                "batchInfTime": batchInfTime,
                "batchInfTimeVariance": batchInfTimeVariance,
                "memory": memory,
                "preInferenceMemoryUsed": preInferenceMemoryUsed,
                "postInferenceMemoryUsed": postInferenceMemoryUsed,
                "totalMemorySize": totalMemorySize,
                "throughput": throughput,
                "sampleInfTime": sampleInfTime,
                "includeIo": includeIo,
                "frameworkType": frameworkType,
                "frameworkVersion": frameworkVersion,
                "inferenceHardware": inferenceHardware,
                "inferyVersion": inferyVersion,
                "date": date,
                "ctime": ctime,
                "hToDMean": hToDMean,
                "dToHMean": dToHMean,
                "hToDVariance": hToDVariance,
                "dToHVariance": dToHVariance,
                "error": error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchSize"]) -> MetaOapg.properties.batchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchInfTime"]) -> MetaOapg.properties.batchInfTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchInfTimeVariance"]) -> MetaOapg.properties.batchInfTimeVariance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memory"]) -> MetaOapg.properties.memory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preInferenceMemoryUsed"]) -> MetaOapg.properties.preInferenceMemoryUsed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postInferenceMemoryUsed"]) -> MetaOapg.properties.postInferenceMemoryUsed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalMemorySize"]) -> MetaOapg.properties.totalMemorySize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["throughput"]) -> MetaOapg.properties.throughput: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampleInfTime"]) -> MetaOapg.properties.sampleInfTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["includeIo"]) -> MetaOapg.properties.includeIo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frameworkType"]) -> MetaOapg.properties.frameworkType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frameworkVersion"]) -> MetaOapg.properties.frameworkVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inferenceHardware"]) -> MetaOapg.properties.inferenceHardware: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inferyVersion"]) -> MetaOapg.properties.inferyVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ctime"]) -> MetaOapg.properties.ctime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hToDMean"]) -> MetaOapg.properties.hToDMean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dToHMean"]) -> MetaOapg.properties.dToHMean: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hToDVariance"]) -> MetaOapg.properties.hToDVariance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dToHVariance"]) -> MetaOapg.properties.dToHVariance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["batchSize", "batchInfTime", "batchInfTimeVariance", "memory", "preInferenceMemoryUsed", "postInferenceMemoryUsed", "totalMemorySize", "throughput", "sampleInfTime", "includeIo", "frameworkType", "frameworkVersion", "inferenceHardware", "inferyVersion", "date", "ctime", "hToDMean", "dToHMean", "hToDVariance", "dToHVariance", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchSize"]) -> typing.Union[MetaOapg.properties.batchSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchInfTime"]) -> typing.Union[MetaOapg.properties.batchInfTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchInfTimeVariance"]) -> typing.Union[MetaOapg.properties.batchInfTimeVariance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memory"]) -> typing.Union[MetaOapg.properties.memory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preInferenceMemoryUsed"]) -> typing.Union[MetaOapg.properties.preInferenceMemoryUsed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postInferenceMemoryUsed"]) -> typing.Union[MetaOapg.properties.postInferenceMemoryUsed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalMemorySize"]) -> typing.Union[MetaOapg.properties.totalMemorySize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["throughput"]) -> typing.Union[MetaOapg.properties.throughput, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampleInfTime"]) -> typing.Union[MetaOapg.properties.sampleInfTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["includeIo"]) -> typing.Union[MetaOapg.properties.includeIo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frameworkType"]) -> typing.Union[MetaOapg.properties.frameworkType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frameworkVersion"]) -> typing.Union[MetaOapg.properties.frameworkVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inferenceHardware"]) -> typing.Union[MetaOapg.properties.inferenceHardware, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inferyVersion"]) -> typing.Union[MetaOapg.properties.inferyVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ctime"]) -> typing.Union[MetaOapg.properties.ctime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hToDMean"]) -> typing.Union[MetaOapg.properties.hToDMean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dToHMean"]) -> typing.Union[MetaOapg.properties.dToHMean, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hToDVariance"]) -> typing.Union[MetaOapg.properties.hToDVariance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dToHVariance"]) -> typing.Union[MetaOapg.properties.dToHVariance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["batchSize", "batchInfTime", "batchInfTimeVariance", "memory", "preInferenceMemoryUsed", "postInferenceMemoryUsed", "totalMemorySize", "throughput", "sampleInfTime", "includeIo", "frameworkType", "frameworkVersion", "inferenceHardware", "inferyVersion", "date", "ctime", "hToDMean", "dToHMean", "hToDVariance", "dToHVariance", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        batchSize: typing.Union[MetaOapg.properties.batchSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        batchInfTime: typing.Union[MetaOapg.properties.batchInfTime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        batchInfTimeVariance: typing.Union[MetaOapg.properties.batchInfTimeVariance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        memory: typing.Union[MetaOapg.properties.memory, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        preInferenceMemoryUsed: typing.Union[MetaOapg.properties.preInferenceMemoryUsed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        postInferenceMemoryUsed: typing.Union[MetaOapg.properties.postInferenceMemoryUsed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        totalMemorySize: typing.Union[MetaOapg.properties.totalMemorySize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        throughput: typing.Union[MetaOapg.properties.throughput, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sampleInfTime: typing.Union[MetaOapg.properties.sampleInfTime, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        includeIo: typing.Union[MetaOapg.properties.includeIo, bool, schemas.Unset] = schemas.unset,
        frameworkType: typing.Union[MetaOapg.properties.frameworkType, str, schemas.Unset] = schemas.unset,
        frameworkVersion: typing.Union[MetaOapg.properties.frameworkVersion, str, schemas.Unset] = schemas.unset,
        inferenceHardware: typing.Union[MetaOapg.properties.inferenceHardware, str, schemas.Unset] = schemas.unset,
        inferyVersion: typing.Union[MetaOapg.properties.inferyVersion, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        ctime: typing.Union[MetaOapg.properties.ctime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hToDMean: typing.Union[MetaOapg.properties.hToDMean, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dToHMean: typing.Union[MetaOapg.properties.dToHMean, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hToDVariance: typing.Union[MetaOapg.properties.hToDVariance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dToHVariance: typing.Union[MetaOapg.properties.dToHVariance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelBenchmarkResultMetadata':
        return super().__new__(
            cls,
            *_args,
            batchSize=batchSize,
            batchInfTime=batchInfTime,
            batchInfTimeVariance=batchInfTimeVariance,
            memory=memory,
            preInferenceMemoryUsed=preInferenceMemoryUsed,
            postInferenceMemoryUsed=postInferenceMemoryUsed,
            totalMemorySize=totalMemorySize,
            throughput=throughput,
            sampleInfTime=sampleInfTime,
            includeIo=includeIo,
            frameworkType=frameworkType,
            frameworkVersion=frameworkVersion,
            inferenceHardware=inferenceHardware,
            inferyVersion=inferyVersion,
            date=date,
            ctime=ctime,
            hToDMean=hToDMean,
            dToHMean=dToHMean,
            hToDVariance=hToDVariance,
            dToHVariance=dToHVariance,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )
