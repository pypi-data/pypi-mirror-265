# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class UserArchitecture(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "owner",
            "modelId",
            "name",
            "workspaceId",
        }
        
        class properties:
            workspaceId = schemas.UUIDSchema
            owner = schemas.UUIDSchema
            modelId = schemas.UUIDSchema
            name = schemas.StrSchema
            updateTime = schemas.DateTimeSchema
            creationTime = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            
            
            class autonac(
                schemas.EnumBase,
                schemas.BoolSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        schemas.BoolClass.FALSE: "FALSE",
                    }
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls(False)
            colabLink = schemas.StrSchema
            __annotations__ = {
                "workspaceId": workspaceId,
                "owner": owner,
                "modelId": modelId,
                "name": name,
                "updateTime": updateTime,
                "creationTime": creationTime,
                "id": id,
                "deleted": deleted,
                "autonac": autonac,
                "colabLink": colabLink,
            }
    
    owner: MetaOapg.properties.owner
    modelId: MetaOapg.properties.modelId
    name: MetaOapg.properties.name
    workspaceId: MetaOapg.properties.workspaceId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateTime"]) -> MetaOapg.properties.updateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autonac"]) -> MetaOapg.properties.autonac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colabLink"]) -> MetaOapg.properties.colabLink: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workspaceId", "owner", "modelId", "name", "updateTime", "creationTime", "id", "deleted", "autonac", "colabLink", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateTime"]) -> typing.Union[MetaOapg.properties.updateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autonac"]) -> typing.Union[MetaOapg.properties.autonac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colabLink"]) -> typing.Union[MetaOapg.properties.colabLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workspaceId", "owner", "modelId", "name", "updateTime", "creationTime", "id", "deleted", "autonac", "colabLink", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner: typing.Union[MetaOapg.properties.owner, str, uuid.UUID, ],
        modelId: typing.Union[MetaOapg.properties.modelId, str, uuid.UUID, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        workspaceId: typing.Union[MetaOapg.properties.workspaceId, str, uuid.UUID, ],
        updateTime: typing.Union[MetaOapg.properties.updateTime, str, datetime, schemas.Unset] = schemas.unset,
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        autonac: typing.Union[MetaOapg.properties.autonac, bool, schemas.Unset] = schemas.unset,
        colabLink: typing.Union[MetaOapg.properties.colabLink, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserArchitecture':
        return super().__new__(
            cls,
            *_args,
            owner=owner,
            modelId=modelId,
            name=name,
            workspaceId=workspaceId,
            updateTime=updateTime,
            creationTime=creationTime,
            id=id,
            deleted=deleted,
            autonac=autonac,
            colabLink=colabLink,
            _configuration=_configuration,
            **kwargs,
        )
