# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class AccuracyMetricKey(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An enumeration.
    """


    class MetaOapg:
        enum_value_to_name = {
            "Top-1": "TOP1",
            "Top-5": "TOP5",
            "AUC": "AUC",
            "Precision": "PRECISION",
            "Recall": "RECALL",
            "F1 Score": "F1_SCORE",
            "True Positives": "TRUE_POSITIVES",
            "True Negatives": "TRUE_NEGATIVES",
            "False Positives": "FALSE_POSITIVES",
            "False Negatives": "FALSE_NEGATIVES",
            "mIoU": "M_IO_U",
            "Pixel Accuracy": "PIXEL_ACCURACY",
            "Dice Coefficient (F1 Score)": "DICE_COEFFICIENT_F1_SCORE",
            "mAP": "M_AP",
            "mAP@0.5:0.95": "M_AP0_50_95",
            "D1": "D1",
            "D2": "D2",
            "D3": "D3",
            "AbsRel": "ABS_REL",
            "SqRel": "SQ_REL",
            "Root Mean Squared Error": "ROOT_MEAN_SQUARED_ERROR",
            "Root Mean Squared Error - Log": "ROOT_MEAN_SQUARED_ERROR__LOG",
            "Sllog": "SLLOG",
            "Log-10": "LOG10",
            "PCK": "PCK",
            "PCKh": "PCKH",
            "PDJ": "PDJ",
            "OKS": "OKS",
            "Custom": "CUSTOM",
        }
    
    @schemas.classproperty
    def TOP1(cls):
        return cls("Top-1")
    
    @schemas.classproperty
    def TOP5(cls):
        return cls("Top-5")
    
    @schemas.classproperty
    def AUC(cls):
        return cls("AUC")
    
    @schemas.classproperty
    def PRECISION(cls):
        return cls("Precision")
    
    @schemas.classproperty
    def RECALL(cls):
        return cls("Recall")
    
    @schemas.classproperty
    def F1_SCORE(cls):
        return cls("F1 Score")
    
    @schemas.classproperty
    def TRUE_POSITIVES(cls):
        return cls("True Positives")
    
    @schemas.classproperty
    def TRUE_NEGATIVES(cls):
        return cls("True Negatives")
    
    @schemas.classproperty
    def FALSE_POSITIVES(cls):
        return cls("False Positives")
    
    @schemas.classproperty
    def FALSE_NEGATIVES(cls):
        return cls("False Negatives")
    
    @schemas.classproperty
    def M_IO_U(cls):
        return cls("mIoU")
    
    @schemas.classproperty
    def PIXEL_ACCURACY(cls):
        return cls("Pixel Accuracy")
    
    @schemas.classproperty
    def DICE_COEFFICIENT_F1_SCORE(cls):
        return cls("Dice Coefficient (F1 Score)")
    
    @schemas.classproperty
    def M_AP(cls):
        return cls("mAP")
    
    @schemas.classproperty
    def M_AP0_50_95(cls):
        return cls("mAP@0.5:0.95")
    
    @schemas.classproperty
    def D1(cls):
        return cls("D1")
    
    @schemas.classproperty
    def D2(cls):
        return cls("D2")
    
    @schemas.classproperty
    def D3(cls):
        return cls("D3")
    
    @schemas.classproperty
    def ABS_REL(cls):
        return cls("AbsRel")
    
    @schemas.classproperty
    def SQ_REL(cls):
        return cls("SqRel")
    
    @schemas.classproperty
    def ROOT_MEAN_SQUARED_ERROR(cls):
        return cls("Root Mean Squared Error")
    
    @schemas.classproperty
    def ROOT_MEAN_SQUARED_ERROR__LOG(cls):
        return cls("Root Mean Squared Error - Log")
    
    @schemas.classproperty
    def SLLOG(cls):
        return cls("Sllog")
    
    @schemas.classproperty
    def LOG10(cls):
        return cls("Log-10")
    
    @schemas.classproperty
    def PCK(cls):
        return cls("PCK")
    
    @schemas.classproperty
    def PCKH(cls):
        return cls("PCKh")
    
    @schemas.classproperty
    def PDJ(cls):
        return cls("PDJ")
    
    @schemas.classproperty
    def OKS(cls):
        return cls("OKS")
    
    @schemas.classproperty
    def CUSTOM(cls):
        return cls("Custom")
