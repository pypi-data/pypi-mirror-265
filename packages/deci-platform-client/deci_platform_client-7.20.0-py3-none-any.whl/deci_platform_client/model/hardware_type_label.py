# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class HardwareTypeLabel(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An enumeration.
    """


    class MetaOapg:
        enum_value_to_name = {
            "Jetson Xavier NX 16GB": "JETSON_XAVIER_NX_16GB",
            "Jetson Nano 4GB": "JETSON_NANO_4GB",
            "Jetson AGX Xavier 32GB": "JETSON_AGX_XAVIER_32GB",
            "Jetson AGX Orin Development Kit": "JETSON_AGX_ORIN_DEVELOPMENT_KIT",
            "Jetson Orin NX 16GB": "JETSON_ORIN_NX_16GB",
            "Jetson Orin Nano 8GB": "JETSON_ORIN_NANO_8GB",
            "Jetson Orin Nano 4GB": "JETSON_ORIN_NANO_4GB",
            "EPYC (c5a.2xlarge)": "EPYC_C5A_2XLARGE",
            "AMD Rome EPYC 7002 (c5a.4xlarge)": "AMD_ROME_EPYC_7002_C5A_4XLARGE",
            "AMD Milan EPYC 7003 (m6a.4xlarge)": "AMD_MILAN_EPYC_7003_M6A_4XLARGE",
            "Cascade Lake (c5.4xlarge)": "CASCADE_LAKE_C5_4XLARGE",
            "Sky Lake (c5n.4xlarge)": "SKY_LAKE_C5N_4XLARGE",
            "Broadwell (m4.4xlarge)": "BROADWELL_M4_4XLARGE",
            "Ice Lake (m6i.4xlarge)": "ICE_LAKE_M6I_4XLARGE",
            "K80 (p2.xlarge)": "K80_P2_XLARGE",
            "V100 (p3.2xlarge)": "V100_P3_2XLARGE",
            "Skylake-SP (m5.2xlarge)": "SKYLAKESP_M5_2XLARGE",
            "T4 (g4dn.2xlarge)": "T4_G4DN_2XLARGE",
            "A10G (g5.2xlarge)": "A10G_G5_2XLARGE",
            "A100 40GB (a2-highgpu-1g)": "A100_40GB_A2HIGHGPU1G",
            "A100 80GB (a2-ultragpu-1g)": "A100_80GB_A2ULTRAGPU1G",
            "Cascade Lake (n2-standard-4)": "CASCADE_LAKE_N2STANDARD4",
            "Sapphire Rapids (c3-highcpu-8)": "SAPPHIRE_RAPIDS_C3HIGHCPU8",
            "L4 (g2-standard-8)": "L4_G2STANDARD8",
            "Intel NUC Tiger Lake": "INTEL_NUC_TIGER_LAKE",
            "NXP i.MX 8M mini": "NXP_I_MX_8M_MINI",
            "c5.2xlarge": "C5_2XLARGE",
            "m5.4xlarge": "M5_4XLARGE",
            "g4dn.xlarge": "G4DN_XLARGE",
            "g5.xlarge": "G5_XLARGE",
        }
    
    @schemas.classproperty
    def JETSON_XAVIER_NX_16GB(cls):
        return cls("Jetson Xavier NX 16GB")
    
    @schemas.classproperty
    def JETSON_NANO_4GB(cls):
        return cls("Jetson Nano 4GB")
    
    @schemas.classproperty
    def JETSON_AGX_XAVIER_32GB(cls):
        return cls("Jetson AGX Xavier 32GB")
    
    @schemas.classproperty
    def JETSON_AGX_ORIN_DEVELOPMENT_KIT(cls):
        return cls("Jetson AGX Orin Development Kit")
    
    @schemas.classproperty
    def JETSON_ORIN_NX_16GB(cls):
        return cls("Jetson Orin NX 16GB")
    
    @schemas.classproperty
    def JETSON_ORIN_NANO_8GB(cls):
        return cls("Jetson Orin Nano 8GB")
    
    @schemas.classproperty
    def JETSON_ORIN_NANO_4GB(cls):
        return cls("Jetson Orin Nano 4GB")
    
    @schemas.classproperty
    def EPYC_C5A_2XLARGE(cls):
        return cls("EPYC (c5a.2xlarge)")
    
    @schemas.classproperty
    def AMD_ROME_EPYC_7002_C5A_4XLARGE(cls):
        return cls("AMD Rome EPYC 7002 (c5a.4xlarge)")
    
    @schemas.classproperty
    def AMD_MILAN_EPYC_7003_M6A_4XLARGE(cls):
        return cls("AMD Milan EPYC 7003 (m6a.4xlarge)")
    
    @schemas.classproperty
    def CASCADE_LAKE_C5_4XLARGE(cls):
        return cls("Cascade Lake (c5.4xlarge)")
    
    @schemas.classproperty
    def SKY_LAKE_C5N_4XLARGE(cls):
        return cls("Sky Lake (c5n.4xlarge)")
    
    @schemas.classproperty
    def BROADWELL_M4_4XLARGE(cls):
        return cls("Broadwell (m4.4xlarge)")
    
    @schemas.classproperty
    def ICE_LAKE_M6I_4XLARGE(cls):
        return cls("Ice Lake (m6i.4xlarge)")
    
    @schemas.classproperty
    def K80_P2_XLARGE(cls):
        return cls("K80 (p2.xlarge)")
    
    @schemas.classproperty
    def V100_P3_2XLARGE(cls):
        return cls("V100 (p3.2xlarge)")
    
    @schemas.classproperty
    def SKYLAKESP_M5_2XLARGE(cls):
        return cls("Skylake-SP (m5.2xlarge)")
    
    @schemas.classproperty
    def T4_G4DN_2XLARGE(cls):
        return cls("T4 (g4dn.2xlarge)")
    
    @schemas.classproperty
    def A10G_G5_2XLARGE(cls):
        return cls("A10G (g5.2xlarge)")
    
    @schemas.classproperty
    def A100_40GB_A2HIGHGPU1G(cls):
        return cls("A100 40GB (a2-highgpu-1g)")
    
    @schemas.classproperty
    def A100_80GB_A2ULTRAGPU1G(cls):
        return cls("A100 80GB (a2-ultragpu-1g)")
    
    @schemas.classproperty
    def CASCADE_LAKE_N2STANDARD4(cls):
        return cls("Cascade Lake (n2-standard-4)")
    
    @schemas.classproperty
    def SAPPHIRE_RAPIDS_C3HIGHCPU8(cls):
        return cls("Sapphire Rapids (c3-highcpu-8)")
    
    @schemas.classproperty
    def L4_G2STANDARD8(cls):
        return cls("L4 (g2-standard-8)")
    
    @schemas.classproperty
    def INTEL_NUC_TIGER_LAKE(cls):
        return cls("Intel NUC Tiger Lake")
    
    @schemas.classproperty
    def NXP_I_MX_8M_MINI(cls):
        return cls("NXP i.MX 8M mini")
    
    @schemas.classproperty
    def C5_2XLARGE(cls):
        return cls("c5.2xlarge")
    
    @schemas.classproperty
    def M5_4XLARGE(cls):
        return cls("m5.4xlarge")
    
    @schemas.classproperty
    def G4DN_XLARGE(cls):
        return cls("g4dn.xlarge")
    
    @schemas.classproperty
    def G5_XLARGE(cls):
        return cls("g5.xlarge")
