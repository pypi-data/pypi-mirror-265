# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class ModelZooResponseMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "owner",
            "primaryHardware",
            "inputDimensions",
            "quantizationLevel",
            "modelId",
            "optimizationState",
            "datasetName",
            "architectureFamily",
            "version",
            "dlTaskLabel",
            "downloadsCount",
            "dlTask",
            "framework",
            "name",
        }
        
        class properties:
            modelId = schemas.UUIDSchema
            name = schemas.StrSchema
        
            @staticmethod
            def primaryHardware() -> typing.Type['HardwareOut']:
                return HardwareOut
            dlTask = schemas.StrSchema
        
            @staticmethod
            def quantizationLevel() -> typing.Type['QuantizationLevel']:
                return QuantizationLevel
            architectureFamily = schemas.StrSchema
        
            @staticmethod
            def optimizationState() -> typing.Type['ModelOptimizationState']:
                return ModelOptimizationState
            version = schemas.StrSchema
        
            @staticmethod
            def owner() -> typing.Type['BaseUserMetadata']:
                return BaseUserMetadata
            downloadsCount = schemas.IntSchema
        
            @staticmethod
            def datasetName() -> typing.Type['DatasetName']:
                return DatasetName
        
            @staticmethod
            def framework() -> typing.Type['FrameworkType']:
                return FrameworkType
            
            
            class inputDimensions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inputDimensions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def dlTaskLabel() -> typing.Type['DeepLearningTaskLabel']:
                return DeepLearningTaskLabel
            updateTime = schemas.DateTimeSchema
            creationTime = schemas.DateTimeSchema
            id = schemas.UUIDSchema
            deleted = schemas.BoolSchema
            
            
            class benchmark(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class additional_properties(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['ModelBenchmarkResultMetadata']:
                                return ModelBenchmarkResultMetadata
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['ModelBenchmarkResultMetadata'], typing.List['ModelBenchmarkResultMetadata']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'ModelBenchmarkResultMetadata':
                            return super().__getitem__(i)
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, list, tuple, ],
                ) -> 'benchmark':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            primaryBatchSize = schemas.IntSchema
            
            
            class accuracyMetrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AccuracyMetric']:
                        return AccuracyMetric
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AccuracyMetric'], typing.List['AccuracyMetric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accuracyMetrics':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AccuracyMetric':
                    return super().__getitem__(i)
            modelSize = schemas.NumberSchema
            optimizationStartDate = schemas.DateTimeSchema
            benchmarkStartDate = schemas.DateTimeSchema
            __annotations__ = {
                "modelId": modelId,
                "name": name,
                "primaryHardware": primaryHardware,
                "dlTask": dlTask,
                "quantizationLevel": quantizationLevel,
                "architectureFamily": architectureFamily,
                "optimizationState": optimizationState,
                "version": version,
                "owner": owner,
                "downloadsCount": downloadsCount,
                "datasetName": datasetName,
                "framework": framework,
                "inputDimensions": inputDimensions,
                "dlTaskLabel": dlTaskLabel,
                "updateTime": updateTime,
                "creationTime": creationTime,
                "id": id,
                "deleted": deleted,
                "benchmark": benchmark,
                "primaryBatchSize": primaryBatchSize,
                "accuracyMetrics": accuracyMetrics,
                "modelSize": modelSize,
                "optimizationStartDate": optimizationStartDate,
                "benchmarkStartDate": benchmarkStartDate,
            }
    
    owner: 'BaseUserMetadata'
    primaryHardware: 'HardwareOut'
    inputDimensions: MetaOapg.properties.inputDimensions
    quantizationLevel: 'QuantizationLevel'
    modelId: MetaOapg.properties.modelId
    optimizationState: 'ModelOptimizationState'
    datasetName: 'DatasetName'
    architectureFamily: MetaOapg.properties.architectureFamily
    version: MetaOapg.properties.version
    dlTaskLabel: 'DeepLearningTaskLabel'
    downloadsCount: MetaOapg.properties.downloadsCount
    dlTask: MetaOapg.properties.dlTask
    framework: 'FrameworkType'
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryHardware"]) -> 'HardwareOut': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dlTask"]) -> MetaOapg.properties.dlTask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantizationLevel"]) -> 'QuantizationLevel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["architectureFamily"]) -> MetaOapg.properties.architectureFamily: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optimizationState"]) -> 'ModelOptimizationState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'BaseUserMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloadsCount"]) -> MetaOapg.properties.downloadsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetName"]) -> 'DatasetName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["framework"]) -> 'FrameworkType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inputDimensions"]) -> MetaOapg.properties.inputDimensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dlTaskLabel"]) -> 'DeepLearningTaskLabel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateTime"]) -> MetaOapg.properties.updateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTime"]) -> MetaOapg.properties.creationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchmark"]) -> MetaOapg.properties.benchmark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryBatchSize"]) -> MetaOapg.properties.primaryBatchSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accuracyMetrics"]) -> MetaOapg.properties.accuracyMetrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modelSize"]) -> MetaOapg.properties.modelSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optimizationStartDate"]) -> MetaOapg.properties.optimizationStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benchmarkStartDate"]) -> MetaOapg.properties.benchmarkStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["modelId", "name", "primaryHardware", "dlTask", "quantizationLevel", "architectureFamily", "optimizationState", "version", "owner", "downloadsCount", "datasetName", "framework", "inputDimensions", "dlTaskLabel", "updateTime", "creationTime", "id", "deleted", "benchmark", "primaryBatchSize", "accuracyMetrics", "modelSize", "optimizationStartDate", "benchmarkStartDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelId"]) -> MetaOapg.properties.modelId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryHardware"]) -> 'HardwareOut': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dlTask"]) -> MetaOapg.properties.dlTask: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantizationLevel"]) -> 'QuantizationLevel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["architectureFamily"]) -> MetaOapg.properties.architectureFamily: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optimizationState"]) -> 'ModelOptimizationState': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> 'BaseUserMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloadsCount"]) -> MetaOapg.properties.downloadsCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetName"]) -> 'DatasetName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["framework"]) -> 'FrameworkType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inputDimensions"]) -> MetaOapg.properties.inputDimensions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dlTaskLabel"]) -> 'DeepLearningTaskLabel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateTime"]) -> typing.Union[MetaOapg.properties.updateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTime"]) -> typing.Union[MetaOapg.properties.creationTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> typing.Union[MetaOapg.properties.deleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchmark"]) -> typing.Union[MetaOapg.properties.benchmark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryBatchSize"]) -> typing.Union[MetaOapg.properties.primaryBatchSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accuracyMetrics"]) -> typing.Union[MetaOapg.properties.accuracyMetrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modelSize"]) -> typing.Union[MetaOapg.properties.modelSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optimizationStartDate"]) -> typing.Union[MetaOapg.properties.optimizationStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benchmarkStartDate"]) -> typing.Union[MetaOapg.properties.benchmarkStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["modelId", "name", "primaryHardware", "dlTask", "quantizationLevel", "architectureFamily", "optimizationState", "version", "owner", "downloadsCount", "datasetName", "framework", "inputDimensions", "dlTaskLabel", "updateTime", "creationTime", "id", "deleted", "benchmark", "primaryBatchSize", "accuracyMetrics", "modelSize", "optimizationStartDate", "benchmarkStartDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner: 'BaseUserMetadata',
        primaryHardware: 'HardwareOut',
        inputDimensions: typing.Union[MetaOapg.properties.inputDimensions, list, tuple, ],
        quantizationLevel: 'QuantizationLevel',
        modelId: typing.Union[MetaOapg.properties.modelId, str, uuid.UUID, ],
        optimizationState: 'ModelOptimizationState',
        datasetName: 'DatasetName',
        architectureFamily: typing.Union[MetaOapg.properties.architectureFamily, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        dlTaskLabel: 'DeepLearningTaskLabel',
        downloadsCount: typing.Union[MetaOapg.properties.downloadsCount, decimal.Decimal, int, ],
        dlTask: typing.Union[MetaOapg.properties.dlTask, str, ],
        framework: 'FrameworkType',
        name: typing.Union[MetaOapg.properties.name, str, ],
        updateTime: typing.Union[MetaOapg.properties.updateTime, str, datetime, schemas.Unset] = schemas.unset,
        creationTime: typing.Union[MetaOapg.properties.creationTime, str, datetime, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        deleted: typing.Union[MetaOapg.properties.deleted, bool, schemas.Unset] = schemas.unset,
        benchmark: typing.Union[MetaOapg.properties.benchmark, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        primaryBatchSize: typing.Union[MetaOapg.properties.primaryBatchSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        accuracyMetrics: typing.Union[MetaOapg.properties.accuracyMetrics, list, tuple, schemas.Unset] = schemas.unset,
        modelSize: typing.Union[MetaOapg.properties.modelSize, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        optimizationStartDate: typing.Union[MetaOapg.properties.optimizationStartDate, str, datetime, schemas.Unset] = schemas.unset,
        benchmarkStartDate: typing.Union[MetaOapg.properties.benchmarkStartDate, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelZooResponseMetadata':
        return super().__new__(
            cls,
            *_args,
            owner=owner,
            primaryHardware=primaryHardware,
            inputDimensions=inputDimensions,
            quantizationLevel=quantizationLevel,
            modelId=modelId,
            optimizationState=optimizationState,
            datasetName=datasetName,
            architectureFamily=architectureFamily,
            version=version,
            dlTaskLabel=dlTaskLabel,
            downloadsCount=downloadsCount,
            dlTask=dlTask,
            framework=framework,
            name=name,
            updateTime=updateTime,
            creationTime=creationTime,
            id=id,
            deleted=deleted,
            benchmark=benchmark,
            primaryBatchSize=primaryBatchSize,
            accuracyMetrics=accuracyMetrics,
            modelSize=modelSize,
            optimizationStartDate=optimizationStartDate,
            benchmarkStartDate=benchmarkStartDate,
            _configuration=_configuration,
            **kwargs,
        )

from deci_platform_client.model.accuracy_metric import AccuracyMetric
from deci_platform_client.model.base_user_metadata import BaseUserMetadata
from deci_platform_client.model.dataset_name import DatasetName
from deci_platform_client.model.deep_learning_task_label import DeepLearningTaskLabel
from deci_platform_client.model.framework_type import FrameworkType
from deci_platform_client.model.hardware_out import HardwareOut
from deci_platform_client.model.model_benchmark_result_metadata import ModelBenchmarkResultMetadata
from deci_platform_client.model.model_optimization_state import ModelOptimizationState
from deci_platform_client.model.quantization_level import QuantizationLevel
