# coding: utf-8

"""
    Deci Platform API

    Train, deploy, optimize and serve your models using Deci's platform, in your cloud or on premise.  # noqa: E501

    The version of the OpenAPI document: 4.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from deci_platform_client import schemas  # noqa: F401


class WorkspaceStatsData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A base class for all of Deci's model classes.
A model stores data in constant fields, and let us manipulate the data in a more readable way.
    """


    class MetaOapg:
        required = {
            "workspaceId",
        }
        
        class properties:
            workspaceId = schemas.UUIDSchema
            baselineModelsCount = schemas.IntSchema
            autonacModelsCount = schemas.IntSchema
            
            
            class inProgress(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'inProgress':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class completed(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.IntSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'completed':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "workspaceId": workspaceId,
                "baselineModelsCount": baselineModelsCount,
                "autonacModelsCount": autonacModelsCount,
                "inProgress": inProgress,
                "completed": completed,
            }
    
    workspaceId: MetaOapg.properties.workspaceId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baselineModelsCount"]) -> MetaOapg.properties.baselineModelsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autonacModelsCount"]) -> MetaOapg.properties.autonacModelsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inProgress"]) -> MetaOapg.properties.inProgress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completed"]) -> MetaOapg.properties.completed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["workspaceId", "baselineModelsCount", "autonacModelsCount", "inProgress", "completed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceId"]) -> MetaOapg.properties.workspaceId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baselineModelsCount"]) -> typing.Union[MetaOapg.properties.baselineModelsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autonacModelsCount"]) -> typing.Union[MetaOapg.properties.autonacModelsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inProgress"]) -> typing.Union[MetaOapg.properties.inProgress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completed"]) -> typing.Union[MetaOapg.properties.completed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["workspaceId", "baselineModelsCount", "autonacModelsCount", "inProgress", "completed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        workspaceId: typing.Union[MetaOapg.properties.workspaceId, str, uuid.UUID, ],
        baselineModelsCount: typing.Union[MetaOapg.properties.baselineModelsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        autonacModelsCount: typing.Union[MetaOapg.properties.autonacModelsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        inProgress: typing.Union[MetaOapg.properties.inProgress, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        completed: typing.Union[MetaOapg.properties.completed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WorkspaceStatsData':
        return super().__new__(
            cls,
            *_args,
            workspaceId=workspaceId,
            baselineModelsCount=baselineModelsCount,
            autonacModelsCount=autonacModelsCount,
            inProgress=inProgress,
            completed=completed,
            _configuration=_configuration,
            **kwargs,
        )
