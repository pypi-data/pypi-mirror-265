[tool.poetry]
name = "revoize"
version = "0.0.1"
description = "Revoize Python SDK"
authors = ["Mateusz Krainski <mateusz.krainski@dac.digital>"]
license = "proprietary"
readme = "README.md"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.dependencies]
python = "^3.9"
click = "^8.1.7"
requests = "^2.31.0"
pydantic = "^2.6.4"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.0.0"
flake8-pyproject = "^1.2.3"
poetry-bumpversion = "^0.3.2"
pytest = "^8.0.0"
flake8-black = "^0.3.6"
black = "^24.3.0"
pytest-env = "^1.1.3"
coverage = "^7.4.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
enhance.script = "scripts.enhance_cli:_enhance"

[tool.black]
line-length = 88
target-version = ["py311"]

## --------------------------------------------
# The section below defines management scripts which are shared across all Revoize packages.
# If you feel like you need to make a change there, consider making a change to the
# Python Package Template and all other packages as well.
## --------------------------------------------

[tool.flake8]
exclude = ["venv", ".venv"]
max-line-length = 88

[tool.poe.tasks.package-name]
shell="""
version=$(poetry version --no-ansi)
package_info=($version)  # Split string by space
echo ${package_info[0]}
"""

[tool.poe.tasks.lint]
cmd = "poetry run flake8"

[tool.poe.tasks.build]
cmd = "poetry build"

[tool.poe.tasks._version]
cmd = "poetry version --no-ansi -s"

[tool.poe.tasks._published_version]
shell = "aws codeartifact list-package-versions --package revoize-python-template --domain-owner $CODEARTIFACT_DOMAIN_OWNER --domain $CODEARTIFACT_DOMAIN --repository $CODEARTIFACT_REPOSITORY --format pypi | jq -r '[.defaultDisplayVersion][0]'"

[tool.poe.tasks.publish]
help = "Publish this package to our internal package repository at AWS Codeartifact"
cmd = "poetry publish"
deps = [
    
    "build"
]

[tool.poe.tasks._check_version]
cmd = """
poetry run python -c '
from packaging import version
import os
import sys

current_version = os.getenv("CURRENT_VERSION")
published_version = os.getenv("PUBLISHED_VERSION")

if version.parse(current_version) <= version.parse(published_version):
    print("Current package version is less or equal to published one.")
    print(f"Current version: {current_version}")
    print(f"Published version: {published_version}")
    print("Run `poe bump-version major|minor|patch` to upgrade the version before publishing.")
    # There is a version mismatch, exit with a non-zero code to break the task sequence
    sys.exit(1)
'
"""
uses = {CURRENT_VERSION = "_version", PUBLISHED_VERSION = "_published_version"}

[tool.poe.tasks.bump-version]
cmd = "poetry version --no-ansi $version_rule"
args = [
  { name = "version_rule", positional=true, help = "can be one of 'major', 'minor', 'patch", required=true }
]

[tool.poe.tasks.docker-build]
shell = """
docker build . \
    -t $PACKAGE_NAME
"""
