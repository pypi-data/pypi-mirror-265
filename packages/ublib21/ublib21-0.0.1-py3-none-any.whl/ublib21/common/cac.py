from ublib21.common import cac_types, cbc
from typing import List

class AcceptanceTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class AccessoryRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class AccountingContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class AccountingCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class AccountingSupplierParty(cac_types.__SupplierPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		data_sending_capability:cbc.DataSendingCapability=None,
		party:'Party'=None,
		despatch_contact:'DespatchContact'=None,
		accounting_contact:'AccountingContact'=None,
		seller_contact:'SellerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		additional_account_id,
		data_sending_capability,
		party,
		despatch_contact,
		accounting_contact,
		seller_contact, xml_namespaces)
class ActivityDataLine(cac_types.__ActivityDataLineType):

	def __init__(self,		id_:cbc.ID,
		supply_chain_activity_type_code:cbc.SupplyChainActivityTypeCode,
		activity_origin_location:'ActivityOriginLocation',
		buyer_customer_party:'BuyerCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		activity_period:'ActivityPeriod'=None,
		activity_final_location:'ActivityFinalLocation'=None,
		sales_item:List['SalesItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		supply_chain_activity_type_code,
		activity_origin_location,
		buyer_customer_party,
		seller_supplier_party,
		activity_period,
		activity_final_location,
		sales_item, xml_namespaces)
class ActivityFinalLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class ActivityOriginLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class ActivityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ActivityProperty(cac_types.__ActivityPropertyType):

	def __init__(self,		name:cbc.Name,
		value:cbc.Value, xml_namespaces = None):
		super().__init__(
		name,
		value, xml_namespaces)
class ActualArrivalTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ActualDepartureTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ActualPackage(cac_types.__PackageType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		returnable_material_indicator:cbc.ReturnableMaterialIndicator=None,
		package_level_code:cbc.PackageLevelCode=None,
		packaging_type_code:cbc.PackagingTypeCode=None,
		packing_material:List[cbc.PackingMaterial]=None,
		trace_id:cbc.TraceID=None,
		contained_package:List['ContainedPackage']=None,
		containing_transport_equipment:'ContainingTransportEquipment'=None,
		goods_item:List['GoodsItem']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		delivery_unit:List['DeliveryUnit']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		returnable_material_indicator,
		package_level_code,
		packaging_type_code,
		packing_material,
		trace_id,
		contained_package,
		containing_transport_equipment,
		goods_item,
		measurement_dimension,
		delivery_unit,
		delivery,
		pickup,
		despatch, xml_namespaces)
class ActualPickupTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ActualWaypointTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class AdditionalCommodityClassification(cac_types.__CommodityClassificationType):

	def __init__(self,		nature_code:cbc.NatureCode=None,
		cargo_type_code:cbc.CargoTypeCode=None,
		commodity_code:cbc.CommodityCode=None,
		item_classification_code:cbc.ItemClassificationCode=None, xml_namespaces = None):
		super().__init__(
		nature_code,
		cargo_type_code,
		commodity_code,
		item_classification_code, xml_namespaces)
class AdditionalDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class AdditionalDocumentResponse(cac_types.__DocumentResponseType):

	def __init__(self,		response:'Response',
		document_reference:List['DocumentReference']=None,
		issuer_party:'IssuerParty'=None,
		recipient_party:'RecipientParty'=None,
		line_response:List['LineResponse']=None, xml_namespaces = None):
		super().__init__(
		response,
		document_reference,
		issuer_party,
		recipient_party,
		line_response, xml_namespaces)
class AdditionalInformationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class AdditionalItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class AdditionalItemProperty(cac_types.__ItemPropertyType):

	def __init__(self,		name:cbc.Name,
		id_:cbc.ID=None,
		name_code:cbc.NameCode=None,
		test_method:cbc.TestMethod=None,
		value:cbc.Value=None,
		value_quantity:cbc.ValueQuantity=None,
		value_qualifier:List[cbc.ValueQualifier]=None,
		importance_code:cbc.ImportanceCode=None,
		list_value:List[cbc.ListValue]=None,
		usability_period:'UsabilityPeriod'=None,
		item_property_group:List['ItemPropertyGroup']=None,
		range_dimension:'RangeDimension'=None,
		item_property_range:'ItemPropertyRange'=None, xml_namespaces = None):
		super().__init__(
		name,
		id_,
		name_code,
		test_method,
		value,
		value_quantity,
		value_qualifier,
		importance_code,
		list_value,
		usability_period,
		item_property_group,
		range_dimension,
		item_property_range, xml_namespaces)
class AdditionalQualifyingParty(cac_types.__QualifyingPartyType):

	def __init__(self,		participation_percent:cbc.ParticipationPercent=None,
		personal_situation:List[cbc.PersonalSituation]=None,
		operating_years_quantity:cbc.OperatingYearsQuantity=None,
		employee_quantity:cbc.EmployeeQuantity=None,
		business_classification_evidence_id:cbc.BusinessClassificationEvidenceID=None,
		business_identity_evidence_id:cbc.BusinessIdentityEvidenceID=None,
		tenderer_role_code:cbc.TendererRoleCode=None,
		business_classification_scheme:'BusinessClassificationScheme'=None,
		technical_capability:List['TechnicalCapability']=None,
		financial_capability:List['FinancialCapability']=None,
		completed_task:List['CompletedTask']=None,
		declaration:List['Declaration']=None,
		party:'Party'=None,
		economic_operator_role:'EconomicOperatorRole'=None, xml_namespaces = None):
		super().__init__(
		participation_percent,
		personal_situation,
		operating_years_quantity,
		employee_quantity,
		business_classification_evidence_id,
		business_identity_evidence_id,
		tenderer_role_code,
		business_classification_scheme,
		technical_capability,
		financial_capability,
		completed_task,
		declaration,
		party,
		economic_operator_role, xml_namespaces)
class AdditionalTemperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class AdditionalTransportationService(cac_types.__TransportationServiceType):

	def __init__(self,		transport_service_code:cbc.TransportServiceCode,
		tariff_class_code:cbc.TariffClassCode=None,
		priority:cbc.Priority=None,
		freight_rate_class_code:cbc.FreightRateClassCode=None,
		transportation_service_description:List[cbc.TransportationServiceDescription]=None,
		transportation_service_details_uri:cbc.TransportationServiceDetailsURI=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		name:cbc.Name=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		transport_equipment:List['TransportEquipment']=None,
		supported_transport_equipment:List['SupportedTransportEquipment']=None,
		unsupported_transport_equipment:List['UnsupportedTransportEquipment']=None,
		commodity_classification:List['CommodityClassification']=None,
		supported_commodity_classification:List['SupportedCommodityClassification']=None,
		unsupported_commodity_classification:List['UnsupportedCommodityClassification']=None,
		total_capacity_dimension:'TotalCapacityDimension'=None,
		shipment_stage:List['ShipmentStage']=None,
		transport_event:List['TransportEvent']=None,
		responsible_transport_service_provider_party:'ResponsibleTransportServiceProviderParty'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		estimated_duration_period:'EstimatedDurationPeriod'=None,
		scheduled_service_frequency:List['ScheduledServiceFrequency']=None, xml_namespaces = None):
		super().__init__(
		transport_service_code,
		tariff_class_code,
		priority,
		freight_rate_class_code,
		transportation_service_description,
		transportation_service_details_uri,
		nomination_date,
		nomination_time,
		name,
		sequence_numeric,
		transport_equipment,
		supported_transport_equipment,
		unsupported_transport_equipment,
		commodity_classification,
		supported_commodity_classification,
		unsupported_commodity_classification,
		total_capacity_dimension,
		shipment_stage,
		transport_event,
		responsible_transport_service_provider_party,
		environmental_emission,
		estimated_duration_period,
		scheduled_service_frequency, xml_namespaces)
class Address(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class AddressLine(cac_types.__AddressLineType):

	def __init__(self,		line:cbc.Line, xml_namespaces = None):
		super().__init__(
		line, xml_namespaces)
class AgentParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class AirTransport(cac_types.__AirTransportType):

	def __init__(self,		aircraft_id:cbc.AircraftID, xml_namespaces = None):
		super().__init__(
		aircraft_id, xml_namespaces)
class AllowanceCharge(cac_types.__AllowanceChargeType):

	def __init__(self,		charge_indicator:cbc.ChargeIndicator,
		amount:cbc.Amount,
		id_:cbc.ID=None,
		allowance_charge_reason_code:cbc.AllowanceChargeReasonCode=None,
		allowance_charge_reason:List[cbc.AllowanceChargeReason]=None,
		multiplier_factor_numeric:cbc.MultiplierFactorNumeric=None,
		prepaid_indicator:cbc.PrepaidIndicator=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		base_amount:cbc.BaseAmount=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_category:List['TaxCategory']=None,
		tax_total:'TaxTotal'=None,
		payment_means:List['PaymentMeans']=None, xml_namespaces = None):
		super().__init__(
		charge_indicator,
		amount,
		id_,
		allowance_charge_reason_code,
		allowance_charge_reason,
		multiplier_factor_numeric,
		prepaid_indicator,
		sequence_numeric,
		base_amount,
		accounting_cost_code,
		accounting_cost,
		per_unit_amount,
		tax_category,
		tax_total,
		payment_means, xml_namespaces)
class AllowedSubcontractTerms(cac_types.__SubcontractTermsType):

	def __init__(self,		rate:cbc.Rate=None,
		unknown_price_indicator:cbc.UnknownPriceIndicator=None,
		description:List[cbc.Description]=None,
		amount:cbc.Amount=None,
		subcontracting_conditions_code:cbc.SubcontractingConditionsCode=None,
		maximum_percent:cbc.MaximumPercent=None,
		minimum_percent:cbc.MinimumPercent=None, xml_namespaces = None):
		super().__init__(
		rate,
		unknown_price_indicator,
		description,
		amount,
		subcontracting_conditions_code,
		maximum_percent,
		minimum_percent, xml_namespaces)
class AlternativeConditionPrice(cac_types.__PriceType):

	def __init__(self,		price_amount:cbc.PriceAmount,
		base_quantity:cbc.BaseQuantity=None,
		price_change_reason:List[cbc.PriceChangeReason]=None,
		price_type_code:cbc.PriceTypeCode=None,
		price_type:cbc.PriceType=None,
		orderable_unit_factor_rate:cbc.OrderableUnitFactorRate=None,
		validity_period:List['ValidityPeriod']=None,
		price_list:'PriceList'=None,
		allowance_charge:List['AllowanceCharge']=None,
		pricing_exchange_rate:'PricingExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		base_quantity,
		price_change_reason,
		price_type_code,
		price_type,
		orderable_unit_factor_rate,
		validity_period,
		price_list,
		allowance_charge,
		pricing_exchange_rate, xml_namespaces)
class AlternativeDeliveryLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class AlternativeLineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class AnticipatedMonetaryTotal(cac_types.__MonetaryTotalType):

	def __init__(self,		payable_amount:cbc.PayableAmount,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_exclusive_amount:cbc.TaxExclusiveAmount=None,
		tax_inclusive_amount:cbc.TaxInclusiveAmount=None,
		allowance_total_amount:cbc.AllowanceTotalAmount=None,
		charge_total_amount:cbc.ChargeTotalAmount=None,
		prepaid_amount:cbc.PrepaidAmount=None,
		payable_rounding_amount:cbc.PayableRoundingAmount=None,
		payable_alternative_amount:cbc.PayableAlternativeAmount=None, xml_namespaces = None):
		super().__init__(
		payable_amount,
		line_extension_amount,
		tax_exclusive_amount,
		tax_inclusive_amount,
		allowance_total_amount,
		charge_total_amount,
		prepaid_amount,
		payable_rounding_amount,
		payable_alternative_amount, xml_namespaces)
class AppealInformationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class AppealReceiverParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class AppealTerms(cac_types.__AppealTermsType):

	def __init__(self,		description:List[cbc.Description]=None,
		presentation_period:'PresentationPeriod'=None,
		appeal_information_party:'AppealInformationParty'=None,
		appeal_receiver_party:'AppealReceiverParty'=None,
		mediation_party:'MediationParty'=None, xml_namespaces = None):
		super().__init__(
		description,
		presentation_period,
		appeal_information_party,
		appeal_receiver_party,
		mediation_party, xml_namespaces)
class ApplicableAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class ApplicablePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ApplicableRegulation(cac_types.__RegulationType):

	def __init__(self,		name:cbc.Name,
		legal_reference:cbc.LegalReference=None,
		ontology_uri:cbc.OntologyURI=None, xml_namespaces = None):
		super().__init__(
		name,
		legal_reference,
		ontology_uri, xml_namespaces)
class ApplicableTaxCategory(cac_types.__TaxCategoryType):

	def __init__(self,		tax_scheme:'TaxScheme',
		id_:cbc.ID=None,
		name:cbc.Name=None,
		percent:cbc.Percent=None,
		base_unit_measure:cbc.BaseUnitMeasure=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_exemption_reason_code:cbc.TaxExemptionReasonCode=None,
		tax_exemption_reason:List[cbc.TaxExemptionReason]=None,
		tier_range:cbc.TierRange=None,
		tier_rate_percent:cbc.TierRatePercent=None, xml_namespaces = None):
		super().__init__(
		tax_scheme,
		id_,
		name,
		percent,
		base_unit_measure,
		per_unit_amount,
		tax_exemption_reason_code,
		tax_exemption_reason,
		tier_range,
		tier_rate_percent, xml_namespaces)
class ApplicableTerritoryAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class ApplicableTransportMeans(cac_types.__TransportMeansType):

	def __init__(self,		journey_id:cbc.JourneyID=None,
		registration_nationality_id:cbc.RegistrationNationalityID=None,
		registration_nationality:List[cbc.RegistrationNationality]=None,
		direction_code:cbc.DirectionCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		trade_service_code:cbc.TradeServiceCode=None,
		stowage:'Stowage'=None,
		air_transport:'AirTransport'=None,
		road_transport:'RoadTransport'=None,
		rail_transport:'RailTransport'=None,
		maritime_transport:'MaritimeTransport'=None,
		owner_party:'OwnerParty'=None,
		measurement_dimension:List['MeasurementDimension']=None, xml_namespaces = None):
		super().__init__(
		journey_id,
		registration_nationality_id,
		registration_nationality,
		direction_code,
		transport_means_type_code,
		trade_service_code,
		stowage,
		air_transport,
		road_transport,
		rail_transport,
		maritime_transport,
		owner_party,
		measurement_dimension, xml_namespaces)
class AtLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class AttachedTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class Attachment(cac_types.__AttachmentType):

	def __init__(self,		embedded_document_binary_object:cbc.EmbeddedDocumentBinaryObject=None,
		external_reference:'ExternalReference'=None, xml_namespaces = None):
		super().__init__(
		embedded_document_binary_object,
		external_reference, xml_namespaces)
class AuctionTerms(cac_types.__AuctionTermsType):

	def __init__(self,		auction_constraint_indicator:cbc.AuctionConstraintIndicator=None,
		justification_description:List[cbc.JustificationDescription]=None,
		description:List[cbc.Description]=None,
		process_description:List[cbc.ProcessDescription]=None,
		conditions_description:List[cbc.ConditionsDescription]=None,
		electronic_device_description:List[cbc.ElectronicDeviceDescription]=None,
		auction_uri:cbc.AuctionURI=None, xml_namespaces = None):
		super().__init__(
		auction_constraint_indicator,
		justification_description,
		description,
		process_description,
		conditions_description,
		electronic_device_description,
		auction_uri, xml_namespaces)
class AvailabilityTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class AwardedTenderedProject(cac_types.__TenderedProjectType):

	def __init__(self,		variant_id:cbc.VariantID=None,
		fee_amount:cbc.FeeAmount=None,
		fee_description:List[cbc.FeeDescription]=None,
		tender_envelope_id:cbc.TenderEnvelopeID=None,
		tender_envelope_type_code:cbc.TenderEnvelopeTypeCode=None,
		procurement_project_lot:'ProcurementProjectLot'=None,
		evidence_document_reference:List['EvidenceDocumentReference']=None,
		tax_total:List['TaxTotal']=None,
		legal_monetary_total:'LegalMonetaryTotal'=None,
		tender_line:List['TenderLine']=None,
		awarding_criterion_response:List['AwardingCriterionResponse']=None, xml_namespaces = None):
		super().__init__(
		variant_id,
		fee_amount,
		fee_description,
		tender_envelope_id,
		tender_envelope_type_code,
		procurement_project_lot,
		evidence_document_reference,
		tax_total,
		legal_monetary_total,
		tender_line,
		awarding_criterion_response, xml_namespaces)
class AwardingCriterion(cac_types.__AwardingCriterionType):

	def __init__(self,		id_:cbc.ID=None,
		awarding_criterion_type_code:cbc.AwardingCriterionTypeCode=None,
		description:List[cbc.Description]=None,
		weight_numeric:cbc.WeightNumeric=None,
		weight:List[cbc.Weight]=None,
		calculation_expression:List[cbc.CalculationExpression]=None,
		calculation_expression_code:cbc.CalculationExpressionCode=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_amount:cbc.MinimumAmount=None,
		maximum_amount:cbc.MaximumAmount=None,
		minimum_improvement_bid:List[cbc.MinimumImprovementBid]=None,
		subordinate_awarding_criterion:List['SubordinateAwardingCriterion']=None, xml_namespaces = None):
		super().__init__(
		id_,
		awarding_criterion_type_code,
		description,
		weight_numeric,
		weight,
		calculation_expression,
		calculation_expression_code,
		minimum_quantity,
		maximum_quantity,
		minimum_amount,
		maximum_amount,
		minimum_improvement_bid,
		subordinate_awarding_criterion, xml_namespaces)
class AwardingCriterionResponse(cac_types.__AwardingCriterionResponseType):

	def __init__(self,		id_:cbc.ID=None,
		awarding_criterion_id:cbc.AwardingCriterionID=None,
		awarding_criterion_description:List[cbc.AwardingCriterionDescription]=None,
		description:List[cbc.Description]=None,
		quantity:cbc.Quantity=None,
		amount:cbc.Amount=None,
		subordinate_awarding_criterion_response:List['SubordinateAwardingCriterionResponse']=None, xml_namespaces = None):
		super().__init__(
		id_,
		awarding_criterion_id,
		awarding_criterion_description,
		description,
		quantity,
		amount,
		subordinate_awarding_criterion_response, xml_namespaces)
class AwardingTerms(cac_types.__AwardingTermsType):

	def __init__(self,		weighting_algorithm_code:cbc.WeightingAlgorithmCode=None,
		description:List[cbc.Description]=None,
		technical_committee_description:List[cbc.TechnicalCommitteeDescription]=None,
		low_tenders_description:List[cbc.LowTendersDescription]=None,
		prize_indicator:cbc.PrizeIndicator=None,
		prize_description:List[cbc.PrizeDescription]=None,
		payment_description:List[cbc.PaymentDescription]=None,
		followup_contract_indicator:cbc.FollowupContractIndicator=None,
		binding_on_buyer_indicator:cbc.BindingOnBuyerIndicator=None,
		awarding_criterion:List['AwardingCriterion']=None,
		technical_committee_person:List['TechnicalCommitteePerson']=None, xml_namespaces = None):
		super().__init__(
		weighting_algorithm_code,
		description,
		technical_committee_description,
		low_tenders_description,
		prize_indicator,
		prize_description,
		payment_description,
		followup_contract_indicator,
		binding_on_buyer_indicator,
		awarding_criterion,
		technical_committee_person, xml_namespaces)
class BeneficiaryParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class BillOfLadingHolderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class BillToParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class BillingReference(cac_types.__BillingReferenceType):

	def __init__(self,		invoice_document_reference:'InvoiceDocumentReference'=None,
		self_billed_invoice_document_reference:'SelfBilledInvoiceDocumentReference'=None,
		credit_note_document_reference:'CreditNoteDocumentReference'=None,
		self_billed_credit_note_document_reference:'SelfBilledCreditNoteDocumentReference'=None,
		debit_note_document_reference:'DebitNoteDocumentReference'=None,
		reminder_document_reference:'ReminderDocumentReference'=None,
		additional_document_reference:'AdditionalDocumentReference'=None,
		billing_reference_line:List['BillingReferenceLine']=None, xml_namespaces = None):
		super().__init__(
		invoice_document_reference,
		self_billed_invoice_document_reference,
		credit_note_document_reference,
		self_billed_credit_note_document_reference,
		debit_note_document_reference,
		reminder_document_reference,
		additional_document_reference,
		billing_reference_line, xml_namespaces)
class BillingReferenceLine(cac_types.__BillingReferenceLineType):

	def __init__(self,		id_:cbc.ID,
		amount:cbc.Amount=None,
		allowance_charge:List['AllowanceCharge']=None, xml_namespaces = None):
		super().__init__(
		id_,
		amount,
		allowance_charge, xml_namespaces)
class BonusPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class Branch(cac_types.__BranchType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		financial_institution:'FinancialInstitution'=None,
		address:'Address'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		financial_institution,
		address, xml_namespaces)
class BudgetAccount(cac_types.__BudgetAccountType):

	def __init__(self,		id_:cbc.ID=None,
		budget_year_numeric:cbc.BudgetYearNumeric=None,
		required_classification_scheme:'RequiredClassificationScheme'=None, xml_namespaces = None):
		super().__init__(
		id_,
		budget_year_numeric,
		required_classification_scheme, xml_namespaces)
class BudgetAccountLine(cac_types.__BudgetAccountLineType):

	def __init__(self,		id_:cbc.ID=None,
		total_amount:cbc.TotalAmount=None,
		budget_account:List['BudgetAccount']=None, xml_namespaces = None):
		super().__init__(
		id_,
		total_amount,
		budget_account, xml_namespaces)
class BusinessClassificationScheme(cac_types.__ClassificationSchemeType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		last_revision_date:cbc.LastRevisionDate=None,
		last_revision_time:cbc.LastRevisionTime=None,
		note:List[cbc.Note]=None,
		name:cbc.Name=None,
		description:List[cbc.Description]=None,
		agency_id:cbc.AgencyID=None,
		agency_name:cbc.AgencyName=None,
		version_id:cbc.VersionID=None,
		uri:cbc.URI=None,
		scheme_uri:cbc.SchemeURI=None,
		language_id:cbc.LanguageID=None,
		classification_category:List['ClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		last_revision_date,
		last_revision_time,
		note,
		name,
		description,
		agency_id,
		agency_name,
		version_id,
		uri,
		scheme_uri,
		language_id,
		classification_category, xml_namespaces)
class BuyerContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class BuyerCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class BuyerProposedSubstituteLineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class BuyersItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class CallDuty(cac_types.__DutyType):

	def __init__(self,		amount:cbc.Amount,
		duty:cbc.Duty=None,
		duty_code:cbc.DutyCode=None,
		tax_category:'TaxCategory'=None, xml_namespaces = None):
		super().__init__(
		amount,
		duty,
		duty_code,
		tax_category, xml_namespaces)
class CallForTendersDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class CallForTendersLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class Capability(cac_types.__CapabilityType):

	def __init__(self,		capability_type_code:cbc.CapabilityTypeCode=None,
		description:List[cbc.Description]=None,
		value_amount:cbc.ValueAmount=None,
		value_quantity:cbc.ValueQuantity=None,
		evidence_supplied:List['EvidenceSupplied']=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		capability_type_code,
		description,
		value_amount,
		value_quantity,
		evidence_supplied,
		validity_period, xml_namespaces)
class CardAccount(cac_types.__CardAccountType):

	def __init__(self,		primary_account_number_id:cbc.PrimaryAccountNumberID,
		network_id:cbc.NetworkID,
		card_type_code:cbc.CardTypeCode=None,
		validity_start_date:cbc.ValidityStartDate=None,
		expiry_date:cbc.ExpiryDate=None,
		issuer_id:cbc.IssuerID=None,
		issue_number_id:cbc.IssueNumberID=None,
		cv2_id:cbc.CV2ID=None,
		card_chip_code:cbc.CardChipCode=None,
		chip_application_id:cbc.ChipApplicationID=None,
		holder_name:cbc.HolderName=None, xml_namespaces = None):
		super().__init__(
		primary_account_number_id,
		network_id,
		card_type_code,
		validity_start_date,
		expiry_date,
		issuer_id,
		issue_number_id,
		cv2_id,
		card_chip_code,
		chip_application_id,
		holder_name, xml_namespaces)
class CarrierParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class CatalogueDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class CatalogueItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class CatalogueItemSpecificationUpdateLine(cac_types.__CatalogueItemSpecificationUpdateLineType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		contractor_customer_party:'ContractorCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		contractor_customer_party,
		seller_supplier_party, xml_namespaces)
class CatalogueLine(cac_types.__CatalogueLineType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		action_code:cbc.ActionCode=None,
		life_cycle_status_code:cbc.LifeCycleStatusCode=None,
		contract_subdivision:cbc.ContractSubdivision=None,
		note:List[cbc.Note]=None,
		orderable_indicator:cbc.OrderableIndicator=None,
		orderable_unit:cbc.OrderableUnit=None,
		content_unit_quantity:cbc.ContentUnitQuantity=None,
		order_quantity_increment_numeric:cbc.OrderQuantityIncrementNumeric=None,
		minimum_order_quantity:cbc.MinimumOrderQuantity=None,
		maximum_order_quantity:cbc.MaximumOrderQuantity=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		pack_level_code:cbc.PackLevelCode=None,
		contractor_customer_party:'ContractorCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		warranty_party:'WarrantyParty'=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		line_validity_period:'LineValidityPeriod'=None,
		item_comparison:List['ItemComparison']=None,
		component_related_item:List['ComponentRelatedItem']=None,
		accessory_related_item:List['AccessoryRelatedItem']=None,
		required_related_item:List['RequiredRelatedItem']=None,
		replacement_related_item:List['ReplacementRelatedItem']=None,
		complementary_related_item:List['ComplementaryRelatedItem']=None,
		replaced_related_item:List['ReplacedRelatedItem']=None,
		required_item_location_quantity:List['RequiredItemLocationQuantity']=None,
		document_reference:List['DocumentReference']=None,
		keyword_item_property:List['KeywordItemProperty']=None,
		call_for_tenders_line_reference:'CallForTendersLineReference'=None,
		call_for_tenders_document_reference:'CallForTendersDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		action_code,
		life_cycle_status_code,
		contract_subdivision,
		note,
		orderable_indicator,
		orderable_unit,
		content_unit_quantity,
		order_quantity_increment_numeric,
		minimum_order_quantity,
		maximum_order_quantity,
		warranty_information,
		pack_level_code,
		contractor_customer_party,
		seller_supplier_party,
		warranty_party,
		warranty_validity_period,
		line_validity_period,
		item_comparison,
		component_related_item,
		accessory_related_item,
		required_related_item,
		replacement_related_item,
		complementary_related_item,
		replaced_related_item,
		required_item_location_quantity,
		document_reference,
		keyword_item_property,
		call_for_tenders_line_reference,
		call_for_tenders_document_reference, xml_namespaces)
class CatalogueLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class CataloguePricingUpdateLine(cac_types.__CataloguePricingUpdateLineType):

	def __init__(self,		id_:cbc.ID,
		contractor_customer_party:'ContractorCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		required_item_location_quantity:List['RequiredItemLocationQuantity']=None, xml_namespaces = None):
		super().__init__(
		id_,
		contractor_customer_party,
		seller_supplier_party,
		required_item_location_quantity, xml_namespaces)
class CatalogueReference(cac_types.__CatalogueReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		revision_date:cbc.RevisionDate=None,
		revision_time:cbc.RevisionTime=None,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		version_id:cbc.VersionID=None,
		previous_version_id:cbc.PreviousVersionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		issue_time,
		revision_date,
		revision_time,
		note,
		description,
		version_id,
		previous_version_id, xml_namespaces)
class CatalogueRequestLine(cac_types.__CatalogueRequestLineType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		contract_subdivision:cbc.ContractSubdivision=None,
		note:List[cbc.Note]=None,
		line_validity_period:'LineValidityPeriod'=None,
		required_item_location_quantity:List['RequiredItemLocationQuantity']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		contract_subdivision,
		note,
		line_validity_period,
		required_item_location_quantity, xml_namespaces)
class CategorizesClassificationCategory(cac_types.__ClassificationCategoryType):

	def __init__(self,		name:cbc.Name=None,
		code_value:cbc.CodeValue=None,
		description:List[cbc.Description]=None,
		categorizes_classification_category:List['CategorizesClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		name,
		code_value,
		description,
		categorizes_classification_category, xml_namespaces)
class Certificate(cac_types.__CertificateType):

	def __init__(self,		id_:cbc.ID,
		certificate_type_code:cbc.CertificateTypeCode,
		certificate_type:cbc.CertificateType,
		issuer_party:'IssuerParty',
		remarks:List[cbc.Remarks]=None,
		document_reference:List['DocumentReference']=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		id_,
		certificate_type_code,
		certificate_type,
		issuer_party,
		remarks,
		document_reference,
		signature, xml_namespaces)
class CertificateOfOriginApplication(cac_types.__CertificateOfOriginApplicationType):

	def __init__(self,		reference_id:cbc.ReferenceID,
		certificate_type:cbc.CertificateType,
		original_job_id:cbc.OriginalJobID,
		shipment:'Shipment',
		preparation_party:'PreparationParty',
		issuer_party:'IssuerParty',
		issuing_country:'IssuingCountry',
		application_status_code:cbc.ApplicationStatusCode=None,
		previous_job_id:cbc.PreviousJobID=None,
		remarks:List[cbc.Remarks]=None,
		endorser_party:List['EndorserParty']=None,
		exporter_party:'ExporterParty'=None,
		importer_party:'ImporterParty'=None,
		document_distribution:List['DocumentDistribution']=None,
		supporting_document_reference:List['SupportingDocumentReference']=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		reference_id,
		certificate_type,
		original_job_id,
		shipment,
		preparation_party,
		issuer_party,
		issuing_country,
		application_status_code,
		previous_job_id,
		remarks,
		endorser_party,
		exporter_party,
		importer_party,
		document_distribution,
		supporting_document_reference,
		signature, xml_namespaces)
class ChildConsignment(cac_types.__ConsignmentType):

	def __init__(self,		id_:cbc.ID,
		carrier_assigned_id:cbc.CarrierAssignedID=None,
		consignee_assigned_id:cbc.ConsigneeAssignedID=None,
		consignor_assigned_id:cbc.ConsignorAssignedID=None,
		freight_forwarder_assigned_id:cbc.FreightForwarderAssignedID=None,
		broker_assigned_id:cbc.BrokerAssignedID=None,
		contracted_carrier_assigned_id:cbc.ContractedCarrierAssignedID=None,
		performing_carrier_assigned_id:cbc.PerformingCarrierAssignedID=None,
		summary_description:List[cbc.SummaryDescription]=None,
		total_invoice_amount:cbc.TotalInvoiceAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		tariff_description:List[cbc.TariffDescription]=None,
		tariff_code:cbc.TariffCode=None,
		insurance_premium_amount:cbc.InsurancePremiumAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		loading_length_measure:cbc.LoadingLengthMeasure=None,
		remarks:List[cbc.Remarks]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		animal_food_indicator:cbc.AnimalFoodIndicator=None,
		human_food_indicator:cbc.HumanFoodIndicator=None,
		livestock_indicator:cbc.LivestockIndicator=None,
		bulk_cargo_indicator:cbc.BulkCargoIndicator=None,
		containerized_indicator:cbc.ContainerizedIndicator=None,
		general_cargo_indicator:cbc.GeneralCargoIndicator=None,
		special_security_indicator:cbc.SpecialSecurityIndicator=None,
		third_party_payer_indicator:cbc.ThirdPartyPayerIndicator=None,
		carrier_service_instructions:List[cbc.CarrierServiceInstructions]=None,
		customs_clearance_service_instructions:List[cbc.CustomsClearanceServiceInstructions]=None,
		forwarder_service_instructions:List[cbc.ForwarderServiceInstructions]=None,
		special_service_instructions:List[cbc.SpecialServiceInstructions]=None,
		sequence_id:cbc.SequenceID=None,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consolidatable_indicator:cbc.ConsolidatableIndicator=None,
		haulage_instructions:List[cbc.HaulageInstructions]=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		child_consignment_quantity:cbc.ChildConsignmentQuantity=None,
		total_packages_quantity:cbc.TotalPackagesQuantity=None,
		consolidated_shipment:List['ConsolidatedShipment']=None,
		customs_declaration:List['CustomsDeclaration']=None,
		requested_pickup_transport_event:'RequestedPickupTransportEvent'=None,
		requested_delivery_transport_event:'RequestedDeliveryTransportEvent'=None,
		planned_pickup_transport_event:'PlannedPickupTransportEvent'=None,
		planned_delivery_transport_event:'PlannedDeliveryTransportEvent'=None,
		status:List['Status']=None,
		child_consignment:List['ChildConsignment']=None,
		consignee_party:'ConsigneeParty'=None,
		exporter_party:'ExporterParty'=None,
		consignor_party:'ConsignorParty'=None,
		importer_party:'ImporterParty'=None,
		carrier_party:'CarrierParty'=None,
		freight_forwarder_party:'FreightForwarderParty'=None,
		notify_party:'NotifyParty'=None,
		original_despatch_party:'OriginalDespatchParty'=None,
		final_delivery_party:'FinalDeliveryParty'=None,
		performing_carrier_party:'PerformingCarrierParty'=None,
		substitute_carrier_party:'SubstituteCarrierParty'=None,
		logistics_operator_party:'LogisticsOperatorParty'=None,
		transport_advisor_party:'TransportAdvisorParty'=None,
		hazardous_item_notification_party:'HazardousItemNotificationParty'=None,
		insurance_party:'InsuranceParty'=None,
		mortgage_holder_party:'MortgageHolderParty'=None,
		bill_of_lading_holder_party:'BillOfLadingHolderParty'=None,
		original_departure_country:'OriginalDepartureCountry'=None,
		final_destination_country:'FinalDestinationCountry'=None,
		transit_country:List['TransitCountry']=None,
		transport_contract:'TransportContract'=None,
		transport_event:List['TransportEvent']=None,
		original_despatch_transportation_service:'OriginalDespatchTransportationService'=None,
		final_delivery_transportation_service:'FinalDeliveryTransportationService'=None,
		delivery_terms:'DeliveryTerms'=None,
		payment_terms:'PaymentTerms'=None,
		collect_payment_terms:'CollectPaymentTerms'=None,
		disbursement_payment_terms:'DisbursementPaymentTerms'=None,
		prepaid_payment_terms:'PrepaidPaymentTerms'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		extra_allowance_charge:List['ExtraAllowanceCharge']=None,
		main_carriage_shipment_stage:List['MainCarriageShipmentStage']=None,
		pre_carriage_shipment_stage:List['PreCarriageShipmentStage']=None,
		on_carriage_shipment_stage:List['OnCarriageShipmentStage']=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None, xml_namespaces = None):
		super().__init__(
		id_,
		carrier_assigned_id,
		consignee_assigned_id,
		consignor_assigned_id,
		freight_forwarder_assigned_id,
		broker_assigned_id,
		contracted_carrier_assigned_id,
		performing_carrier_assigned_id,
		summary_description,
		total_invoice_amount,
		declared_customs_value_amount,
		tariff_description,
		tariff_code,
		insurance_premium_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		loading_length_measure,
		remarks,
		hazardous_risk_indicator,
		animal_food_indicator,
		human_food_indicator,
		livestock_indicator,
		bulk_cargo_indicator,
		containerized_indicator,
		general_cargo_indicator,
		special_security_indicator,
		third_party_payer_indicator,
		carrier_service_instructions,
		customs_clearance_service_instructions,
		forwarder_service_instructions,
		special_service_instructions,
		sequence_id,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		split_consignment_indicator,
		delivery_instructions,
		consignment_quantity,
		consolidatable_indicator,
		haulage_instructions,
		loading_sequence_id,
		child_consignment_quantity,
		total_packages_quantity,
		consolidated_shipment,
		customs_declaration,
		requested_pickup_transport_event,
		requested_delivery_transport_event,
		planned_pickup_transport_event,
		planned_delivery_transport_event,
		status,
		child_consignment,
		consignee_party,
		exporter_party,
		consignor_party,
		importer_party,
		carrier_party,
		freight_forwarder_party,
		notify_party,
		original_despatch_party,
		final_delivery_party,
		performing_carrier_party,
		substitute_carrier_party,
		logistics_operator_party,
		transport_advisor_party,
		hazardous_item_notification_party,
		insurance_party,
		mortgage_holder_party,
		bill_of_lading_holder_party,
		original_departure_country,
		final_destination_country,
		transit_country,
		transport_contract,
		transport_event,
		original_despatch_transportation_service,
		final_delivery_transportation_service,
		delivery_terms,
		payment_terms,
		collect_payment_terms,
		disbursement_payment_terms,
		prepaid_payment_terms,
		freight_allowance_charge,
		extra_allowance_charge,
		main_carriage_shipment_stage,
		pre_carriage_shipment_stage,
		on_carriage_shipment_stage,
		transport_handling_unit,
		first_arrival_port_location,
		last_exit_port_location, xml_namespaces)
class ClassificationCategory(cac_types.__ClassificationCategoryType):

	def __init__(self,		name:cbc.Name=None,
		code_value:cbc.CodeValue=None,
		description:List[cbc.Description]=None,
		categorizes_classification_category:List['CategorizesClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		name,
		code_value,
		description,
		categorizes_classification_category, xml_namespaces)
class ClassificationScheme(cac_types.__ClassificationSchemeType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		last_revision_date:cbc.LastRevisionDate=None,
		last_revision_time:cbc.LastRevisionTime=None,
		note:List[cbc.Note]=None,
		name:cbc.Name=None,
		description:List[cbc.Description]=None,
		agency_id:cbc.AgencyID=None,
		agency_name:cbc.AgencyName=None,
		version_id:cbc.VersionID=None,
		uri:cbc.URI=None,
		scheme_uri:cbc.SchemeURI=None,
		language_id:cbc.LanguageID=None,
		classification_category:List['ClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		last_revision_date,
		last_revision_time,
		note,
		name,
		description,
		agency_id,
		agency_name,
		version_id,
		uri,
		scheme_uri,
		language_id,
		classification_category, xml_namespaces)
class ClassifiedTaxCategory(cac_types.__TaxCategoryType):

	def __init__(self,		tax_scheme:'TaxScheme',
		id_:cbc.ID=None,
		name:cbc.Name=None,
		percent:cbc.Percent=None,
		base_unit_measure:cbc.BaseUnitMeasure=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_exemption_reason_code:cbc.TaxExemptionReasonCode=None,
		tax_exemption_reason:List[cbc.TaxExemptionReason]=None,
		tier_range:cbc.TierRange=None,
		tier_rate_percent:cbc.TierRatePercent=None, xml_namespaces = None):
		super().__init__(
		tax_scheme,
		id_,
		name,
		percent,
		base_unit_measure,
		per_unit_amount,
		tax_exemption_reason_code,
		tax_exemption_reason,
		tier_range,
		tier_rate_percent, xml_namespaces)
class Clause(cac_types.__ClauseType):

	def __init__(self,		id_:cbc.ID=None,
		content:List[cbc.Content]=None, xml_namespaces = None):
		super().__init__(
		id_,
		content, xml_namespaces)
class CollectPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class CollectedPayment(cac_types.__PaymentType):

	def __init__(self,		id_:cbc.ID=None,
		paid_amount:cbc.PaidAmount=None,
		received_date:cbc.ReceivedDate=None,
		paid_date:cbc.PaidDate=None,
		paid_time:cbc.PaidTime=None,
		instruction_id:cbc.InstructionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		paid_amount,
		received_date,
		paid_date,
		paid_time,
		instruction_id, xml_namespaces)
class CommissionPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class CommodityClassification(cac_types.__CommodityClassificationType):

	def __init__(self,		nature_code:cbc.NatureCode=None,
		cargo_type_code:cbc.CargoTypeCode=None,
		commodity_code:cbc.CommodityCode=None,
		item_classification_code:cbc.ItemClassificationCode=None, xml_namespaces = None):
		super().__init__(
		nature_code,
		cargo_type_code,
		commodity_code,
		item_classification_code, xml_namespaces)
class Communication(cac_types.__CommunicationType):

	def __init__(self,		channel_code:cbc.ChannelCode=None,
		channel:cbc.Channel=None,
		value:cbc.Value=None, xml_namespaces = None):
		super().__init__(
		channel_code,
		channel,
		value, xml_namespaces)
class ComplementaryRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class CompletedTask(cac_types.__CompletedTaskType):

	def __init__(self,		annual_average_amount:cbc.AnnualAverageAmount=None,
		total_task_amount:cbc.TotalTaskAmount=None,
		party_capacity_amount:cbc.PartyCapacityAmount=None,
		description:List[cbc.Description]=None,
		evidence_supplied:List['EvidenceSupplied']=None,
		period:'Period'=None,
		recipient_customer_party:'RecipientCustomerParty'=None, xml_namespaces = None):
		super().__init__(
		annual_average_amount,
		total_task_amount,
		party_capacity_amount,
		description,
		evidence_supplied,
		period,
		recipient_customer_party, xml_namespaces)
class ComponentRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class Condition(cac_types.__ConditionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class ConsigneeParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Consignment(cac_types.__ConsignmentType):

	def __init__(self,		id_:cbc.ID,
		carrier_assigned_id:cbc.CarrierAssignedID=None,
		consignee_assigned_id:cbc.ConsigneeAssignedID=None,
		consignor_assigned_id:cbc.ConsignorAssignedID=None,
		freight_forwarder_assigned_id:cbc.FreightForwarderAssignedID=None,
		broker_assigned_id:cbc.BrokerAssignedID=None,
		contracted_carrier_assigned_id:cbc.ContractedCarrierAssignedID=None,
		performing_carrier_assigned_id:cbc.PerformingCarrierAssignedID=None,
		summary_description:List[cbc.SummaryDescription]=None,
		total_invoice_amount:cbc.TotalInvoiceAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		tariff_description:List[cbc.TariffDescription]=None,
		tariff_code:cbc.TariffCode=None,
		insurance_premium_amount:cbc.InsurancePremiumAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		loading_length_measure:cbc.LoadingLengthMeasure=None,
		remarks:List[cbc.Remarks]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		animal_food_indicator:cbc.AnimalFoodIndicator=None,
		human_food_indicator:cbc.HumanFoodIndicator=None,
		livestock_indicator:cbc.LivestockIndicator=None,
		bulk_cargo_indicator:cbc.BulkCargoIndicator=None,
		containerized_indicator:cbc.ContainerizedIndicator=None,
		general_cargo_indicator:cbc.GeneralCargoIndicator=None,
		special_security_indicator:cbc.SpecialSecurityIndicator=None,
		third_party_payer_indicator:cbc.ThirdPartyPayerIndicator=None,
		carrier_service_instructions:List[cbc.CarrierServiceInstructions]=None,
		customs_clearance_service_instructions:List[cbc.CustomsClearanceServiceInstructions]=None,
		forwarder_service_instructions:List[cbc.ForwarderServiceInstructions]=None,
		special_service_instructions:List[cbc.SpecialServiceInstructions]=None,
		sequence_id:cbc.SequenceID=None,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consolidatable_indicator:cbc.ConsolidatableIndicator=None,
		haulage_instructions:List[cbc.HaulageInstructions]=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		child_consignment_quantity:cbc.ChildConsignmentQuantity=None,
		total_packages_quantity:cbc.TotalPackagesQuantity=None,
		consolidated_shipment:List['ConsolidatedShipment']=None,
		customs_declaration:List['CustomsDeclaration']=None,
		requested_pickup_transport_event:'RequestedPickupTransportEvent'=None,
		requested_delivery_transport_event:'RequestedDeliveryTransportEvent'=None,
		planned_pickup_transport_event:'PlannedPickupTransportEvent'=None,
		planned_delivery_transport_event:'PlannedDeliveryTransportEvent'=None,
		status:List['Status']=None,
		child_consignment:List['ChildConsignment']=None,
		consignee_party:'ConsigneeParty'=None,
		exporter_party:'ExporterParty'=None,
		consignor_party:'ConsignorParty'=None,
		importer_party:'ImporterParty'=None,
		carrier_party:'CarrierParty'=None,
		freight_forwarder_party:'FreightForwarderParty'=None,
		notify_party:'NotifyParty'=None,
		original_despatch_party:'OriginalDespatchParty'=None,
		final_delivery_party:'FinalDeliveryParty'=None,
		performing_carrier_party:'PerformingCarrierParty'=None,
		substitute_carrier_party:'SubstituteCarrierParty'=None,
		logistics_operator_party:'LogisticsOperatorParty'=None,
		transport_advisor_party:'TransportAdvisorParty'=None,
		hazardous_item_notification_party:'HazardousItemNotificationParty'=None,
		insurance_party:'InsuranceParty'=None,
		mortgage_holder_party:'MortgageHolderParty'=None,
		bill_of_lading_holder_party:'BillOfLadingHolderParty'=None,
		original_departure_country:'OriginalDepartureCountry'=None,
		final_destination_country:'FinalDestinationCountry'=None,
		transit_country:List['TransitCountry']=None,
		transport_contract:'TransportContract'=None,
		transport_event:List['TransportEvent']=None,
		original_despatch_transportation_service:'OriginalDespatchTransportationService'=None,
		final_delivery_transportation_service:'FinalDeliveryTransportationService'=None,
		delivery_terms:'DeliveryTerms'=None,
		payment_terms:'PaymentTerms'=None,
		collect_payment_terms:'CollectPaymentTerms'=None,
		disbursement_payment_terms:'DisbursementPaymentTerms'=None,
		prepaid_payment_terms:'PrepaidPaymentTerms'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		extra_allowance_charge:List['ExtraAllowanceCharge']=None,
		main_carriage_shipment_stage:List['MainCarriageShipmentStage']=None,
		pre_carriage_shipment_stage:List['PreCarriageShipmentStage']=None,
		on_carriage_shipment_stage:List['OnCarriageShipmentStage']=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None, xml_namespaces = None):
		super().__init__(
		id_,
		carrier_assigned_id,
		consignee_assigned_id,
		consignor_assigned_id,
		freight_forwarder_assigned_id,
		broker_assigned_id,
		contracted_carrier_assigned_id,
		performing_carrier_assigned_id,
		summary_description,
		total_invoice_amount,
		declared_customs_value_amount,
		tariff_description,
		tariff_code,
		insurance_premium_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		loading_length_measure,
		remarks,
		hazardous_risk_indicator,
		animal_food_indicator,
		human_food_indicator,
		livestock_indicator,
		bulk_cargo_indicator,
		containerized_indicator,
		general_cargo_indicator,
		special_security_indicator,
		third_party_payer_indicator,
		carrier_service_instructions,
		customs_clearance_service_instructions,
		forwarder_service_instructions,
		special_service_instructions,
		sequence_id,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		split_consignment_indicator,
		delivery_instructions,
		consignment_quantity,
		consolidatable_indicator,
		haulage_instructions,
		loading_sequence_id,
		child_consignment_quantity,
		total_packages_quantity,
		consolidated_shipment,
		customs_declaration,
		requested_pickup_transport_event,
		requested_delivery_transport_event,
		planned_pickup_transport_event,
		planned_delivery_transport_event,
		status,
		child_consignment,
		consignee_party,
		exporter_party,
		consignor_party,
		importer_party,
		carrier_party,
		freight_forwarder_party,
		notify_party,
		original_despatch_party,
		final_delivery_party,
		performing_carrier_party,
		substitute_carrier_party,
		logistics_operator_party,
		transport_advisor_party,
		hazardous_item_notification_party,
		insurance_party,
		mortgage_holder_party,
		bill_of_lading_holder_party,
		original_departure_country,
		final_destination_country,
		transit_country,
		transport_contract,
		transport_event,
		original_despatch_transportation_service,
		final_delivery_transportation_service,
		delivery_terms,
		payment_terms,
		collect_payment_terms,
		disbursement_payment_terms,
		prepaid_payment_terms,
		freight_allowance_charge,
		extra_allowance_charge,
		main_carriage_shipment_stage,
		pre_carriage_shipment_stage,
		on_carriage_shipment_stage,
		transport_handling_unit,
		first_arrival_port_location,
		last_exit_port_location, xml_namespaces)
class ConsignorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ConsolidatedShipment(cac_types.__ShipmentType):

	def __init__(self,		id_:cbc.ID,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consignment:List['Consignment']=None,
		goods_item:List['GoodsItem']=None,
		shipment_stage:List['ShipmentStage']=None,
		delivery:'Delivery'=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		return_address:'ReturnAddress'=None,
		origin_address:'OriginAddress'=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None,
		export_country:'ExportCountry'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None, xml_namespaces = None):
		super().__init__(
		id_,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		delivery_instructions,
		split_consignment_indicator,
		consignment_quantity,
		consignment,
		goods_item,
		shipment_stage,
		delivery,
		transport_handling_unit,
		return_address,
		origin_address,
		first_arrival_port_location,
		last_exit_port_location,
		export_country,
		freight_allowance_charge, xml_namespaces)
class ConstitutionPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class Consumption(cac_types.__ConsumptionType):

	def __init__(self,		legal_monetary_total:'LegalMonetaryTotal',
		utility_statement_type_code:cbc.UtilityStatementTypeCode=None,
		main_period:'MainPeriod'=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		energy_water_supply:'EnergyWaterSupply'=None,
		telecommunications_supply:'TelecommunicationsSupply'=None, xml_namespaces = None):
		super().__init__(
		legal_monetary_total,
		utility_statement_type_code,
		main_period,
		allowance_charge,
		tax_total,
		energy_water_supply,
		telecommunications_supply, xml_namespaces)
class ConsumptionAverage(cac_types.__ConsumptionAverageType):

	def __init__(self,		average_amount:cbc.AverageAmount=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		average_amount,
		description, xml_namespaces)
class ConsumptionCorrection(cac_types.__ConsumptionCorrectionType):

	def __init__(self,		correction_type:cbc.CorrectionType=None,
		correction_type_code:cbc.CorrectionTypeCode=None,
		meter_number:cbc.MeterNumber=None,
		gas_pressure_quantity:cbc.GasPressureQuantity=None,
		actual_temperature_reduction_quantity:cbc.ActualTemperatureReductionQuantity=None,
		normal_temperature_reduction_quantity:cbc.NormalTemperatureReductionQuantity=None,
		difference_temperature_reduction_quantity:cbc.DifferenceTemperatureReductionQuantity=None,
		description:List[cbc.Description]=None,
		correction_unit_amount:cbc.CorrectionUnitAmount=None,
		consumption_energy_quantity:cbc.ConsumptionEnergyQuantity=None,
		consumption_water_quantity:cbc.ConsumptionWaterQuantity=None,
		correction_amount:cbc.CorrectionAmount=None, xml_namespaces = None):
		super().__init__(
		correction_type,
		correction_type_code,
		meter_number,
		gas_pressure_quantity,
		actual_temperature_reduction_quantity,
		normal_temperature_reduction_quantity,
		difference_temperature_reduction_quantity,
		description,
		correction_unit_amount,
		consumption_energy_quantity,
		consumption_water_quantity,
		correction_amount, xml_namespaces)
class ConsumptionHistory(cac_types.__ConsumptionHistoryType):

	def __init__(self,		quantity:cbc.Quantity,
		period:'Period',
		meter_number:cbc.MeterNumber=None,
		amount:cbc.Amount=None,
		consumption_level_code:cbc.ConsumptionLevelCode=None,
		consumption_level:cbc.ConsumptionLevel=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		quantity,
		period,
		meter_number,
		amount,
		consumption_level_code,
		consumption_level,
		description, xml_namespaces)
class ConsumptionLine(cac_types.__ConsumptionLineType):

	def __init__(self,		id_:cbc.ID,
		invoiced_quantity:cbc.InvoicedQuantity,
		line_extension_amount:cbc.LineExtensionAmount,
		utility_item:'UtilityItem',
		parent_document_line_reference_id:cbc.ParentDocumentLineReferenceID=None,
		period:'Period'=None,
		delivery:List['Delivery']=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		price:'Price'=None,
		unstructured_price:'UnstructuredPrice'=None, xml_namespaces = None):
		super().__init__(
		id_,
		invoiced_quantity,
		line_extension_amount,
		utility_item,
		parent_document_line_reference_id,
		period,
		delivery,
		allowance_charge,
		tax_total,
		price,
		unstructured_price, xml_namespaces)
class ConsumptionPoint(cac_types.__ConsumptionPointType):

	def __init__(self,		id_:cbc.ID,
		description:List[cbc.Description]=None,
		subscriber_id:cbc.SubscriberID=None,
		subscriber_type:cbc.SubscriberType=None,
		subscriber_type_code:cbc.SubscriberTypeCode=None,
		total_delivered_quantity:cbc.TotalDeliveredQuantity=None,
		address:'Address'=None,
		web_site_access:'WebSiteAccess'=None,
		utility_meter:List['UtilityMeter']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		subscriber_id,
		subscriber_type,
		subscriber_type_code,
		total_delivered_quantity,
		address,
		web_site_access,
		utility_meter, xml_namespaces)
class ConsumptionReport(cac_types.__ConsumptionReportType):

	def __init__(self,		id_:cbc.ID,
		consumption_type:cbc.ConsumptionType=None,
		consumption_type_code:cbc.ConsumptionTypeCode=None,
		description:List[cbc.Description]=None,
		total_consumed_quantity:cbc.TotalConsumedQuantity=None,
		basic_consumed_quantity:cbc.BasicConsumedQuantity=None,
		resident_occupants_numeric:cbc.ResidentOccupantsNumeric=None,
		consumers_energy_level_code:cbc.ConsumersEnergyLevelCode=None,
		consumers_energy_level:cbc.ConsumersEnergyLevel=None,
		residence_type:cbc.ResidenceType=None,
		residence_type_code:cbc.ResidenceTypeCode=None,
		heating_type:cbc.HeatingType=None,
		heating_type_code:cbc.HeatingTypeCode=None,
		period:'Period'=None,
		guidance_document_reference:'GuidanceDocumentReference'=None,
		document_reference:'DocumentReference'=None,
		consumption_report_reference:List['ConsumptionReportReference']=None,
		consumption_history:List['ConsumptionHistory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		consumption_type,
		consumption_type_code,
		description,
		total_consumed_quantity,
		basic_consumed_quantity,
		resident_occupants_numeric,
		consumers_energy_level_code,
		consumers_energy_level,
		residence_type,
		residence_type_code,
		heating_type,
		heating_type_code,
		period,
		guidance_document_reference,
		document_reference,
		consumption_report_reference,
		consumption_history, xml_namespaces)
class ConsumptionReportReference(cac_types.__ConsumptionReportReferenceType):

	def __init__(self,		consumption_report_id:cbc.ConsumptionReportID,
		total_consumed_quantity:cbc.TotalConsumedQuantity,
		period:'Period',
		consumption_type:cbc.ConsumptionType=None,
		consumption_type_code:cbc.ConsumptionTypeCode=None, xml_namespaces = None):
		super().__init__(
		consumption_report_id,
		total_consumed_quantity,
		period,
		consumption_type,
		consumption_type_code, xml_namespaces)
class Contact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class ContactParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ContainedGoodsItem(cac_types.__GoodsItemType):

	def __init__(self,		id_:cbc.ID=None,
		sequence_number_id:cbc.SequenceNumberID=None,
		description:List[cbc.Description]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		value_amount:cbc.ValueAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		quantity:cbc.Quantity=None,
		preference_criterion_code:cbc.PreferenceCriterionCode=None,
		required_customs_id:cbc.RequiredCustomsID=None,
		customs_status_code:cbc.CustomsStatusCode=None,
		customs_tariff_quantity:cbc.CustomsTariffQuantity=None,
		customs_import_classified_indicator:cbc.CustomsImportClassifiedIndicator=None,
		chargeable_quantity:cbc.ChargeableQuantity=None,
		returnable_quantity:cbc.ReturnableQuantity=None,
		trace_id:cbc.TraceID=None,
		item:List['Item']=None,
		goods_item_container:List['GoodsItemContainer']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		invoice_line:List['InvoiceLine']=None,
		temperature:List['Temperature']=None,
		contained_goods_item:List['ContainedGoodsItem']=None,
		origin_address:'OriginAddress'=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		measurement_dimension:List['MeasurementDimension']=None,
		containing_package:List['ContainingPackage']=None,
		shipment_document_reference:'ShipmentDocumentReference'=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None, xml_namespaces = None):
		super().__init__(
		id_,
		sequence_number_id,
		description,
		hazardous_risk_indicator,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		insurance_value_amount,
		value_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		quantity,
		preference_criterion_code,
		required_customs_id,
		customs_status_code,
		customs_tariff_quantity,
		customs_import_classified_indicator,
		chargeable_quantity,
		returnable_quantity,
		trace_id,
		item,
		goods_item_container,
		freight_allowance_charge,
		invoice_line,
		temperature,
		contained_goods_item,
		origin_address,
		delivery,
		pickup,
		despatch,
		measurement_dimension,
		containing_package,
		shipment_document_reference,
		minimum_temperature,
		maximum_temperature, xml_namespaces)
class ContainedInTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class ContainedPackage(cac_types.__PackageType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		returnable_material_indicator:cbc.ReturnableMaterialIndicator=None,
		package_level_code:cbc.PackageLevelCode=None,
		packaging_type_code:cbc.PackagingTypeCode=None,
		packing_material:List[cbc.PackingMaterial]=None,
		trace_id:cbc.TraceID=None,
		contained_package:List['ContainedPackage']=None,
		containing_transport_equipment:'ContainingTransportEquipment'=None,
		goods_item:List['GoodsItem']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		delivery_unit:List['DeliveryUnit']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		returnable_material_indicator,
		package_level_code,
		packaging_type_code,
		packing_material,
		trace_id,
		contained_package,
		containing_transport_equipment,
		goods_item,
		measurement_dimension,
		delivery_unit,
		delivery,
		pickup,
		despatch, xml_namespaces)
class ContainingPackage(cac_types.__PackageType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		returnable_material_indicator:cbc.ReturnableMaterialIndicator=None,
		package_level_code:cbc.PackageLevelCode=None,
		packaging_type_code:cbc.PackagingTypeCode=None,
		packing_material:List[cbc.PackingMaterial]=None,
		trace_id:cbc.TraceID=None,
		contained_package:List['ContainedPackage']=None,
		containing_transport_equipment:'ContainingTransportEquipment'=None,
		goods_item:List['GoodsItem']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		delivery_unit:List['DeliveryUnit']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		returnable_material_indicator,
		package_level_code,
		packaging_type_code,
		packing_material,
		trace_id,
		contained_package,
		containing_transport_equipment,
		goods_item,
		measurement_dimension,
		delivery_unit,
		delivery,
		pickup,
		despatch, xml_namespaces)
class ContainingTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class Contract(cac_types.__ContractType):

	def __init__(self,		id_:cbc.ID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		contract_type_code:cbc.ContractTypeCode=None,
		contract_type:cbc.ContractType=None,
		note:List[cbc.Note]=None,
		version_id:cbc.VersionID=None,
		description:List[cbc.Description]=None,
		validity_period:'ValidityPeriod'=None,
		contract_document_reference:List['ContractDocumentReference']=None,
		nomination_period:'NominationPeriod'=None,
		contractual_delivery:'ContractualDelivery'=None, xml_namespaces = None):
		super().__init__(
		id_,
		issue_date,
		issue_time,
		nomination_date,
		nomination_time,
		contract_type_code,
		contract_type,
		note,
		version_id,
		description,
		validity_period,
		contract_document_reference,
		nomination_period,
		contractual_delivery, xml_namespaces)
class ContractAcceptancePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ContractDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ContractExecutionRequirement(cac_types.__ContractExecutionRequirementType):

	def __init__(self,		name:List[cbc.Name]=None,
		execution_requirement_code:cbc.ExecutionRequirementCode=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		name,
		execution_requirement_code,
		description, xml_namespaces)
class ContractExtension(cac_types.__ContractExtensionType):

	def __init__(self,		options_description:List[cbc.OptionsDescription]=None,
		minimum_number_numeric:cbc.MinimumNumberNumeric=None,
		maximum_number_numeric:cbc.MaximumNumberNumeric=None,
		option_validity_period:'OptionValidityPeriod'=None,
		renewal:List['Renewal']=None, xml_namespaces = None):
		super().__init__(
		options_description,
		minimum_number_numeric,
		maximum_number_numeric,
		option_validity_period,
		renewal, xml_namespaces)
class ContractFormalizationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ContractResponsibleParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ContractingActivity(cac_types.__ContractingActivityType):

	def __init__(self,		activity_type_code:cbc.ActivityTypeCode=None,
		activity_type:cbc.ActivityType=None, xml_namespaces = None):
		super().__init__(
		activity_type_code,
		activity_type, xml_namespaces)
class ContractingParty(cac_types.__ContractingPartyType):

	def __init__(self,		party:'Party',
		buyer_profile_uri:cbc.BuyerProfileURI=None,
		contracting_party_type:List['ContractingPartyType']=None,
		contracting_activity:List['ContractingActivity']=None, xml_namespaces = None):
		super().__init__(
		party,
		buyer_profile_uri,
		contracting_party_type,
		contracting_activity, xml_namespaces)
class ContractingPartyType(cac_types.__ContractingPartyTypeType):

	def __init__(self,		party_type_code:cbc.PartyTypeCode=None,
		party_type:cbc.PartyType=None, xml_namespaces = None):
		super().__init__(
		party_type_code,
		party_type, xml_namespaces)
class ContractorCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class ContractualDelivery(cac_types.__DeliveryType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		actual_delivery_date:cbc.ActualDeliveryDate=None,
		actual_delivery_time:cbc.ActualDeliveryTime=None,
		latest_delivery_date:cbc.LatestDeliveryDate=None,
		latest_delivery_time:cbc.LatestDeliveryTime=None,
		release_id:cbc.ReleaseID=None,
		tracking_id:cbc.TrackingID=None,
		delivery_address:'DeliveryAddress'=None,
		delivery_location:'DeliveryLocation'=None,
		alternative_delivery_location:'AlternativeDeliveryLocation'=None,
		requested_delivery_period:'RequestedDeliveryPeriod'=None,
		promised_delivery_period:'PromisedDeliveryPeriod'=None,
		estimated_delivery_period:'EstimatedDeliveryPeriod'=None,
		carrier_party:'CarrierParty'=None,
		delivery_party:'DeliveryParty'=None,
		notify_party:List['NotifyParty']=None,
		despatch:'Despatch'=None,
		delivery_terms:List['DeliveryTerms']=None,
		minimum_delivery_unit:'MinimumDeliveryUnit'=None,
		maximum_delivery_unit:'MaximumDeliveryUnit'=None,
		shipment:'Shipment'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		minimum_quantity,
		maximum_quantity,
		actual_delivery_date,
		actual_delivery_time,
		latest_delivery_date,
		latest_delivery_time,
		release_id,
		tracking_id,
		delivery_address,
		delivery_location,
		alternative_delivery_location,
		requested_delivery_period,
		promised_delivery_period,
		estimated_delivery_period,
		carrier_party,
		delivery_party,
		notify_party,
		despatch,
		delivery_terms,
		minimum_delivery_unit,
		maximum_delivery_unit,
		shipment, xml_namespaces)
class ContractualDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class CorporateRegistrationScheme(cac_types.__CorporateRegistrationSchemeType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		corporate_registration_type_code:cbc.CorporateRegistrationTypeCode=None,
		jurisdiction_region_address:List['JurisdictionRegionAddress']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		corporate_registration_type_code,
		jurisdiction_region_address, xml_namespaces)
class Country(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class CreditAccount(cac_types.__CreditAccountType):

	def __init__(self,		account_id:cbc.AccountID, xml_namespaces = None):
		super().__init__(
		account_id, xml_namespaces)
class CreditNoteDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class CreditNoteLine(cac_types.__CreditNoteLineType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		credited_quantity:cbc.CreditedQuantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		free_of_charge_indicator:cbc.FreeOfChargeIndicator=None,
		invoice_period:List['InvoicePeriod']=None,
		order_line_reference:List['OrderLineReference']=None,
		discrepancy_response:List['DiscrepancyResponse']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		originator_party:'OriginatorParty'=None,
		delivery:List['Delivery']=None,
		payment_terms:List['PaymentTerms']=None,
		tax_total:List['TaxTotal']=None,
		allowance_charge:List['AllowanceCharge']=None,
		item:'Item'=None,
		price:'Price'=None,
		delivery_terms:List['DeliveryTerms']=None,
		sub_credit_note_line:List['SubCreditNoteLine']=None,
		item_price_extension:'ItemPriceExtension'=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		note,
		credited_quantity,
		line_extension_amount,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		free_of_charge_indicator,
		invoice_period,
		order_line_reference,
		discrepancy_response,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		originator_party,
		delivery,
		payment_terms,
		tax_total,
		allowance_charge,
		item,
		price,
		delivery_terms,
		sub_credit_note_line,
		item_price_extension, xml_namespaces)
class CrewMemberPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class CurrentStatus(cac_types.__StatusType):

	def __init__(self,		condition_code:cbc.ConditionCode=None,
		reference_date:cbc.ReferenceDate=None,
		reference_time:cbc.ReferenceTime=None,
		description:List[cbc.Description]=None,
		status_reason_code:cbc.StatusReasonCode=None,
		status_reason:List[cbc.StatusReason]=None,
		sequence_id:cbc.SequenceID=None,
		text:List[cbc.Text]=None,
		indication_indicator:cbc.IndicationIndicator=None,
		percent:cbc.Percent=None,
		reliability_percent:cbc.ReliabilityPercent=None,
		condition:List['Condition']=None, xml_namespaces = None):
		super().__init__(
		condition_code,
		reference_date,
		reference_time,
		description,
		status_reason_code,
		status_reason,
		sequence_id,
		text,
		indication_indicator,
		percent,
		reliability_percent,
		condition, xml_namespaces)
class CustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class CustomsAgentParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class CustomsDeclaration(cac_types.__CustomsDeclarationType):

	def __init__(self,		id_:cbc.ID,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		issuer_party, xml_namespaces)
class DebitNoteDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class DebitNoteLine(cac_types.__DebitNoteLineType):

	def __init__(self,		id_:cbc.ID,
		line_extension_amount:cbc.LineExtensionAmount,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		debited_quantity:cbc.DebitedQuantity=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		discrepancy_response:List['DiscrepancyResponse']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		delivery:List['Delivery']=None,
		tax_total:List['TaxTotal']=None,
		allowance_charge:List['AllowanceCharge']=None,
		item:'Item'=None,
		price:'Price'=None,
		sub_debit_note_line:List['SubDebitNoteLine']=None, xml_namespaces = None):
		super().__init__(
		id_,
		line_extension_amount,
		uuid,
		note,
		debited_quantity,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		discrepancy_response,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		delivery,
		tax_total,
		allowance_charge,
		item,
		price,
		sub_debit_note_line, xml_namespaces)
class Declaration(cac_types.__DeclarationType):

	def __init__(self,		name:List[cbc.Name]=None,
		declaration_type_code:cbc.DeclarationTypeCode=None,
		description:List[cbc.Description]=None,
		evidence_supplied:List['EvidenceSupplied']=None, xml_namespaces = None):
		super().__init__(
		name,
		declaration_type_code,
		description,
		evidence_supplied, xml_namespaces)
class DefaultLanguage(cac_types.__LanguageType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		locale_code:cbc.LocaleCode=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		locale_code, xml_namespaces)
class DeletedCatalogueReference(cac_types.__CatalogueReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		revision_date:cbc.RevisionDate=None,
		revision_time:cbc.RevisionTime=None,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		version_id:cbc.VersionID=None,
		previous_version_id:cbc.PreviousVersionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		issue_time,
		revision_date,
		revision_time,
		note,
		description,
		version_id,
		previous_version_id, xml_namespaces)
class Delivery(cac_types.__DeliveryType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		actual_delivery_date:cbc.ActualDeliveryDate=None,
		actual_delivery_time:cbc.ActualDeliveryTime=None,
		latest_delivery_date:cbc.LatestDeliveryDate=None,
		latest_delivery_time:cbc.LatestDeliveryTime=None,
		release_id:cbc.ReleaseID=None,
		tracking_id:cbc.TrackingID=None,
		delivery_address:'DeliveryAddress'=None,
		delivery_location:'DeliveryLocation'=None,
		alternative_delivery_location:'AlternativeDeliveryLocation'=None,
		requested_delivery_period:'RequestedDeliveryPeriod'=None,
		promised_delivery_period:'PromisedDeliveryPeriod'=None,
		estimated_delivery_period:'EstimatedDeliveryPeriod'=None,
		carrier_party:'CarrierParty'=None,
		delivery_party:'DeliveryParty'=None,
		notify_party:List['NotifyParty']=None,
		despatch:'Despatch'=None,
		delivery_terms:List['DeliveryTerms']=None,
		minimum_delivery_unit:'MinimumDeliveryUnit'=None,
		maximum_delivery_unit:'MaximumDeliveryUnit'=None,
		shipment:'Shipment'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		minimum_quantity,
		maximum_quantity,
		actual_delivery_date,
		actual_delivery_time,
		latest_delivery_date,
		latest_delivery_time,
		release_id,
		tracking_id,
		delivery_address,
		delivery_location,
		alternative_delivery_location,
		requested_delivery_period,
		promised_delivery_period,
		estimated_delivery_period,
		carrier_party,
		delivery_party,
		notify_party,
		despatch,
		delivery_terms,
		minimum_delivery_unit,
		maximum_delivery_unit,
		shipment, xml_namespaces)
class DeliveryAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class DeliveryContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class DeliveryCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class DeliveryLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class DeliveryParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class DeliveryPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class DeliveryTerms(cac_types.__DeliveryTermsType):

	def __init__(self,		id_:cbc.ID=None,
		special_terms:List[cbc.SpecialTerms]=None,
		loss_risk_responsibility_code:cbc.LossRiskResponsibilityCode=None,
		loss_risk:List[cbc.LossRisk]=None,
		amount:cbc.Amount=None,
		delivery_location:'DeliveryLocation'=None,
		allowance_charge:'AllowanceCharge'=None, xml_namespaces = None):
		super().__init__(
		id_,
		special_terms,
		loss_risk_responsibility_code,
		loss_risk,
		amount,
		delivery_location,
		allowance_charge, xml_namespaces)
class DeliveryTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class DeliveryUnit(cac_types.__DeliveryUnitType):

	def __init__(self,		batch_quantity:cbc.BatchQuantity,
		consumer_unit_quantity:cbc.ConsumerUnitQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None, xml_namespaces = None):
		super().__init__(
		batch_quantity,
		consumer_unit_quantity,
		hazardous_risk_indicator, xml_namespaces)
class DependentLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class DependentPriceReference(cac_types.__DependentPriceReferenceType):

	def __init__(self,		percent:cbc.Percent=None,
		location_address:'LocationAddress'=None,
		dependent_line_reference:'DependentLineReference'=None, xml_namespaces = None):
		super().__init__(
		percent,
		location_address,
		dependent_line_reference, xml_namespaces)
class Despatch(cac_types.__DespatchType):

	def __init__(self,		id_:cbc.ID=None,
		requested_despatch_date:cbc.RequestedDespatchDate=None,
		requested_despatch_time:cbc.RequestedDespatchTime=None,
		estimated_despatch_date:cbc.EstimatedDespatchDate=None,
		estimated_despatch_time:cbc.EstimatedDespatchTime=None,
		actual_despatch_date:cbc.ActualDespatchDate=None,
		actual_despatch_time:cbc.ActualDespatchTime=None,
		guaranteed_despatch_date:cbc.GuaranteedDespatchDate=None,
		guaranteed_despatch_time:cbc.GuaranteedDespatchTime=None,
		release_id:cbc.ReleaseID=None,
		instructions:List[cbc.Instructions]=None,
		despatch_address:'DespatchAddress'=None,
		despatch_location:'DespatchLocation'=None,
		despatch_party:'DespatchParty'=None,
		carrier_party:'CarrierParty'=None,
		notify_party:List['NotifyParty']=None,
		contact:'Contact'=None,
		estimated_despatch_period:'EstimatedDespatchPeriod'=None,
		requested_despatch_period:'RequestedDespatchPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		requested_despatch_date,
		requested_despatch_time,
		estimated_despatch_date,
		estimated_despatch_time,
		actual_despatch_date,
		actual_despatch_time,
		guaranteed_despatch_date,
		guaranteed_despatch_time,
		release_id,
		instructions,
		despatch_address,
		despatch_location,
		despatch_party,
		carrier_party,
		notify_party,
		contact,
		estimated_despatch_period,
		requested_despatch_period, xml_namespaces)
class DespatchAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class DespatchContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class DespatchDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class DespatchLine(cac_types.__DespatchLineType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		delivered_quantity:cbc.DeliveredQuantity=None,
		backorder_quantity:cbc.BackorderQuantity=None,
		backorder_reason:List[cbc.BackorderReason]=None,
		outstanding_quantity:cbc.OutstandingQuantity=None,
		outstanding_reason:List[cbc.OutstandingReason]=None,
		oversupply_quantity:cbc.OversupplyQuantity=None,
		order_line_reference:List['OrderLineReference']=None,
		document_reference:List['DocumentReference']=None,
		shipment:List['Shipment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		uuid,
		note,
		line_status_code,
		delivered_quantity,
		backorder_quantity,
		backorder_reason,
		outstanding_quantity,
		outstanding_reason,
		oversupply_quantity,
		order_line_reference,
		document_reference,
		shipment, xml_namespaces)
class DespatchLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class DespatchLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class DespatchParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class DespatchSupplierParty(cac_types.__SupplierPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		data_sending_capability:cbc.DataSendingCapability=None,
		party:'Party'=None,
		despatch_contact:'DespatchContact'=None,
		accounting_contact:'AccountingContact'=None,
		seller_contact:'SellerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		additional_account_id,
		data_sending_capability,
		party,
		despatch_contact,
		accounting_contact,
		seller_contact, xml_namespaces)
class DestinationCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class DetentionTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class DigitalSignatureAttachment(cac_types.__AttachmentType):

	def __init__(self,		embedded_document_binary_object:cbc.EmbeddedDocumentBinaryObject=None,
		external_reference:'ExternalReference'=None, xml_namespaces = None):
		super().__init__(
		embedded_document_binary_object,
		external_reference, xml_namespaces)
class Dimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class DisbursementPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class DischargeTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class DiscrepancyResponse(cac_types.__ResponseType):

	def __init__(self,		reference_id:cbc.ReferenceID=None,
		response_code:cbc.ResponseCode=None,
		description:List[cbc.Description]=None,
		effective_date:cbc.EffectiveDate=None,
		effective_time:cbc.EffectiveTime=None,
		status:List['Status']=None, xml_namespaces = None):
		super().__init__(
		reference_id,
		response_code,
		description,
		effective_date,
		effective_time,
		status, xml_namespaces)
class DocumentAvailabilityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class DocumentDistribution(cac_types.__DocumentDistributionType):

	def __init__(self,		print_qualifier:cbc.PrintQualifier,
		maximum_copies_numeric:cbc.MaximumCopiesNumeric,
		party:'Party', xml_namespaces = None):
		super().__init__(
		print_qualifier,
		maximum_copies_numeric,
		party, xml_namespaces)
class DocumentProviderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class DocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class DocumentResponse(cac_types.__DocumentResponseType):

	def __init__(self,		response:'Response',
		document_reference:List['DocumentReference']=None,
		issuer_party:'IssuerParty'=None,
		recipient_party:'RecipientParty'=None,
		line_response:List['LineResponse']=None, xml_namespaces = None):
		super().__init__(
		response,
		document_reference,
		issuer_party,
		recipient_party,
		line_response, xml_namespaces)
class DocumentTenderRequirement(cac_types.__TenderRequirementType):

	def __init__(self,		name:cbc.Name,
		description:List[cbc.Description]=None,
		template_document_reference:'TemplateDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		name,
		description,
		template_document_reference, xml_namespaces)
class DriverPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class DropoffTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class DurationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class Duty(cac_types.__DutyType):

	def __init__(self,		amount:cbc.Amount,
		duty:cbc.Duty=None,
		duty_code:cbc.DutyCode=None,
		tax_category:'TaxCategory'=None, xml_namespaces = None):
		super().__init__(
		amount,
		duty,
		duty_code,
		tax_category, xml_namespaces)
class EconomicOperatorRole(cac_types.__EconomicOperatorRoleType):

	def __init__(self,		role_code:cbc.RoleCode=None,
		role_description:List[cbc.RoleDescription]=None, xml_namespaces = None):
		super().__init__(
		role_code,
		role_description, xml_namespaces)
class EconomicOperatorShortList(cac_types.__EconomicOperatorShortListType):

	def __init__(self,		limitation_description:List[cbc.LimitationDescription]=None,
		expected_quantity:cbc.ExpectedQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		pre_selected_party:List['PreSelectedParty']=None, xml_namespaces = None):
		super().__init__(
		limitation_description,
		expected_quantity,
		maximum_quantity,
		minimum_quantity,
		pre_selected_party, xml_namespaces)
class EffectivePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class EmbassyEndorsement(cac_types.__EndorsementType):

	def __init__(self,		document_id:cbc.DocumentID,
		approval_status:cbc.ApprovalStatus,
		endorser_party:'EndorserParty',
		remarks:List[cbc.Remarks]=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		document_id,
		approval_status,
		endorser_party,
		remarks,
		signature, xml_namespaces)
class EmergencyTemperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class EmissionCalculationMethod(cac_types.__EmissionCalculationMethodType):

	def __init__(self,		calculation_method_code:cbc.CalculationMethodCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		measurement_from_location:'MeasurementFromLocation'=None,
		measurement_to_location:'MeasurementToLocation'=None, xml_namespaces = None):
		super().__init__(
		calculation_method_code,
		fullness_indication_code,
		measurement_from_location,
		measurement_to_location, xml_namespaces)
class EmploymentLegislationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class Endorsement(cac_types.__EndorsementType):

	def __init__(self,		document_id:cbc.DocumentID,
		approval_status:cbc.ApprovalStatus,
		endorser_party:'EndorserParty',
		remarks:List[cbc.Remarks]=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		document_id,
		approval_status,
		endorser_party,
		remarks,
		signature, xml_namespaces)
class EndorserParty(cac_types.__EndorserPartyType):

	def __init__(self,		role_code:cbc.RoleCode,
		sequence_numeric:cbc.SequenceNumeric,
		party:'Party',
		signatory_contact:'SignatoryContact', xml_namespaces = None):
		super().__init__(
		role_code,
		sequence_numeric,
		party,
		signatory_contact, xml_namespaces)
class EnergyTaxReport(cac_types.__EnergyTaxReportType):

	def __init__(self,		tax_scheme:'TaxScheme',
		tax_energy_amount:cbc.TaxEnergyAmount=None,
		tax_energy_on_account_amount:cbc.TaxEnergyOnAccountAmount=None,
		tax_energy_balance_amount:cbc.TaxEnergyBalanceAmount=None, xml_namespaces = None):
		super().__init__(
		tax_scheme,
		tax_energy_amount,
		tax_energy_on_account_amount,
		tax_energy_balance_amount, xml_namespaces)
class EnergyWaterConsumptionCorrection(cac_types.__ConsumptionCorrectionType):

	def __init__(self,		correction_type:cbc.CorrectionType=None,
		correction_type_code:cbc.CorrectionTypeCode=None,
		meter_number:cbc.MeterNumber=None,
		gas_pressure_quantity:cbc.GasPressureQuantity=None,
		actual_temperature_reduction_quantity:cbc.ActualTemperatureReductionQuantity=None,
		normal_temperature_reduction_quantity:cbc.NormalTemperatureReductionQuantity=None,
		difference_temperature_reduction_quantity:cbc.DifferenceTemperatureReductionQuantity=None,
		description:List[cbc.Description]=None,
		correction_unit_amount:cbc.CorrectionUnitAmount=None,
		consumption_energy_quantity:cbc.ConsumptionEnergyQuantity=None,
		consumption_water_quantity:cbc.ConsumptionWaterQuantity=None,
		correction_amount:cbc.CorrectionAmount=None, xml_namespaces = None):
		super().__init__(
		correction_type,
		correction_type_code,
		meter_number,
		gas_pressure_quantity,
		actual_temperature_reduction_quantity,
		normal_temperature_reduction_quantity,
		difference_temperature_reduction_quantity,
		description,
		correction_unit_amount,
		consumption_energy_quantity,
		consumption_water_quantity,
		correction_amount, xml_namespaces)
class EnergyWaterSupply(cac_types.__EnergyWaterSupplyType):

	def __init__(self,		consumption_report:List['ConsumptionReport']=None,
		energy_tax_report:List['EnergyTaxReport']=None,
		consumption_average:List['ConsumptionAverage']=None,
		energy_water_consumption_correction:List['EnergyWaterConsumptionCorrection']=None, xml_namespaces = None):
		super().__init__(
		consumption_report,
		energy_tax_report,
		consumption_average,
		energy_water_consumption_correction, xml_namespaces)
class EnvironmentalEmission(cac_types.__EnvironmentalEmissionType):

	def __init__(self,		environmental_emission_type_code:cbc.EnvironmentalEmissionTypeCode,
		value_measure:cbc.ValueMeasure,
		description:List[cbc.Description]=None,
		emission_calculation_method:List['EmissionCalculationMethod']=None, xml_namespaces = None):
		super().__init__(
		environmental_emission_type_code,
		value_measure,
		description,
		emission_calculation_method, xml_namespaces)
class EnvironmentalLegislationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class EstimatedArrivalTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class EstimatedDeliveryPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class EstimatedDepartureTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class EstimatedDespatchPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class EstimatedDurationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class EstimatedTransitPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class EvaluationCriterion(cac_types.__EvaluationCriterionType):

	def __init__(self,		evaluation_criterion_type_code:cbc.EvaluationCriterionTypeCode=None,
		description:List[cbc.Description]=None,
		threshold_amount:cbc.ThresholdAmount=None,
		threshold_quantity:cbc.ThresholdQuantity=None,
		expression_code:cbc.ExpressionCode=None,
		expression:List[cbc.Expression]=None,
		duration_period:'DurationPeriod'=None,
		suggested_evidence:List['SuggestedEvidence']=None, xml_namespaces = None):
		super().__init__(
		evaluation_criterion_type_code,
		description,
		threshold_amount,
		threshold_quantity,
		expression_code,
		expression,
		duration_period,
		suggested_evidence, xml_namespaces)
class Event(cac_types.__EventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		type_code:cbc.TypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		occurence_location:'OccurenceLocation'=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		type_code,
		description,
		completion_indicator,
		current_status,
		contact,
		occurence_location, xml_namespaces)
class EventComment(cac_types.__EventCommentType):

	def __init__(self,		comment:cbc.Comment,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None, xml_namespaces = None):
		super().__init__(
		comment,
		issue_date,
		issue_time, xml_namespaces)
class EventLineItem(cac_types.__EventLineItemType):

	def __init__(self,		supply_item:'SupplyItem',
		line_number_numeric:cbc.LineNumberNumeric=None,
		participating_locations_location:'ParticipatingLocationsLocation'=None,
		retail_planned_impact:List['RetailPlannedImpact']=None, xml_namespaces = None):
		super().__init__(
		supply_item,
		line_number_numeric,
		participating_locations_location,
		retail_planned_impact, xml_namespaces)
class EventTactic(cac_types.__EventTacticType):

	def __init__(self,		event_tactic_enumeration:'EventTacticEnumeration',
		comment:cbc.Comment=None,
		quantity:cbc.Quantity=None,
		period:'Period'=None, xml_namespaces = None):
		super().__init__(
		event_tactic_enumeration,
		comment,
		quantity,
		period, xml_namespaces)
class EventTacticEnumeration(cac_types.__EventTacticEnumerationType):

	def __init__(self,		consumer_incentive_tactic_type_code:cbc.ConsumerIncentiveTacticTypeCode=None,
		display_tactic_type_code:cbc.DisplayTacticTypeCode=None,
		feature_tactic_type_code:cbc.FeatureTacticTypeCode=None,
		trade_item_packing_labeling_type_code:cbc.TradeItemPackingLabelingTypeCode=None, xml_namespaces = None):
		super().__init__(
		consumer_incentive_tactic_type_code,
		display_tactic_type_code,
		feature_tactic_type_code,
		trade_item_packing_labeling_type_code, xml_namespaces)
class Evidence(cac_types.__EvidenceType):

	def __init__(self,		id_:cbc.ID=None,
		evidence_type_code:cbc.EvidenceTypeCode=None,
		description:List[cbc.Description]=None,
		candidate_statement:List[cbc.CandidateStatement]=None,
		evidence_issuing_party:'EvidenceIssuingParty'=None,
		document_reference:'DocumentReference'=None,
		language:'Language'=None, xml_namespaces = None):
		super().__init__(
		id_,
		evidence_type_code,
		description,
		candidate_statement,
		evidence_issuing_party,
		document_reference,
		language, xml_namespaces)
class EvidenceDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class EvidenceIssuingParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class EvidenceSupplied(cac_types.__EvidenceSuppliedType):

	def __init__(self,		id_:cbc.ID, xml_namespaces = None):
		super().__init__(
		id_, xml_namespaces)
class ExaminationTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ExceptionCriteriaLine(cac_types.__ExceptionCriteriaLineType):

	def __init__(self,		id_:cbc.ID,
		threshold_value_comparison_code:cbc.ThresholdValueComparisonCode,
		threshold_quantity:cbc.ThresholdQuantity,
		note:List[cbc.Note]=None,
		exception_status_code:cbc.ExceptionStatusCode=None,
		collaboration_priority_code:cbc.CollaborationPriorityCode=None,
		exception_resolution_code:cbc.ExceptionResolutionCode=None,
		supply_chain_activity_type_code:cbc.SupplyChainActivityTypeCode=None,
		performance_metric_type_code:cbc.PerformanceMetricTypeCode=None,
		effective_period:'EffectivePeriod'=None,
		supply_item:List['SupplyItem']=None,
		forecast_exception_criterion_line:'ForecastExceptionCriterionLine'=None, xml_namespaces = None):
		super().__init__(
		id_,
		threshold_value_comparison_code,
		threshold_quantity,
		note,
		exception_status_code,
		collaboration_priority_code,
		exception_resolution_code,
		supply_chain_activity_type_code,
		performance_metric_type_code,
		effective_period,
		supply_item,
		forecast_exception_criterion_line, xml_namespaces)
class ExceptionNotificationLine(cac_types.__ExceptionNotificationLineType):

	def __init__(self,		id_:cbc.ID,
		compared_value_measure:cbc.ComparedValueMeasure,
		source_value_measure:cbc.SourceValueMeasure,
		supply_item:'SupplyItem',
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		exception_status_code:cbc.ExceptionStatusCode=None,
		collaboration_priority_code:cbc.CollaborationPriorityCode=None,
		resolution_code:cbc.ResolutionCode=None,
		variance_quantity:cbc.VarianceQuantity=None,
		supply_chain_activity_type_code:cbc.SupplyChainActivityTypeCode=None,
		performance_metric_type_code:cbc.PerformanceMetricTypeCode=None,
		exception_observation_period:'ExceptionObservationPeriod'=None,
		document_reference:List['DocumentReference']=None,
		forecast_exception:'ForecastException'=None, xml_namespaces = None):
		super().__init__(
		id_,
		compared_value_measure,
		source_value_measure,
		supply_item,
		note,
		description,
		exception_status_code,
		collaboration_priority_code,
		resolution_code,
		variance_quantity,
		supply_chain_activity_type_code,
		performance_metric_type_code,
		exception_observation_period,
		document_reference,
		forecast_exception, xml_namespaces)
class ExceptionObservationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ExchangeRate(cac_types.__ExchangeRateType):

	def __init__(self,		source_currency_code:cbc.SourceCurrencyCode,
		target_currency_code:cbc.TargetCurrencyCode,
		source_currency_base_rate:cbc.SourceCurrencyBaseRate=None,
		target_currency_base_rate:cbc.TargetCurrencyBaseRate=None,
		exchange_market_id:cbc.ExchangeMarketID=None,
		calculation_rate:cbc.CalculationRate=None,
		mathematic_operator_code:cbc.MathematicOperatorCode=None,
		date:cbc.Date=None,
		foreign_exchange_contract:'ForeignExchangeContract'=None, xml_namespaces = None):
		super().__init__(
		source_currency_code,
		target_currency_code,
		source_currency_base_rate,
		target_currency_base_rate,
		exchange_market_id,
		calculation_rate,
		mathematic_operator_code,
		date,
		foreign_exchange_contract, xml_namespaces)
class ExportCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class ExportationTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ExporterParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ExternalReference(cac_types.__ExternalReferenceType):

	def __init__(self,		uri:cbc.URI=None,
		document_hash:cbc.DocumentHash=None,
		hash_algorithm_method:cbc.HashAlgorithmMethod=None,
		expiry_date:cbc.ExpiryDate=None,
		expiry_time:cbc.ExpiryTime=None,
		mime_code:cbc.MimeCode=None,
		format_code:cbc.FormatCode=None,
		encoding_code:cbc.EncodingCode=None,
		character_set_code:cbc.CharacterSetCode=None,
		file_name:cbc.FileName=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		uri,
		document_hash,
		hash_algorithm_method,
		expiry_date,
		expiry_time,
		mime_code,
		format_code,
		encoding_code,
		character_set_code,
		file_name,
		description, xml_namespaces)
class ExtraAllowanceCharge(cac_types.__AllowanceChargeType):

	def __init__(self,		charge_indicator:cbc.ChargeIndicator,
		amount:cbc.Amount,
		id_:cbc.ID=None,
		allowance_charge_reason_code:cbc.AllowanceChargeReasonCode=None,
		allowance_charge_reason:List[cbc.AllowanceChargeReason]=None,
		multiplier_factor_numeric:cbc.MultiplierFactorNumeric=None,
		prepaid_indicator:cbc.PrepaidIndicator=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		base_amount:cbc.BaseAmount=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_category:List['TaxCategory']=None,
		tax_total:'TaxTotal'=None,
		payment_means:List['PaymentMeans']=None, xml_namespaces = None):
		super().__init__(
		charge_indicator,
		amount,
		id_,
		allowance_charge_reason_code,
		allowance_charge_reason,
		multiplier_factor_numeric,
		prepaid_indicator,
		sequence_numeric,
		base_amount,
		accounting_cost_code,
		accounting_cost,
		per_unit_amount,
		tax_category,
		tax_total,
		payment_means, xml_namespaces)
class FinalDeliveryParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class FinalDeliveryTransportationService(cac_types.__TransportationServiceType):

	def __init__(self,		transport_service_code:cbc.TransportServiceCode,
		tariff_class_code:cbc.TariffClassCode=None,
		priority:cbc.Priority=None,
		freight_rate_class_code:cbc.FreightRateClassCode=None,
		transportation_service_description:List[cbc.TransportationServiceDescription]=None,
		transportation_service_details_uri:cbc.TransportationServiceDetailsURI=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		name:cbc.Name=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		transport_equipment:List['TransportEquipment']=None,
		supported_transport_equipment:List['SupportedTransportEquipment']=None,
		unsupported_transport_equipment:List['UnsupportedTransportEquipment']=None,
		commodity_classification:List['CommodityClassification']=None,
		supported_commodity_classification:List['SupportedCommodityClassification']=None,
		unsupported_commodity_classification:List['UnsupportedCommodityClassification']=None,
		total_capacity_dimension:'TotalCapacityDimension'=None,
		shipment_stage:List['ShipmentStage']=None,
		transport_event:List['TransportEvent']=None,
		responsible_transport_service_provider_party:'ResponsibleTransportServiceProviderParty'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		estimated_duration_period:'EstimatedDurationPeriod'=None,
		scheduled_service_frequency:List['ScheduledServiceFrequency']=None, xml_namespaces = None):
		super().__init__(
		transport_service_code,
		tariff_class_code,
		priority,
		freight_rate_class_code,
		transportation_service_description,
		transportation_service_details_uri,
		nomination_date,
		nomination_time,
		name,
		sequence_numeric,
		transport_equipment,
		supported_transport_equipment,
		unsupported_transport_equipment,
		commodity_classification,
		supported_commodity_classification,
		unsupported_commodity_classification,
		total_capacity_dimension,
		shipment_stage,
		transport_event,
		responsible_transport_service_provider_party,
		environmental_emission,
		estimated_duration_period,
		scheduled_service_frequency, xml_namespaces)
class FinalDestinationCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class FinalFinancialGuarantee(cac_types.__FinancialGuaranteeType):

	def __init__(self,		guarantee_type_code:cbc.GuaranteeTypeCode,
		description:List[cbc.Description]=None,
		liability_amount:cbc.LiabilityAmount=None,
		amount_rate:cbc.AmountRate=None,
		constitution_period:'ConstitutionPeriod'=None, xml_namespaces = None):
		super().__init__(
		guarantee_type_code,
		description,
		liability_amount,
		amount_rate,
		constitution_period, xml_namespaces)
class FinancialAccount(cac_types.__FinancialAccountType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		alias_name:cbc.AliasName=None,
		account_type_code:cbc.AccountTypeCode=None,
		account_format_code:cbc.AccountFormatCode=None,
		currency_code:cbc.CurrencyCode=None,
		payment_note:List[cbc.PaymentNote]=None,
		financial_institution_branch:'FinancialInstitutionBranch'=None,
		country:'Country'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		alias_name,
		account_type_code,
		account_format_code,
		currency_code,
		payment_note,
		financial_institution_branch,
		country, xml_namespaces)
class FinancialCapability(cac_types.__CapabilityType):

	def __init__(self,		capability_type_code:cbc.CapabilityTypeCode=None,
		description:List[cbc.Description]=None,
		value_amount:cbc.ValueAmount=None,
		value_quantity:cbc.ValueQuantity=None,
		evidence_supplied:List['EvidenceSupplied']=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		capability_type_code,
		description,
		value_amount,
		value_quantity,
		evidence_supplied,
		validity_period, xml_namespaces)
class FinancialEvaluationCriterion(cac_types.__EvaluationCriterionType):

	def __init__(self,		evaluation_criterion_type_code:cbc.EvaluationCriterionTypeCode=None,
		description:List[cbc.Description]=None,
		threshold_amount:cbc.ThresholdAmount=None,
		threshold_quantity:cbc.ThresholdQuantity=None,
		expression_code:cbc.ExpressionCode=None,
		expression:List[cbc.Expression]=None,
		duration_period:'DurationPeriod'=None,
		suggested_evidence:List['SuggestedEvidence']=None, xml_namespaces = None):
		super().__init__(
		evaluation_criterion_type_code,
		description,
		threshold_amount,
		threshold_quantity,
		expression_code,
		expression,
		duration_period,
		suggested_evidence, xml_namespaces)
class FinancialGuarantee(cac_types.__FinancialGuaranteeType):

	def __init__(self,		guarantee_type_code:cbc.GuaranteeTypeCode,
		description:List[cbc.Description]=None,
		liability_amount:cbc.LiabilityAmount=None,
		amount_rate:cbc.AmountRate=None,
		constitution_period:'ConstitutionPeriod'=None, xml_namespaces = None):
		super().__init__(
		guarantee_type_code,
		description,
		liability_amount,
		amount_rate,
		constitution_period, xml_namespaces)
class FinancialInstitution(cac_types.__FinancialInstitutionType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		address:'Address'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		address, xml_namespaces)
class FinancialInstitutionBranch(cac_types.__BranchType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		financial_institution:'FinancialInstitution'=None,
		address:'Address'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		financial_institution,
		address, xml_namespaces)
class FinancingFinancialAccount(cac_types.__FinancialAccountType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		alias_name:cbc.AliasName=None,
		account_type_code:cbc.AccountTypeCode=None,
		account_format_code:cbc.AccountFormatCode=None,
		currency_code:cbc.CurrencyCode=None,
		payment_note:List[cbc.PaymentNote]=None,
		financial_institution_branch:'FinancialInstitutionBranch'=None,
		country:'Country'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		alias_name,
		account_type_code,
		account_format_code,
		currency_code,
		payment_note,
		financial_institution_branch,
		country, xml_namespaces)
class FinancingParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class FirstArrivalPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class FiscalLegislationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class FlashpointTemperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class FloorSpaceMeasurementDimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class ForecastException(cac_types.__ForecastExceptionType):

	def __init__(self,		forecast_purpose_code:cbc.ForecastPurposeCode,
		forecast_type_code:cbc.ForecastTypeCode,
		issue_date:cbc.IssueDate,
		data_source_code:cbc.DataSourceCode,
		issue_time:cbc.IssueTime=None,
		comparison_data_code:cbc.ComparisonDataCode=None,
		comparison_forecast_issue_time:cbc.ComparisonForecastIssueTime=None,
		comparison_forecast_issue_date:cbc.ComparisonForecastIssueDate=None, xml_namespaces = None):
		super().__init__(
		forecast_purpose_code,
		forecast_type_code,
		issue_date,
		data_source_code,
		issue_time,
		comparison_data_code,
		comparison_forecast_issue_time,
		comparison_forecast_issue_date, xml_namespaces)
class ForecastExceptionCriterionLine(cac_types.__ForecastExceptionCriterionLineType):

	def __init__(self,		forecast_purpose_code:cbc.ForecastPurposeCode,
		forecast_type_code:cbc.ForecastTypeCode,
		data_source_code:cbc.DataSourceCode,
		comparison_data_source_code:cbc.ComparisonDataSourceCode=None,
		time_delta_days_quantity:cbc.TimeDeltaDaysQuantity=None, xml_namespaces = None):
		super().__init__(
		forecast_purpose_code,
		forecast_type_code,
		data_source_code,
		comparison_data_source_code,
		time_delta_days_quantity, xml_namespaces)
class ForecastLine(cac_types.__ForecastLineType):

	def __init__(self,		id_:cbc.ID,
		forecast_type_code:cbc.ForecastTypeCode,
		note:List[cbc.Note]=None,
		frozen_document_indicator:cbc.FrozenDocumentIndicator=None,
		forecast_period:'ForecastPeriod'=None,
		sales_item:'SalesItem'=None, xml_namespaces = None):
		super().__init__(
		id_,
		forecast_type_code,
		note,
		frozen_document_indicator,
		forecast_period,
		sales_item, xml_namespaces)
class ForecastPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ForecastRevisionLine(cac_types.__ForecastRevisionLineType):

	def __init__(self,		id_:cbc.ID,
		revised_forecast_line_id:cbc.RevisedForecastLineID,
		source_forecast_issue_date:cbc.SourceForecastIssueDate,
		source_forecast_issue_time:cbc.SourceForecastIssueTime,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		adjustment_reason_code:cbc.AdjustmentReasonCode=None,
		forecast_period:'ForecastPeriod'=None,
		sales_item:'SalesItem'=None, xml_namespaces = None):
		super().__init__(
		id_,
		revised_forecast_line_id,
		source_forecast_issue_date,
		source_forecast_issue_time,
		note,
		description,
		adjustment_reason_code,
		forecast_period,
		sales_item, xml_namespaces)
class ForeignExchangeContract(cac_types.__ContractType):

	def __init__(self,		id_:cbc.ID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		contract_type_code:cbc.ContractTypeCode=None,
		contract_type:cbc.ContractType=None,
		note:List[cbc.Note]=None,
		version_id:cbc.VersionID=None,
		description:List[cbc.Description]=None,
		validity_period:'ValidityPeriod'=None,
		contract_document_reference:List['ContractDocumentReference']=None,
		nomination_period:'NominationPeriod'=None,
		contractual_delivery:'ContractualDelivery'=None, xml_namespaces = None):
		super().__init__(
		id_,
		issue_date,
		issue_time,
		nomination_date,
		nomination_time,
		contract_type_code,
		contract_type,
		note,
		version_id,
		description,
		validity_period,
		contract_document_reference,
		nomination_period,
		contractual_delivery, xml_namespaces)
class FrameworkAgreement(cac_types.__FrameworkAgreementType):

	def __init__(self,		expected_operator_quantity:cbc.ExpectedOperatorQuantity=None,
		maximum_operator_quantity:cbc.MaximumOperatorQuantity=None,
		justification:List[cbc.Justification]=None,
		frequency:List[cbc.Frequency]=None,
		duration_period:'DurationPeriod'=None,
		subsequent_process_tender_requirement:List['SubsequentProcessTenderRequirement']=None, xml_namespaces = None):
		super().__init__(
		expected_operator_quantity,
		maximum_operator_quantity,
		justification,
		frequency,
		duration_period,
		subsequent_process_tender_requirement, xml_namespaces)
class FreightAllowanceCharge(cac_types.__AllowanceChargeType):

	def __init__(self,		charge_indicator:cbc.ChargeIndicator,
		amount:cbc.Amount,
		id_:cbc.ID=None,
		allowance_charge_reason_code:cbc.AllowanceChargeReasonCode=None,
		allowance_charge_reason:List[cbc.AllowanceChargeReason]=None,
		multiplier_factor_numeric:cbc.MultiplierFactorNumeric=None,
		prepaid_indicator:cbc.PrepaidIndicator=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		base_amount:cbc.BaseAmount=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_category:List['TaxCategory']=None,
		tax_total:'TaxTotal'=None,
		payment_means:List['PaymentMeans']=None, xml_namespaces = None):
		super().__init__(
		charge_indicator,
		amount,
		id_,
		allowance_charge_reason_code,
		allowance_charge_reason,
		multiplier_factor_numeric,
		prepaid_indicator,
		sequence_numeric,
		base_amount,
		accounting_cost_code,
		accounting_cost,
		per_unit_amount,
		tax_category,
		tax_total,
		payment_means, xml_namespaces)
class FreightChargeLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class FreightForwarderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class FrequencyPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class FromLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class GoodsItem(cac_types.__GoodsItemType):

	def __init__(self,		id_:cbc.ID=None,
		sequence_number_id:cbc.SequenceNumberID=None,
		description:List[cbc.Description]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		value_amount:cbc.ValueAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		quantity:cbc.Quantity=None,
		preference_criterion_code:cbc.PreferenceCriterionCode=None,
		required_customs_id:cbc.RequiredCustomsID=None,
		customs_status_code:cbc.CustomsStatusCode=None,
		customs_tariff_quantity:cbc.CustomsTariffQuantity=None,
		customs_import_classified_indicator:cbc.CustomsImportClassifiedIndicator=None,
		chargeable_quantity:cbc.ChargeableQuantity=None,
		returnable_quantity:cbc.ReturnableQuantity=None,
		trace_id:cbc.TraceID=None,
		item:List['Item']=None,
		goods_item_container:List['GoodsItemContainer']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		invoice_line:List['InvoiceLine']=None,
		temperature:List['Temperature']=None,
		contained_goods_item:List['ContainedGoodsItem']=None,
		origin_address:'OriginAddress'=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		measurement_dimension:List['MeasurementDimension']=None,
		containing_package:List['ContainingPackage']=None,
		shipment_document_reference:'ShipmentDocumentReference'=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None, xml_namespaces = None):
		super().__init__(
		id_,
		sequence_number_id,
		description,
		hazardous_risk_indicator,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		insurance_value_amount,
		value_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		quantity,
		preference_criterion_code,
		required_customs_id,
		customs_status_code,
		customs_tariff_quantity,
		customs_import_classified_indicator,
		chargeable_quantity,
		returnable_quantity,
		trace_id,
		item,
		goods_item_container,
		freight_allowance_charge,
		invoice_line,
		temperature,
		contained_goods_item,
		origin_address,
		delivery,
		pickup,
		despatch,
		measurement_dimension,
		containing_package,
		shipment_document_reference,
		minimum_temperature,
		maximum_temperature, xml_namespaces)
class GoodsItemContainer(cac_types.__GoodsItemContainerType):

	def __init__(self,		id_:cbc.ID,
		quantity:cbc.Quantity=None,
		transport_equipment:List['TransportEquipment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		transport_equipment, xml_namespaces)
class GuaranteeDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class GuarantorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class GuidanceDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class HandlingTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class HandlingUnitDespatchLine(cac_types.__DespatchLineType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		delivered_quantity:cbc.DeliveredQuantity=None,
		backorder_quantity:cbc.BackorderQuantity=None,
		backorder_reason:List[cbc.BackorderReason]=None,
		outstanding_quantity:cbc.OutstandingQuantity=None,
		outstanding_reason:List[cbc.OutstandingReason]=None,
		oversupply_quantity:cbc.OversupplyQuantity=None,
		order_line_reference:List['OrderLineReference']=None,
		document_reference:List['DocumentReference']=None,
		shipment:List['Shipment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		uuid,
		note,
		line_status_code,
		delivered_quantity,
		backorder_quantity,
		backorder_reason,
		outstanding_quantity,
		outstanding_reason,
		oversupply_quantity,
		order_line_reference,
		document_reference,
		shipment, xml_namespaces)
class HaulageTradingTerms(cac_types.__TradingTermsType):

	def __init__(self,		information:List[cbc.Information]=None,
		reference:cbc.Reference=None,
		applicable_address:'ApplicableAddress'=None, xml_namespaces = None):
		super().__init__(
		information,
		reference,
		applicable_address, xml_namespaces)
class HazardousGoodsTransit(cac_types.__HazardousGoodsTransitType):

	def __init__(self,		transport_emergency_card_code:cbc.TransportEmergencyCardCode=None,
		packing_criteria_code:cbc.PackingCriteriaCode=None,
		hazardous_regulation_code:cbc.HazardousRegulationCode=None,
		inhalation_toxicity_zone_code:cbc.InhalationToxicityZoneCode=None,
		transport_authorization_code:cbc.TransportAuthorizationCode=None,
		maximum_temperature:'MaximumTemperature'=None,
		minimum_temperature:'MinimumTemperature'=None, xml_namespaces = None):
		super().__init__(
		transport_emergency_card_code,
		packing_criteria_code,
		hazardous_regulation_code,
		inhalation_toxicity_zone_code,
		transport_authorization_code,
		maximum_temperature,
		minimum_temperature, xml_namespaces)
class HazardousItem(cac_types.__HazardousItemType):

	def __init__(self,		id_:cbc.ID=None,
		placard_notation:cbc.PlacardNotation=None,
		placard_endorsement:cbc.PlacardEndorsement=None,
		additional_information:List[cbc.AdditionalInformation]=None,
		undgcode:cbc.UNDGCode=None,
		emergency_procedures_code:cbc.EmergencyProceduresCode=None,
		medical_first_aid_guide_code:cbc.MedicalFirstAidGuideCode=None,
		technical_name:cbc.TechnicalName=None,
		category_name:cbc.CategoryName=None,
		hazardous_category_code:cbc.HazardousCategoryCode=None,
		upper_orange_hazard_placard_id:cbc.UpperOrangeHazardPlacardID=None,
		lower_orange_hazard_placard_id:cbc.LowerOrangeHazardPlacardID=None,
		marking_id:cbc.MarkingID=None,
		hazard_class_id:cbc.HazardClassID=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		quantity:cbc.Quantity=None,
		contact_party:'ContactParty'=None,
		secondary_hazard:List['SecondaryHazard']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		emergency_temperature:'EmergencyTemperature'=None,
		flashpoint_temperature:'FlashpointTemperature'=None,
		additional_temperature:List['AdditionalTemperature']=None, xml_namespaces = None):
		super().__init__(
		id_,
		placard_notation,
		placard_endorsement,
		additional_information,
		undgcode,
		emergency_procedures_code,
		medical_first_aid_guide_code,
		technical_name,
		category_name,
		hazardous_category_code,
		upper_orange_hazard_placard_id,
		lower_orange_hazard_placard_id,
		marking_id,
		hazard_class_id,
		net_weight_measure,
		net_volume_measure,
		quantity,
		contact_party,
		secondary_hazard,
		hazardous_goods_transit,
		emergency_temperature,
		flashpoint_temperature,
		additional_temperature, xml_namespaces)
class HazardousItemNotificationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class HeadOfficeParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class IdentityDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ImmobilizedSecurity(cac_types.__ImmobilizedSecurityType):

	def __init__(self,		immobilization_certificate_id:cbc.ImmobilizationCertificateID=None,
		security_id:cbc.SecurityID=None,
		issue_date:cbc.IssueDate=None,
		face_value_amount:cbc.FaceValueAmount=None,
		market_value_amount:cbc.MarketValueAmount=None,
		shares_number_quantity:cbc.SharesNumberQuantity=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		immobilization_certificate_id,
		security_id,
		issue_date,
		face_value_amount,
		market_value_amount,
		shares_number_quantity,
		issuer_party, xml_namespaces)
class ImporterParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class InformationContentProviderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class InstructionForReturnsLine(cac_types.__InstructionForReturnsLineType):

	def __init__(self,		id_:cbc.ID,
		quantity:cbc.Quantity,
		item:'Item',
		note:List[cbc.Note]=None,
		manufacturer_party:'ManufacturerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		item,
		note,
		manufacturer_party, xml_namespaces)
class InsuranceEndorsement(cac_types.__EndorsementType):

	def __init__(self,		document_id:cbc.DocumentID,
		approval_status:cbc.ApprovalStatus,
		endorser_party:'EndorserParty',
		remarks:List[cbc.Remarks]=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		document_id,
		approval_status,
		endorser_party,
		remarks,
		signature, xml_namespaces)
class InsuranceParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class InterestedParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class InterestedProcurementProjectLot(cac_types.__ProcurementProjectLotType):

	def __init__(self,		id_:cbc.ID,
		tendering_terms:'TenderingTerms'=None,
		procurement_project:'ProcurementProject'=None, xml_namespaces = None):
		super().__init__(
		id_,
		tendering_terms,
		procurement_project, xml_namespaces)
class InventoryLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class InventoryPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class InventoryReportLine(cac_types.__InventoryReportLineType):

	def __init__(self,		id_:cbc.ID,
		quantity:cbc.Quantity,
		item:'Item',
		note:List[cbc.Note]=None,
		inventory_value_amount:cbc.InventoryValueAmount=None,
		availability_date:cbc.AvailabilityDate=None,
		availability_status_code:cbc.AvailabilityStatusCode=None,
		inventory_location:'InventoryLocation'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		item,
		note,
		inventory_value_amount,
		availability_date,
		availability_status_code,
		inventory_location, xml_namespaces)
class InventoryReportingParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class InvitationSubmissionPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class InvoiceDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class InvoiceLine(cac_types.__InvoiceLineType):

	def __init__(self,		id_:cbc.ID,
		line_extension_amount:cbc.LineExtensionAmount,
		item:'Item',
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		invoiced_quantity:cbc.InvoicedQuantity=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		free_of_charge_indicator:cbc.FreeOfChargeIndicator=None,
		invoice_period:List['InvoicePeriod']=None,
		order_line_reference:List['OrderLineReference']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		originator_party:'OriginatorParty'=None,
		delivery:List['Delivery']=None,
		payment_terms:List['PaymentTerms']=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		withholding_tax_total:List['WithholdingTaxTotal']=None,
		price:'Price'=None,
		delivery_terms:'DeliveryTerms'=None,
		sub_invoice_line:List['SubInvoiceLine']=None,
		item_price_extension:'ItemPriceExtension'=None, xml_namespaces = None):
		super().__init__(
		id_,
		line_extension_amount,
		item,
		uuid,
		note,
		invoiced_quantity,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		free_of_charge_indicator,
		invoice_period,
		order_line_reference,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		originator_party,
		delivery,
		payment_terms,
		allowance_charge,
		tax_total,
		withholding_tax_total,
		price,
		delivery_terms,
		sub_invoice_line,
		item_price_extension, xml_namespaces)
class InvoicePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class IssuerEndorsement(cac_types.__EndorsementType):

	def __init__(self,		document_id:cbc.DocumentID,
		approval_status:cbc.ApprovalStatus,
		endorser_party:'EndorserParty',
		remarks:List[cbc.Remarks]=None,
		signature:List['Signature']=None, xml_namespaces = None):
		super().__init__(
		document_id,
		approval_status,
		endorser_party,
		remarks,
		signature, xml_namespaces)
class IssuerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class IssuingCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class Item(cac_types.__ItemType):

	def __init__(self,		description:List[cbc.Description]=None,
		pack_quantity:cbc.PackQuantity=None,
		pack_size_numeric:cbc.PackSizeNumeric=None,
		catalogue_indicator:cbc.CatalogueIndicator=None,
		name:cbc.Name=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		additional_information:List[cbc.AdditionalInformation]=None,
		keyword:List[cbc.Keyword]=None,
		brand_name:List[cbc.BrandName]=None,
		model_name:List[cbc.ModelName]=None,
		buyers_item_identification:'BuyersItemIdentification'=None,
		sellers_item_identification:'SellersItemIdentification'=None,
		manufacturers_item_identification:List['ManufacturersItemIdentification']=None,
		standard_item_identification:'StandardItemIdentification'=None,
		catalogue_item_identification:'CatalogueItemIdentification'=None,
		additional_item_identification:List['AdditionalItemIdentification']=None,
		catalogue_document_reference:'CatalogueDocumentReference'=None,
		item_specification_document_reference:List['ItemSpecificationDocumentReference']=None,
		origin_country:'OriginCountry'=None,
		commodity_classification:List['CommodityClassification']=None,
		transaction_conditions:List['TransactionConditions']=None,
		hazardous_item:List['HazardousItem']=None,
		classified_tax_category:List['ClassifiedTaxCategory']=None,
		additional_item_property:List['AdditionalItemProperty']=None,
		manufacturer_party:List['ManufacturerParty']=None,
		information_content_provider_party:'InformationContentProviderParty'=None,
		origin_address:List['OriginAddress']=None,
		item_instance:List['ItemInstance']=None,
		certificate:List['Certificate']=None,
		dimension:List['Dimension']=None, xml_namespaces = None):
		super().__init__(
		description,
		pack_quantity,
		pack_size_numeric,
		catalogue_indicator,
		name,
		hazardous_risk_indicator,
		additional_information,
		keyword,
		brand_name,
		model_name,
		buyers_item_identification,
		sellers_item_identification,
		manufacturers_item_identification,
		standard_item_identification,
		catalogue_item_identification,
		additional_item_identification,
		catalogue_document_reference,
		item_specification_document_reference,
		origin_country,
		commodity_classification,
		transaction_conditions,
		hazardous_item,
		classified_tax_category,
		additional_item_property,
		manufacturer_party,
		information_content_provider_party,
		origin_address,
		item_instance,
		certificate,
		dimension, xml_namespaces)
class ItemComparison(cac_types.__ItemComparisonType):

	def __init__(self,		price_amount:cbc.PriceAmount=None,
		quantity:cbc.Quantity=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		quantity, xml_namespaces)
class ItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class ItemInformationRequestLine(cac_types.__ItemInformationRequestLineType):

	def __init__(self,		time_frequency_code:cbc.TimeFrequencyCode=None,
		supply_chain_activity_type_code:cbc.SupplyChainActivityTypeCode=None,
		forecast_type_code:cbc.ForecastTypeCode=None,
		performance_metric_type_code:cbc.PerformanceMetricTypeCode=None,
		period:List['Period']=None,
		sales_item:List['SalesItem']=None, xml_namespaces = None):
		super().__init__(
		time_frequency_code,
		supply_chain_activity_type_code,
		forecast_type_code,
		performance_metric_type_code,
		period,
		sales_item, xml_namespaces)
class ItemInstance(cac_types.__ItemInstanceType):

	def __init__(self,		product_trace_id:cbc.ProductTraceID=None,
		manufacture_date:cbc.ManufactureDate=None,
		manufacture_time:cbc.ManufactureTime=None,
		best_before_date:cbc.BestBeforeDate=None,
		registration_id:cbc.RegistrationID=None,
		serial_id:cbc.SerialID=None,
		additional_item_property:List['AdditionalItemProperty']=None,
		lot_identification:'LotIdentification'=None, xml_namespaces = None):
		super().__init__(
		product_trace_id,
		manufacture_date,
		manufacture_time,
		best_before_date,
		registration_id,
		serial_id,
		additional_item_property,
		lot_identification, xml_namespaces)
class ItemLocationQuantity(cac_types.__ItemLocationQuantityType):

	def __init__(self,		lead_time_measure:cbc.LeadTimeMeasure=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		trading_restrictions:List[cbc.TradingRestrictions]=None,
		applicable_territory_address:List['ApplicableTerritoryAddress']=None,
		price:'Price'=None,
		delivery_unit:List['DeliveryUnit']=None,
		applicable_tax_category:List['ApplicableTaxCategory']=None,
		package:'Package'=None,
		allowance_charge:List['AllowanceCharge']=None,
		dependent_price_reference:'DependentPriceReference'=None, xml_namespaces = None):
		super().__init__(
		lead_time_measure,
		minimum_quantity,
		maximum_quantity,
		hazardous_risk_indicator,
		trading_restrictions,
		applicable_territory_address,
		price,
		delivery_unit,
		applicable_tax_category,
		package,
		allowance_charge,
		dependent_price_reference, xml_namespaces)
class ItemManagementProfile(cac_types.__ItemManagementProfileType):

	def __init__(self,		effective_period:'EffectivePeriod',
		item:'Item',
		frozen_period_days_numeric:cbc.FrozenPeriodDaysNumeric=None,
		minimum_inventory_quantity:cbc.MinimumInventoryQuantity=None,
		multiple_order_quantity:cbc.MultipleOrderQuantity=None,
		order_interval_days_numeric:cbc.OrderIntervalDaysNumeric=None,
		replenishment_owner_description:List[cbc.ReplenishmentOwnerDescription]=None,
		target_service_percent:cbc.TargetServicePercent=None,
		target_inventory_quantity:cbc.TargetInventoryQuantity=None,
		item_location_quantity:'ItemLocationQuantity'=None, xml_namespaces = None):
		super().__init__(
		effective_period,
		item,
		frozen_period_days_numeric,
		minimum_inventory_quantity,
		multiple_order_quantity,
		order_interval_days_numeric,
		replenishment_owner_description,
		target_service_percent,
		target_inventory_quantity,
		item_location_quantity, xml_namespaces)
class ItemPriceExtension(cac_types.__PriceExtensionType):

	def __init__(self,		amount:cbc.Amount,
		tax_total:List['TaxTotal']=None, xml_namespaces = None):
		super().__init__(
		amount,
		tax_total, xml_namespaces)
class ItemProperty(cac_types.__ItemPropertyType):

	def __init__(self,		name:cbc.Name,
		id_:cbc.ID=None,
		name_code:cbc.NameCode=None,
		test_method:cbc.TestMethod=None,
		value:cbc.Value=None,
		value_quantity:cbc.ValueQuantity=None,
		value_qualifier:List[cbc.ValueQualifier]=None,
		importance_code:cbc.ImportanceCode=None,
		list_value:List[cbc.ListValue]=None,
		usability_period:'UsabilityPeriod'=None,
		item_property_group:List['ItemPropertyGroup']=None,
		range_dimension:'RangeDimension'=None,
		item_property_range:'ItemPropertyRange'=None, xml_namespaces = None):
		super().__init__(
		name,
		id_,
		name_code,
		test_method,
		value,
		value_quantity,
		value_qualifier,
		importance_code,
		list_value,
		usability_period,
		item_property_group,
		range_dimension,
		item_property_range, xml_namespaces)
class ItemPropertyGroup(cac_types.__ItemPropertyGroupType):

	def __init__(self,		id_:cbc.ID,
		name:cbc.Name=None,
		importance_code:cbc.ImportanceCode=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		importance_code, xml_namespaces)
class ItemPropertyRange(cac_types.__ItemPropertyRangeType):

	def __init__(self,		minimum_value:cbc.MinimumValue=None,
		maximum_value:cbc.MaximumValue=None, xml_namespaces = None):
		super().__init__(
		minimum_value,
		maximum_value, xml_namespaces)
class ItemSpecificationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class JurisdictionRegionAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class KeywordItemProperty(cac_types.__ItemPropertyType):

	def __init__(self,		name:cbc.Name,
		id_:cbc.ID=None,
		name_code:cbc.NameCode=None,
		test_method:cbc.TestMethod=None,
		value:cbc.Value=None,
		value_quantity:cbc.ValueQuantity=None,
		value_qualifier:List[cbc.ValueQualifier]=None,
		importance_code:cbc.ImportanceCode=None,
		list_value:List[cbc.ListValue]=None,
		usability_period:'UsabilityPeriod'=None,
		item_property_group:List['ItemPropertyGroup']=None,
		range_dimension:'RangeDimension'=None,
		item_property_range:'ItemPropertyRange'=None, xml_namespaces = None):
		super().__init__(
		name,
		id_,
		name_code,
		test_method,
		value,
		value_quantity,
		value_qualifier,
		importance_code,
		list_value,
		usability_period,
		item_property_group,
		range_dimension,
		item_property_range, xml_namespaces)
class Language(cac_types.__LanguageType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		locale_code:cbc.LocaleCode=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		locale_code, xml_namespaces)
class LastExitPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class LegalDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class LegalMonetaryTotal(cac_types.__MonetaryTotalType):

	def __init__(self,		payable_amount:cbc.PayableAmount,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_exclusive_amount:cbc.TaxExclusiveAmount=None,
		tax_inclusive_amount:cbc.TaxInclusiveAmount=None,
		allowance_total_amount:cbc.AllowanceTotalAmount=None,
		charge_total_amount:cbc.ChargeTotalAmount=None,
		prepaid_amount:cbc.PrepaidAmount=None,
		payable_rounding_amount:cbc.PayableRoundingAmount=None,
		payable_alternative_amount:cbc.PayableAlternativeAmount=None, xml_namespaces = None):
		super().__init__(
		payable_amount,
		line_extension_amount,
		tax_exclusive_amount,
		tax_inclusive_amount,
		allowance_total_amount,
		charge_total_amount,
		prepaid_amount,
		payable_rounding_amount,
		payable_alternative_amount, xml_namespaces)
class LineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class LineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class LineResponse(cac_types.__LineResponseType):

	def __init__(self,		line_reference:'LineReference',
		response:List['Response']=None, xml_namespaces = None):
		super().__init__(
		line_reference,
		response, xml_namespaces)
class LineValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class LoadingLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class LoadingPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class LoadingProofParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class LoadingTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class Location(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class LocationAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class LocationCoordinate(cac_types.__LocationCoordinateType):

	def __init__(self,		coordinate_system_code:cbc.CoordinateSystemCode=None,
		latitude_degrees_measure:cbc.LatitudeDegreesMeasure=None,
		latitude_minutes_measure:cbc.LatitudeMinutesMeasure=None,
		latitude_direction_code:cbc.LatitudeDirectionCode=None,
		longitude_degrees_measure:cbc.LongitudeDegreesMeasure=None,
		longitude_minutes_measure:cbc.LongitudeMinutesMeasure=None,
		longitude_direction_code:cbc.LongitudeDirectionCode=None,
		altitude_measure:cbc.AltitudeMeasure=None, xml_namespaces = None):
		super().__init__(
		coordinate_system_code,
		latitude_degrees_measure,
		latitude_minutes_measure,
		latitude_direction_code,
		longitude_degrees_measure,
		longitude_minutes_measure,
		longitude_direction_code,
		altitude_measure, xml_namespaces)
class LogisticsOperatorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class LotIdentification(cac_types.__LotIdentificationType):

	def __init__(self,		lot_number_id:cbc.LotNumberID=None,
		expiry_date:cbc.ExpiryDate=None,
		additional_item_property:List['AdditionalItemProperty']=None, xml_namespaces = None):
		super().__init__(
		lot_number_id,
		expiry_date,
		additional_item_property, xml_namespaces)
class MainCarriageShipmentStage(cac_types.__ShipmentStageType):

	def __init__(self,		id_:cbc.ID=None,
		transport_mode_code:cbc.TransportModeCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		transit_direction_code:cbc.TransitDirectionCode=None,
		pre_carriage_indicator:cbc.PreCarriageIndicator=None,
		on_carriage_indicator:cbc.OnCarriageIndicator=None,
		estimated_delivery_date:cbc.EstimatedDeliveryDate=None,
		estimated_delivery_time:cbc.EstimatedDeliveryTime=None,
		required_delivery_date:cbc.RequiredDeliveryDate=None,
		required_delivery_time:cbc.RequiredDeliveryTime=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		successive_sequence_id:cbc.SuccessiveSequenceID=None,
		instructions:List[cbc.Instructions]=None,
		demurrage_instructions:List[cbc.DemurrageInstructions]=None,
		crew_quantity:cbc.CrewQuantity=None,
		passenger_quantity:cbc.PassengerQuantity=None,
		transit_period:'TransitPeriod'=None,
		carrier_party:List['CarrierParty']=None,
		transport_means:'TransportMeans'=None,
		loading_port_location:'LoadingPortLocation'=None,
		unloading_port_location:'UnloadingPortLocation'=None,
		transship_port_location:'TransshipPortLocation'=None,
		loading_transport_event:'LoadingTransportEvent'=None,
		examination_transport_event:'ExaminationTransportEvent'=None,
		availability_transport_event:'AvailabilityTransportEvent'=None,
		exportation_transport_event:'ExportationTransportEvent'=None,
		discharge_transport_event:'DischargeTransportEvent'=None,
		warehousing_transport_event:'WarehousingTransportEvent'=None,
		takeover_transport_event:'TakeoverTransportEvent'=None,
		optional_takeover_transport_event:'OptionalTakeoverTransportEvent'=None,
		dropoff_transport_event:'DropoffTransportEvent'=None,
		actual_pickup_transport_event:'ActualPickupTransportEvent'=None,
		delivery_transport_event:'DeliveryTransportEvent'=None,
		receipt_transport_event:'ReceiptTransportEvent'=None,
		storage_transport_event:'StorageTransportEvent'=None,
		acceptance_transport_event:'AcceptanceTransportEvent'=None,
		terminal_operator_party:'TerminalOperatorParty'=None,
		customs_agent_party:'CustomsAgentParty'=None,
		estimated_transit_period:'EstimatedTransitPeriod'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		freight_charge_location:'FreightChargeLocation'=None,
		detention_transport_event:List['DetentionTransportEvent']=None,
		requested_departure_transport_event:'RequestedDepartureTransportEvent'=None,
		requested_arrival_transport_event:'RequestedArrivalTransportEvent'=None,
		requested_waypoint_transport_event:List['RequestedWaypointTransportEvent']=None,
		planned_departure_transport_event:'PlannedDepartureTransportEvent'=None,
		planned_arrival_transport_event:'PlannedArrivalTransportEvent'=None,
		planned_waypoint_transport_event:List['PlannedWaypointTransportEvent']=None,
		actual_departure_transport_event:'ActualDepartureTransportEvent'=None,
		actual_waypoint_transport_event:'ActualWaypointTransportEvent'=None,
		actual_arrival_transport_event:'ActualArrivalTransportEvent'=None,
		transport_event:List['TransportEvent']=None,
		estimated_departure_transport_event:'EstimatedDepartureTransportEvent'=None,
		estimated_arrival_transport_event:'EstimatedArrivalTransportEvent'=None,
		passenger_person:List['PassengerPerson']=None,
		driver_person:List['DriverPerson']=None,
		reporting_person:'ReportingPerson'=None,
		crew_member_person:List['CrewMemberPerson']=None,
		security_officer_person:'SecurityOfficerPerson'=None,
		master_person:'MasterPerson'=None,
		ships_surgeon_person:'ShipsSurgeonPerson'=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_mode_code,
		transport_means_type_code,
		transit_direction_code,
		pre_carriage_indicator,
		on_carriage_indicator,
		estimated_delivery_date,
		estimated_delivery_time,
		required_delivery_date,
		required_delivery_time,
		loading_sequence_id,
		successive_sequence_id,
		instructions,
		demurrage_instructions,
		crew_quantity,
		passenger_quantity,
		transit_period,
		carrier_party,
		transport_means,
		loading_port_location,
		unloading_port_location,
		transship_port_location,
		loading_transport_event,
		examination_transport_event,
		availability_transport_event,
		exportation_transport_event,
		discharge_transport_event,
		warehousing_transport_event,
		takeover_transport_event,
		optional_takeover_transport_event,
		dropoff_transport_event,
		actual_pickup_transport_event,
		delivery_transport_event,
		receipt_transport_event,
		storage_transport_event,
		acceptance_transport_event,
		terminal_operator_party,
		customs_agent_party,
		estimated_transit_period,
		freight_allowance_charge,
		freight_charge_location,
		detention_transport_event,
		requested_departure_transport_event,
		requested_arrival_transport_event,
		requested_waypoint_transport_event,
		planned_departure_transport_event,
		planned_arrival_transport_event,
		planned_waypoint_transport_event,
		actual_departure_transport_event,
		actual_waypoint_transport_event,
		actual_arrival_transport_event,
		transport_event,
		estimated_departure_transport_event,
		estimated_arrival_transport_event,
		passenger_person,
		driver_person,
		reporting_person,
		crew_member_person,
		security_officer_person,
		master_person,
		ships_surgeon_person, xml_namespaces)
class MainCommodityClassification(cac_types.__CommodityClassificationType):

	def __init__(self,		nature_code:cbc.NatureCode=None,
		cargo_type_code:cbc.CargoTypeCode=None,
		commodity_code:cbc.CommodityCode=None,
		item_classification_code:cbc.ItemClassificationCode=None, xml_namespaces = None):
		super().__init__(
		nature_code,
		cargo_type_code,
		commodity_code,
		item_classification_code, xml_namespaces)
class MainOnAccountPayment(cac_types.__OnAccountPaymentType):

	def __init__(self,		estimated_consumed_quantity:cbc.EstimatedConsumedQuantity,
		note:List[cbc.Note]=None,
		payment_terms:List['PaymentTerms']=None, xml_namespaces = None):
		super().__init__(
		estimated_consumed_quantity,
		note,
		payment_terms, xml_namespaces)
class MainPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class MainQualifyingParty(cac_types.__QualifyingPartyType):

	def __init__(self,		participation_percent:cbc.ParticipationPercent=None,
		personal_situation:List[cbc.PersonalSituation]=None,
		operating_years_quantity:cbc.OperatingYearsQuantity=None,
		employee_quantity:cbc.EmployeeQuantity=None,
		business_classification_evidence_id:cbc.BusinessClassificationEvidenceID=None,
		business_identity_evidence_id:cbc.BusinessIdentityEvidenceID=None,
		tenderer_role_code:cbc.TendererRoleCode=None,
		business_classification_scheme:'BusinessClassificationScheme'=None,
		technical_capability:List['TechnicalCapability']=None,
		financial_capability:List['FinancialCapability']=None,
		completed_task:List['CompletedTask']=None,
		declaration:List['Declaration']=None,
		party:'Party'=None,
		economic_operator_role:'EconomicOperatorRole'=None, xml_namespaces = None):
		super().__init__(
		participation_percent,
		personal_situation,
		operating_years_quantity,
		employee_quantity,
		business_classification_evidence_id,
		business_identity_evidence_id,
		tenderer_role_code,
		business_classification_scheme,
		technical_capability,
		financial_capability,
		completed_task,
		declaration,
		party,
		economic_operator_role, xml_namespaces)
class MainTransportationService(cac_types.__TransportationServiceType):

	def __init__(self,		transport_service_code:cbc.TransportServiceCode,
		tariff_class_code:cbc.TariffClassCode=None,
		priority:cbc.Priority=None,
		freight_rate_class_code:cbc.FreightRateClassCode=None,
		transportation_service_description:List[cbc.TransportationServiceDescription]=None,
		transportation_service_details_uri:cbc.TransportationServiceDetailsURI=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		name:cbc.Name=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		transport_equipment:List['TransportEquipment']=None,
		supported_transport_equipment:List['SupportedTransportEquipment']=None,
		unsupported_transport_equipment:List['UnsupportedTransportEquipment']=None,
		commodity_classification:List['CommodityClassification']=None,
		supported_commodity_classification:List['SupportedCommodityClassification']=None,
		unsupported_commodity_classification:List['UnsupportedCommodityClassification']=None,
		total_capacity_dimension:'TotalCapacityDimension'=None,
		shipment_stage:List['ShipmentStage']=None,
		transport_event:List['TransportEvent']=None,
		responsible_transport_service_provider_party:'ResponsibleTransportServiceProviderParty'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		estimated_duration_period:'EstimatedDurationPeriod'=None,
		scheduled_service_frequency:List['ScheduledServiceFrequency']=None, xml_namespaces = None):
		super().__init__(
		transport_service_code,
		tariff_class_code,
		priority,
		freight_rate_class_code,
		transportation_service_description,
		transportation_service_details_uri,
		nomination_date,
		nomination_time,
		name,
		sequence_numeric,
		transport_equipment,
		supported_transport_equipment,
		unsupported_transport_equipment,
		commodity_classification,
		supported_commodity_classification,
		unsupported_commodity_classification,
		total_capacity_dimension,
		shipment_stage,
		transport_event,
		responsible_transport_service_provider_party,
		environmental_emission,
		estimated_duration_period,
		scheduled_service_frequency, xml_namespaces)
class MandateDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ManufacturerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ManufacturersItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class MaritimeTransport(cac_types.__MaritimeTransportType):

	def __init__(self,		vessel_id:cbc.VesselID=None,
		vessel_name:cbc.VesselName=None,
		radio_call_sign_id:cbc.RadioCallSignID=None,
		ships_requirements:List[cbc.ShipsRequirements]=None,
		gross_tonnage_measure:cbc.GrossTonnageMeasure=None,
		net_tonnage_measure:cbc.NetTonnageMeasure=None,
		registry_certificate_document_reference:'RegistryCertificateDocumentReference'=None,
		registry_port_location:'RegistryPortLocation'=None, xml_namespaces = None):
		super().__init__(
		vessel_id,
		vessel_name,
		radio_call_sign_id,
		ships_requirements,
		gross_tonnage_measure,
		net_tonnage_measure,
		registry_certificate_document_reference,
		registry_port_location, xml_namespaces)
class MasterPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class MaximumDeliveryUnit(cac_types.__DeliveryUnitType):

	def __init__(self,		batch_quantity:cbc.BatchQuantity,
		consumer_unit_quantity:cbc.ConsumerUnitQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None, xml_namespaces = None):
		super().__init__(
		batch_quantity,
		consumer_unit_quantity,
		hazardous_risk_indicator, xml_namespaces)
class MaximumTemperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class MeasurementDimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class MeasurementFromLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class MeasurementToLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class MediationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Meter(cac_types.__MeterType):

	def __init__(self,		meter_number:cbc.MeterNumber=None,
		meter_name:cbc.MeterName=None,
		meter_constant:cbc.MeterConstant=None,
		meter_constant_code:cbc.MeterConstantCode=None,
		total_delivered_quantity:cbc.TotalDeliveredQuantity=None,
		meter_reading:List['MeterReading']=None,
		meter_property:List['MeterProperty']=None, xml_namespaces = None):
		super().__init__(
		meter_number,
		meter_name,
		meter_constant,
		meter_constant_code,
		total_delivered_quantity,
		meter_reading,
		meter_property, xml_namespaces)
class MeterProperty(cac_types.__MeterPropertyType):

	def __init__(self,		name:cbc.Name=None,
		name_code:cbc.NameCode=None,
		value:cbc.Value=None,
		value_quantity:cbc.ValueQuantity=None,
		value_qualifier:List[cbc.ValueQualifier]=None, xml_namespaces = None):
		super().__init__(
		name,
		name_code,
		value,
		value_quantity,
		value_qualifier, xml_namespaces)
class MeterReading(cac_types.__MeterReadingType):

	def __init__(self,		previous_meter_reading_date:cbc.PreviousMeterReadingDate,
		previous_meter_quantity:cbc.PreviousMeterQuantity,
		latest_meter_reading_date:cbc.LatestMeterReadingDate,
		latest_meter_quantity:cbc.LatestMeterQuantity,
		delivered_quantity:cbc.DeliveredQuantity,
		id_:cbc.ID=None,
		meter_reading_type:cbc.MeterReadingType=None,
		meter_reading_type_code:cbc.MeterReadingTypeCode=None,
		previous_meter_reading_method:cbc.PreviousMeterReadingMethod=None,
		previous_meter_reading_method_code:cbc.PreviousMeterReadingMethodCode=None,
		latest_meter_reading_method:cbc.LatestMeterReadingMethod=None,
		latest_meter_reading_method_code:cbc.LatestMeterReadingMethodCode=None,
		meter_reading_comments:List[cbc.MeterReadingComments]=None, xml_namespaces = None):
		super().__init__(
		previous_meter_reading_date,
		previous_meter_quantity,
		latest_meter_reading_date,
		latest_meter_quantity,
		delivered_quantity,
		id_,
		meter_reading_type,
		meter_reading_type_code,
		previous_meter_reading_method,
		previous_meter_reading_method_code,
		latest_meter_reading_method,
		latest_meter_reading_method_code,
		meter_reading_comments, xml_namespaces)
class MinimumDeliveryUnit(cac_types.__DeliveryUnitType):

	def __init__(self,		batch_quantity:cbc.BatchQuantity,
		consumer_unit_quantity:cbc.ConsumerUnitQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None, xml_namespaces = None):
		super().__init__(
		batch_quantity,
		consumer_unit_quantity,
		hazardous_risk_indicator, xml_namespaces)
class MinimumTemperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class MinutesDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class MiscellaneousEvent(cac_types.__MiscellaneousEventType):

	def __init__(self,		miscellaneous_event_type_code:cbc.MiscellaneousEventTypeCode,
		event_line_item:List['EventLineItem']=None, xml_namespaces = None):
		super().__init__(
		miscellaneous_event_type_code,
		event_line_item, xml_namespaces)
class MonetaryTotal(cac_types.__MonetaryTotalType):

	def __init__(self,		payable_amount:cbc.PayableAmount,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_exclusive_amount:cbc.TaxExclusiveAmount=None,
		tax_inclusive_amount:cbc.TaxInclusiveAmount=None,
		allowance_total_amount:cbc.AllowanceTotalAmount=None,
		charge_total_amount:cbc.ChargeTotalAmount=None,
		prepaid_amount:cbc.PrepaidAmount=None,
		payable_rounding_amount:cbc.PayableRoundingAmount=None,
		payable_alternative_amount:cbc.PayableAlternativeAmount=None, xml_namespaces = None):
		super().__init__(
		payable_amount,
		line_extension_amount,
		tax_exclusive_amount,
		tax_inclusive_amount,
		allowance_total_amount,
		charge_total_amount,
		prepaid_amount,
		payable_rounding_amount,
		payable_alternative_amount, xml_namespaces)
class MortgageHolderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class NominationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class NotaryParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class NoticeDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class NotificationLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class NotificationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class NotificationRequirement(cac_types.__NotificationRequirementType):

	def __init__(self,		notification_type_code:cbc.NotificationTypeCode,
		post_event_notification_duration_measure:cbc.PostEventNotificationDurationMeasure=None,
		pre_event_notification_duration_measure:cbc.PreEventNotificationDurationMeasure=None,
		notify_party:List['NotifyParty']=None,
		notification_period:List['NotificationPeriod']=None,
		notification_location:List['NotificationLocation']=None, xml_namespaces = None):
		super().__init__(
		notification_type_code,
		post_event_notification_duration_measure,
		pre_event_notification_duration_measure,
		notify_party,
		notification_period,
		notification_location, xml_namespaces)
class NotifyParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class OccurenceLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class OfferedItemLocationQuantity(cac_types.__ItemLocationQuantityType):

	def __init__(self,		lead_time_measure:cbc.LeadTimeMeasure=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		trading_restrictions:List[cbc.TradingRestrictions]=None,
		applicable_territory_address:List['ApplicableTerritoryAddress']=None,
		price:'Price'=None,
		delivery_unit:List['DeliveryUnit']=None,
		applicable_tax_category:List['ApplicableTaxCategory']=None,
		package:'Package'=None,
		allowance_charge:List['AllowanceCharge']=None,
		dependent_price_reference:'DependentPriceReference'=None, xml_namespaces = None):
		super().__init__(
		lead_time_measure,
		minimum_quantity,
		maximum_quantity,
		hazardous_risk_indicator,
		trading_restrictions,
		applicable_territory_address,
		price,
		delivery_unit,
		applicable_tax_category,
		package,
		allowance_charge,
		dependent_price_reference, xml_namespaces)
class OnAccountPayment(cac_types.__OnAccountPaymentType):

	def __init__(self,		estimated_consumed_quantity:cbc.EstimatedConsumedQuantity,
		note:List[cbc.Note]=None,
		payment_terms:List['PaymentTerms']=None, xml_namespaces = None):
		super().__init__(
		estimated_consumed_quantity,
		note,
		payment_terms, xml_namespaces)
class OnCarriageShipmentStage(cac_types.__ShipmentStageType):

	def __init__(self,		id_:cbc.ID=None,
		transport_mode_code:cbc.TransportModeCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		transit_direction_code:cbc.TransitDirectionCode=None,
		pre_carriage_indicator:cbc.PreCarriageIndicator=None,
		on_carriage_indicator:cbc.OnCarriageIndicator=None,
		estimated_delivery_date:cbc.EstimatedDeliveryDate=None,
		estimated_delivery_time:cbc.EstimatedDeliveryTime=None,
		required_delivery_date:cbc.RequiredDeliveryDate=None,
		required_delivery_time:cbc.RequiredDeliveryTime=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		successive_sequence_id:cbc.SuccessiveSequenceID=None,
		instructions:List[cbc.Instructions]=None,
		demurrage_instructions:List[cbc.DemurrageInstructions]=None,
		crew_quantity:cbc.CrewQuantity=None,
		passenger_quantity:cbc.PassengerQuantity=None,
		transit_period:'TransitPeriod'=None,
		carrier_party:List['CarrierParty']=None,
		transport_means:'TransportMeans'=None,
		loading_port_location:'LoadingPortLocation'=None,
		unloading_port_location:'UnloadingPortLocation'=None,
		transship_port_location:'TransshipPortLocation'=None,
		loading_transport_event:'LoadingTransportEvent'=None,
		examination_transport_event:'ExaminationTransportEvent'=None,
		availability_transport_event:'AvailabilityTransportEvent'=None,
		exportation_transport_event:'ExportationTransportEvent'=None,
		discharge_transport_event:'DischargeTransportEvent'=None,
		warehousing_transport_event:'WarehousingTransportEvent'=None,
		takeover_transport_event:'TakeoverTransportEvent'=None,
		optional_takeover_transport_event:'OptionalTakeoverTransportEvent'=None,
		dropoff_transport_event:'DropoffTransportEvent'=None,
		actual_pickup_transport_event:'ActualPickupTransportEvent'=None,
		delivery_transport_event:'DeliveryTransportEvent'=None,
		receipt_transport_event:'ReceiptTransportEvent'=None,
		storage_transport_event:'StorageTransportEvent'=None,
		acceptance_transport_event:'AcceptanceTransportEvent'=None,
		terminal_operator_party:'TerminalOperatorParty'=None,
		customs_agent_party:'CustomsAgentParty'=None,
		estimated_transit_period:'EstimatedTransitPeriod'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		freight_charge_location:'FreightChargeLocation'=None,
		detention_transport_event:List['DetentionTransportEvent']=None,
		requested_departure_transport_event:'RequestedDepartureTransportEvent'=None,
		requested_arrival_transport_event:'RequestedArrivalTransportEvent'=None,
		requested_waypoint_transport_event:List['RequestedWaypointTransportEvent']=None,
		planned_departure_transport_event:'PlannedDepartureTransportEvent'=None,
		planned_arrival_transport_event:'PlannedArrivalTransportEvent'=None,
		planned_waypoint_transport_event:List['PlannedWaypointTransportEvent']=None,
		actual_departure_transport_event:'ActualDepartureTransportEvent'=None,
		actual_waypoint_transport_event:'ActualWaypointTransportEvent'=None,
		actual_arrival_transport_event:'ActualArrivalTransportEvent'=None,
		transport_event:List['TransportEvent']=None,
		estimated_departure_transport_event:'EstimatedDepartureTransportEvent'=None,
		estimated_arrival_transport_event:'EstimatedArrivalTransportEvent'=None,
		passenger_person:List['PassengerPerson']=None,
		driver_person:List['DriverPerson']=None,
		reporting_person:'ReportingPerson'=None,
		crew_member_person:List['CrewMemberPerson']=None,
		security_officer_person:'SecurityOfficerPerson'=None,
		master_person:'MasterPerson'=None,
		ships_surgeon_person:'ShipsSurgeonPerson'=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_mode_code,
		transport_means_type_code,
		transit_direction_code,
		pre_carriage_indicator,
		on_carriage_indicator,
		estimated_delivery_date,
		estimated_delivery_time,
		required_delivery_date,
		required_delivery_time,
		loading_sequence_id,
		successive_sequence_id,
		instructions,
		demurrage_instructions,
		crew_quantity,
		passenger_quantity,
		transit_period,
		carrier_party,
		transport_means,
		loading_port_location,
		unloading_port_location,
		transship_port_location,
		loading_transport_event,
		examination_transport_event,
		availability_transport_event,
		exportation_transport_event,
		discharge_transport_event,
		warehousing_transport_event,
		takeover_transport_event,
		optional_takeover_transport_event,
		dropoff_transport_event,
		actual_pickup_transport_event,
		delivery_transport_event,
		receipt_transport_event,
		storage_transport_event,
		acceptance_transport_event,
		terminal_operator_party,
		customs_agent_party,
		estimated_transit_period,
		freight_allowance_charge,
		freight_charge_location,
		detention_transport_event,
		requested_departure_transport_event,
		requested_arrival_transport_event,
		requested_waypoint_transport_event,
		planned_departure_transport_event,
		planned_arrival_transport_event,
		planned_waypoint_transport_event,
		actual_departure_transport_event,
		actual_waypoint_transport_event,
		actual_arrival_transport_event,
		transport_event,
		estimated_departure_transport_event,
		estimated_arrival_transport_event,
		passenger_person,
		driver_person,
		reporting_person,
		crew_member_person,
		security_officer_person,
		master_person,
		ships_surgeon_person, xml_namespaces)
class OpenTenderEvent(cac_types.__EventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		type_code:cbc.TypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		occurence_location:'OccurenceLocation'=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		type_code,
		description,
		completion_indicator,
		current_status,
		contact,
		occurence_location, xml_namespaces)
class OperatingParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class OptionValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class OptionalTakeoverTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class OrderDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class OrderLine(cac_types.__OrderLineType):

	def __init__(self,		line_item:'LineItem',
		substitution_status_code:cbc.SubstitutionStatusCode=None,
		note:List[cbc.Note]=None,
		seller_proposed_substitute_line_item:List['SellerProposedSubstituteLineItem']=None,
		seller_substituted_line_item:List['SellerSubstitutedLineItem']=None,
		buyer_proposed_substitute_line_item:List['BuyerProposedSubstituteLineItem']=None,
		catalogue_line_reference:'CatalogueLineReference'=None,
		quotation_line_reference:'QuotationLineReference'=None,
		order_line_reference:List['OrderLineReference']=None,
		document_reference:List['DocumentReference']=None, xml_namespaces = None):
		super().__init__(
		line_item,
		substitution_status_code,
		note,
		seller_proposed_substitute_line_item,
		seller_substituted_line_item,
		buyer_proposed_substitute_line_item,
		catalogue_line_reference,
		quotation_line_reference,
		order_line_reference,
		document_reference, xml_namespaces)
class OrderLineReference(cac_types.__OrderLineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		sales_order_line_id:cbc.SalesOrderLineID=None,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		order_reference:'OrderReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		sales_order_line_id,
		uuid,
		line_status_code,
		order_reference, xml_namespaces)
class OrderReference(cac_types.__OrderReferenceType):

	def __init__(self,		id_:cbc.ID,
		sales_order_id:cbc.SalesOrderID=None,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		customer_reference:cbc.CustomerReference=None,
		order_type_code:cbc.OrderTypeCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		id_,
		sales_order_id,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		customer_reference,
		order_type_code,
		document_reference, xml_namespaces)
class OrderedShipment(cac_types.__OrderedShipmentType):

	def __init__(self,		shipment:'Shipment',
		package:List['Package']=None, xml_namespaces = None):
		super().__init__(
		shipment,
		package, xml_namespaces)
class OriginAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class OriginCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class OriginalDepartureCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class OriginalDespatchParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class OriginalDespatchTransportationService(cac_types.__TransportationServiceType):

	def __init__(self,		transport_service_code:cbc.TransportServiceCode,
		tariff_class_code:cbc.TariffClassCode=None,
		priority:cbc.Priority=None,
		freight_rate_class_code:cbc.FreightRateClassCode=None,
		transportation_service_description:List[cbc.TransportationServiceDescription]=None,
		transportation_service_details_uri:cbc.TransportationServiceDetailsURI=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		name:cbc.Name=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		transport_equipment:List['TransportEquipment']=None,
		supported_transport_equipment:List['SupportedTransportEquipment']=None,
		unsupported_transport_equipment:List['UnsupportedTransportEquipment']=None,
		commodity_classification:List['CommodityClassification']=None,
		supported_commodity_classification:List['SupportedCommodityClassification']=None,
		unsupported_commodity_classification:List['UnsupportedCommodityClassification']=None,
		total_capacity_dimension:'TotalCapacityDimension'=None,
		shipment_stage:List['ShipmentStage']=None,
		transport_event:List['TransportEvent']=None,
		responsible_transport_service_provider_party:'ResponsibleTransportServiceProviderParty'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		estimated_duration_period:'EstimatedDurationPeriod'=None,
		scheduled_service_frequency:List['ScheduledServiceFrequency']=None, xml_namespaces = None):
		super().__init__(
		transport_service_code,
		tariff_class_code,
		priority,
		freight_rate_class_code,
		transportation_service_description,
		transportation_service_details_uri,
		nomination_date,
		nomination_time,
		name,
		sequence_numeric,
		transport_equipment,
		supported_transport_equipment,
		unsupported_transport_equipment,
		commodity_classification,
		supported_commodity_classification,
		unsupported_commodity_classification,
		total_capacity_dimension,
		shipment_stage,
		transport_event,
		responsible_transport_service_provider_party,
		environmental_emission,
		estimated_duration_period,
		scheduled_service_frequency, xml_namespaces)
class OriginalDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class OriginalItemLocationQuantity(cac_types.__ItemLocationQuantityType):

	def __init__(self,		lead_time_measure:cbc.LeadTimeMeasure=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		trading_restrictions:List[cbc.TradingRestrictions]=None,
		applicable_territory_address:List['ApplicableTerritoryAddress']=None,
		price:'Price'=None,
		delivery_unit:List['DeliveryUnit']=None,
		applicable_tax_category:List['ApplicableTaxCategory']=None,
		package:'Package'=None,
		allowance_charge:List['AllowanceCharge']=None,
		dependent_price_reference:'DependentPriceReference'=None, xml_namespaces = None):
		super().__init__(
		lead_time_measure,
		minimum_quantity,
		maximum_quantity,
		hazardous_risk_indicator,
		trading_restrictions,
		applicable_territory_address,
		price,
		delivery_unit,
		applicable_tax_category,
		package,
		allowance_charge,
		dependent_price_reference, xml_namespaces)
class OriginatorCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class OriginatorDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class OriginatorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class OtherCommunication(cac_types.__CommunicationType):

	def __init__(self,		channel_code:cbc.ChannelCode=None,
		channel:cbc.Channel=None,
		value:cbc.Value=None, xml_namespaces = None):
		super().__init__(
		channel_code,
		channel,
		value, xml_namespaces)
class OwnerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Package(cac_types.__PackageType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		returnable_material_indicator:cbc.ReturnableMaterialIndicator=None,
		package_level_code:cbc.PackageLevelCode=None,
		packaging_type_code:cbc.PackagingTypeCode=None,
		packing_material:List[cbc.PackingMaterial]=None,
		trace_id:cbc.TraceID=None,
		contained_package:List['ContainedPackage']=None,
		containing_transport_equipment:'ContainingTransportEquipment'=None,
		goods_item:List['GoodsItem']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		delivery_unit:List['DeliveryUnit']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		returnable_material_indicator,
		package_level_code,
		packaging_type_code,
		packing_material,
		trace_id,
		contained_package,
		containing_transport_equipment,
		goods_item,
		measurement_dimension,
		delivery_unit,
		delivery,
		pickup,
		despatch, xml_namespaces)
class PackagedTransportHandlingUnit(cac_types.__TransportHandlingUnitType):

	def __init__(self,		id_:cbc.ID=None,
		transport_handling_unit_type_code:cbc.TransportHandlingUnitTypeCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_package_quantity:cbc.TotalPackageQuantity=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		shipping_marks:List[cbc.ShippingMarks]=None,
		trace_id:cbc.TraceID=None,
		handling_unit_despatch_line:List['HandlingUnitDespatchLine']=None,
		actual_package:List['ActualPackage']=None,
		received_handling_unit_receipt_line:List['ReceivedHandlingUnitReceiptLine']=None,
		transport_equipment:List['TransportEquipment']=None,
		transport_means:List['TransportMeans']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		goods_item:List['GoodsItem']=None,
		floor_space_measurement_dimension:'FloorSpaceMeasurementDimension'=None,
		pallet_space_measurement_dimension:'PalletSpaceMeasurementDimension'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		status:List['Status']=None,
		customs_declaration:List['CustomsDeclaration']=None,
		referenced_shipment:List['ReferencedShipment']=None,
		package:List['Package']=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_handling_unit_type_code,
		handling_code,
		handling_instructions,
		hazardous_risk_indicator,
		total_goods_item_quantity,
		total_package_quantity,
		damage_remarks,
		shipping_marks,
		trace_id,
		handling_unit_despatch_line,
		actual_package,
		received_handling_unit_receipt_line,
		transport_equipment,
		transport_means,
		hazardous_goods_transit,
		measurement_dimension,
		minimum_temperature,
		maximum_temperature,
		goods_item,
		floor_space_measurement_dimension,
		pallet_space_measurement_dimension,
		shipment_document_reference,
		status,
		customs_declaration,
		referenced_shipment,
		package, xml_namespaces)
class PalletSpaceMeasurementDimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class ParentDocumentLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class ParentDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ParticipatingLocationsLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class ParticipationRequestReceptionPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class Party(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class PartyIdentification(cac_types.__PartyIdentificationType):

	def __init__(self,		id_:cbc.ID, xml_namespaces = None):
		super().__init__(
		id_, xml_namespaces)
class PartyLegalEntity(cac_types.__PartyLegalEntityType):

	def __init__(self,		registration_name:cbc.RegistrationName=None,
		company_id:cbc.CompanyID=None,
		registration_date:cbc.RegistrationDate=None,
		registration_expiration_date:cbc.RegistrationExpirationDate=None,
		company_legal_form_code:cbc.CompanyLegalFormCode=None,
		company_legal_form:cbc.CompanyLegalForm=None,
		sole_proprietorship_indicator:cbc.SoleProprietorshipIndicator=None,
		company_liquidation_status_code:cbc.CompanyLiquidationStatusCode=None,
		corporate_stock_amount:cbc.CorporateStockAmount=None,
		fully_paid_shares_indicator:cbc.FullyPaidSharesIndicator=None,
		registration_address:'RegistrationAddress'=None,
		corporate_registration_scheme:'CorporateRegistrationScheme'=None,
		head_office_party:'HeadOfficeParty'=None,
		shareholder_party:List['ShareholderParty']=None, xml_namespaces = None):
		super().__init__(
		registration_name,
		company_id,
		registration_date,
		registration_expiration_date,
		company_legal_form_code,
		company_legal_form,
		sole_proprietorship_indicator,
		company_liquidation_status_code,
		corporate_stock_amount,
		fully_paid_shares_indicator,
		registration_address,
		corporate_registration_scheme,
		head_office_party,
		shareholder_party, xml_namespaces)
class PartyName(cac_types.__PartyNameType):

	def __init__(self,		name:cbc.Name, xml_namespaces = None):
		super().__init__(
		name, xml_namespaces)
class PartyTaxScheme(cac_types.__PartyTaxSchemeType):

	def __init__(self,		tax_scheme:'TaxScheme',
		registration_name:cbc.RegistrationName=None,
		company_id:cbc.CompanyID=None,
		tax_level_code:cbc.TaxLevelCode=None,
		exemption_reason_code:cbc.ExemptionReasonCode=None,
		exemption_reason:List[cbc.ExemptionReason]=None,
		registration_address:'RegistrationAddress'=None, xml_namespaces = None):
		super().__init__(
		tax_scheme,
		registration_name,
		company_id,
		tax_level_code,
		exemption_reason_code,
		exemption_reason,
		registration_address, xml_namespaces)
class PassengerPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class PayeeFinancialAccount(cac_types.__FinancialAccountType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		alias_name:cbc.AliasName=None,
		account_type_code:cbc.AccountTypeCode=None,
		account_format_code:cbc.AccountFormatCode=None,
		currency_code:cbc.CurrencyCode=None,
		payment_note:List[cbc.PaymentNote]=None,
		financial_institution_branch:'FinancialInstitutionBranch'=None,
		country:'Country'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		alias_name,
		account_type_code,
		account_format_code,
		currency_code,
		payment_note,
		financial_institution_branch,
		country, xml_namespaces)
class PayeeParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class PayerFinancialAccount(cac_types.__FinancialAccountType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		alias_name:cbc.AliasName=None,
		account_type_code:cbc.AccountTypeCode=None,
		account_format_code:cbc.AccountFormatCode=None,
		currency_code:cbc.CurrencyCode=None,
		payment_note:List[cbc.PaymentNote]=None,
		financial_institution_branch:'FinancialInstitutionBranch'=None,
		country:'Country'=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		alias_name,
		account_type_code,
		account_format_code,
		currency_code,
		payment_note,
		financial_institution_branch,
		country, xml_namespaces)
class PayerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Payment(cac_types.__PaymentType):

	def __init__(self,		id_:cbc.ID=None,
		paid_amount:cbc.PaidAmount=None,
		received_date:cbc.ReceivedDate=None,
		paid_date:cbc.PaidDate=None,
		paid_time:cbc.PaidTime=None,
		instruction_id:cbc.InstructionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		paid_amount,
		received_date,
		paid_date,
		paid_time,
		instruction_id, xml_namespaces)
class PaymentAlternativeExchangeRate(cac_types.__ExchangeRateType):

	def __init__(self,		source_currency_code:cbc.SourceCurrencyCode,
		target_currency_code:cbc.TargetCurrencyCode,
		source_currency_base_rate:cbc.SourceCurrencyBaseRate=None,
		target_currency_base_rate:cbc.TargetCurrencyBaseRate=None,
		exchange_market_id:cbc.ExchangeMarketID=None,
		calculation_rate:cbc.CalculationRate=None,
		mathematic_operator_code:cbc.MathematicOperatorCode=None,
		date:cbc.Date=None,
		foreign_exchange_contract:'ForeignExchangeContract'=None, xml_namespaces = None):
		super().__init__(
		source_currency_code,
		target_currency_code,
		source_currency_base_rate,
		target_currency_base_rate,
		exchange_market_id,
		calculation_rate,
		mathematic_operator_code,
		date,
		foreign_exchange_contract, xml_namespaces)
class PaymentExchangeRate(cac_types.__ExchangeRateType):

	def __init__(self,		source_currency_code:cbc.SourceCurrencyCode,
		target_currency_code:cbc.TargetCurrencyCode,
		source_currency_base_rate:cbc.SourceCurrencyBaseRate=None,
		target_currency_base_rate:cbc.TargetCurrencyBaseRate=None,
		exchange_market_id:cbc.ExchangeMarketID=None,
		calculation_rate:cbc.CalculationRate=None,
		mathematic_operator_code:cbc.MathematicOperatorCode=None,
		date:cbc.Date=None,
		foreign_exchange_contract:'ForeignExchangeContract'=None, xml_namespaces = None):
		super().__init__(
		source_currency_code,
		target_currency_code,
		source_currency_base_rate,
		target_currency_base_rate,
		exchange_market_id,
		calculation_rate,
		mathematic_operator_code,
		date,
		foreign_exchange_contract, xml_namespaces)
class PaymentMandate(cac_types.__PaymentMandateType):

	def __init__(self,		id_:cbc.ID=None,
		mandate_type_code:cbc.MandateTypeCode=None,
		maximum_payment_instructions_numeric:cbc.MaximumPaymentInstructionsNumeric=None,
		maximum_paid_amount:cbc.MaximumPaidAmount=None,
		signature_id:cbc.SignatureID=None,
		payer_party:'PayerParty'=None,
		payer_financial_account:'PayerFinancialAccount'=None,
		validity_period:'ValidityPeriod'=None,
		payment_reversal_period:'PaymentReversalPeriod'=None,
		clause:List['Clause']=None, xml_namespaces = None):
		super().__init__(
		id_,
		mandate_type_code,
		maximum_payment_instructions_numeric,
		maximum_paid_amount,
		signature_id,
		payer_party,
		payer_financial_account,
		validity_period,
		payment_reversal_period,
		clause, xml_namespaces)
class PaymentMeans(cac_types.__PaymentMeansType):

	def __init__(self,		payment_means_code:cbc.PaymentMeansCode,
		id_:cbc.ID=None,
		payment_due_date:cbc.PaymentDueDate=None,
		payment_channel_code:cbc.PaymentChannelCode=None,
		instruction_id:cbc.InstructionID=None,
		instruction_note:List[cbc.InstructionNote]=None,
		payment_id:List[cbc.PaymentID]=None,
		card_account:'CardAccount'=None,
		payer_financial_account:'PayerFinancialAccount'=None,
		payee_financial_account:'PayeeFinancialAccount'=None,
		credit_account:'CreditAccount'=None,
		payment_mandate:'PaymentMandate'=None,
		trade_financing:'TradeFinancing'=None, xml_namespaces = None):
		super().__init__(
		payment_means_code,
		id_,
		payment_due_date,
		payment_channel_code,
		instruction_id,
		instruction_note,
		payment_id,
		card_account,
		payer_financial_account,
		payee_financial_account,
		credit_account,
		payment_mandate,
		trade_financing, xml_namespaces)
class PaymentReversalPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class PaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class PenaltyClause(cac_types.__ClauseType):

	def __init__(self,		id_:cbc.ID=None,
		content:List[cbc.Content]=None, xml_namespaces = None):
		super().__init__(
		id_,
		content, xml_namespaces)
class PenaltyPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class PenaltyPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class PerformanceDataLine(cac_types.__PerformanceDataLineType):

	def __init__(self,		id_:cbc.ID,
		performance_value_quantity:cbc.PerformanceValueQuantity,
		performance_metric_type_code:cbc.PerformanceMetricTypeCode,
		note:List[cbc.Note]=None,
		period:'Period'=None,
		item:'Item'=None, xml_namespaces = None):
		super().__init__(
		id_,
		performance_value_quantity,
		performance_metric_type_code,
		note,
		period,
		item, xml_namespaces)
class PerformingCarrierParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Period(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class Person(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class PhysicalAttribute(cac_types.__PhysicalAttributeType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		position_code:cbc.PositionCode=None,
		description_code:cbc.DescriptionCode=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		position_code,
		description_code,
		description, xml_namespaces)
class PhysicalLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class Pickup(cac_types.__PickupType):

	def __init__(self,		id_:cbc.ID=None,
		actual_pickup_date:cbc.ActualPickupDate=None,
		actual_pickup_time:cbc.ActualPickupTime=None,
		earliest_pickup_date:cbc.EarliestPickupDate=None,
		earliest_pickup_time:cbc.EarliestPickupTime=None,
		latest_pickup_date:cbc.LatestPickupDate=None,
		latest_pickup_time:cbc.LatestPickupTime=None,
		pickup_location:'PickupLocation'=None,
		pickup_party:'PickupParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		actual_pickup_date,
		actual_pickup_time,
		earliest_pickup_date,
		earliest_pickup_time,
		latest_pickup_date,
		latest_pickup_time,
		pickup_location,
		pickup_party, xml_namespaces)
class PickupLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class PickupParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class PickupTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PlannedArrivalTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PlannedDeliveryTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PlannedDepartureTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PlannedPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class PlannedPickupTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PlannedWaypointTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PositioningTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class PostalAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class PowerOfAttorney(cac_types.__PowerOfAttorneyType):

	def __init__(self,		agent_party:'AgentParty',
		id_:cbc.ID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		description:List[cbc.Description]=None,
		notary_party:'NotaryParty'=None,
		witness_party:List['WitnessParty']=None,
		mandate_document_reference:List['MandateDocumentReference']=None, xml_namespaces = None):
		super().__init__(
		agent_party,
		id_,
		issue_date,
		issue_time,
		description,
		notary_party,
		witness_party,
		mandate_document_reference, xml_namespaces)
class PreCarriageShipmentStage(cac_types.__ShipmentStageType):

	def __init__(self,		id_:cbc.ID=None,
		transport_mode_code:cbc.TransportModeCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		transit_direction_code:cbc.TransitDirectionCode=None,
		pre_carriage_indicator:cbc.PreCarriageIndicator=None,
		on_carriage_indicator:cbc.OnCarriageIndicator=None,
		estimated_delivery_date:cbc.EstimatedDeliveryDate=None,
		estimated_delivery_time:cbc.EstimatedDeliveryTime=None,
		required_delivery_date:cbc.RequiredDeliveryDate=None,
		required_delivery_time:cbc.RequiredDeliveryTime=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		successive_sequence_id:cbc.SuccessiveSequenceID=None,
		instructions:List[cbc.Instructions]=None,
		demurrage_instructions:List[cbc.DemurrageInstructions]=None,
		crew_quantity:cbc.CrewQuantity=None,
		passenger_quantity:cbc.PassengerQuantity=None,
		transit_period:'TransitPeriod'=None,
		carrier_party:List['CarrierParty']=None,
		transport_means:'TransportMeans'=None,
		loading_port_location:'LoadingPortLocation'=None,
		unloading_port_location:'UnloadingPortLocation'=None,
		transship_port_location:'TransshipPortLocation'=None,
		loading_transport_event:'LoadingTransportEvent'=None,
		examination_transport_event:'ExaminationTransportEvent'=None,
		availability_transport_event:'AvailabilityTransportEvent'=None,
		exportation_transport_event:'ExportationTransportEvent'=None,
		discharge_transport_event:'DischargeTransportEvent'=None,
		warehousing_transport_event:'WarehousingTransportEvent'=None,
		takeover_transport_event:'TakeoverTransportEvent'=None,
		optional_takeover_transport_event:'OptionalTakeoverTransportEvent'=None,
		dropoff_transport_event:'DropoffTransportEvent'=None,
		actual_pickup_transport_event:'ActualPickupTransportEvent'=None,
		delivery_transport_event:'DeliveryTransportEvent'=None,
		receipt_transport_event:'ReceiptTransportEvent'=None,
		storage_transport_event:'StorageTransportEvent'=None,
		acceptance_transport_event:'AcceptanceTransportEvent'=None,
		terminal_operator_party:'TerminalOperatorParty'=None,
		customs_agent_party:'CustomsAgentParty'=None,
		estimated_transit_period:'EstimatedTransitPeriod'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		freight_charge_location:'FreightChargeLocation'=None,
		detention_transport_event:List['DetentionTransportEvent']=None,
		requested_departure_transport_event:'RequestedDepartureTransportEvent'=None,
		requested_arrival_transport_event:'RequestedArrivalTransportEvent'=None,
		requested_waypoint_transport_event:List['RequestedWaypointTransportEvent']=None,
		planned_departure_transport_event:'PlannedDepartureTransportEvent'=None,
		planned_arrival_transport_event:'PlannedArrivalTransportEvent'=None,
		planned_waypoint_transport_event:List['PlannedWaypointTransportEvent']=None,
		actual_departure_transport_event:'ActualDepartureTransportEvent'=None,
		actual_waypoint_transport_event:'ActualWaypointTransportEvent'=None,
		actual_arrival_transport_event:'ActualArrivalTransportEvent'=None,
		transport_event:List['TransportEvent']=None,
		estimated_departure_transport_event:'EstimatedDepartureTransportEvent'=None,
		estimated_arrival_transport_event:'EstimatedArrivalTransportEvent'=None,
		passenger_person:List['PassengerPerson']=None,
		driver_person:List['DriverPerson']=None,
		reporting_person:'ReportingPerson'=None,
		crew_member_person:List['CrewMemberPerson']=None,
		security_officer_person:'SecurityOfficerPerson'=None,
		master_person:'MasterPerson'=None,
		ships_surgeon_person:'ShipsSurgeonPerson'=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_mode_code,
		transport_means_type_code,
		transit_direction_code,
		pre_carriage_indicator,
		on_carriage_indicator,
		estimated_delivery_date,
		estimated_delivery_time,
		required_delivery_date,
		required_delivery_time,
		loading_sequence_id,
		successive_sequence_id,
		instructions,
		demurrage_instructions,
		crew_quantity,
		passenger_quantity,
		transit_period,
		carrier_party,
		transport_means,
		loading_port_location,
		unloading_port_location,
		transship_port_location,
		loading_transport_event,
		examination_transport_event,
		availability_transport_event,
		exportation_transport_event,
		discharge_transport_event,
		warehousing_transport_event,
		takeover_transport_event,
		optional_takeover_transport_event,
		dropoff_transport_event,
		actual_pickup_transport_event,
		delivery_transport_event,
		receipt_transport_event,
		storage_transport_event,
		acceptance_transport_event,
		terminal_operator_party,
		customs_agent_party,
		estimated_transit_period,
		freight_allowance_charge,
		freight_charge_location,
		detention_transport_event,
		requested_departure_transport_event,
		requested_arrival_transport_event,
		requested_waypoint_transport_event,
		planned_departure_transport_event,
		planned_arrival_transport_event,
		planned_waypoint_transport_event,
		actual_departure_transport_event,
		actual_waypoint_transport_event,
		actual_arrival_transport_event,
		transport_event,
		estimated_departure_transport_event,
		estimated_arrival_transport_event,
		passenger_person,
		driver_person,
		reporting_person,
		crew_member_person,
		security_officer_person,
		master_person,
		ships_surgeon_person, xml_namespaces)
class PreSelectedParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class PrepaidPayment(cac_types.__PaymentType):

	def __init__(self,		id_:cbc.ID=None,
		paid_amount:cbc.PaidAmount=None,
		received_date:cbc.ReceivedDate=None,
		paid_date:cbc.PaidDate=None,
		paid_time:cbc.PaidTime=None,
		instruction_id:cbc.InstructionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		paid_amount,
		received_date,
		paid_date,
		paid_time,
		instruction_id, xml_namespaces)
class PrepaidPaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class PreparationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class PresentationPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class PreviousDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class PreviousPriceList(cac_types.__PriceListType):

	def __init__(self,		id_:cbc.ID=None,
		status_code:cbc.StatusCode=None,
		validity_period:List['ValidityPeriod']=None,
		previous_price_list:'PreviousPriceList'=None, xml_namespaces = None):
		super().__init__(
		id_,
		status_code,
		validity_period,
		previous_price_list, xml_namespaces)
class Price(cac_types.__PriceType):

	def __init__(self,		price_amount:cbc.PriceAmount,
		base_quantity:cbc.BaseQuantity=None,
		price_change_reason:List[cbc.PriceChangeReason]=None,
		price_type_code:cbc.PriceTypeCode=None,
		price_type:cbc.PriceType=None,
		orderable_unit_factor_rate:cbc.OrderableUnitFactorRate=None,
		validity_period:List['ValidityPeriod']=None,
		price_list:'PriceList'=None,
		allowance_charge:List['AllowanceCharge']=None,
		pricing_exchange_rate:'PricingExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		base_quantity,
		price_change_reason,
		price_type_code,
		price_type,
		orderable_unit_factor_rate,
		validity_period,
		price_list,
		allowance_charge,
		pricing_exchange_rate, xml_namespaces)
class PriceExtension(cac_types.__PriceExtensionType):

	def __init__(self,		amount:cbc.Amount,
		tax_total:List['TaxTotal']=None, xml_namespaces = None):
		super().__init__(
		amount,
		tax_total, xml_namespaces)
class PriceList(cac_types.__PriceListType):

	def __init__(self,		id_:cbc.ID=None,
		status_code:cbc.StatusCode=None,
		validity_period:List['ValidityPeriod']=None,
		previous_price_list:'PreviousPriceList'=None, xml_namespaces = None):
		super().__init__(
		id_,
		status_code,
		validity_period,
		previous_price_list, xml_namespaces)
class PricingExchangeRate(cac_types.__ExchangeRateType):

	def __init__(self,		source_currency_code:cbc.SourceCurrencyCode,
		target_currency_code:cbc.TargetCurrencyCode,
		source_currency_base_rate:cbc.SourceCurrencyBaseRate=None,
		target_currency_base_rate:cbc.TargetCurrencyBaseRate=None,
		exchange_market_id:cbc.ExchangeMarketID=None,
		calculation_rate:cbc.CalculationRate=None,
		mathematic_operator_code:cbc.MathematicOperatorCode=None,
		date:cbc.Date=None,
		foreign_exchange_contract:'ForeignExchangeContract'=None, xml_namespaces = None):
		super().__init__(
		source_currency_code,
		target_currency_code,
		source_currency_base_rate,
		target_currency_base_rate,
		exchange_market_id,
		calculation_rate,
		mathematic_operator_code,
		date,
		foreign_exchange_contract, xml_namespaces)
class PricingReference(cac_types.__PricingReferenceType):

	def __init__(self,		original_item_location_quantity:'OriginalItemLocationQuantity'=None,
		alternative_condition_price:List['AlternativeConditionPrice']=None, xml_namespaces = None):
		super().__init__(
		original_item_location_quantity,
		alternative_condition_price, xml_namespaces)
class ProcessJustification(cac_types.__ProcessJustificationType):

	def __init__(self,		previous_cancellation_reason_code:cbc.PreviousCancellationReasonCode=None,
		process_reason_code:cbc.ProcessReasonCode=None,
		process_reason:List[cbc.ProcessReason]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		previous_cancellation_reason_code,
		process_reason_code,
		process_reason,
		description, xml_namespaces)
class ProcurementLegislationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ProcurementProject(cac_types.__ProcurementProjectType):

	def __init__(self,		id_:cbc.ID=None,
		name:List[cbc.Name]=None,
		description:List[cbc.Description]=None,
		procurement_type_code:cbc.ProcurementTypeCode=None,
		procurement_sub_type_code:cbc.ProcurementSubTypeCode=None,
		quality_control_code:cbc.QualityControlCode=None,
		required_fee_amount:cbc.RequiredFeeAmount=None,
		fee_description:List[cbc.FeeDescription]=None,
		requested_delivery_date:cbc.RequestedDeliveryDate=None,
		estimated_overall_contract_quantity:cbc.EstimatedOverallContractQuantity=None,
		note:List[cbc.Note]=None,
		requested_tender_total:'RequestedTenderTotal'=None,
		main_commodity_classification:'MainCommodityClassification'=None,
		additional_commodity_classification:List['AdditionalCommodityClassification']=None,
		realized_location:List['RealizedLocation']=None,
		planned_period:'PlannedPeriod'=None,
		contract_extension:'ContractExtension'=None,
		request_for_tender_line:List['RequestForTenderLine']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		description,
		procurement_type_code,
		procurement_sub_type_code,
		quality_control_code,
		required_fee_amount,
		fee_description,
		requested_delivery_date,
		estimated_overall_contract_quantity,
		note,
		requested_tender_total,
		main_commodity_classification,
		additional_commodity_classification,
		realized_location,
		planned_period,
		contract_extension,
		request_for_tender_line, xml_namespaces)
class ProcurementProjectLot(cac_types.__ProcurementProjectLotType):

	def __init__(self,		id_:cbc.ID,
		tendering_terms:'TenderingTerms'=None,
		procurement_project:'ProcurementProject'=None, xml_namespaces = None):
		super().__init__(
		id_,
		tendering_terms,
		procurement_project, xml_namespaces)
class ProjectReference(cac_types.__ProjectReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		work_phase_reference:List['WorkPhaseReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		work_phase_reference, xml_namespaces)
class PromisedDeliveryPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class PromotionalEvent(cac_types.__PromotionalEventType):

	def __init__(self,		promotional_event_type_code:cbc.PromotionalEventTypeCode,
		submission_date:cbc.SubmissionDate=None,
		first_shipment_availibility_date:cbc.FirstShipmentAvailibilityDate=None,
		latest_proposal_acceptance_date:cbc.LatestProposalAcceptanceDate=None,
		promotional_specification:List['PromotionalSpecification']=None, xml_namespaces = None):
		super().__init__(
		promotional_event_type_code,
		submission_date,
		first_shipment_availibility_date,
		latest_proposal_acceptance_date,
		promotional_specification, xml_namespaces)
class PromotionalEventLineItem(cac_types.__PromotionalEventLineItemType):

	def __init__(self,		amount:cbc.Amount,
		event_line_item:'EventLineItem', xml_namespaces = None):
		super().__init__(
		amount,
		event_line_item, xml_namespaces)
class PromotionalSpecification(cac_types.__PromotionalSpecificationType):

	def __init__(self,		specification_id:cbc.SpecificationID=None,
		promotional_event_line_item:List['PromotionalEventLineItem']=None,
		event_tactic:List['EventTactic']=None, xml_namespaces = None):
		super().__init__(
		specification_id,
		promotional_event_line_item,
		event_tactic, xml_namespaces)
class ProviderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class QualificationResolution(cac_types.__QualificationResolutionType):

	def __init__(self,		admission_code:cbc.AdmissionCode,
		resolution_date:cbc.ResolutionDate,
		exclusion_reason:List[cbc.ExclusionReason]=None,
		resolution:List[cbc.Resolution]=None,
		resolution_time:cbc.ResolutionTime=None,
		procurement_project_lot:'ProcurementProjectLot'=None, xml_namespaces = None):
		super().__init__(
		admission_code,
		resolution_date,
		exclusion_reason,
		resolution,
		resolution_time,
		procurement_project_lot, xml_namespaces)
class QualifyingParty(cac_types.__QualifyingPartyType):

	def __init__(self,		participation_percent:cbc.ParticipationPercent=None,
		personal_situation:List[cbc.PersonalSituation]=None,
		operating_years_quantity:cbc.OperatingYearsQuantity=None,
		employee_quantity:cbc.EmployeeQuantity=None,
		business_classification_evidence_id:cbc.BusinessClassificationEvidenceID=None,
		business_identity_evidence_id:cbc.BusinessIdentityEvidenceID=None,
		tenderer_role_code:cbc.TendererRoleCode=None,
		business_classification_scheme:'BusinessClassificationScheme'=None,
		technical_capability:List['TechnicalCapability']=None,
		financial_capability:List['FinancialCapability']=None,
		completed_task:List['CompletedTask']=None,
		declaration:List['Declaration']=None,
		party:'Party'=None,
		economic_operator_role:'EconomicOperatorRole'=None, xml_namespaces = None):
		super().__init__(
		participation_percent,
		personal_situation,
		operating_years_quantity,
		employee_quantity,
		business_classification_evidence_id,
		business_identity_evidence_id,
		tenderer_role_code,
		business_classification_scheme,
		technical_capability,
		financial_capability,
		completed_task,
		declaration,
		party,
		economic_operator_role, xml_namespaces)
class QuarantineTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class QuotationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class QuotationLine(cac_types.__QuotationLineType):

	def __init__(self,		line_item:'LineItem',
		id_:cbc.ID=None,
		note:List[cbc.Note]=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		request_for_quotation_line_id:cbc.RequestForQuotationLineID=None,
		document_reference:List['DocumentReference']=None,
		seller_proposed_substitute_line_item:List['SellerProposedSubstituteLineItem']=None,
		alternative_line_item:List['AlternativeLineItem']=None,
		request_line_reference:'RequestLineReference'=None, xml_namespaces = None):
		super().__init__(
		line_item,
		id_,
		note,
		quantity,
		line_extension_amount,
		total_tax_amount,
		request_for_quotation_line_id,
		document_reference,
		seller_proposed_substitute_line_item,
		alternative_line_item,
		request_line_reference, xml_namespaces)
class QuotationLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class QuotedMonetaryTotal(cac_types.__MonetaryTotalType):

	def __init__(self,		payable_amount:cbc.PayableAmount,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_exclusive_amount:cbc.TaxExclusiveAmount=None,
		tax_inclusive_amount:cbc.TaxInclusiveAmount=None,
		allowance_total_amount:cbc.AllowanceTotalAmount=None,
		charge_total_amount:cbc.ChargeTotalAmount=None,
		prepaid_amount:cbc.PrepaidAmount=None,
		payable_rounding_amount:cbc.PayableRoundingAmount=None,
		payable_alternative_amount:cbc.PayableAlternativeAmount=None, xml_namespaces = None):
		super().__init__(
		payable_amount,
		line_extension_amount,
		tax_exclusive_amount,
		tax_inclusive_amount,
		allowance_total_amount,
		charge_total_amount,
		prepaid_amount,
		payable_rounding_amount,
		payable_alternative_amount, xml_namespaces)
class RailTransport(cac_types.__RailTransportType):

	def __init__(self,		train_id:cbc.TrainID,
		rail_car_id:cbc.RailCarID=None, xml_namespaces = None):
		super().__init__(
		train_id,
		rail_car_id, xml_namespaces)
class RangeDimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class RealizedLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class ReceiptDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ReceiptLine(cac_types.__ReceiptLineType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		received_quantity:cbc.ReceivedQuantity=None,
		short_quantity:cbc.ShortQuantity=None,
		shortage_action_code:cbc.ShortageActionCode=None,
		rejected_quantity:cbc.RejectedQuantity=None,
		reject_reason_code:cbc.RejectReasonCode=None,
		reject_reason:List[cbc.RejectReason]=None,
		reject_action_code:cbc.RejectActionCode=None,
		quantity_discrepancy_code:cbc.QuantityDiscrepancyCode=None,
		oversupply_quantity:cbc.OversupplyQuantity=None,
		received_date:cbc.ReceivedDate=None,
		timing_complaint_code:cbc.TimingComplaintCode=None,
		timing_complaint:cbc.TimingComplaint=None,
		order_line_reference:'OrderLineReference'=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		document_reference:List['DocumentReference']=None,
		item:List['Item']=None,
		shipment:List['Shipment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		note,
		received_quantity,
		short_quantity,
		shortage_action_code,
		rejected_quantity,
		reject_reason_code,
		reject_reason,
		reject_action_code,
		quantity_discrepancy_code,
		oversupply_quantity,
		received_date,
		timing_complaint_code,
		timing_complaint,
		order_line_reference,
		despatch_line_reference,
		document_reference,
		item,
		shipment, xml_namespaces)
class ReceiptLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class ReceiptTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class ReceivedHandlingUnitReceiptLine(cac_types.__ReceiptLineType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		received_quantity:cbc.ReceivedQuantity=None,
		short_quantity:cbc.ShortQuantity=None,
		shortage_action_code:cbc.ShortageActionCode=None,
		rejected_quantity:cbc.RejectedQuantity=None,
		reject_reason_code:cbc.RejectReasonCode=None,
		reject_reason:List[cbc.RejectReason]=None,
		reject_action_code:cbc.RejectActionCode=None,
		quantity_discrepancy_code:cbc.QuantityDiscrepancyCode=None,
		oversupply_quantity:cbc.OversupplyQuantity=None,
		received_date:cbc.ReceivedDate=None,
		timing_complaint_code:cbc.TimingComplaintCode=None,
		timing_complaint:cbc.TimingComplaint=None,
		order_line_reference:'OrderLineReference'=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		document_reference:List['DocumentReference']=None,
		item:List['Item']=None,
		shipment:List['Shipment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		note,
		received_quantity,
		short_quantity,
		shortage_action_code,
		rejected_quantity,
		reject_reason_code,
		reject_reason,
		reject_action_code,
		quantity_discrepancy_code,
		oversupply_quantity,
		received_date,
		timing_complaint_code,
		timing_complaint,
		order_line_reference,
		despatch_line_reference,
		document_reference,
		item,
		shipment, xml_namespaces)
class ReceiverParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class RecipientCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class RecipientParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ReferencedConsignment(cac_types.__ConsignmentType):

	def __init__(self,		id_:cbc.ID,
		carrier_assigned_id:cbc.CarrierAssignedID=None,
		consignee_assigned_id:cbc.ConsigneeAssignedID=None,
		consignor_assigned_id:cbc.ConsignorAssignedID=None,
		freight_forwarder_assigned_id:cbc.FreightForwarderAssignedID=None,
		broker_assigned_id:cbc.BrokerAssignedID=None,
		contracted_carrier_assigned_id:cbc.ContractedCarrierAssignedID=None,
		performing_carrier_assigned_id:cbc.PerformingCarrierAssignedID=None,
		summary_description:List[cbc.SummaryDescription]=None,
		total_invoice_amount:cbc.TotalInvoiceAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		tariff_description:List[cbc.TariffDescription]=None,
		tariff_code:cbc.TariffCode=None,
		insurance_premium_amount:cbc.InsurancePremiumAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		loading_length_measure:cbc.LoadingLengthMeasure=None,
		remarks:List[cbc.Remarks]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		animal_food_indicator:cbc.AnimalFoodIndicator=None,
		human_food_indicator:cbc.HumanFoodIndicator=None,
		livestock_indicator:cbc.LivestockIndicator=None,
		bulk_cargo_indicator:cbc.BulkCargoIndicator=None,
		containerized_indicator:cbc.ContainerizedIndicator=None,
		general_cargo_indicator:cbc.GeneralCargoIndicator=None,
		special_security_indicator:cbc.SpecialSecurityIndicator=None,
		third_party_payer_indicator:cbc.ThirdPartyPayerIndicator=None,
		carrier_service_instructions:List[cbc.CarrierServiceInstructions]=None,
		customs_clearance_service_instructions:List[cbc.CustomsClearanceServiceInstructions]=None,
		forwarder_service_instructions:List[cbc.ForwarderServiceInstructions]=None,
		special_service_instructions:List[cbc.SpecialServiceInstructions]=None,
		sequence_id:cbc.SequenceID=None,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consolidatable_indicator:cbc.ConsolidatableIndicator=None,
		haulage_instructions:List[cbc.HaulageInstructions]=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		child_consignment_quantity:cbc.ChildConsignmentQuantity=None,
		total_packages_quantity:cbc.TotalPackagesQuantity=None,
		consolidated_shipment:List['ConsolidatedShipment']=None,
		customs_declaration:List['CustomsDeclaration']=None,
		requested_pickup_transport_event:'RequestedPickupTransportEvent'=None,
		requested_delivery_transport_event:'RequestedDeliveryTransportEvent'=None,
		planned_pickup_transport_event:'PlannedPickupTransportEvent'=None,
		planned_delivery_transport_event:'PlannedDeliveryTransportEvent'=None,
		status:List['Status']=None,
		child_consignment:List['ChildConsignment']=None,
		consignee_party:'ConsigneeParty'=None,
		exporter_party:'ExporterParty'=None,
		consignor_party:'ConsignorParty'=None,
		importer_party:'ImporterParty'=None,
		carrier_party:'CarrierParty'=None,
		freight_forwarder_party:'FreightForwarderParty'=None,
		notify_party:'NotifyParty'=None,
		original_despatch_party:'OriginalDespatchParty'=None,
		final_delivery_party:'FinalDeliveryParty'=None,
		performing_carrier_party:'PerformingCarrierParty'=None,
		substitute_carrier_party:'SubstituteCarrierParty'=None,
		logistics_operator_party:'LogisticsOperatorParty'=None,
		transport_advisor_party:'TransportAdvisorParty'=None,
		hazardous_item_notification_party:'HazardousItemNotificationParty'=None,
		insurance_party:'InsuranceParty'=None,
		mortgage_holder_party:'MortgageHolderParty'=None,
		bill_of_lading_holder_party:'BillOfLadingHolderParty'=None,
		original_departure_country:'OriginalDepartureCountry'=None,
		final_destination_country:'FinalDestinationCountry'=None,
		transit_country:List['TransitCountry']=None,
		transport_contract:'TransportContract'=None,
		transport_event:List['TransportEvent']=None,
		original_despatch_transportation_service:'OriginalDespatchTransportationService'=None,
		final_delivery_transportation_service:'FinalDeliveryTransportationService'=None,
		delivery_terms:'DeliveryTerms'=None,
		payment_terms:'PaymentTerms'=None,
		collect_payment_terms:'CollectPaymentTerms'=None,
		disbursement_payment_terms:'DisbursementPaymentTerms'=None,
		prepaid_payment_terms:'PrepaidPaymentTerms'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		extra_allowance_charge:List['ExtraAllowanceCharge']=None,
		main_carriage_shipment_stage:List['MainCarriageShipmentStage']=None,
		pre_carriage_shipment_stage:List['PreCarriageShipmentStage']=None,
		on_carriage_shipment_stage:List['OnCarriageShipmentStage']=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None, xml_namespaces = None):
		super().__init__(
		id_,
		carrier_assigned_id,
		consignee_assigned_id,
		consignor_assigned_id,
		freight_forwarder_assigned_id,
		broker_assigned_id,
		contracted_carrier_assigned_id,
		performing_carrier_assigned_id,
		summary_description,
		total_invoice_amount,
		declared_customs_value_amount,
		tariff_description,
		tariff_code,
		insurance_premium_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		loading_length_measure,
		remarks,
		hazardous_risk_indicator,
		animal_food_indicator,
		human_food_indicator,
		livestock_indicator,
		bulk_cargo_indicator,
		containerized_indicator,
		general_cargo_indicator,
		special_security_indicator,
		third_party_payer_indicator,
		carrier_service_instructions,
		customs_clearance_service_instructions,
		forwarder_service_instructions,
		special_service_instructions,
		sequence_id,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		split_consignment_indicator,
		delivery_instructions,
		consignment_quantity,
		consolidatable_indicator,
		haulage_instructions,
		loading_sequence_id,
		child_consignment_quantity,
		total_packages_quantity,
		consolidated_shipment,
		customs_declaration,
		requested_pickup_transport_event,
		requested_delivery_transport_event,
		planned_pickup_transport_event,
		planned_delivery_transport_event,
		status,
		child_consignment,
		consignee_party,
		exporter_party,
		consignor_party,
		importer_party,
		carrier_party,
		freight_forwarder_party,
		notify_party,
		original_despatch_party,
		final_delivery_party,
		performing_carrier_party,
		substitute_carrier_party,
		logistics_operator_party,
		transport_advisor_party,
		hazardous_item_notification_party,
		insurance_party,
		mortgage_holder_party,
		bill_of_lading_holder_party,
		original_departure_country,
		final_destination_country,
		transit_country,
		transport_contract,
		transport_event,
		original_despatch_transportation_service,
		final_delivery_transportation_service,
		delivery_terms,
		payment_terms,
		collect_payment_terms,
		disbursement_payment_terms,
		prepaid_payment_terms,
		freight_allowance_charge,
		extra_allowance_charge,
		main_carriage_shipment_stage,
		pre_carriage_shipment_stage,
		on_carriage_shipment_stage,
		transport_handling_unit,
		first_arrival_port_location,
		last_exit_port_location, xml_namespaces)
class ReferencedContract(cac_types.__ContractType):

	def __init__(self,		id_:cbc.ID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		contract_type_code:cbc.ContractTypeCode=None,
		contract_type:cbc.ContractType=None,
		note:List[cbc.Note]=None,
		version_id:cbc.VersionID=None,
		description:List[cbc.Description]=None,
		validity_period:'ValidityPeriod'=None,
		contract_document_reference:List['ContractDocumentReference']=None,
		nomination_period:'NominationPeriod'=None,
		contractual_delivery:'ContractualDelivery'=None, xml_namespaces = None):
		super().__init__(
		id_,
		issue_date,
		issue_time,
		nomination_date,
		nomination_time,
		contract_type_code,
		contract_type,
		note,
		version_id,
		description,
		validity_period,
		contract_document_reference,
		nomination_period,
		contractual_delivery, xml_namespaces)
class ReferencedGoodsItem(cac_types.__GoodsItemType):

	def __init__(self,		id_:cbc.ID=None,
		sequence_number_id:cbc.SequenceNumberID=None,
		description:List[cbc.Description]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		value_amount:cbc.ValueAmount=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		chargeable_weight_measure:cbc.ChargeableWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		quantity:cbc.Quantity=None,
		preference_criterion_code:cbc.PreferenceCriterionCode=None,
		required_customs_id:cbc.RequiredCustomsID=None,
		customs_status_code:cbc.CustomsStatusCode=None,
		customs_tariff_quantity:cbc.CustomsTariffQuantity=None,
		customs_import_classified_indicator:cbc.CustomsImportClassifiedIndicator=None,
		chargeable_quantity:cbc.ChargeableQuantity=None,
		returnable_quantity:cbc.ReturnableQuantity=None,
		trace_id:cbc.TraceID=None,
		item:List['Item']=None,
		goods_item_container:List['GoodsItemContainer']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		invoice_line:List['InvoiceLine']=None,
		temperature:List['Temperature']=None,
		contained_goods_item:List['ContainedGoodsItem']=None,
		origin_address:'OriginAddress'=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		measurement_dimension:List['MeasurementDimension']=None,
		containing_package:List['ContainingPackage']=None,
		shipment_document_reference:'ShipmentDocumentReference'=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None, xml_namespaces = None):
		super().__init__(
		id_,
		sequence_number_id,
		description,
		hazardous_risk_indicator,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		insurance_value_amount,
		value_amount,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		chargeable_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		quantity,
		preference_criterion_code,
		required_customs_id,
		customs_status_code,
		customs_tariff_quantity,
		customs_import_classified_indicator,
		chargeable_quantity,
		returnable_quantity,
		trace_id,
		item,
		goods_item_container,
		freight_allowance_charge,
		invoice_line,
		temperature,
		contained_goods_item,
		origin_address,
		delivery,
		pickup,
		despatch,
		measurement_dimension,
		containing_package,
		shipment_document_reference,
		minimum_temperature,
		maximum_temperature, xml_namespaces)
class ReferencedPackage(cac_types.__PackageType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		returnable_material_indicator:cbc.ReturnableMaterialIndicator=None,
		package_level_code:cbc.PackageLevelCode=None,
		packaging_type_code:cbc.PackagingTypeCode=None,
		packing_material:List[cbc.PackingMaterial]=None,
		trace_id:cbc.TraceID=None,
		contained_package:List['ContainedPackage']=None,
		containing_transport_equipment:'ContainingTransportEquipment'=None,
		goods_item:List['GoodsItem']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		delivery_unit:List['DeliveryUnit']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		returnable_material_indicator,
		package_level_code,
		packaging_type_code,
		packing_material,
		trace_id,
		contained_package,
		containing_transport_equipment,
		goods_item,
		measurement_dimension,
		delivery_unit,
		delivery,
		pickup,
		despatch, xml_namespaces)
class ReferencedShipment(cac_types.__ShipmentType):

	def __init__(self,		id_:cbc.ID,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consignment:List['Consignment']=None,
		goods_item:List['GoodsItem']=None,
		shipment_stage:List['ShipmentStage']=None,
		delivery:'Delivery'=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		return_address:'ReturnAddress'=None,
		origin_address:'OriginAddress'=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None,
		export_country:'ExportCountry'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None, xml_namespaces = None):
		super().__init__(
		id_,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		delivery_instructions,
		split_consignment_indicator,
		consignment_quantity,
		consignment,
		goods_item,
		shipment_stage,
		delivery,
		transport_handling_unit,
		return_address,
		origin_address,
		first_arrival_port_location,
		last_exit_port_location,
		export_country,
		freight_allowance_charge, xml_namespaces)
class ReferencedTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class RegistrationAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class RegistryCertificateDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class RegistryPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class Regulation(cac_types.__RegulationType):

	def __init__(self,		name:cbc.Name,
		legal_reference:cbc.LegalReference=None,
		ontology_uri:cbc.OntologyURI=None, xml_namespaces = None):
		super().__init__(
		name,
		legal_reference,
		ontology_uri, xml_namespaces)
class RelatedCatalogueReference(cac_types.__CatalogueReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		revision_date:cbc.RevisionDate=None,
		revision_time:cbc.RevisionTime=None,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		version_id:cbc.VersionID=None,
		previous_version_id:cbc.PreviousVersionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		issue_time,
		revision_date,
		revision_time,
		note,
		description,
		version_id,
		previous_version_id, xml_namespaces)
class RelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class ReminderDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ReminderLine(cac_types.__ReminderLineType):

	def __init__(self,		id_:cbc.ID,
		note:List[cbc.Note]=None,
		uuid:cbc.UUID=None,
		balance_brought_forward_indicator:cbc.BalanceBroughtForwardIndicator=None,
		debit_line_amount:cbc.DebitLineAmount=None,
		credit_line_amount:cbc.CreditLineAmount=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		amount:cbc.Amount=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		reminder_period:List['ReminderPeriod']=None,
		billing_reference:List['BillingReference']=None,
		exchange_rate:'ExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		uuid,
		balance_brought_forward_indicator,
		debit_line_amount,
		credit_line_amount,
		accounting_cost_code,
		accounting_cost,
		penalty_surcharge_percent,
		amount,
		payment_purpose_code,
		reminder_period,
		billing_reference,
		exchange_rate, xml_namespaces)
class ReminderPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class RemittanceAdviceLine(cac_types.__RemittanceAdviceLineType):

	def __init__(self,		id_:cbc.ID,
		note:List[cbc.Note]=None,
		uuid:cbc.UUID=None,
		debit_line_amount:cbc.DebitLineAmount=None,
		credit_line_amount:cbc.CreditLineAmount=None,
		balance_amount:cbc.BalanceAmount=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		accounting_supplier_party:'AccountingSupplierParty'=None,
		accounting_customer_party:'AccountingCustomerParty'=None,
		buyer_customer_party:'BuyerCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		originator_customer_party:'OriginatorCustomerParty'=None,
		payee_party:'PayeeParty'=None,
		invoice_period:List['InvoicePeriod']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		exchange_rate:'ExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		uuid,
		debit_line_amount,
		credit_line_amount,
		balance_amount,
		payment_purpose_code,
		invoicing_party_reference,
		accounting_supplier_party,
		accounting_customer_party,
		buyer_customer_party,
		seller_supplier_party,
		originator_customer_party,
		payee_party,
		invoice_period,
		billing_reference,
		document_reference,
		exchange_rate, xml_namespaces)
class Renewal(cac_types.__RenewalType):

	def __init__(self,		amount:cbc.Amount=None,
		period:'Period'=None, xml_namespaces = None):
		super().__init__(
		amount,
		period, xml_namespaces)
class ReplacedNoticeDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ReplacedRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class ReplacementRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class ReportedShipment(cac_types.__ShipmentType):

	def __init__(self,		id_:cbc.ID,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consignment:List['Consignment']=None,
		goods_item:List['GoodsItem']=None,
		shipment_stage:List['ShipmentStage']=None,
		delivery:'Delivery'=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		return_address:'ReturnAddress'=None,
		origin_address:'OriginAddress'=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None,
		export_country:'ExportCountry'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None, xml_namespaces = None):
		super().__init__(
		id_,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		delivery_instructions,
		split_consignment_indicator,
		consignment_quantity,
		consignment,
		goods_item,
		shipment_stage,
		delivery,
		transport_handling_unit,
		return_address,
		origin_address,
		first_arrival_port_location,
		last_exit_port_location,
		export_country,
		freight_allowance_charge, xml_namespaces)
class ReportingPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class RequestForQuotationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class RequestForQuotationLine(cac_types.__RequestForQuotationLineType):

	def __init__(self,		line_item:'LineItem',
		id_:cbc.ID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		optional_line_item_indicator:cbc.OptionalLineItemIndicator=None,
		privacy_code:cbc.PrivacyCode=None,
		security_classification_code:cbc.SecurityClassificationCode=None,
		document_reference:List['DocumentReference']=None, xml_namespaces = None):
		super().__init__(
		line_item,
		id_,
		uuid,
		note,
		optional_line_item_indicator,
		privacy_code,
		security_classification_code,
		document_reference, xml_namespaces)
class RequestForTenderLine(cac_types.__RequestForTenderLineType):

	def __init__(self,		item:'Item',
		id_:cbc.ID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		quantity:cbc.Quantity=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		tax_included_indicator:cbc.TaxIncludedIndicator=None,
		minimum_amount:cbc.MinimumAmount=None,
		maximum_amount:cbc.MaximumAmount=None,
		estimated_amount:cbc.EstimatedAmount=None,
		document_reference:List['DocumentReference']=None,
		delivery_period:List['DeliveryPeriod']=None,
		required_item_location_quantity:List['RequiredItemLocationQuantity']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		sub_request_for_tender_line:List['SubRequestForTenderLine']=None, xml_namespaces = None):
		super().__init__(
		item,
		id_,
		uuid,
		note,
		quantity,
		minimum_quantity,
		maximum_quantity,
		tax_included_indicator,
		minimum_amount,
		maximum_amount,
		estimated_amount,
		document_reference,
		delivery_period,
		required_item_location_quantity,
		warranty_validity_period,
		sub_request_for_tender_line, xml_namespaces)
class RequestLineReference(cac_types.__LineReferenceType):

	def __init__(self,		line_id:cbc.LineID,
		uuid:cbc.UUID=None,
		line_status_code:cbc.LineStatusCode=None,
		document_reference:'DocumentReference'=None, xml_namespaces = None):
		super().__init__(
		line_id,
		uuid,
		line_status_code,
		document_reference, xml_namespaces)
class RequestedArrivalTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class RequestedCatalogueReference(cac_types.__CatalogueReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		revision_date:cbc.RevisionDate=None,
		revision_time:cbc.RevisionTime=None,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		version_id:cbc.VersionID=None,
		previous_version_id:cbc.PreviousVersionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		issue_time,
		revision_date,
		revision_time,
		note,
		description,
		version_id,
		previous_version_id, xml_namespaces)
class RequestedClassificationScheme(cac_types.__ClassificationSchemeType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		last_revision_date:cbc.LastRevisionDate=None,
		last_revision_time:cbc.LastRevisionTime=None,
		note:List[cbc.Note]=None,
		name:cbc.Name=None,
		description:List[cbc.Description]=None,
		agency_id:cbc.AgencyID=None,
		agency_name:cbc.AgencyName=None,
		version_id:cbc.VersionID=None,
		uri:cbc.URI=None,
		scheme_uri:cbc.SchemeURI=None,
		language_id:cbc.LanguageID=None,
		classification_category:List['ClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		last_revision_date,
		last_revision_time,
		note,
		name,
		description,
		agency_id,
		agency_name,
		version_id,
		uri,
		scheme_uri,
		language_id,
		classification_category, xml_namespaces)
class RequestedDeliveryPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class RequestedDeliveryTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class RequestedDepartureTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class RequestedDespatchPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class RequestedDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class RequestedLanguage(cac_types.__LanguageType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		locale_code:cbc.LocaleCode=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		locale_code, xml_namespaces)
class RequestedMonetaryTotal(cac_types.__MonetaryTotalType):

	def __init__(self,		payable_amount:cbc.PayableAmount,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_exclusive_amount:cbc.TaxExclusiveAmount=None,
		tax_inclusive_amount:cbc.TaxInclusiveAmount=None,
		allowance_total_amount:cbc.AllowanceTotalAmount=None,
		charge_total_amount:cbc.ChargeTotalAmount=None,
		prepaid_amount:cbc.PrepaidAmount=None,
		payable_rounding_amount:cbc.PayableRoundingAmount=None,
		payable_alternative_amount:cbc.PayableAlternativeAmount=None, xml_namespaces = None):
		super().__init__(
		payable_amount,
		line_extension_amount,
		tax_exclusive_amount,
		tax_inclusive_amount,
		allowance_total_amount,
		charge_total_amount,
		prepaid_amount,
		payable_rounding_amount,
		payable_alternative_amount, xml_namespaces)
class RequestedPickupTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class RequestedStatusLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class RequestedStatusPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class RequestedTenderTotal(cac_types.__RequestedTenderTotalType):

	def __init__(self,		estimated_overall_contract_amount:cbc.EstimatedOverallContractAmount=None,
		total_amount:cbc.TotalAmount=None,
		tax_included_indicator:cbc.TaxIncludedIndicator=None,
		minimum_amount:cbc.MinimumAmount=None,
		maximum_amount:cbc.MaximumAmount=None,
		monetary_scope:List[cbc.MonetaryScope]=None,
		average_subsequent_contract_amount:cbc.AverageSubsequentContractAmount=None,
		applicable_tax_category:List['ApplicableTaxCategory']=None, xml_namespaces = None):
		super().__init__(
		estimated_overall_contract_amount,
		total_amount,
		tax_included_indicator,
		minimum_amount,
		maximum_amount,
		monetary_scope,
		average_subsequent_contract_amount,
		applicable_tax_category, xml_namespaces)
class RequestedValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class RequestedWaypointTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class RequiredBusinessClassificationScheme(cac_types.__ClassificationSchemeType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		last_revision_date:cbc.LastRevisionDate=None,
		last_revision_time:cbc.LastRevisionTime=None,
		note:List[cbc.Note]=None,
		name:cbc.Name=None,
		description:List[cbc.Description]=None,
		agency_id:cbc.AgencyID=None,
		agency_name:cbc.AgencyName=None,
		version_id:cbc.VersionID=None,
		uri:cbc.URI=None,
		scheme_uri:cbc.SchemeURI=None,
		language_id:cbc.LanguageID=None,
		classification_category:List['ClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		last_revision_date,
		last_revision_time,
		note,
		name,
		description,
		agency_id,
		agency_name,
		version_id,
		uri,
		scheme_uri,
		language_id,
		classification_category, xml_namespaces)
class RequiredClassificationScheme(cac_types.__ClassificationSchemeType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		last_revision_date:cbc.LastRevisionDate=None,
		last_revision_time:cbc.LastRevisionTime=None,
		note:List[cbc.Note]=None,
		name:cbc.Name=None,
		description:List[cbc.Description]=None,
		agency_id:cbc.AgencyID=None,
		agency_name:cbc.AgencyName=None,
		version_id:cbc.VersionID=None,
		uri:cbc.URI=None,
		scheme_uri:cbc.SchemeURI=None,
		language_id:cbc.LanguageID=None,
		classification_category:List['ClassificationCategory']=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		last_revision_date,
		last_revision_time,
		note,
		name,
		description,
		agency_id,
		agency_name,
		version_id,
		uri,
		scheme_uri,
		language_id,
		classification_category, xml_namespaces)
class RequiredFinancialGuarantee(cac_types.__FinancialGuaranteeType):

	def __init__(self,		guarantee_type_code:cbc.GuaranteeTypeCode,
		description:List[cbc.Description]=None,
		liability_amount:cbc.LiabilityAmount=None,
		amount_rate:cbc.AmountRate=None,
		constitution_period:'ConstitutionPeriod'=None, xml_namespaces = None):
		super().__init__(
		guarantee_type_code,
		description,
		liability_amount,
		amount_rate,
		constitution_period, xml_namespaces)
class RequiredItemLocationQuantity(cac_types.__ItemLocationQuantityType):

	def __init__(self,		lead_time_measure:cbc.LeadTimeMeasure=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		trading_restrictions:List[cbc.TradingRestrictions]=None,
		applicable_territory_address:List['ApplicableTerritoryAddress']=None,
		price:'Price'=None,
		delivery_unit:List['DeliveryUnit']=None,
		applicable_tax_category:List['ApplicableTaxCategory']=None,
		package:'Package'=None,
		allowance_charge:List['AllowanceCharge']=None,
		dependent_price_reference:'DependentPriceReference'=None, xml_namespaces = None):
		super().__init__(
		lead_time_measure,
		minimum_quantity,
		maximum_quantity,
		hazardous_risk_indicator,
		trading_restrictions,
		applicable_territory_address,
		price,
		delivery_unit,
		applicable_tax_category,
		package,
		allowance_charge,
		dependent_price_reference, xml_namespaces)
class RequiredRelatedItem(cac_types.__RelatedItemType):

	def __init__(self,		id_:cbc.ID=None,
		quantity:cbc.Quantity=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		description, xml_namespaces)
class ResidenceAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class ResolutionDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class Response(cac_types.__ResponseType):

	def __init__(self,		reference_id:cbc.ReferenceID=None,
		response_code:cbc.ResponseCode=None,
		description:List[cbc.Description]=None,
		effective_date:cbc.EffectiveDate=None,
		effective_time:cbc.EffectiveTime=None,
		status:List['Status']=None, xml_namespaces = None):
		super().__init__(
		reference_id,
		response_code,
		description,
		effective_date,
		effective_time,
		status, xml_namespaces)
class ResponsibleTransportServiceProviderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ResultOfVerification(cac_types.__ResultOfVerificationType):

	def __init__(self,		validator_id:cbc.ValidatorID=None,
		validation_result_code:cbc.ValidationResultCode=None,
		validation_date:cbc.ValidationDate=None,
		validation_time:cbc.ValidationTime=None,
		validate_process:cbc.ValidateProcess=None,
		validate_tool:cbc.ValidateTool=None,
		validate_tool_version:cbc.ValidateToolVersion=None,
		signatory_party:'SignatoryParty'=None, xml_namespaces = None):
		super().__init__(
		validator_id,
		validation_result_code,
		validation_date,
		validation_time,
		validate_process,
		validate_tool,
		validate_tool_version,
		signatory_party, xml_namespaces)
class RetailPlannedImpact(cac_types.__RetailPlannedImpactType):

	def __init__(self,		amount:cbc.Amount,
		forecast_purpose_code:cbc.ForecastPurposeCode,
		forecast_type_code:cbc.ForecastTypeCode,
		period:'Period'=None, xml_namespaces = None):
		super().__init__(
		amount,
		forecast_purpose_code,
		forecast_type_code,
		period, xml_namespaces)
class RetailerCustomerParty(cac_types.__CustomerPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		supplier_assigned_account_id:cbc.SupplierAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		party:'Party'=None,
		delivery_contact:'DeliveryContact'=None,
		accounting_contact:'AccountingContact'=None,
		buyer_contact:'BuyerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		supplier_assigned_account_id,
		additional_account_id,
		party,
		delivery_contact,
		accounting_contact,
		buyer_contact, xml_namespaces)
class ReturnAddress(cac_types.__AddressType):

	def __init__(self,		id_:cbc.ID=None,
		address_type_code:cbc.AddressTypeCode=None,
		address_format_code:cbc.AddressFormatCode=None,
		postbox:cbc.Postbox=None,
		floor:cbc.Floor=None,
		room:cbc.Room=None,
		street_name:cbc.StreetName=None,
		additional_street_name:cbc.AdditionalStreetName=None,
		block_name:cbc.BlockName=None,
		building_name:cbc.BuildingName=None,
		building_number:cbc.BuildingNumber=None,
		inhouse_mail:cbc.InhouseMail=None,
		department:cbc.Department=None,
		mark_attention:cbc.MarkAttention=None,
		mark_care:cbc.MarkCare=None,
		plot_identification:cbc.PlotIdentification=None,
		city_subdivision_name:cbc.CitySubdivisionName=None,
		city_name:cbc.CityName=None,
		postal_zone:cbc.PostalZone=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		region:cbc.Region=None,
		district:cbc.District=None,
		timezone_offset:cbc.TimezoneOffset=None,
		address_line:List['AddressLine']=None,
		country:'Country'=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		address_type_code,
		address_format_code,
		postbox,
		floor,
		room,
		street_name,
		additional_street_name,
		block_name,
		building_name,
		building_number,
		inhouse_mail,
		department,
		mark_attention,
		mark_care,
		plot_identification,
		city_subdivision_name,
		city_name,
		postal_zone,
		country_subentity,
		country_subentity_code,
		region,
		district,
		timezone_offset,
		address_line,
		country,
		location_coordinate, xml_namespaces)
class RoadTransport(cac_types.__RoadTransportType):

	def __init__(self,		license_plate_id:cbc.LicensePlateID, xml_namespaces = None):
		super().__init__(
		license_plate_id, xml_namespaces)
class SalesItem(cac_types.__SalesItemType):

	def __init__(self,		quantity:cbc.Quantity,
		item:'Item',
		activity_property:List['ActivityProperty']=None,
		tax_exclusive_price:List['TaxExclusivePrice']=None,
		tax_inclusive_price:List['TaxInclusivePrice']=None, xml_namespaces = None):
		super().__init__(
		quantity,
		item,
		activity_property,
		tax_exclusive_price,
		tax_inclusive_price, xml_namespaces)
class ScheduledServiceFrequency(cac_types.__ServiceFrequencyType):

	def __init__(self,		week_day_code:cbc.WeekDayCode, xml_namespaces = None):
		super().__init__(
		week_day_code, xml_namespaces)
class SecondaryHazard(cac_types.__SecondaryHazardType):

	def __init__(self,		id_:cbc.ID=None,
		placard_notation:cbc.PlacardNotation=None,
		placard_endorsement:cbc.PlacardEndorsement=None,
		emergency_procedures_code:cbc.EmergencyProceduresCode=None,
		extension:List[cbc.Extension]=None, xml_namespaces = None):
		super().__init__(
		id_,
		placard_notation,
		placard_endorsement,
		emergency_procedures_code,
		extension, xml_namespaces)
class SecurityOfficerPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class SelfBilledCreditNoteDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class SelfBilledInvoiceDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class SellerContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class SellerProposedSubstituteLineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class SellerSubstitutedLineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class SellerSupplierParty(cac_types.__SupplierPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		data_sending_capability:cbc.DataSendingCapability=None,
		party:'Party'=None,
		despatch_contact:'DespatchContact'=None,
		accounting_contact:'AccountingContact'=None,
		seller_contact:'SellerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		additional_account_id,
		data_sending_capability,
		party,
		despatch_contact,
		accounting_contact,
		seller_contact, xml_namespaces)
class SellersItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class SenderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ServiceAllowanceCharge(cac_types.__AllowanceChargeType):

	def __init__(self,		charge_indicator:cbc.ChargeIndicator,
		amount:cbc.Amount,
		id_:cbc.ID=None,
		allowance_charge_reason_code:cbc.AllowanceChargeReasonCode=None,
		allowance_charge_reason:List[cbc.AllowanceChargeReason]=None,
		multiplier_factor_numeric:cbc.MultiplierFactorNumeric=None,
		prepaid_indicator:cbc.PrepaidIndicator=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		base_amount:cbc.BaseAmount=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_category:List['TaxCategory']=None,
		tax_total:'TaxTotal'=None,
		payment_means:List['PaymentMeans']=None, xml_namespaces = None):
		super().__init__(
		charge_indicator,
		amount,
		id_,
		allowance_charge_reason_code,
		allowance_charge_reason,
		multiplier_factor_numeric,
		prepaid_indicator,
		sequence_numeric,
		base_amount,
		accounting_cost_code,
		accounting_cost,
		per_unit_amount,
		tax_category,
		tax_total,
		payment_means, xml_namespaces)
class ServiceChargePaymentTerms(cac_types.__PaymentTermsType):

	def __init__(self,		id_:cbc.ID=None,
		payment_means_id:List[cbc.PaymentMeansID]=None,
		prepaid_payment_reference_id:cbc.PrepaidPaymentReferenceID=None,
		note:List[cbc.Note]=None,
		reference_event_code:cbc.ReferenceEventCode=None,
		settlement_discount_percent:cbc.SettlementDiscountPercent=None,
		penalty_surcharge_percent:cbc.PenaltySurchargePercent=None,
		payment_percent:cbc.PaymentPercent=None,
		amount:cbc.Amount=None,
		settlement_discount_amount:cbc.SettlementDiscountAmount=None,
		penalty_amount:cbc.PenaltyAmount=None,
		payment_terms_details_uri:cbc.PaymentTermsDetailsURI=None,
		payment_due_date:cbc.PaymentDueDate=None,
		installment_due_date:cbc.InstallmentDueDate=None,
		invoicing_party_reference:cbc.InvoicingPartyReference=None,
		settlement_period:'SettlementPeriod'=None,
		penalty_period:'PenaltyPeriod'=None,
		exchange_rate:'ExchangeRate'=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		id_,
		payment_means_id,
		prepaid_payment_reference_id,
		note,
		reference_event_code,
		settlement_discount_percent,
		penalty_surcharge_percent,
		payment_percent,
		amount,
		settlement_discount_amount,
		penalty_amount,
		payment_terms_details_uri,
		payment_due_date,
		installment_due_date,
		invoicing_party_reference,
		settlement_period,
		penalty_period,
		exchange_rate,
		validity_period, xml_namespaces)
class ServiceEndTimePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ServiceFrequency(cac_types.__ServiceFrequencyType):

	def __init__(self,		week_day_code:cbc.WeekDayCode, xml_namespaces = None):
		super().__init__(
		week_day_code, xml_namespaces)
class ServiceProviderParty(cac_types.__ServiceProviderPartyType):

	def __init__(self,		party:'Party',
		id_:cbc.ID=None,
		service_type_code:cbc.ServiceTypeCode=None,
		service_type:List[cbc.ServiceType]=None,
		seller_contact:'SellerContact'=None, xml_namespaces = None):
		super().__init__(
		party,
		id_,
		service_type_code,
		service_type,
		seller_contact, xml_namespaces)
class ServiceStartTimePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class SettlementPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class ShareholderParty(cac_types.__ShareholderPartyType):

	def __init__(self,		partecipation_percent:cbc.PartecipationPercent=None,
		party:'Party'=None, xml_namespaces = None):
		super().__init__(
		partecipation_percent,
		party, xml_namespaces)
class Shipment(cac_types.__ShipmentType):

	def __init__(self,		id_:cbc.ID,
		shipping_priority_level_code:cbc.ShippingPriorityLevelCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		information:List[cbc.Information]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		net_weight_measure:cbc.NetWeightMeasure=None,
		net_net_weight_measure:cbc.NetNetWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		net_volume_measure:cbc.NetVolumeMeasure=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_transport_handling_unit_quantity:cbc.TotalTransportHandlingUnitQuantity=None,
		insurance_value_amount:cbc.InsuranceValueAmount=None,
		declared_customs_value_amount:cbc.DeclaredCustomsValueAmount=None,
		declared_for_carriage_value_amount:cbc.DeclaredForCarriageValueAmount=None,
		declared_statistics_value_amount:cbc.DeclaredStatisticsValueAmount=None,
		free_on_board_value_amount:cbc.FreeOnBoardValueAmount=None,
		special_instructions:List[cbc.SpecialInstructions]=None,
		delivery_instructions:List[cbc.DeliveryInstructions]=None,
		split_consignment_indicator:cbc.SplitConsignmentIndicator=None,
		consignment_quantity:cbc.ConsignmentQuantity=None,
		consignment:List['Consignment']=None,
		goods_item:List['GoodsItem']=None,
		shipment_stage:List['ShipmentStage']=None,
		delivery:'Delivery'=None,
		transport_handling_unit:List['TransportHandlingUnit']=None,
		return_address:'ReturnAddress'=None,
		origin_address:'OriginAddress'=None,
		first_arrival_port_location:'FirstArrivalPortLocation'=None,
		last_exit_port_location:'LastExitPortLocation'=None,
		export_country:'ExportCountry'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None, xml_namespaces = None):
		super().__init__(
		id_,
		shipping_priority_level_code,
		handling_code,
		handling_instructions,
		information,
		gross_weight_measure,
		net_weight_measure,
		net_net_weight_measure,
		gross_volume_measure,
		net_volume_measure,
		total_goods_item_quantity,
		total_transport_handling_unit_quantity,
		insurance_value_amount,
		declared_customs_value_amount,
		declared_for_carriage_value_amount,
		declared_statistics_value_amount,
		free_on_board_value_amount,
		special_instructions,
		delivery_instructions,
		split_consignment_indicator,
		consignment_quantity,
		consignment,
		goods_item,
		shipment_stage,
		delivery,
		transport_handling_unit,
		return_address,
		origin_address,
		first_arrival_port_location,
		last_exit_port_location,
		export_country,
		freight_allowance_charge, xml_namespaces)
class ShipmentDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class ShipmentStage(cac_types.__ShipmentStageType):

	def __init__(self,		id_:cbc.ID=None,
		transport_mode_code:cbc.TransportModeCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		transit_direction_code:cbc.TransitDirectionCode=None,
		pre_carriage_indicator:cbc.PreCarriageIndicator=None,
		on_carriage_indicator:cbc.OnCarriageIndicator=None,
		estimated_delivery_date:cbc.EstimatedDeliveryDate=None,
		estimated_delivery_time:cbc.EstimatedDeliveryTime=None,
		required_delivery_date:cbc.RequiredDeliveryDate=None,
		required_delivery_time:cbc.RequiredDeliveryTime=None,
		loading_sequence_id:cbc.LoadingSequenceID=None,
		successive_sequence_id:cbc.SuccessiveSequenceID=None,
		instructions:List[cbc.Instructions]=None,
		demurrage_instructions:List[cbc.DemurrageInstructions]=None,
		crew_quantity:cbc.CrewQuantity=None,
		passenger_quantity:cbc.PassengerQuantity=None,
		transit_period:'TransitPeriod'=None,
		carrier_party:List['CarrierParty']=None,
		transport_means:'TransportMeans'=None,
		loading_port_location:'LoadingPortLocation'=None,
		unloading_port_location:'UnloadingPortLocation'=None,
		transship_port_location:'TransshipPortLocation'=None,
		loading_transport_event:'LoadingTransportEvent'=None,
		examination_transport_event:'ExaminationTransportEvent'=None,
		availability_transport_event:'AvailabilityTransportEvent'=None,
		exportation_transport_event:'ExportationTransportEvent'=None,
		discharge_transport_event:'DischargeTransportEvent'=None,
		warehousing_transport_event:'WarehousingTransportEvent'=None,
		takeover_transport_event:'TakeoverTransportEvent'=None,
		optional_takeover_transport_event:'OptionalTakeoverTransportEvent'=None,
		dropoff_transport_event:'DropoffTransportEvent'=None,
		actual_pickup_transport_event:'ActualPickupTransportEvent'=None,
		delivery_transport_event:'DeliveryTransportEvent'=None,
		receipt_transport_event:'ReceiptTransportEvent'=None,
		storage_transport_event:'StorageTransportEvent'=None,
		acceptance_transport_event:'AcceptanceTransportEvent'=None,
		terminal_operator_party:'TerminalOperatorParty'=None,
		customs_agent_party:'CustomsAgentParty'=None,
		estimated_transit_period:'EstimatedTransitPeriod'=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		freight_charge_location:'FreightChargeLocation'=None,
		detention_transport_event:List['DetentionTransportEvent']=None,
		requested_departure_transport_event:'RequestedDepartureTransportEvent'=None,
		requested_arrival_transport_event:'RequestedArrivalTransportEvent'=None,
		requested_waypoint_transport_event:List['RequestedWaypointTransportEvent']=None,
		planned_departure_transport_event:'PlannedDepartureTransportEvent'=None,
		planned_arrival_transport_event:'PlannedArrivalTransportEvent'=None,
		planned_waypoint_transport_event:List['PlannedWaypointTransportEvent']=None,
		actual_departure_transport_event:'ActualDepartureTransportEvent'=None,
		actual_waypoint_transport_event:'ActualWaypointTransportEvent'=None,
		actual_arrival_transport_event:'ActualArrivalTransportEvent'=None,
		transport_event:List['TransportEvent']=None,
		estimated_departure_transport_event:'EstimatedDepartureTransportEvent'=None,
		estimated_arrival_transport_event:'EstimatedArrivalTransportEvent'=None,
		passenger_person:List['PassengerPerson']=None,
		driver_person:List['DriverPerson']=None,
		reporting_person:'ReportingPerson'=None,
		crew_member_person:List['CrewMemberPerson']=None,
		security_officer_person:'SecurityOfficerPerson'=None,
		master_person:'MasterPerson'=None,
		ships_surgeon_person:'ShipsSurgeonPerson'=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_mode_code,
		transport_means_type_code,
		transit_direction_code,
		pre_carriage_indicator,
		on_carriage_indicator,
		estimated_delivery_date,
		estimated_delivery_time,
		required_delivery_date,
		required_delivery_time,
		loading_sequence_id,
		successive_sequence_id,
		instructions,
		demurrage_instructions,
		crew_quantity,
		passenger_quantity,
		transit_period,
		carrier_party,
		transport_means,
		loading_port_location,
		unloading_port_location,
		transship_port_location,
		loading_transport_event,
		examination_transport_event,
		availability_transport_event,
		exportation_transport_event,
		discharge_transport_event,
		warehousing_transport_event,
		takeover_transport_event,
		optional_takeover_transport_event,
		dropoff_transport_event,
		actual_pickup_transport_event,
		delivery_transport_event,
		receipt_transport_event,
		storage_transport_event,
		acceptance_transport_event,
		terminal_operator_party,
		customs_agent_party,
		estimated_transit_period,
		freight_allowance_charge,
		freight_charge_location,
		detention_transport_event,
		requested_departure_transport_event,
		requested_arrival_transport_event,
		requested_waypoint_transport_event,
		planned_departure_transport_event,
		planned_arrival_transport_event,
		planned_waypoint_transport_event,
		actual_departure_transport_event,
		actual_waypoint_transport_event,
		actual_arrival_transport_event,
		transport_event,
		estimated_departure_transport_event,
		estimated_arrival_transport_event,
		passenger_person,
		driver_person,
		reporting_person,
		crew_member_person,
		security_officer_person,
		master_person,
		ships_surgeon_person, xml_namespaces)
class ShipsSurgeonPerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class SignatoryContact(cac_types.__ContactType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		telephone:cbc.Telephone=None,
		telefax:cbc.Telefax=None,
		electronic_mail:cbc.ElectronicMail=None,
		note:List[cbc.Note]=None,
		other_communication:List['OtherCommunication']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		telephone,
		telefax,
		electronic_mail,
		note,
		other_communication, xml_namespaces)
class SignatoryParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class Signature(cac_types.__SignatureType):

	def __init__(self,		id_:cbc.ID,
		note:List[cbc.Note]=None,
		validation_date:cbc.ValidationDate=None,
		validation_time:cbc.ValidationTime=None,
		validator_id:cbc.ValidatorID=None,
		canonicalization_method:cbc.CanonicalizationMethod=None,
		signature_method:cbc.SignatureMethod=None,
		signatory_party:'SignatoryParty'=None,
		digital_signature_attachment:'DigitalSignatureAttachment'=None,
		original_document_reference:'OriginalDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		validation_date,
		validation_time,
		validator_id,
		canonicalization_method,
		signature_method,
		signatory_party,
		digital_signature_attachment,
		original_document_reference, xml_namespaces)
class SourceCatalogueReference(cac_types.__CatalogueReferenceType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		revision_date:cbc.RevisionDate=None,
		revision_time:cbc.RevisionTime=None,
		note:List[cbc.Note]=None,
		description:List[cbc.Description]=None,
		version_id:cbc.VersionID=None,
		previous_version_id:cbc.PreviousVersionID=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		issue_date,
		issue_time,
		revision_date,
		revision_time,
		note,
		description,
		version_id,
		previous_version_id, xml_namespaces)
class SourceIssuerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class SpecificTendererRequirement(cac_types.__TendererRequirementType):

	def __init__(self,		name:List[cbc.Name]=None,
		tenderer_requirement_type_code:cbc.TendererRequirementTypeCode=None,
		description:List[cbc.Description]=None,
		legal_reference:cbc.LegalReference=None,
		suggested_evidence:List['SuggestedEvidence']=None, xml_namespaces = None):
		super().__init__(
		name,
		tenderer_requirement_type_code,
		description,
		legal_reference,
		suggested_evidence, xml_namespaces)
class StandardItemIdentification(cac_types.__ItemIdentificationType):

	def __init__(self,		id_:cbc.ID,
		extended_id:cbc.ExtendedID=None,
		barcode_symbology_id:cbc.BarcodeSymbologyID=None,
		physical_attribute:List['PhysicalAttribute']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		issuer_party:'IssuerParty'=None, xml_namespaces = None):
		super().__init__(
		id_,
		extended_id,
		barcode_symbology_id,
		physical_attribute,
		measurement_dimension,
		issuer_party, xml_namespaces)
class StatementDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class StatementLine(cac_types.__StatementLineType):

	def __init__(self,		id_:cbc.ID,
		note:List[cbc.Note]=None,
		uuid:cbc.UUID=None,
		balance_brought_forward_indicator:cbc.BalanceBroughtForwardIndicator=None,
		debit_line_amount:cbc.DebitLineAmount=None,
		credit_line_amount:cbc.CreditLineAmount=None,
		balance_amount:cbc.BalanceAmount=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		payment_means:'PaymentMeans'=None,
		payment_terms:List['PaymentTerms']=None,
		buyer_customer_party:'BuyerCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		originator_customer_party:'OriginatorCustomerParty'=None,
		accounting_customer_party:'AccountingCustomerParty'=None,
		accounting_supplier_party:'AccountingSupplierParty'=None,
		payee_party:'PayeeParty'=None,
		invoice_period:List['InvoicePeriod']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		exchange_rate:'ExchangeRate'=None,
		allowance_charge:List['AllowanceCharge']=None,
		collected_payment:List['CollectedPayment']=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		uuid,
		balance_brought_forward_indicator,
		debit_line_amount,
		credit_line_amount,
		balance_amount,
		payment_purpose_code,
		payment_means,
		payment_terms,
		buyer_customer_party,
		seller_supplier_party,
		originator_customer_party,
		accounting_customer_party,
		accounting_supplier_party,
		payee_party,
		invoice_period,
		billing_reference,
		document_reference,
		exchange_rate,
		allowance_charge,
		collected_payment, xml_namespaces)
class StatementPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class Status(cac_types.__StatusType):

	def __init__(self,		condition_code:cbc.ConditionCode=None,
		reference_date:cbc.ReferenceDate=None,
		reference_time:cbc.ReferenceTime=None,
		description:List[cbc.Description]=None,
		status_reason_code:cbc.StatusReasonCode=None,
		status_reason:List[cbc.StatusReason]=None,
		sequence_id:cbc.SequenceID=None,
		text:List[cbc.Text]=None,
		indication_indicator:cbc.IndicationIndicator=None,
		percent:cbc.Percent=None,
		reliability_percent:cbc.ReliabilityPercent=None,
		condition:List['Condition']=None, xml_namespaces = None):
		super().__init__(
		condition_code,
		reference_date,
		reference_time,
		description,
		status_reason_code,
		status_reason,
		sequence_id,
		text,
		indication_indicator,
		percent,
		reliability_percent,
		condition, xml_namespaces)
class StatusLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class StatusPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class StockAvailabilityReportLine(cac_types.__StockAvailabilityReportLineType):

	def __init__(self,		id_:cbc.ID,
		quantity:cbc.Quantity,
		item:'Item',
		note:List[cbc.Note]=None,
		value_amount:cbc.ValueAmount=None,
		availability_date:cbc.AvailabilityDate=None,
		availability_status_code:cbc.AvailabilityStatusCode=None, xml_namespaces = None):
		super().__init__(
		id_,
		quantity,
		item,
		note,
		value_amount,
		availability_date,
		availability_status_code, xml_namespaces)
class StorageLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class StorageTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class Stowage(cac_types.__StowageType):

	def __init__(self,		location_id:cbc.LocationID=None,
		location:List[cbc.Location]=None,
		measurement_dimension:List['MeasurementDimension']=None, xml_namespaces = None):
		super().__init__(
		location_id,
		location,
		measurement_dimension, xml_namespaces)
class SubCreditNoteLine(cac_types.__CreditNoteLineType):

	def __init__(self,		id_:cbc.ID,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		credited_quantity:cbc.CreditedQuantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		free_of_charge_indicator:cbc.FreeOfChargeIndicator=None,
		invoice_period:List['InvoicePeriod']=None,
		order_line_reference:List['OrderLineReference']=None,
		discrepancy_response:List['DiscrepancyResponse']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		originator_party:'OriginatorParty'=None,
		delivery:List['Delivery']=None,
		payment_terms:List['PaymentTerms']=None,
		tax_total:List['TaxTotal']=None,
		allowance_charge:List['AllowanceCharge']=None,
		item:'Item'=None,
		price:'Price'=None,
		delivery_terms:List['DeliveryTerms']=None,
		sub_credit_note_line:List['SubCreditNoteLine']=None,
		item_price_extension:'ItemPriceExtension'=None, xml_namespaces = None):
		super().__init__(
		id_,
		uuid,
		note,
		credited_quantity,
		line_extension_amount,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		free_of_charge_indicator,
		invoice_period,
		order_line_reference,
		discrepancy_response,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		originator_party,
		delivery,
		payment_terms,
		tax_total,
		allowance_charge,
		item,
		price,
		delivery_terms,
		sub_credit_note_line,
		item_price_extension, xml_namespaces)
class SubDebitNoteLine(cac_types.__DebitNoteLineType):

	def __init__(self,		id_:cbc.ID,
		line_extension_amount:cbc.LineExtensionAmount,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		debited_quantity:cbc.DebitedQuantity=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		discrepancy_response:List['DiscrepancyResponse']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		delivery:List['Delivery']=None,
		tax_total:List['TaxTotal']=None,
		allowance_charge:List['AllowanceCharge']=None,
		item:'Item'=None,
		price:'Price'=None,
		sub_debit_note_line:List['SubDebitNoteLine']=None, xml_namespaces = None):
		super().__init__(
		id_,
		line_extension_amount,
		uuid,
		note,
		debited_quantity,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		discrepancy_response,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		delivery,
		tax_total,
		allowance_charge,
		item,
		price,
		sub_debit_note_line, xml_namespaces)
class SubInvoiceLine(cac_types.__InvoiceLineType):

	def __init__(self,		id_:cbc.ID,
		line_extension_amount:cbc.LineExtensionAmount,
		item:'Item',
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		invoiced_quantity:cbc.InvoicedQuantity=None,
		tax_point_date:cbc.TaxPointDate=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		payment_purpose_code:cbc.PaymentPurposeCode=None,
		free_of_charge_indicator:cbc.FreeOfChargeIndicator=None,
		invoice_period:List['InvoicePeriod']=None,
		order_line_reference:List['OrderLineReference']=None,
		despatch_line_reference:List['DespatchLineReference']=None,
		receipt_line_reference:List['ReceiptLineReference']=None,
		billing_reference:List['BillingReference']=None,
		document_reference:List['DocumentReference']=None,
		pricing_reference:'PricingReference'=None,
		originator_party:'OriginatorParty'=None,
		delivery:List['Delivery']=None,
		payment_terms:List['PaymentTerms']=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		withholding_tax_total:List['WithholdingTaxTotal']=None,
		price:'Price'=None,
		delivery_terms:'DeliveryTerms'=None,
		sub_invoice_line:List['SubInvoiceLine']=None,
		item_price_extension:'ItemPriceExtension'=None, xml_namespaces = None):
		super().__init__(
		id_,
		line_extension_amount,
		item,
		uuid,
		note,
		invoiced_quantity,
		tax_point_date,
		accounting_cost_code,
		accounting_cost,
		payment_purpose_code,
		free_of_charge_indicator,
		invoice_period,
		order_line_reference,
		despatch_line_reference,
		receipt_line_reference,
		billing_reference,
		document_reference,
		pricing_reference,
		originator_party,
		delivery,
		payment_terms,
		allowance_charge,
		tax_total,
		withholding_tax_total,
		price,
		delivery_terms,
		sub_invoice_line,
		item_price_extension, xml_namespaces)
class SubLineItem(cac_types.__LineItemType):

	def __init__(self,		id_:cbc.ID,
		item:'Item',
		sales_order_id:cbc.SalesOrderID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		line_status_code:cbc.LineStatusCode=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_backorder_quantity:cbc.MinimumBackorderQuantity=None,
		maximum_backorder_quantity:cbc.MaximumBackorderQuantity=None,
		inspection_method_code:cbc.InspectionMethodCode=None,
		partial_delivery_indicator:cbc.PartialDeliveryIndicator=None,
		back_order_allowed_indicator:cbc.BackOrderAllowedIndicator=None,
		accounting_cost_code:cbc.AccountingCostCode=None,
		accounting_cost:cbc.AccountingCost=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		delivery:List['Delivery']=None,
		delivery_terms:'DeliveryTerms'=None,
		originator_party:'OriginatorParty'=None,
		ordered_shipment:List['OrderedShipment']=None,
		pricing_reference:'PricingReference'=None,
		allowance_charge:List['AllowanceCharge']=None,
		price:'Price'=None,
		sub_line_item:List['SubLineItem']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		warranty_party:'WarrantyParty'=None,
		tax_total:List['TaxTotal']=None,
		item_price_extension:'ItemPriceExtension'=None,
		line_reference:List['LineReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		item,
		sales_order_id,
		uuid,
		note,
		line_status_code,
		quantity,
		line_extension_amount,
		total_tax_amount,
		minimum_quantity,
		maximum_quantity,
		minimum_backorder_quantity,
		maximum_backorder_quantity,
		inspection_method_code,
		partial_delivery_indicator,
		back_order_allowed_indicator,
		accounting_cost_code,
		accounting_cost,
		warranty_information,
		delivery,
		delivery_terms,
		originator_party,
		ordered_shipment,
		pricing_reference,
		allowance_charge,
		price,
		sub_line_item,
		warranty_validity_period,
		warranty_party,
		tax_total,
		item_price_extension,
		line_reference, xml_namespaces)
class SubRequestForTenderLine(cac_types.__RequestForTenderLineType):

	def __init__(self,		item:'Item',
		id_:cbc.ID=None,
		uuid:cbc.UUID=None,
		note:List[cbc.Note]=None,
		quantity:cbc.Quantity=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		tax_included_indicator:cbc.TaxIncludedIndicator=None,
		minimum_amount:cbc.MinimumAmount=None,
		maximum_amount:cbc.MaximumAmount=None,
		estimated_amount:cbc.EstimatedAmount=None,
		document_reference:List['DocumentReference']=None,
		delivery_period:List['DeliveryPeriod']=None,
		required_item_location_quantity:List['RequiredItemLocationQuantity']=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		sub_request_for_tender_line:List['SubRequestForTenderLine']=None, xml_namespaces = None):
		super().__init__(
		item,
		id_,
		uuid,
		note,
		quantity,
		minimum_quantity,
		maximum_quantity,
		tax_included_indicator,
		minimum_amount,
		maximum_amount,
		estimated_amount,
		document_reference,
		delivery_period,
		required_item_location_quantity,
		warranty_validity_period,
		sub_request_for_tender_line, xml_namespaces)
class SubTenderLine(cac_types.__TenderLineType):

	def __init__(self,		id_:cbc.ID=None,
		note:List[cbc.Note]=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		orderable_unit:cbc.OrderableUnit=None,
		content_unit_quantity:cbc.ContentUnitQuantity=None,
		order_quantity_increment_numeric:cbc.OrderQuantityIncrementNumeric=None,
		minimum_order_quantity:cbc.MinimumOrderQuantity=None,
		maximum_order_quantity:cbc.MaximumOrderQuantity=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		pack_level_code:cbc.PackLevelCode=None,
		document_reference:List['DocumentReference']=None,
		item:'Item'=None,
		offered_item_location_quantity:List['OfferedItemLocationQuantity']=None,
		replacement_related_item:List['ReplacementRelatedItem']=None,
		warranty_party:'WarrantyParty'=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		sub_tender_line:List['SubTenderLine']=None,
		call_for_tenders_line_reference:'CallForTendersLineReference'=None,
		call_for_tenders_document_reference:'CallForTendersDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		quantity,
		line_extension_amount,
		total_tax_amount,
		orderable_unit,
		content_unit_quantity,
		order_quantity_increment_numeric,
		minimum_order_quantity,
		maximum_order_quantity,
		warranty_information,
		pack_level_code,
		document_reference,
		item,
		offered_item_location_quantity,
		replacement_related_item,
		warranty_party,
		warranty_validity_period,
		sub_tender_line,
		call_for_tenders_line_reference,
		call_for_tenders_document_reference, xml_namespaces)
class SubcontractTerms(cac_types.__SubcontractTermsType):

	def __init__(self,		rate:cbc.Rate=None,
		unknown_price_indicator:cbc.UnknownPriceIndicator=None,
		description:List[cbc.Description]=None,
		amount:cbc.Amount=None,
		subcontracting_conditions_code:cbc.SubcontractingConditionsCode=None,
		maximum_percent:cbc.MaximumPercent=None,
		minimum_percent:cbc.MinimumPercent=None, xml_namespaces = None):
		super().__init__(
		rate,
		unknown_price_indicator,
		description,
		amount,
		subcontracting_conditions_code,
		maximum_percent,
		minimum_percent, xml_namespaces)
class SubcontractorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class SubordinateAwardingCriterion(cac_types.__AwardingCriterionType):

	def __init__(self,		id_:cbc.ID=None,
		awarding_criterion_type_code:cbc.AwardingCriterionTypeCode=None,
		description:List[cbc.Description]=None,
		weight_numeric:cbc.WeightNumeric=None,
		weight:List[cbc.Weight]=None,
		calculation_expression:List[cbc.CalculationExpression]=None,
		calculation_expression_code:cbc.CalculationExpressionCode=None,
		minimum_quantity:cbc.MinimumQuantity=None,
		maximum_quantity:cbc.MaximumQuantity=None,
		minimum_amount:cbc.MinimumAmount=None,
		maximum_amount:cbc.MaximumAmount=None,
		minimum_improvement_bid:List[cbc.MinimumImprovementBid]=None,
		subordinate_awarding_criterion:List['SubordinateAwardingCriterion']=None, xml_namespaces = None):
		super().__init__(
		id_,
		awarding_criterion_type_code,
		description,
		weight_numeric,
		weight,
		calculation_expression,
		calculation_expression_code,
		minimum_quantity,
		maximum_quantity,
		minimum_amount,
		maximum_amount,
		minimum_improvement_bid,
		subordinate_awarding_criterion, xml_namespaces)
class SubordinateAwardingCriterionResponse(cac_types.__AwardingCriterionResponseType):

	def __init__(self,		id_:cbc.ID=None,
		awarding_criterion_id:cbc.AwardingCriterionID=None,
		awarding_criterion_description:List[cbc.AwardingCriterionDescription]=None,
		description:List[cbc.Description]=None,
		quantity:cbc.Quantity=None,
		amount:cbc.Amount=None,
		subordinate_awarding_criterion_response:List['SubordinateAwardingCriterionResponse']=None, xml_namespaces = None):
		super().__init__(
		id_,
		awarding_criterion_id,
		awarding_criterion_description,
		description,
		quantity,
		amount,
		subordinate_awarding_criterion_response, xml_namespaces)
class SubscriberConsumption(cac_types.__SubscriberConsumptionType):

	def __init__(self,		utility_consumption_point:'UtilityConsumptionPoint',
		consumption_id:cbc.ConsumptionID=None,
		specification_type_code:cbc.SpecificationTypeCode=None,
		note:List[cbc.Note]=None,
		total_metered_quantity:cbc.TotalMeteredQuantity=None,
		subscriber_party:'SubscriberParty'=None,
		on_account_payment:List['OnAccountPayment']=None,
		consumption:'Consumption'=None,
		supplier_consumption:List['SupplierConsumption']=None, xml_namespaces = None):
		super().__init__(
		utility_consumption_point,
		consumption_id,
		specification_type_code,
		note,
		total_metered_quantity,
		subscriber_party,
		on_account_payment,
		consumption,
		supplier_consumption, xml_namespaces)
class SubscriberParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class SubsequentProcessTenderRequirement(cac_types.__TenderRequirementType):

	def __init__(self,		name:cbc.Name,
		description:List[cbc.Description]=None,
		template_document_reference:'TemplateDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		name,
		description,
		template_document_reference, xml_namespaces)
class SubsidiaryLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class SubstituteCarrierParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class SuggestedEvidence(cac_types.__EvidenceType):

	def __init__(self,		id_:cbc.ID=None,
		evidence_type_code:cbc.EvidenceTypeCode=None,
		description:List[cbc.Description]=None,
		candidate_statement:List[cbc.CandidateStatement]=None,
		evidence_issuing_party:'EvidenceIssuingParty'=None,
		document_reference:'DocumentReference'=None,
		language:'Language'=None, xml_namespaces = None):
		super().__init__(
		id_,
		evidence_type_code,
		description,
		candidate_statement,
		evidence_issuing_party,
		document_reference,
		language, xml_namespaces)
class SupplierConsumption(cac_types.__SupplierConsumptionType):

	def __init__(self,		consumption:'Consumption',
		description:List[cbc.Description]=None,
		utility_supplier_party:'UtilitySupplierParty'=None,
		utility_customer_party:'UtilityCustomerParty'=None,
		contract:'Contract'=None,
		consumption_line:List['ConsumptionLine']=None, xml_namespaces = None):
		super().__init__(
		consumption,
		description,
		utility_supplier_party,
		utility_customer_party,
		contract,
		consumption_line, xml_namespaces)
class SupplierParty(cac_types.__SupplierPartyType):

	def __init__(self,		customer_assigned_account_id:cbc.CustomerAssignedAccountID=None,
		additional_account_id:List[cbc.AdditionalAccountID]=None,
		data_sending_capability:cbc.DataSendingCapability=None,
		party:'Party'=None,
		despatch_contact:'DespatchContact'=None,
		accounting_contact:'AccountingContact'=None,
		seller_contact:'SellerContact'=None, xml_namespaces = None):
		super().__init__(
		customer_assigned_account_id,
		additional_account_id,
		data_sending_capability,
		party,
		despatch_contact,
		accounting_contact,
		seller_contact, xml_namespaces)
class SupplyChainActivityDataLine(cac_types.__ActivityDataLineType):

	def __init__(self,		id_:cbc.ID,
		supply_chain_activity_type_code:cbc.SupplyChainActivityTypeCode,
		activity_origin_location:'ActivityOriginLocation',
		buyer_customer_party:'BuyerCustomerParty'=None,
		seller_supplier_party:'SellerSupplierParty'=None,
		activity_period:'ActivityPeriod'=None,
		activity_final_location:'ActivityFinalLocation'=None,
		sales_item:List['SalesItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		supply_chain_activity_type_code,
		activity_origin_location,
		buyer_customer_party,
		seller_supplier_party,
		activity_period,
		activity_final_location,
		sales_item, xml_namespaces)
class SupplyItem(cac_types.__ItemType):

	def __init__(self,		description:List[cbc.Description]=None,
		pack_quantity:cbc.PackQuantity=None,
		pack_size_numeric:cbc.PackSizeNumeric=None,
		catalogue_indicator:cbc.CatalogueIndicator=None,
		name:cbc.Name=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		additional_information:List[cbc.AdditionalInformation]=None,
		keyword:List[cbc.Keyword]=None,
		brand_name:List[cbc.BrandName]=None,
		model_name:List[cbc.ModelName]=None,
		buyers_item_identification:'BuyersItemIdentification'=None,
		sellers_item_identification:'SellersItemIdentification'=None,
		manufacturers_item_identification:List['ManufacturersItemIdentification']=None,
		standard_item_identification:'StandardItemIdentification'=None,
		catalogue_item_identification:'CatalogueItemIdentification'=None,
		additional_item_identification:List['AdditionalItemIdentification']=None,
		catalogue_document_reference:'CatalogueDocumentReference'=None,
		item_specification_document_reference:List['ItemSpecificationDocumentReference']=None,
		origin_country:'OriginCountry'=None,
		commodity_classification:List['CommodityClassification']=None,
		transaction_conditions:List['TransactionConditions']=None,
		hazardous_item:List['HazardousItem']=None,
		classified_tax_category:List['ClassifiedTaxCategory']=None,
		additional_item_property:List['AdditionalItemProperty']=None,
		manufacturer_party:List['ManufacturerParty']=None,
		information_content_provider_party:'InformationContentProviderParty'=None,
		origin_address:List['OriginAddress']=None,
		item_instance:List['ItemInstance']=None,
		certificate:List['Certificate']=None,
		dimension:List['Dimension']=None, xml_namespaces = None):
		super().__init__(
		description,
		pack_quantity,
		pack_size_numeric,
		catalogue_indicator,
		name,
		hazardous_risk_indicator,
		additional_information,
		keyword,
		brand_name,
		model_name,
		buyers_item_identification,
		sellers_item_identification,
		manufacturers_item_identification,
		standard_item_identification,
		catalogue_item_identification,
		additional_item_identification,
		catalogue_document_reference,
		item_specification_document_reference,
		origin_country,
		commodity_classification,
		transaction_conditions,
		hazardous_item,
		classified_tax_category,
		additional_item_property,
		manufacturer_party,
		information_content_provider_party,
		origin_address,
		item_instance,
		certificate,
		dimension, xml_namespaces)
class SupportedCommodityClassification(cac_types.__CommodityClassificationType):

	def __init__(self,		nature_code:cbc.NatureCode=None,
		cargo_type_code:cbc.CargoTypeCode=None,
		commodity_code:cbc.CommodityCode=None,
		item_classification_code:cbc.ItemClassificationCode=None, xml_namespaces = None):
		super().__init__(
		nature_code,
		cargo_type_code,
		commodity_code,
		item_classification_code, xml_namespaces)
class SupportedTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class SupportingDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TakeoverTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class TaxCategory(cac_types.__TaxCategoryType):

	def __init__(self,		tax_scheme:'TaxScheme',
		id_:cbc.ID=None,
		name:cbc.Name=None,
		percent:cbc.Percent=None,
		base_unit_measure:cbc.BaseUnitMeasure=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tax_exemption_reason_code:cbc.TaxExemptionReasonCode=None,
		tax_exemption_reason:List[cbc.TaxExemptionReason]=None,
		tier_range:cbc.TierRange=None,
		tier_rate_percent:cbc.TierRatePercent=None, xml_namespaces = None):
		super().__init__(
		tax_scheme,
		id_,
		name,
		percent,
		base_unit_measure,
		per_unit_amount,
		tax_exemption_reason_code,
		tax_exemption_reason,
		tier_range,
		tier_rate_percent, xml_namespaces)
class TaxExchangeRate(cac_types.__ExchangeRateType):

	def __init__(self,		source_currency_code:cbc.SourceCurrencyCode,
		target_currency_code:cbc.TargetCurrencyCode,
		source_currency_base_rate:cbc.SourceCurrencyBaseRate=None,
		target_currency_base_rate:cbc.TargetCurrencyBaseRate=None,
		exchange_market_id:cbc.ExchangeMarketID=None,
		calculation_rate:cbc.CalculationRate=None,
		mathematic_operator_code:cbc.MathematicOperatorCode=None,
		date:cbc.Date=None,
		foreign_exchange_contract:'ForeignExchangeContract'=None, xml_namespaces = None):
		super().__init__(
		source_currency_code,
		target_currency_code,
		source_currency_base_rate,
		target_currency_base_rate,
		exchange_market_id,
		calculation_rate,
		mathematic_operator_code,
		date,
		foreign_exchange_contract, xml_namespaces)
class TaxExclusivePrice(cac_types.__PriceType):

	def __init__(self,		price_amount:cbc.PriceAmount,
		base_quantity:cbc.BaseQuantity=None,
		price_change_reason:List[cbc.PriceChangeReason]=None,
		price_type_code:cbc.PriceTypeCode=None,
		price_type:cbc.PriceType=None,
		orderable_unit_factor_rate:cbc.OrderableUnitFactorRate=None,
		validity_period:List['ValidityPeriod']=None,
		price_list:'PriceList'=None,
		allowance_charge:List['AllowanceCharge']=None,
		pricing_exchange_rate:'PricingExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		base_quantity,
		price_change_reason,
		price_type_code,
		price_type,
		orderable_unit_factor_rate,
		validity_period,
		price_list,
		allowance_charge,
		pricing_exchange_rate, xml_namespaces)
class TaxInclusivePrice(cac_types.__PriceType):

	def __init__(self,		price_amount:cbc.PriceAmount,
		base_quantity:cbc.BaseQuantity=None,
		price_change_reason:List[cbc.PriceChangeReason]=None,
		price_type_code:cbc.PriceTypeCode=None,
		price_type:cbc.PriceType=None,
		orderable_unit_factor_rate:cbc.OrderableUnitFactorRate=None,
		validity_period:List['ValidityPeriod']=None,
		price_list:'PriceList'=None,
		allowance_charge:List['AllowanceCharge']=None,
		pricing_exchange_rate:'PricingExchangeRate'=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		base_quantity,
		price_change_reason,
		price_type_code,
		price_type,
		orderable_unit_factor_rate,
		validity_period,
		price_list,
		allowance_charge,
		pricing_exchange_rate, xml_namespaces)
class TaxRepresentativeParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TaxScheme(cac_types.__TaxSchemeType):

	def __init__(self,		id_:cbc.ID=None,
		name:cbc.Name=None,
		tax_type_code:cbc.TaxTypeCode=None,
		currency_code:cbc.CurrencyCode=None,
		jurisdiction_region_address:List['JurisdictionRegionAddress']=None, xml_namespaces = None):
		super().__init__(
		id_,
		name,
		tax_type_code,
		currency_code,
		jurisdiction_region_address, xml_namespaces)
class TaxSubtotal(cac_types.__TaxSubtotalType):

	def __init__(self,		tax_amount:cbc.TaxAmount,
		tax_category:'TaxCategory',
		taxable_amount:cbc.TaxableAmount=None,
		calculation_sequence_numeric:cbc.CalculationSequenceNumeric=None,
		transaction_currency_tax_amount:cbc.TransactionCurrencyTaxAmount=None,
		percent:cbc.Percent=None,
		base_unit_measure:cbc.BaseUnitMeasure=None,
		per_unit_amount:cbc.PerUnitAmount=None,
		tier_range:cbc.TierRange=None,
		tier_rate_percent:cbc.TierRatePercent=None, xml_namespaces = None):
		super().__init__(
		tax_amount,
		tax_category,
		taxable_amount,
		calculation_sequence_numeric,
		transaction_currency_tax_amount,
		percent,
		base_unit_measure,
		per_unit_amount,
		tier_range,
		tier_rate_percent, xml_namespaces)
class TaxTotal(cac_types.__TaxTotalType):

	def __init__(self,		tax_amount:cbc.TaxAmount,
		rounding_amount:cbc.RoundingAmount=None,
		tax_evidence_indicator:cbc.TaxEvidenceIndicator=None,
		tax_included_indicator:cbc.TaxIncludedIndicator=None,
		tax_subtotal:List['TaxSubtotal']=None, xml_namespaces = None):
		super().__init__(
		tax_amount,
		rounding_amount,
		tax_evidence_indicator,
		tax_included_indicator,
		tax_subtotal, xml_namespaces)
class TechnicalCapability(cac_types.__CapabilityType):

	def __init__(self,		capability_type_code:cbc.CapabilityTypeCode=None,
		description:List[cbc.Description]=None,
		value_amount:cbc.ValueAmount=None,
		value_quantity:cbc.ValueQuantity=None,
		evidence_supplied:List['EvidenceSupplied']=None,
		validity_period:'ValidityPeriod'=None, xml_namespaces = None):
		super().__init__(
		capability_type_code,
		description,
		value_amount,
		value_quantity,
		evidence_supplied,
		validity_period, xml_namespaces)
class TechnicalCommitteePerson(cac_types.__PersonType):

	def __init__(self,		id_:cbc.ID=None,
		first_name:cbc.FirstName=None,
		family_name:cbc.FamilyName=None,
		title:cbc.Title=None,
		middle_name:cbc.MiddleName=None,
		other_name:cbc.OtherName=None,
		name_suffix:cbc.NameSuffix=None,
		job_title:cbc.JobTitle=None,
		nationality_id:cbc.NationalityID=None,
		gender_code:cbc.GenderCode=None,
		birth_date:cbc.BirthDate=None,
		birthplace_name:cbc.BirthplaceName=None,
		organization_department:cbc.OrganizationDepartment=None,
		contact:'Contact'=None,
		financial_account:'FinancialAccount'=None,
		identity_document_reference:List['IdentityDocumentReference']=None,
		residence_address:'ResidenceAddress'=None, xml_namespaces = None):
		super().__init__(
		id_,
		first_name,
		family_name,
		title,
		middle_name,
		other_name,
		name_suffix,
		job_title,
		nationality_id,
		gender_code,
		birth_date,
		birthplace_name,
		organization_department,
		contact,
		financial_account,
		identity_document_reference,
		residence_address, xml_namespaces)
class TechnicalDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TechnicalEvaluationCriterion(cac_types.__EvaluationCriterionType):

	def __init__(self,		evaluation_criterion_type_code:cbc.EvaluationCriterionTypeCode=None,
		description:List[cbc.Description]=None,
		threshold_amount:cbc.ThresholdAmount=None,
		threshold_quantity:cbc.ThresholdQuantity=None,
		expression_code:cbc.ExpressionCode=None,
		expression:List[cbc.Expression]=None,
		duration_period:'DurationPeriod'=None,
		suggested_evidence:List['SuggestedEvidence']=None, xml_namespaces = None):
		super().__init__(
		evaluation_criterion_type_code,
		description,
		threshold_amount,
		threshold_quantity,
		expression_code,
		expression,
		duration_period,
		suggested_evidence, xml_namespaces)
class TelecommunicationsService(cac_types.__TelecommunicationsServiceType):

	def __init__(self,		call_date:cbc.CallDate,
		call_time:cbc.CallTime,
		service_number_called:cbc.ServiceNumberCalled,
		id_:cbc.ID=None,
		telecommunications_service_category:cbc.TelecommunicationsServiceCategory=None,
		telecommunications_service_category_code:cbc.TelecommunicationsServiceCategoryCode=None,
		movie_title:cbc.MovieTitle=None,
		roaming_partner_name:cbc.RoamingPartnerName=None,
		pay_per_view:cbc.PayPerView=None,
		quantity:cbc.Quantity=None,
		telecommunications_service_call:cbc.TelecommunicationsServiceCall=None,
		telecommunications_service_call_code:cbc.TelecommunicationsServiceCallCode=None,
		call_base_amount:cbc.CallBaseAmount=None,
		call_extension_amount:cbc.CallExtensionAmount=None,
		price:'Price'=None,
		country:'Country'=None,
		exchange_rate:List['ExchangeRate']=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		call_duty:List['CallDuty']=None,
		time_duty:List['TimeDuty']=None, xml_namespaces = None):
		super().__init__(
		call_date,
		call_time,
		service_number_called,
		id_,
		telecommunications_service_category,
		telecommunications_service_category_code,
		movie_title,
		roaming_partner_name,
		pay_per_view,
		quantity,
		telecommunications_service_call,
		telecommunications_service_call_code,
		call_base_amount,
		call_extension_amount,
		price,
		country,
		exchange_rate,
		allowance_charge,
		tax_total,
		call_duty,
		time_duty, xml_namespaces)
class TelecommunicationsSupply(cac_types.__TelecommunicationsSupplyType):

	def __init__(self,		privacy_code:cbc.PrivacyCode,
		telecommunications_supply_type:cbc.TelecommunicationsSupplyType=None,
		telecommunications_supply_type_code:cbc.TelecommunicationsSupplyTypeCode=None,
		description:List[cbc.Description]=None,
		total_amount:cbc.TotalAmount=None,
		telecommunications_supply_line:List['TelecommunicationsSupplyLine']=None, xml_namespaces = None):
		super().__init__(
		privacy_code,
		telecommunications_supply_type,
		telecommunications_supply_type_code,
		description,
		total_amount,
		telecommunications_supply_line, xml_namespaces)
class TelecommunicationsSupplyLine(cac_types.__TelecommunicationsSupplyLineType):

	def __init__(self,		id_:cbc.ID,
		phone_number:cbc.PhoneNumber,
		description:List[cbc.Description]=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		exchange_rate:List['ExchangeRate']=None,
		allowance_charge:List['AllowanceCharge']=None,
		tax_total:List['TaxTotal']=None,
		telecommunications_service:List['TelecommunicationsService']=None, xml_namespaces = None):
		super().__init__(
		id_,
		phone_number,
		description,
		line_extension_amount,
		exchange_rate,
		allowance_charge,
		tax_total,
		telecommunications_service, xml_namespaces)
class Temperature(cac_types.__TemperatureType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description, xml_namespaces)
class TemplateDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TenderDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TenderEvaluationParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TenderLine(cac_types.__TenderLineType):

	def __init__(self,		id_:cbc.ID=None,
		note:List[cbc.Note]=None,
		quantity:cbc.Quantity=None,
		line_extension_amount:cbc.LineExtensionAmount=None,
		total_tax_amount:cbc.TotalTaxAmount=None,
		orderable_unit:cbc.OrderableUnit=None,
		content_unit_quantity:cbc.ContentUnitQuantity=None,
		order_quantity_increment_numeric:cbc.OrderQuantityIncrementNumeric=None,
		minimum_order_quantity:cbc.MinimumOrderQuantity=None,
		maximum_order_quantity:cbc.MaximumOrderQuantity=None,
		warranty_information:List[cbc.WarrantyInformation]=None,
		pack_level_code:cbc.PackLevelCode=None,
		document_reference:List['DocumentReference']=None,
		item:'Item'=None,
		offered_item_location_quantity:List['OfferedItemLocationQuantity']=None,
		replacement_related_item:List['ReplacementRelatedItem']=None,
		warranty_party:'WarrantyParty'=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		sub_tender_line:List['SubTenderLine']=None,
		call_for_tenders_line_reference:'CallForTendersLineReference'=None,
		call_for_tenders_document_reference:'CallForTendersDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		id_,
		note,
		quantity,
		line_extension_amount,
		total_tax_amount,
		orderable_unit,
		content_unit_quantity,
		order_quantity_increment_numeric,
		minimum_order_quantity,
		maximum_order_quantity,
		warranty_information,
		pack_level_code,
		document_reference,
		item,
		offered_item_location_quantity,
		replacement_related_item,
		warranty_party,
		warranty_validity_period,
		sub_tender_line,
		call_for_tenders_line_reference,
		call_for_tenders_document_reference, xml_namespaces)
class TenderPreparation(cac_types.__TenderPreparationType):

	def __init__(self,		tender_envelope_id:cbc.TenderEnvelopeID,
		tender_envelope_type_code:cbc.TenderEnvelopeTypeCode=None,
		description:List[cbc.Description]=None,
		open_tender_id:cbc.OpenTenderID=None,
		procurement_project_lot:List['ProcurementProjectLot']=None,
		document_tender_requirement:List['DocumentTenderRequirement']=None, xml_namespaces = None):
		super().__init__(
		tender_envelope_id,
		tender_envelope_type_code,
		description,
		open_tender_id,
		procurement_project_lot,
		document_tender_requirement, xml_namespaces)
class TenderRecipientParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TenderRequirement(cac_types.__TenderRequirementType):

	def __init__(self,		name:cbc.Name,
		description:List[cbc.Description]=None,
		template_document_reference:'TemplateDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		name,
		description,
		template_document_reference, xml_namespaces)
class TenderResult(cac_types.__TenderResultType):

	def __init__(self,		award_date:cbc.AwardDate,
		tender_result_code:cbc.TenderResultCode=None,
		description:List[cbc.Description]=None,
		advertisement_amount:cbc.AdvertisementAmount=None,
		award_time:cbc.AwardTime=None,
		received_tender_quantity:cbc.ReceivedTenderQuantity=None,
		lower_tender_amount:cbc.LowerTenderAmount=None,
		higher_tender_amount:cbc.HigherTenderAmount=None,
		start_date:cbc.StartDate=None,
		received_electronic_tender_quantity:cbc.ReceivedElectronicTenderQuantity=None,
		received_foreign_tender_quantity:cbc.ReceivedForeignTenderQuantity=None,
		contract:'Contract'=None,
		awarded_tendered_project:'AwardedTenderedProject'=None,
		contract_formalization_period:'ContractFormalizationPeriod'=None,
		subcontract_terms:List['SubcontractTerms']=None,
		winning_party:List['WinningParty']=None, xml_namespaces = None):
		super().__init__(
		award_date,
		tender_result_code,
		description,
		advertisement_amount,
		award_time,
		received_tender_quantity,
		lower_tender_amount,
		higher_tender_amount,
		start_date,
		received_electronic_tender_quantity,
		received_foreign_tender_quantity,
		contract,
		awarded_tendered_project,
		contract_formalization_period,
		subcontract_terms,
		winning_party, xml_namespaces)
class TenderSubmissionDeadlinePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TenderValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TenderedProject(cac_types.__TenderedProjectType):

	def __init__(self,		variant_id:cbc.VariantID=None,
		fee_amount:cbc.FeeAmount=None,
		fee_description:List[cbc.FeeDescription]=None,
		tender_envelope_id:cbc.TenderEnvelopeID=None,
		tender_envelope_type_code:cbc.TenderEnvelopeTypeCode=None,
		procurement_project_lot:'ProcurementProjectLot'=None,
		evidence_document_reference:List['EvidenceDocumentReference']=None,
		tax_total:List['TaxTotal']=None,
		legal_monetary_total:'LegalMonetaryTotal'=None,
		tender_line:List['TenderLine']=None,
		awarding_criterion_response:List['AwardingCriterionResponse']=None, xml_namespaces = None):
		super().__init__(
		variant_id,
		fee_amount,
		fee_description,
		tender_envelope_id,
		tender_envelope_type_code,
		procurement_project_lot,
		evidence_document_reference,
		tax_total,
		legal_monetary_total,
		tender_line,
		awarding_criterion_response, xml_namespaces)
class TendererParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TendererPartyQualification(cac_types.__TendererPartyQualificationType):

	def __init__(self,		main_qualifying_party:'MainQualifyingParty',
		interested_procurement_project_lot:List['InterestedProcurementProjectLot']=None,
		additional_qualifying_party:List['AdditionalQualifyingParty']=None, xml_namespaces = None):
		super().__init__(
		main_qualifying_party,
		interested_procurement_project_lot,
		additional_qualifying_party, xml_namespaces)
class TendererQualificationDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TendererQualificationRequest(cac_types.__TendererQualificationRequestType):

	def __init__(self,		company_legal_form_code:cbc.CompanyLegalFormCode=None,
		company_legal_form:cbc.CompanyLegalForm=None,
		personal_situation:List[cbc.PersonalSituation]=None,
		operating_years_quantity:cbc.OperatingYearsQuantity=None,
		employee_quantity:cbc.EmployeeQuantity=None,
		description:List[cbc.Description]=None,
		required_business_classification_scheme:List['RequiredBusinessClassificationScheme']=None,
		technical_evaluation_criterion:List['TechnicalEvaluationCriterion']=None,
		financial_evaluation_criterion:List['FinancialEvaluationCriterion']=None,
		specific_tenderer_requirement:List['SpecificTendererRequirement']=None,
		economic_operator_role:List['EconomicOperatorRole']=None, xml_namespaces = None):
		super().__init__(
		company_legal_form_code,
		company_legal_form,
		personal_situation,
		operating_years_quantity,
		employee_quantity,
		description,
		required_business_classification_scheme,
		technical_evaluation_criterion,
		financial_evaluation_criterion,
		specific_tenderer_requirement,
		economic_operator_role, xml_namespaces)
class TendererRequirement(cac_types.__TendererRequirementType):

	def __init__(self,		name:List[cbc.Name]=None,
		tenderer_requirement_type_code:cbc.TendererRequirementTypeCode=None,
		description:List[cbc.Description]=None,
		legal_reference:cbc.LegalReference=None,
		suggested_evidence:List['SuggestedEvidence']=None, xml_namespaces = None):
		super().__init__(
		name,
		tenderer_requirement_type_code,
		description,
		legal_reference,
		suggested_evidence, xml_namespaces)
class TenderingProcess(cac_types.__TenderingProcessType):

	def __init__(self,		id_:cbc.ID=None,
		original_contracting_system_id:cbc.OriginalContractingSystemID=None,
		description:List[cbc.Description]=None,
		negotiation_description:List[cbc.NegotiationDescription]=None,
		procedure_code:cbc.ProcedureCode=None,
		urgency_code:cbc.UrgencyCode=None,
		expense_code:cbc.ExpenseCode=None,
		part_presentation_code:cbc.PartPresentationCode=None,
		contracting_system_code:cbc.ContractingSystemCode=None,
		submission_method_code:cbc.SubmissionMethodCode=None,
		candidate_reduction_constraint_indicator:cbc.CandidateReductionConstraintIndicator=None,
		government_agreement_constraint_indicator:cbc.GovernmentAgreementConstraintIndicator=None,
		document_availability_period:'DocumentAvailabilityPeriod'=None,
		tender_submission_deadline_period:'TenderSubmissionDeadlinePeriod'=None,
		invitation_submission_period:'InvitationSubmissionPeriod'=None,
		participation_request_reception_period:'ParticipationRequestReceptionPeriod'=None,
		notice_document_reference:List['NoticeDocumentReference']=None,
		additional_document_reference:List['AdditionalDocumentReference']=None,
		process_justification:List['ProcessJustification']=None,
		economic_operator_short_list:'EconomicOperatorShortList'=None,
		open_tender_event:List['OpenTenderEvent']=None,
		auction_terms:'AuctionTerms'=None,
		framework_agreement:'FrameworkAgreement'=None, xml_namespaces = None):
		super().__init__(
		id_,
		original_contracting_system_id,
		description,
		negotiation_description,
		procedure_code,
		urgency_code,
		expense_code,
		part_presentation_code,
		contracting_system_code,
		submission_method_code,
		candidate_reduction_constraint_indicator,
		government_agreement_constraint_indicator,
		document_availability_period,
		tender_submission_deadline_period,
		invitation_submission_period,
		participation_request_reception_period,
		notice_document_reference,
		additional_document_reference,
		process_justification,
		economic_operator_short_list,
		open_tender_event,
		auction_terms,
		framework_agreement, xml_namespaces)
class TenderingTerms(cac_types.__TenderingTermsType):

	def __init__(self,		awarding_method_type_code:cbc.AwardingMethodTypeCode=None,
		price_evaluation_code:cbc.PriceEvaluationCode=None,
		maximum_variant_quantity:cbc.MaximumVariantQuantity=None,
		variant_constraint_indicator:cbc.VariantConstraintIndicator=None,
		accepted_variants_description:List[cbc.AcceptedVariantsDescription]=None,
		price_revision_formula_description:List[cbc.PriceRevisionFormulaDescription]=None,
		funding_program_code:cbc.FundingProgramCode=None,
		funding_program:List[cbc.FundingProgram]=None,
		maximum_advertisement_amount:cbc.MaximumAdvertisementAmount=None,
		note:List[cbc.Note]=None,
		payment_frequency_code:cbc.PaymentFrequencyCode=None,
		economic_operator_registry_uri:cbc.EconomicOperatorRegistryURI=None,
		required_curricula_indicator:cbc.RequiredCurriculaIndicator=None,
		other_conditions_indicator:cbc.OtherConditionsIndicator=None,
		additional_conditions:List[cbc.AdditionalConditions]=None,
		latest_security_clearance_date:cbc.LatestSecurityClearanceDate=None,
		documentation_fee_amount:cbc.DocumentationFeeAmount=None,
		penalty_clause:List['PenaltyClause']=None,
		required_financial_guarantee:List['RequiredFinancialGuarantee']=None,
		procurement_legislation_document_reference:'ProcurementLegislationDocumentReference'=None,
		fiscal_legislation_document_reference:'FiscalLegislationDocumentReference'=None,
		environmental_legislation_document_reference:'EnvironmentalLegislationDocumentReference'=None,
		employment_legislation_document_reference:'EmploymentLegislationDocumentReference'=None,
		contractual_document_reference:List['ContractualDocumentReference']=None,
		call_for_tenders_document_reference:'CallForTendersDocumentReference'=None,
		warranty_validity_period:'WarrantyValidityPeriod'=None,
		payment_terms:List['PaymentTerms']=None,
		tenderer_qualification_request:List['TendererQualificationRequest']=None,
		allowed_subcontract_terms:List['AllowedSubcontractTerms']=None,
		tender_preparation:List['TenderPreparation']=None,
		contract_execution_requirement:List['ContractExecutionRequirement']=None,
		awarding_terms:'AwardingTerms'=None,
		additional_information_party:'AdditionalInformationParty'=None,
		document_provider_party:'DocumentProviderParty'=None,
		tender_recipient_party:'TenderRecipientParty'=None,
		contract_responsible_party:'ContractResponsibleParty'=None,
		tender_evaluation_party:List['TenderEvaluationParty']=None,
		tender_validity_period:'TenderValidityPeriod'=None,
		contract_acceptance_period:'ContractAcceptancePeriod'=None,
		appeal_terms:'AppealTerms'=None,
		language:List['Language']=None,
		budget_account_line:List['BudgetAccountLine']=None,
		replaced_notice_document_reference:'ReplacedNoticeDocumentReference'=None, xml_namespaces = None):
		super().__init__(
		awarding_method_type_code,
		price_evaluation_code,
		maximum_variant_quantity,
		variant_constraint_indicator,
		accepted_variants_description,
		price_revision_formula_description,
		funding_program_code,
		funding_program,
		maximum_advertisement_amount,
		note,
		payment_frequency_code,
		economic_operator_registry_uri,
		required_curricula_indicator,
		other_conditions_indicator,
		additional_conditions,
		latest_security_clearance_date,
		documentation_fee_amount,
		penalty_clause,
		required_financial_guarantee,
		procurement_legislation_document_reference,
		fiscal_legislation_document_reference,
		environmental_legislation_document_reference,
		employment_legislation_document_reference,
		contractual_document_reference,
		call_for_tenders_document_reference,
		warranty_validity_period,
		payment_terms,
		tenderer_qualification_request,
		allowed_subcontract_terms,
		tender_preparation,
		contract_execution_requirement,
		awarding_terms,
		additional_information_party,
		document_provider_party,
		tender_recipient_party,
		contract_responsible_party,
		tender_evaluation_party,
		tender_validity_period,
		contract_acceptance_period,
		appeal_terms,
		language,
		budget_account_line,
		replaced_notice_document_reference, xml_namespaces)
class TerminalOperatorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TimeDuty(cac_types.__DutyType):

	def __init__(self,		amount:cbc.Amount,
		duty:cbc.Duty=None,
		duty_code:cbc.DutyCode=None,
		tax_category:'TaxCategory'=None, xml_namespaces = None):
		super().__init__(
		amount,
		duty,
		duty_code,
		tax_category, xml_namespaces)
class ToLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class TotalCapacityDimension(cac_types.__DimensionType):

	def __init__(self,		attribute_id:cbc.AttributeID,
		measure:cbc.Measure=None,
		description:List[cbc.Description]=None,
		minimum_measure:cbc.MinimumMeasure=None,
		maximum_measure:cbc.MaximumMeasure=None, xml_namespaces = None):
		super().__init__(
		attribute_id,
		measure,
		description,
		minimum_measure,
		maximum_measure, xml_namespaces)
class TradeFinancing(cac_types.__TradeFinancingType):

	def __init__(self,		financing_party:'FinancingParty',
		id_:cbc.ID=None,
		financing_instrument_code:cbc.FinancingInstrumentCode=None,
		contract_document_reference:'ContractDocumentReference'=None,
		document_reference:List['DocumentReference']=None,
		financing_financial_account:'FinancingFinancialAccount'=None,
		clause:List['Clause']=None, xml_namespaces = None):
		super().__init__(
		financing_party,
		id_,
		financing_instrument_code,
		contract_document_reference,
		document_reference,
		financing_financial_account,
		clause, xml_namespaces)
class TradingTerms(cac_types.__TradingTermsType):

	def __init__(self,		information:List[cbc.Information]=None,
		reference:cbc.Reference=None,
		applicable_address:'ApplicableAddress'=None, xml_namespaces = None):
		super().__init__(
		information,
		reference,
		applicable_address, xml_namespaces)
class TransactionConditions(cac_types.__TransactionConditionsType):

	def __init__(self,		id_:cbc.ID=None,
		action_code:cbc.ActionCode=None,
		description:List[cbc.Description]=None,
		document_reference:List['DocumentReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		action_code,
		description,
		document_reference, xml_namespaces)
class TransitCountry(cac_types.__CountryType):

	def __init__(self,		identification_code:cbc.IdentificationCode=None,
		name:cbc.Name=None, xml_namespaces = None):
		super().__init__(
		identification_code,
		name, xml_namespaces)
class TransitPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TransportAdvisorParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TransportContract(cac_types.__ContractType):

	def __init__(self,		id_:cbc.ID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		contract_type_code:cbc.ContractTypeCode=None,
		contract_type:cbc.ContractType=None,
		note:List[cbc.Note]=None,
		version_id:cbc.VersionID=None,
		description:List[cbc.Description]=None,
		validity_period:'ValidityPeriod'=None,
		contract_document_reference:List['ContractDocumentReference']=None,
		nomination_period:'NominationPeriod'=None,
		contractual_delivery:'ContractualDelivery'=None, xml_namespaces = None):
		super().__init__(
		id_,
		issue_date,
		issue_time,
		nomination_date,
		nomination_time,
		contract_type_code,
		contract_type,
		note,
		version_id,
		description,
		validity_period,
		contract_document_reference,
		nomination_period,
		contractual_delivery, xml_namespaces)
class TransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class TransportEquipmentSeal(cac_types.__TransportEquipmentSealType):

	def __init__(self,		id_:cbc.ID,
		seal_issuer_type_code:cbc.SealIssuerTypeCode=None,
		condition:cbc.Condition=None,
		seal_status_code:cbc.SealStatusCode=None,
		sealing_party_type:cbc.SealingPartyType=None, xml_namespaces = None):
		super().__init__(
		id_,
		seal_issuer_type_code,
		condition,
		seal_status_code,
		sealing_party_type, xml_namespaces)
class TransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class TransportExecutionPlanDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransportExecutionPlanRequestDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransportExecutionTerms(cac_types.__TransportExecutionTermsType):

	def __init__(self,		transport_user_special_terms:List[cbc.TransportUserSpecialTerms]=None,
		transport_service_provider_special_terms:List[cbc.TransportServiceProviderSpecialTerms]=None,
		change_conditions:List[cbc.ChangeConditions]=None,
		payment_terms:List['PaymentTerms']=None,
		delivery_terms:List['DeliveryTerms']=None,
		bonus_payment_terms:'BonusPaymentTerms'=None,
		commission_payment_terms:'CommissionPaymentTerms'=None,
		penalty_payment_terms:'PenaltyPaymentTerms'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		notification_requirement:List['NotificationRequirement']=None,
		service_charge_payment_terms:'ServiceChargePaymentTerms'=None, xml_namespaces = None):
		super().__init__(
		transport_user_special_terms,
		transport_service_provider_special_terms,
		change_conditions,
		payment_terms,
		delivery_terms,
		bonus_payment_terms,
		commission_payment_terms,
		penalty_payment_terms,
		environmental_emission,
		notification_requirement,
		service_charge_payment_terms, xml_namespaces)
class TransportHandlingUnit(cac_types.__TransportHandlingUnitType):

	def __init__(self,		id_:cbc.ID=None,
		transport_handling_unit_type_code:cbc.TransportHandlingUnitTypeCode=None,
		handling_code:cbc.HandlingCode=None,
		handling_instructions:List[cbc.HandlingInstructions]=None,
		hazardous_risk_indicator:cbc.HazardousRiskIndicator=None,
		total_goods_item_quantity:cbc.TotalGoodsItemQuantity=None,
		total_package_quantity:cbc.TotalPackageQuantity=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		shipping_marks:List[cbc.ShippingMarks]=None,
		trace_id:cbc.TraceID=None,
		handling_unit_despatch_line:List['HandlingUnitDespatchLine']=None,
		actual_package:List['ActualPackage']=None,
		received_handling_unit_receipt_line:List['ReceivedHandlingUnitReceiptLine']=None,
		transport_equipment:List['TransportEquipment']=None,
		transport_means:List['TransportMeans']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		measurement_dimension:List['MeasurementDimension']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		goods_item:List['GoodsItem']=None,
		floor_space_measurement_dimension:'FloorSpaceMeasurementDimension'=None,
		pallet_space_measurement_dimension:'PalletSpaceMeasurementDimension'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		status:List['Status']=None,
		customs_declaration:List['CustomsDeclaration']=None,
		referenced_shipment:List['ReferencedShipment']=None,
		package:List['Package']=None, xml_namespaces = None):
		super().__init__(
		id_,
		transport_handling_unit_type_code,
		handling_code,
		handling_instructions,
		hazardous_risk_indicator,
		total_goods_item_quantity,
		total_package_quantity,
		damage_remarks,
		shipping_marks,
		trace_id,
		handling_unit_despatch_line,
		actual_package,
		received_handling_unit_receipt_line,
		transport_equipment,
		transport_means,
		hazardous_goods_transit,
		measurement_dimension,
		minimum_temperature,
		maximum_temperature,
		goods_item,
		floor_space_measurement_dimension,
		pallet_space_measurement_dimension,
		shipment_document_reference,
		status,
		customs_declaration,
		referenced_shipment,
		package, xml_namespaces)
class TransportMeans(cac_types.__TransportMeansType):

	def __init__(self,		journey_id:cbc.JourneyID=None,
		registration_nationality_id:cbc.RegistrationNationalityID=None,
		registration_nationality:List[cbc.RegistrationNationality]=None,
		direction_code:cbc.DirectionCode=None,
		transport_means_type_code:cbc.TransportMeansTypeCode=None,
		trade_service_code:cbc.TradeServiceCode=None,
		stowage:'Stowage'=None,
		air_transport:'AirTransport'=None,
		road_transport:'RoadTransport'=None,
		rail_transport:'RailTransport'=None,
		maritime_transport:'MaritimeTransport'=None,
		owner_party:'OwnerParty'=None,
		measurement_dimension:List['MeasurementDimension']=None, xml_namespaces = None):
		super().__init__(
		journey_id,
		registration_nationality_id,
		registration_nationality,
		direction_code,
		transport_means_type_code,
		trade_service_code,
		stowage,
		air_transport,
		road_transport,
		rail_transport,
		maritime_transport,
		owner_party,
		measurement_dimension, xml_namespaces)
class TransportProgressStatusRequestDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransportSchedule(cac_types.__TransportScheduleType):

	def __init__(self,		sequence_numeric:cbc.SequenceNumeric,
		status_location:'StatusLocation',
		reference_date:cbc.ReferenceDate=None,
		reference_time:cbc.ReferenceTime=None,
		reliability_percent:cbc.ReliabilityPercent=None,
		remarks:List[cbc.Remarks]=None,
		actual_arrival_transport_event:'ActualArrivalTransportEvent'=None,
		actual_departure_transport_event:'ActualDepartureTransportEvent'=None,
		estimated_departure_transport_event:'EstimatedDepartureTransportEvent'=None,
		estimated_arrival_transport_event:'EstimatedArrivalTransportEvent'=None,
		planned_departure_transport_event:'PlannedDepartureTransportEvent'=None,
		planned_arrival_transport_event:'PlannedArrivalTransportEvent'=None, xml_namespaces = None):
		super().__init__(
		sequence_numeric,
		status_location,
		reference_date,
		reference_time,
		reliability_percent,
		remarks,
		actual_arrival_transport_event,
		actual_departure_transport_event,
		estimated_departure_transport_event,
		estimated_arrival_transport_event,
		planned_departure_transport_event,
		planned_arrival_transport_event, xml_namespaces)
class TransportServiceDescriptionDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransportServiceDescriptionRequestDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransportServiceProviderParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TransportServiceProviderResponseDeadlinePeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TransportServiceProviderResponseRequiredPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TransportUserParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class TransportUserResponseRequiredPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class TransportationSegment(cac_types.__TransportationSegmentType):

	def __init__(self,		sequence_numeric:cbc.SequenceNumeric,
		transportation_service:'TransportationService',
		transport_service_provider_party:'TransportServiceProviderParty',
		transport_execution_plan_reference_id:cbc.TransportExecutionPlanReferenceID=None,
		referenced_consignment:'ReferencedConsignment'=None,
		shipment_stage:List['ShipmentStage']=None, xml_namespaces = None):
		super().__init__(
		sequence_numeric,
		transportation_service,
		transport_service_provider_party,
		transport_execution_plan_reference_id,
		referenced_consignment,
		shipment_stage, xml_namespaces)
class TransportationService(cac_types.__TransportationServiceType):

	def __init__(self,		transport_service_code:cbc.TransportServiceCode,
		tariff_class_code:cbc.TariffClassCode=None,
		priority:cbc.Priority=None,
		freight_rate_class_code:cbc.FreightRateClassCode=None,
		transportation_service_description:List[cbc.TransportationServiceDescription]=None,
		transportation_service_details_uri:cbc.TransportationServiceDetailsURI=None,
		nomination_date:cbc.NominationDate=None,
		nomination_time:cbc.NominationTime=None,
		name:cbc.Name=None,
		sequence_numeric:cbc.SequenceNumeric=None,
		transport_equipment:List['TransportEquipment']=None,
		supported_transport_equipment:List['SupportedTransportEquipment']=None,
		unsupported_transport_equipment:List['UnsupportedTransportEquipment']=None,
		commodity_classification:List['CommodityClassification']=None,
		supported_commodity_classification:List['SupportedCommodityClassification']=None,
		unsupported_commodity_classification:List['UnsupportedCommodityClassification']=None,
		total_capacity_dimension:'TotalCapacityDimension'=None,
		shipment_stage:List['ShipmentStage']=None,
		transport_event:List['TransportEvent']=None,
		responsible_transport_service_provider_party:'ResponsibleTransportServiceProviderParty'=None,
		environmental_emission:List['EnvironmentalEmission']=None,
		estimated_duration_period:'EstimatedDurationPeriod'=None,
		scheduled_service_frequency:List['ScheduledServiceFrequency']=None, xml_namespaces = None):
		super().__init__(
		transport_service_code,
		tariff_class_code,
		priority,
		freight_rate_class_code,
		transportation_service_description,
		transportation_service_details_uri,
		nomination_date,
		nomination_time,
		name,
		sequence_numeric,
		transport_equipment,
		supported_transport_equipment,
		unsupported_transport_equipment,
		commodity_classification,
		supported_commodity_classification,
		unsupported_commodity_classification,
		total_capacity_dimension,
		shipment_stage,
		transport_event,
		responsible_transport_service_provider_party,
		environmental_emission,
		estimated_duration_period,
		scheduled_service_frequency, xml_namespaces)
class TransportationStatusRequestDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class TransshipPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class UnloadingLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class UnloadingPortLocation(cac_types.__LocationType):

	def __init__(self,		id_:cbc.ID=None,
		description:List[cbc.Description]=None,
		conditions:List[cbc.Conditions]=None,
		country_subentity:cbc.CountrySubentity=None,
		country_subentity_code:cbc.CountrySubentityCode=None,
		location_type_code:cbc.LocationTypeCode=None,
		information_uri:cbc.InformationURI=None,
		name:cbc.Name=None,
		validity_period:List['ValidityPeriod']=None,
		address:'Address'=None,
		subsidiary_location:List['SubsidiaryLocation']=None,
		location_coordinate:List['LocationCoordinate']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		conditions,
		country_subentity,
		country_subentity_code,
		location_type_code,
		information_uri,
		name,
		validity_period,
		address,
		subsidiary_location,
		location_coordinate, xml_namespaces)
class UnstructuredPrice(cac_types.__UnstructuredPriceType):

	def __init__(self,		price_amount:cbc.PriceAmount=None,
		time_amount:cbc.TimeAmount=None, xml_namespaces = None):
		super().__init__(
		price_amount,
		time_amount, xml_namespaces)
class UnsupportedCommodityClassification(cac_types.__CommodityClassificationType):

	def __init__(self,		nature_code:cbc.NatureCode=None,
		cargo_type_code:cbc.CargoTypeCode=None,
		commodity_code:cbc.CommodityCode=None,
		item_classification_code:cbc.ItemClassificationCode=None, xml_namespaces = None):
		super().__init__(
		nature_code,
		cargo_type_code,
		commodity_code,
		item_classification_code, xml_namespaces)
class UnsupportedTransportEquipment(cac_types.__TransportEquipmentType):

	def __init__(self,		id_:cbc.ID=None,
		referenced_consignment_id:List[cbc.ReferencedConsignmentID]=None,
		transport_equipment_type_code:cbc.TransportEquipmentTypeCode=None,
		provider_type_code:cbc.ProviderTypeCode=None,
		owner_type_code:cbc.OwnerTypeCode=None,
		size_type_code:cbc.SizeTypeCode=None,
		disposition_code:cbc.DispositionCode=None,
		fullness_indication_code:cbc.FullnessIndicationCode=None,
		refrigeration_on_indicator:cbc.RefrigerationOnIndicator=None,
		information:List[cbc.Information]=None,
		returnability_indicator:cbc.ReturnabilityIndicator=None,
		legal_status_indicator:cbc.LegalStatusIndicator=None,
		air_flow_percent:cbc.AirFlowPercent=None,
		humidity_percent:cbc.HumidityPercent=None,
		animal_food_approved_indicator:cbc.AnimalFoodApprovedIndicator=None,
		human_food_approved_indicator:cbc.HumanFoodApprovedIndicator=None,
		dangerous_goods_approved_indicator:cbc.DangerousGoodsApprovedIndicator=None,
		refrigerated_indicator:cbc.RefrigeratedIndicator=None,
		characteristics:cbc.Characteristics=None,
		damage_remarks:List[cbc.DamageRemarks]=None,
		description:List[cbc.Description]=None,
		special_transport_requirements:List[cbc.SpecialTransportRequirements]=None,
		gross_weight_measure:cbc.GrossWeightMeasure=None,
		gross_volume_measure:cbc.GrossVolumeMeasure=None,
		tare_weight_measure:cbc.TareWeightMeasure=None,
		tracking_device_code:cbc.TrackingDeviceCode=None,
		power_indicator:cbc.PowerIndicator=None,
		trace_id:cbc.TraceID=None,
		measurement_dimension:List['MeasurementDimension']=None,
		transport_equipment_seal:List['TransportEquipmentSeal']=None,
		minimum_temperature:'MinimumTemperature'=None,
		maximum_temperature:'MaximumTemperature'=None,
		provider_party:'ProviderParty'=None,
		loading_proof_party:'LoadingProofParty'=None,
		supplier_party:'SupplierParty'=None,
		owner_party:'OwnerParty'=None,
		operating_party:'OperatingParty'=None,
		loading_location:'LoadingLocation'=None,
		unloading_location:'UnloadingLocation'=None,
		storage_location:'StorageLocation'=None,
		positioning_transport_event:List['PositioningTransportEvent']=None,
		quarantine_transport_event:List['QuarantineTransportEvent']=None,
		delivery_transport_event:List['DeliveryTransportEvent']=None,
		pickup_transport_event:List['PickupTransportEvent']=None,
		handling_transport_event:List['HandlingTransportEvent']=None,
		loading_transport_event:List['LoadingTransportEvent']=None,
		transport_event:List['TransportEvent']=None,
		applicable_transport_means:'ApplicableTransportMeans'=None,
		haulage_trading_terms:List['HaulageTradingTerms']=None,
		hazardous_goods_transit:List['HazardousGoodsTransit']=None,
		packaged_transport_handling_unit:List['PackagedTransportHandlingUnit']=None,
		service_allowance_charge:List['ServiceAllowanceCharge']=None,
		freight_allowance_charge:List['FreightAllowanceCharge']=None,
		attached_transport_equipment:List['AttachedTransportEquipment']=None,
		delivery:'Delivery'=None,
		pickup:'Pickup'=None,
		despatch:'Despatch'=None,
		shipment_document_reference:List['ShipmentDocumentReference']=None,
		contained_in_transport_equipment:List['ContainedInTransportEquipment']=None,
		package:List['Package']=None,
		goods_item:List['GoodsItem']=None, xml_namespaces = None):
		super().__init__(
		id_,
		referenced_consignment_id,
		transport_equipment_type_code,
		provider_type_code,
		owner_type_code,
		size_type_code,
		disposition_code,
		fullness_indication_code,
		refrigeration_on_indicator,
		information,
		returnability_indicator,
		legal_status_indicator,
		air_flow_percent,
		humidity_percent,
		animal_food_approved_indicator,
		human_food_approved_indicator,
		dangerous_goods_approved_indicator,
		refrigerated_indicator,
		characteristics,
		damage_remarks,
		description,
		special_transport_requirements,
		gross_weight_measure,
		gross_volume_measure,
		tare_weight_measure,
		tracking_device_code,
		power_indicator,
		trace_id,
		measurement_dimension,
		transport_equipment_seal,
		minimum_temperature,
		maximum_temperature,
		provider_party,
		loading_proof_party,
		supplier_party,
		owner_party,
		operating_party,
		loading_location,
		unloading_location,
		storage_location,
		positioning_transport_event,
		quarantine_transport_event,
		delivery_transport_event,
		pickup_transport_event,
		handling_transport_event,
		loading_transport_event,
		transport_event,
		applicable_transport_means,
		haulage_trading_terms,
		hazardous_goods_transit,
		packaged_transport_handling_unit,
		service_allowance_charge,
		freight_allowance_charge,
		attached_transport_equipment,
		delivery,
		pickup,
		despatch,
		shipment_document_reference,
		contained_in_transport_equipment,
		package,
		goods_item, xml_namespaces)
class UpdatedDeliveryTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class UpdatedPickupTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class UsabilityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class UtilityConsumptionPoint(cac_types.__ConsumptionPointType):

	def __init__(self,		id_:cbc.ID,
		description:List[cbc.Description]=None,
		subscriber_id:cbc.SubscriberID=None,
		subscriber_type:cbc.SubscriberType=None,
		subscriber_type_code:cbc.SubscriberTypeCode=None,
		total_delivered_quantity:cbc.TotalDeliveredQuantity=None,
		address:'Address'=None,
		web_site_access:'WebSiteAccess'=None,
		utility_meter:List['UtilityMeter']=None, xml_namespaces = None):
		super().__init__(
		id_,
		description,
		subscriber_id,
		subscriber_type,
		subscriber_type_code,
		total_delivered_quantity,
		address,
		web_site_access,
		utility_meter, xml_namespaces)
class UtilityCustomerParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class UtilityItem(cac_types.__UtilityItemType):

	def __init__(self,		id_:cbc.ID,
		subscriber_id:cbc.SubscriberID=None,
		subscriber_type:cbc.SubscriberType=None,
		subscriber_type_code:cbc.SubscriberTypeCode=None,
		description:List[cbc.Description]=None,
		pack_quantity:cbc.PackQuantity=None,
		pack_size_numeric:cbc.PackSizeNumeric=None,
		consumption_type:cbc.ConsumptionType=None,
		consumption_type_code:cbc.ConsumptionTypeCode=None,
		current_charge_type:cbc.CurrentChargeType=None,
		current_charge_type_code:cbc.CurrentChargeTypeCode=None,
		one_time_charge_type:cbc.OneTimeChargeType=None,
		one_time_charge_type_code:cbc.OneTimeChargeTypeCode=None,
		tax_category:'TaxCategory'=None,
		contract:'Contract'=None, xml_namespaces = None):
		super().__init__(
		id_,
		subscriber_id,
		subscriber_type,
		subscriber_type_code,
		description,
		pack_quantity,
		pack_size_numeric,
		consumption_type,
		consumption_type_code,
		current_charge_type,
		current_charge_type_code,
		one_time_charge_type,
		one_time_charge_type_code,
		tax_category,
		contract, xml_namespaces)
class UtilityMeter(cac_types.__MeterType):

	def __init__(self,		meter_number:cbc.MeterNumber=None,
		meter_name:cbc.MeterName=None,
		meter_constant:cbc.MeterConstant=None,
		meter_constant_code:cbc.MeterConstantCode=None,
		total_delivered_quantity:cbc.TotalDeliveredQuantity=None,
		meter_reading:List['MeterReading']=None,
		meter_property:List['MeterProperty']=None, xml_namespaces = None):
		super().__init__(
		meter_number,
		meter_name,
		meter_constant,
		meter_constant_code,
		total_delivered_quantity,
		meter_reading,
		meter_property, xml_namespaces)
class UtilitySupplierParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class ValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class WarehousingTransportEvent(cac_types.__TransportEventType):

	def __init__(self,		identification_id:cbc.IdentificationID=None,
		occurrence_date:cbc.OccurrenceDate=None,
		occurrence_time:cbc.OccurrenceTime=None,
		transport_event_type_code:cbc.TransportEventTypeCode=None,
		description:List[cbc.Description]=None,
		completion_indicator:cbc.CompletionIndicator=None,
		reported_shipment:'ReportedShipment'=None,
		current_status:List['CurrentStatus']=None,
		contact:List['Contact']=None,
		location:'Location'=None,
		signature:'Signature'=None,
		period:List['Period']=None, xml_namespaces = None):
		super().__init__(
		identification_id,
		occurrence_date,
		occurrence_time,
		transport_event_type_code,
		description,
		completion_indicator,
		reported_shipment,
		current_status,
		contact,
		location,
		signature,
		period, xml_namespaces)
class WarrantyParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class WarrantyValidityPeriod(cac_types.__PeriodType):

	def __init__(self,		start_date:cbc.StartDate=None,
		start_time:cbc.StartTime=None,
		end_date:cbc.EndDate=None,
		end_time:cbc.EndTime=None,
		duration_measure:cbc.DurationMeasure=None,
		description_code:List[cbc.DescriptionCode]=None,
		description:List[cbc.Description]=None, xml_namespaces = None):
		super().__init__(
		start_date,
		start_time,
		end_date,
		end_time,
		duration_measure,
		description_code,
		description, xml_namespaces)
class WebSiteAccess(cac_types.__WebSiteAccessType):

	def __init__(self,		password:cbc.Password,
		login:cbc.Login,
		uri:cbc.URI=None, xml_namespaces = None):
		super().__init__(
		password,
		login,
		uri, xml_namespaces)
class WinningParty(cac_types.__WinningPartyType):

	def __init__(self,		party:'Party',
		rank:cbc.Rank=None, xml_namespaces = None):
		super().__init__(
		party,
		rank, xml_namespaces)
class WithholdingTaxTotal(cac_types.__TaxTotalType):

	def __init__(self,		tax_amount:cbc.TaxAmount,
		rounding_amount:cbc.RoundingAmount=None,
		tax_evidence_indicator:cbc.TaxEvidenceIndicator=None,
		tax_included_indicator:cbc.TaxIncludedIndicator=None,
		tax_subtotal:List['TaxSubtotal']=None, xml_namespaces = None):
		super().__init__(
		tax_amount,
		rounding_amount,
		tax_evidence_indicator,
		tax_included_indicator,
		tax_subtotal, xml_namespaces)
class WitnessParty(cac_types.__PartyType):

	def __init__(self,		mark_care_indicator:cbc.MarkCareIndicator=None,
		mark_attention_indicator:cbc.MarkAttentionIndicator=None,
		website_uri:cbc.WebsiteURI=None,
		logo_reference_id:cbc.LogoReferenceID=None,
		endpoint_id:cbc.EndpointID=None,
		industry_classification_code:cbc.IndustryClassificationCode=None,
		party_identification:List['PartyIdentification']=None,
		party_name:List['PartyName']=None,
		language:'Language'=None,
		postal_address:'PostalAddress'=None,
		physical_location:'PhysicalLocation'=None,
		party_tax_scheme:List['PartyTaxScheme']=None,
		party_legal_entity:List['PartyLegalEntity']=None,
		contact:'Contact'=None,
		person:List['Person']=None,
		agent_party:'AgentParty'=None,
		service_provider_party:List['ServiceProviderParty']=None,
		power_of_attorney:List['PowerOfAttorney']=None,
		financial_account:'FinancialAccount'=None, xml_namespaces = None):
		super().__init__(
		mark_care_indicator,
		mark_attention_indicator,
		website_uri,
		logo_reference_id,
		endpoint_id,
		industry_classification_code,
		party_identification,
		party_name,
		language,
		postal_address,
		physical_location,
		party_tax_scheme,
		party_legal_entity,
		contact,
		person,
		agent_party,
		service_provider_party,
		power_of_attorney,
		financial_account, xml_namespaces)
class WorkOrderDocumentReference(cac_types.__DocumentReferenceType):

	def __init__(self,		id_:cbc.ID,
		copy_indicator:cbc.CopyIndicator=None,
		uuid:cbc.UUID=None,
		issue_date:cbc.IssueDate=None,
		issue_time:cbc.IssueTime=None,
		document_type_code:cbc.DocumentTypeCode=None,
		document_type:cbc.DocumentType=None,
		xpath:List[cbc.XPath]=None,
		language_id:cbc.LanguageID=None,
		locale_code:cbc.LocaleCode=None,
		version_id:cbc.VersionID=None,
		document_status_code:cbc.DocumentStatusCode=None,
		document_description:List[cbc.DocumentDescription]=None,
		attachment:'Attachment'=None,
		validity_period:'ValidityPeriod'=None,
		issuer_party:'IssuerParty'=None,
		result_of_verification:'ResultOfVerification'=None, xml_namespaces = None):
		super().__init__(
		id_,
		copy_indicator,
		uuid,
		issue_date,
		issue_time,
		document_type_code,
		document_type,
		xpath,
		language_id,
		locale_code,
		version_id,
		document_status_code,
		document_description,
		attachment,
		validity_period,
		issuer_party,
		result_of_verification, xml_namespaces)
class WorkPhaseReference(cac_types.__WorkPhaseReferenceType):

	def __init__(self,		id_:cbc.ID=None,
		work_phase_code:cbc.WorkPhaseCode=None,
		work_phase:List[cbc.WorkPhase]=None,
		progress_percent:cbc.ProgressPercent=None,
		start_date:cbc.StartDate=None,
		end_date:cbc.EndDate=None,
		work_order_document_reference:List['WorkOrderDocumentReference']=None, xml_namespaces = None):
		super().__init__(
		id_,
		work_phase_code,
		work_phase,
		progress_percent,
		start_date,
		end_date,
		work_order_document_reference, xml_namespaces)
