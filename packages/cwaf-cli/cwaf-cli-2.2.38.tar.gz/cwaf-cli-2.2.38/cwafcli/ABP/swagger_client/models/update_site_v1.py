# coding: utf-8

"""
    Advanced Bot Protection API

    This is the API for onboarding websites into Advanced Bot Protection. For full feature documentation, see [Advanced Bot Protection](https://docs.imperva.com/bundle/advanced-bot-protection/page/74791.htm)  ## Terminology differences  The API term *Domain* corresponds to, and is interchangeable with, a *Website* as used in the UI and web based documentation.  The API term *Site* corresponds to and is interchangeable with a *Website Group* as used in the UI and web based documentation.  The API term *Selector* corresponds to and is interchangeable with a *per-Path* *Policy* as used in the UI and web based documentation.  Besides the Imperva *account*, there is also an Advanced Bot Protection *account*. The are connected but have their own identifiers that cannot be mixed. In the API, *account* always refers to an ABP account unless otherwise specified.  ## Updates  When using PUT to update a resource, the entire resource will be replaced and any omitted fields may be deleted. To prevent data loss when performing an update you must GET the resource, update the returned response, and then send the result as the PUT request body.  ## API compatibility  Previous versions of the API are deprecated when a new version is released. Previous versions will be supported until further notice.  For a client to stay compatible with non breaking changes they need to take the following into account:  * New optional properties and properties with default values may   be added to JSON objects used as API request bodies.  * New properties may be added to JSON objects in API response bodies.  * Certain sum types (e.g. `enum` and `oneOf`) are documented as *open*   which means new alternatives can be added. The new values will only   be present if configured using the API or UI.  ## Authentication  See [API Key Management](https://docs.imperva.com/bundle/cloud-application-security/page/settings/api-keys.htm) for instructions on how to authenticate to this API.  ## Pagination  Resources may be paginated. This is indicated by the inclusion of the 'next' and/or the 'prev' relations in the '_links' property. See the Links schema documentation.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSiteV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'Name',
        'selectors': 'list[UpdateSelectorV1]',
        'default_max_requests_per_minute': 'MaxRequestsPerMinute',
        'default_max_requests_per_session': 'MaxRequestsPerSession',
        'default_max_session_length': 'MaxSessionLength'
    }

    attribute_map = {
        'name': 'name',
        'selectors': 'selectors',
        'default_max_requests_per_minute': 'default_max_requests_per_minute',
        'default_max_requests_per_session': 'default_max_requests_per_session',
        'default_max_session_length': 'default_max_session_length'
    }

    def __init__(self, name=None, selectors=None, default_max_requests_per_minute=None, default_max_requests_per_session=None, default_max_session_length=None):  # noqa: E501
        """UpdateSiteV1 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._selectors = None
        self._default_max_requests_per_minute = None
        self._default_max_requests_per_session = None
        self._default_max_session_length = None
        self.discriminator = None
        self.name = name
        self.selectors = selectors
        if default_max_requests_per_minute is not None:
            self.default_max_requests_per_minute = default_max_requests_per_minute
        if default_max_requests_per_session is not None:
            self.default_max_requests_per_session = default_max_requests_per_session
        if default_max_session_length is not None:
            self.default_max_session_length = default_max_session_length

    @property
    def name(self):
        """Gets the name of this UpdateSiteV1.  # noqa: E501


        :return: The name of this UpdateSiteV1.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSiteV1.


        :param name: The name of this UpdateSiteV1.  # noqa: E501
        :type: Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def selectors(self):
        """Gets the selectors of this UpdateSiteV1.  # noqa: E501

        A list of Selectors in priority order, such that the first Selector that matches the incoming request will decide the Policy that will be applied. In addition to the provided Selectors, a default Selector will be created with the lowest priority. It will match any path and apply the default policy.  # noqa: E501

        :return: The selectors of this UpdateSiteV1.  # noqa: E501
        :rtype: list[UpdateSelectorV1]
        """
        return self._selectors

    @selectors.setter
    def selectors(self, selectors):
        """Sets the selectors of this UpdateSiteV1.

        A list of Selectors in priority order, such that the first Selector that matches the incoming request will decide the Policy that will be applied. In addition to the provided Selectors, a default Selector will be created with the lowest priority. It will match any path and apply the default policy.  # noqa: E501

        :param selectors: The selectors of this UpdateSiteV1.  # noqa: E501
        :type: list[UpdateSelectorV1]
        """
        if selectors is None:
            raise ValueError("Invalid value for `selectors`, must not be `None`")  # noqa: E501

        self._selectors = selectors

    @property
    def default_max_requests_per_minute(self):
        """Gets the default_max_requests_per_minute of this UpdateSiteV1.  # noqa: E501


        :return: The default_max_requests_per_minute of this UpdateSiteV1.  # noqa: E501
        :rtype: MaxRequestsPerMinute
        """
        return self._default_max_requests_per_minute

    @default_max_requests_per_minute.setter
    def default_max_requests_per_minute(self, default_max_requests_per_minute):
        """Sets the default_max_requests_per_minute of this UpdateSiteV1.


        :param default_max_requests_per_minute: The default_max_requests_per_minute of this UpdateSiteV1.  # noqa: E501
        :type: MaxRequestsPerMinute
        """

        self._default_max_requests_per_minute = default_max_requests_per_minute

    @property
    def default_max_requests_per_session(self):
        """Gets the default_max_requests_per_session of this UpdateSiteV1.  # noqa: E501


        :return: The default_max_requests_per_session of this UpdateSiteV1.  # noqa: E501
        :rtype: MaxRequestsPerSession
        """
        return self._default_max_requests_per_session

    @default_max_requests_per_session.setter
    def default_max_requests_per_session(self, default_max_requests_per_session):
        """Sets the default_max_requests_per_session of this UpdateSiteV1.


        :param default_max_requests_per_session: The default_max_requests_per_session of this UpdateSiteV1.  # noqa: E501
        :type: MaxRequestsPerSession
        """

        self._default_max_requests_per_session = default_max_requests_per_session

    @property
    def default_max_session_length(self):
        """Gets the default_max_session_length of this UpdateSiteV1.  # noqa: E501


        :return: The default_max_session_length of this UpdateSiteV1.  # noqa: E501
        :rtype: MaxSessionLength
        """
        return self._default_max_session_length

    @default_max_session_length.setter
    def default_max_session_length(self, default_max_session_length):
        """Sets the default_max_session_length of this UpdateSiteV1.


        :param default_max_session_length: The default_max_session_length of this UpdateSiteV1.  # noqa: E501
        :type: MaxSessionLength
        """

        self._default_max_session_length = default_max_session_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSiteV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSiteV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
