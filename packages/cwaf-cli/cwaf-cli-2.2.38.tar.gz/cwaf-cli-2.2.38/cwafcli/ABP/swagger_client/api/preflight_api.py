# coding: utf-8

"""
    Advanced Bot Protection API

    This is the API for onboarding websites into Advanced Bot Protection. For full feature documentation, see [Advanced Bot Protection](https://docs.imperva.com/bundle/advanced-bot-protection/page/74791.htm)  ## Terminology differences  The API term *Domain* corresponds to, and is interchangeable with, a *Website* as used in the UI and web based documentation.  The API term *Site* corresponds to and is interchangeable with a *Website Group* as used in the UI and web based documentation.  The API term *Selector* corresponds to and is interchangeable with a *per-Path* *Policy* as used in the UI and web based documentation.  Besides the Imperva *account*, there is also an Advanced Bot Protection *account*. The are connected but have their own identifiers that cannot be mixed. In the API, *account* always refers to an ABP account unless otherwise specified.  ## Updates  When using PUT to update a resource, the entire resource will be replaced and any omitted fields may be deleted. To prevent data loss when performing an update you must GET the resource, update the returned response, and then send the result as the PUT request body.  ## API compatibility  Previous versions of the API are deprecated when a new version is released. Previous versions will be supported until further notice.  For a client to stay compatible with non breaking changes they need to take the following into account:  * New optional properties and properties with default values may   be added to JSON objects used as API request bodies.  * New properties may be added to JSON objects in API response bodies.  * Certain sum types (e.g. `enum` and `oneOf`) are documented as *open*   which means new alternatives can be added. The new values will only   be present if configured using the API or UI.  ## Authentication  See [API Key Management](https://docs.imperva.com/bundle/cloud-application-security/page/settings/api-keys.htm) for instructions on how to authenticate to this API.  ## Pagination  Resources may be paginated. This is indicated by the inclusion of the 'next' and/or the 'prev' relations in the '_links' property. See the Links schema documentation.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PreflightApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_account_account_id_preflight_post(self, account_id, **kwargs):  # noqa: E501
        """Create a preflight used to publish the configuration to the analysis host  # noqa: E501

        In the future the preflight response will contain indications of the modifications that will be applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_account_id_preflight_post(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: Identifies an Account to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_account_account_id_preflight_post_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_account_account_id_preflight_post_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def v1_account_account_id_preflight_post_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Create a preflight used to publish the configuration to the analysis host  # noqa: E501

        In the future the preflight response will contain indications of the modifications that will be applied.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_account_account_id_preflight_post_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountId account_id: Identifies an Account to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_account_account_id_preflight_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `v1_account_account_id_preflight_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/account/{accountId}/preflight', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_preflight_preflight_id_get(self, preflight_id, **kwargs):  # noqa: E501
        """Retrieve a preflight  # noqa: E501

        Provides information about the modifications that are done when a preflight is published.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_preflight_preflight_id_get(preflight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreflightId preflight_id: Identifies a Preflight to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_preflight_preflight_id_get_with_http_info(preflight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_preflight_preflight_id_get_with_http_info(preflight_id, **kwargs)  # noqa: E501
            return data

    def v1_preflight_preflight_id_get_with_http_info(self, preflight_id, **kwargs):  # noqa: E501
        """Retrieve a preflight  # noqa: E501

        Provides information about the modifications that are done when a preflight is published.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_preflight_preflight_id_get_with_http_info(preflight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreflightId preflight_id: Identifies a Preflight to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preflight_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_preflight_preflight_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'preflight_id' is set
        if ('preflight_id' not in params or
                params['preflight_id'] is None):
            raise ValueError("Missing the required parameter `preflight_id` when calling `v1_preflight_preflight_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'preflight_id' in params:
            path_params['preflightId'] = params['preflight_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/preflight/{preflightId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_preflight_preflight_id_publish_post(self, preflight_id, **kwargs):  # noqa: E501
        """Publishes a preflight  # noqa: E501

        Publishes the account configuration snapshot contained in the preflight to the analysis host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_preflight_preflight_id_publish_post(preflight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreflightId preflight_id: Identifies a Preflight to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_preflight_preflight_id_publish_post_with_http_info(preflight_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_preflight_preflight_id_publish_post_with_http_info(preflight_id, **kwargs)  # noqa: E501
            return data

    def v1_preflight_preflight_id_publish_post_with_http_info(self, preflight_id, **kwargs):  # noqa: E501
        """Publishes a preflight  # noqa: E501

        Publishes the account configuration snapshot contained in the preflight to the analysis host.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_preflight_preflight_id_publish_post_with_http_info(preflight_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PreflightId preflight_id: Identifies a Preflight to operate on. (required)
        :param int caid: Current Account ID. API keys are valid for an account and all of its sub accounts. When working with sub-accounts, this needs to be set to the corresponding Imperva account ID. Not specifying the parameter will default it to the main account's ID. 
        :return: InlineResponse2018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['preflight_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_preflight_preflight_id_publish_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'preflight_id' is set
        if ('preflight_id' not in params or
                params['preflight_id'] is None):
            raise ValueError("Missing the required parameter `preflight_id` when calling `v1_preflight_preflight_id_publish_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'preflight_id' in params:
            path_params['preflightId'] = params['preflight_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/preflight/{preflightId}/publish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
