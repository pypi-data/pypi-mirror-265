# coding: utf-8

"""
    Imperva Website Domain Management

    Manage the domains that are sharing the CNAME of an onboarded website.<br/>All domains that are using the same CNAME share the website configuration settings and policies of the onboarded website.<br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/website-general-settings.htm\">Website General Settings</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddSiteDomainDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'strict_mode': 'bool'
    }

    attribute_map = {
        'domain': 'domain',
        'strict_mode': 'strictMode'
    }

    def __init__(self, domain=None, strict_mode=False):  # noqa: E501
        """AddSiteDomainDetails - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._strict_mode = None
        self.discriminator = None
        self.domain = domain
        if strict_mode is not None:
            self.strict_mode = strict_mode

    @property
    def domain(self):
        """Gets the domain of this AddSiteDomainDetails.  # noqa: E501

        The name of the domain to add  # noqa: E501

        :return: The domain of this AddSiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AddSiteDomainDetails.

        The name of the domain to add  # noqa: E501

        :param domain: The domain of this AddSiteDomainDetails.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def strict_mode(self):
        """Gets the strict_mode of this AddSiteDomainDetails.  # noqa: E501

        Internal use for Terraform. <br>In strict mode, add/delete of hostname is allowed only if it does not affect other hosts in the site. For example, adding a wildcard hostname is forbidden in strict mode if a subdomain of the wildcard already exists as a siteDomain, while in loose mode, the subdomain is converted to a WildCardSubDomain   # noqa: E501

        :return: The strict_mode of this AddSiteDomainDetails.  # noqa: E501
        :rtype: bool
        """
        return self._strict_mode

    @strict_mode.setter
    def strict_mode(self, strict_mode):
        """Sets the strict_mode of this AddSiteDomainDetails.

        Internal use for Terraform. <br>In strict mode, add/delete of hostname is allowed only if it does not affect other hosts in the site. For example, adding a wildcard hostname is forbidden in strict mode if a subdomain of the wildcard already exists as a siteDomain, while in loose mode, the subdomain is converted to a WildCardSubDomain   # noqa: E501

        :param strict_mode: The strict_mode of this AddSiteDomainDetails.  # noqa: E501
        :type: bool
        """

        self._strict_mode = strict_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddSiteDomainDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSiteDomainDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
