# coding: utf-8

"""
    Imperva Website Domain Management

    Manage the domains that are sharing the CNAME of an onboarded website.<br/>All domains that are using the same CNAME share the website configuration settings and policies of the onboarded website.<br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/website-general-settings.htm\">Website General Settings</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WildCardSubDomainDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sub_domain': 'str',
        'last_discovered_time': 'int',
        'creation_time': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sub_domain': 'subDomain',
        'last_discovered_time': 'lastDiscoveredTime',
        'creation_time': 'creationTime'
    }

    def __init__(self, id=None, sub_domain=None, last_discovered_time=None, creation_time=None):  # noqa: E501
        """WildCardSubDomainDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sub_domain = None
        self._last_discovered_time = None
        self._creation_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if last_discovered_time is not None:
            self.last_discovered_time = last_discovered_time
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this WildCardSubDomainDetails.  # noqa: E501

        The Imperva Id of the wild card subdomain details   # noqa: E501

        :return: The id of this WildCardSubDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WildCardSubDomainDetails.

        The Imperva Id of the wild card subdomain details   # noqa: E501

        :param id: The id of this WildCardSubDomainDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sub_domain(self):
        """Gets the sub_domain of this WildCardSubDomainDetails.  # noqa: E501

        The name of the subdomain  # noqa: E501

        :return: The sub_domain of this WildCardSubDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this WildCardSubDomainDetails.

        The name of the subdomain  # noqa: E501

        :param sub_domain: The sub_domain of this WildCardSubDomainDetails.  # noqa: E501
        :type: str
        """

        self._sub_domain = sub_domain

    @property
    def last_discovered_time(self):
        """Gets the last_discovered_time of this WildCardSubDomainDetails.  # noqa: E501

        For auto-discovered domains, indicates the last time the domain was discovered.  # noqa: E501

        :return: The last_discovered_time of this WildCardSubDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_discovered_time

    @last_discovered_time.setter
    def last_discovered_time(self, last_discovered_time):
        """Sets the last_discovered_time of this WildCardSubDomainDetails.

        For auto-discovered domains, indicates the last time the domain was discovered.  # noqa: E501

        :param last_discovered_time: The last_discovered_time of this WildCardSubDomainDetails.  # noqa: E501
        :type: int
        """

        self._last_discovered_time = last_discovered_time

    @property
    def creation_time(self):
        """Gets the creation_time of this WildCardSubDomainDetails.  # noqa: E501

        The creation time of the wildcard subdomain details  # noqa: E501

        :return: The creation_time of this WildCardSubDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WildCardSubDomainDetails.

        The creation time of the wildcard subdomain details  # noqa: E501

        :param creation_time: The creation_time of this WildCardSubDomainDetails.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WildCardSubDomainDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WildCardSubDomainDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
