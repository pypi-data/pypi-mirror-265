# coding: utf-8

"""
    Imperva Website Domain Management

    Manage the domains that are sharing the CNAME of an onboarded website.<br/>All domains that are using the same CNAME share the website configuration settings and policies of the onboarded website.<br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/website-general-settings.htm\">Website General Settings</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteDomainDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'site_id': 'int',
        'domain': 'str',
        'auto_discovered': 'bool',
        'main_domain': 'bool',
        'managed': 'bool',
        'sub_domains': 'list[WildCardSubDomainDetails]',
        'validation_method': 'str',
        'validation_code': 'str',
        'cname_redirection_record': 'str',
        'status': 'str',
        'creation_date': 'int'
    }

    attribute_map = {
        'id': 'id',
        'site_id': 'siteId',
        'domain': 'domain',
        'auto_discovered': 'autoDiscovered',
        'main_domain': 'mainDomain',
        'managed': 'managed',
        'sub_domains': 'subDomains',
        'validation_method': 'validationMethod',
        'validation_code': 'validationCode',
        'cname_redirection_record': 'cnameRedirectionRecord',
        'status': 'status',
        'creation_date': 'creationDate'
    }

    def __init__(self, id=None, site_id=None, domain=None, auto_discovered=None, main_domain=None, managed=None, sub_domains=None, validation_method=None, validation_code=None, cname_redirection_record=None, status=None, creation_date=None):  # noqa: E501
        """SiteDomainDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._site_id = None
        self._domain = None
        self._auto_discovered = None
        self._main_domain = None
        self._managed = None
        self._sub_domains = None
        self._validation_method = None
        self._validation_code = None
        self._cname_redirection_record = None
        self._status = None
        self._creation_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if site_id is not None:
            self.site_id = site_id
        if domain is not None:
            self.domain = domain
        if auto_discovered is not None:
            self.auto_discovered = auto_discovered
        if main_domain is not None:
            self.main_domain = main_domain
        if managed is not None:
            self.managed = managed
        if sub_domains is not None:
            self.sub_domains = sub_domains
        if validation_method is not None:
            self.validation_method = validation_method
        if validation_code is not None:
            self.validation_code = validation_code
        if cname_redirection_record is not None:
            self.cname_redirection_record = cname_redirection_record
        if status is not None:
            self.status = status
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this SiteDomainDetails.  # noqa: E501

        The ID of the alternative domain  # noqa: E501

        :return: The id of this SiteDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteDomainDetails.

        The ID of the alternative domain  # noqa: E501

        :param id: The id of this SiteDomainDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def site_id(self):
        """Gets the site_id of this SiteDomainDetails.  # noqa: E501

        The Imperva ID of the onboarded website.  # noqa: E501

        :return: The site_id of this SiteDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this SiteDomainDetails.

        The Imperva ID of the onboarded website.  # noqa: E501

        :param site_id: The site_id of this SiteDomainDetails.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def domain(self):
        """Gets the domain of this SiteDomainDetails.  # noqa: E501

        The name of the domain to add  # noqa: E501

        :return: The domain of this SiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SiteDomainDetails.

        The name of the domain to add  # noqa: E501

        :param domain: The domain of this SiteDomainDetails.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def auto_discovered(self):
        """Gets the auto_discovered of this SiteDomainDetails.  # noqa: E501

        CNAME reuse domain that was discovered automatically by Imperva proxy  # noqa: E501

        :return: The auto_discovered of this SiteDomainDetails.  # noqa: E501
        :rtype: bool
        """
        return self._auto_discovered

    @auto_discovered.setter
    def auto_discovered(self, auto_discovered):
        """Sets the auto_discovered of this SiteDomainDetails.

        CNAME reuse domain that was discovered automatically by Imperva proxy  # noqa: E501

        :param auto_discovered: The auto_discovered of this SiteDomainDetails.  # noqa: E501
        :type: bool
        """

        self._auto_discovered = auto_discovered

    @property
    def main_domain(self):
        """Gets the main_domain of this SiteDomainDetails.  # noqa: E501

        Indicates if the domain is primary domain or alternative domain  # noqa: E501

        :return: The main_domain of this SiteDomainDetails.  # noqa: E501
        :rtype: bool
        """
        return self._main_domain

    @main_domain.setter
    def main_domain(self, main_domain):
        """Sets the main_domain of this SiteDomainDetails.

        Indicates if the domain is primary domain or alternative domain  # noqa: E501

        :param main_domain: The main_domain of this SiteDomainDetails.  # noqa: E501
        :type: bool
        """

        self._main_domain = main_domain

    @property
    def managed(self):
        """Gets the managed of this SiteDomainDetails.  # noqa: E501

        Indicates that the primary domain does not have any alternative domains  # noqa: E501

        :return: The managed of this SiteDomainDetails.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this SiteDomainDetails.

        Indicates that the primary domain does not have any alternative domains  # noqa: E501

        :param managed: The managed of this SiteDomainDetails.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def sub_domains(self):
        """Gets the sub_domains of this SiteDomainDetails.  # noqa: E501


        :return: The sub_domains of this SiteDomainDetails.  # noqa: E501
        :rtype: list[WildCardSubDomainDetails]
        """
        return self._sub_domains

    @sub_domains.setter
    def sub_domains(self, sub_domains):
        """Sets the sub_domains of this SiteDomainDetails.


        :param sub_domains: The sub_domains of this SiteDomainDetails.  # noqa: E501
        :type: list[WildCardSubDomainDetails]
        """

        self._sub_domains = sub_domains

    @property
    def validation_method(self):
        """Gets the validation_method of this SiteDomainDetails.  # noqa: E501

        The method used to validate ownership of the domain. Possible values: CNAME, TXT, A  # noqa: E501

        :return: The validation_method of this SiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._validation_method

    @validation_method.setter
    def validation_method(self, validation_method):
        """Sets the validation_method of this SiteDomainDetails.

        The method used to validate ownership of the domain. Possible values: CNAME, TXT, A  # noqa: E501

        :param validation_method: The validation_method of this SiteDomainDetails.  # noqa: E501
        :type: str
        """

        self._validation_method = validation_method

    @property
    def validation_code(self):
        """Gets the validation_code of this SiteDomainDetails.  # noqa: E501

        The code that should be used to validate ownership of the domain  # noqa: E501

        :return: The validation_code of this SiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this SiteDomainDetails.

        The code that should be used to validate ownership of the domain  # noqa: E501

        :param validation_code: The validation_code of this SiteDomainDetails.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    @property
    def cname_redirection_record(self):
        """Gets the cname_redirection_record of this SiteDomainDetails.  # noqa: E501

        The CNAME value that should be used for CNAME reuse for the alternative domains.  # noqa: E501

        :return: The cname_redirection_record of this SiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._cname_redirection_record

    @cname_redirection_record.setter
    def cname_redirection_record(self, cname_redirection_record):
        """Sets the cname_redirection_record of this SiteDomainDetails.

        The CNAME value that should be used for CNAME reuse for the alternative domains.  # noqa: E501

        :param cname_redirection_record: The cname_redirection_record of this SiteDomainDetails.  # noqa: E501
        :type: str
        """

        self._cname_redirection_record = cname_redirection_record

    @property
    def status(self):
        """Gets the status of this SiteDomainDetails.  # noqa: E501

        The domain ownership verification status. Possible values: BYPASSED, MISCONFIGURED, VERIFIED, PROTECTED  # noqa: E501

        :return: The status of this SiteDomainDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SiteDomainDetails.

        The domain ownership verification status. Possible values: BYPASSED, MISCONFIGURED, VERIFIED, PROTECTED  # noqa: E501

        :param status: The status of this SiteDomainDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def creation_date(self):
        """Gets the creation_date of this SiteDomainDetails.  # noqa: E501

        The date of the domain creation   # noqa: E501

        :return: The creation_date of this SiteDomainDetails.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this SiteDomainDetails.

        The date of the domain creation   # noqa: E501

        :param creation_date: The creation_date of this SiteDomainDetails.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteDomainDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteDomainDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
