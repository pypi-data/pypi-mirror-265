# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_account_id': 'int',
        'display_name': 'str'
    }

    attribute_map = {
        'sub_account_id': 'subAccountId',
        'display_name': 'displayName'
    }

    def __init__(self, sub_account_id=None, display_name=None):  # noqa: E501
        """SubAccount - a model defined in Swagger"""  # noqa: E501
        self._sub_account_id = None
        self._display_name = None
        self.discriminator = None
        self.sub_account_id = sub_account_id
        if display_name is not None:
            self.display_name = display_name

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this SubAccount.  # noqa: E501

        Sub account ID.  # noqa: E501

        :return: The sub_account_id of this SubAccount.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this SubAccount.

        Sub account ID.  # noqa: E501

        :param sub_account_id: The sub_account_id of this SubAccount.  # noqa: E501
        :type: int
        """
        if sub_account_id is None:
            raise ValueError("Invalid value for `sub_account_id`, must not be `None`")  # noqa: E501

        self._sub_account_id = sub_account_id

    @property
    def display_name(self):
        """Gets the display_name of this SubAccount.  # noqa: E501

        The name of sub account.  # noqa: E501

        :return: The display_name of this SubAccount.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubAccount.

        The name of sub account.  # noqa: E501

        :param display_name: The display_name of this SubAccount.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
