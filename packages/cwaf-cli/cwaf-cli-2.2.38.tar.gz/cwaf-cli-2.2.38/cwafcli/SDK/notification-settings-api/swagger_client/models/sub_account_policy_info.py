# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubAccountPolicyInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apply_to_new_sub_accounts': 'str',
        'sub_account_list': 'list[SubAccount]'
    }

    attribute_map = {
        'apply_to_new_sub_accounts': 'applyToNewSubAccounts',
        'sub_account_list': 'subAccountList'
    }

    def __init__(self, apply_to_new_sub_accounts=None, sub_account_list=None):  # noqa: E501
        """SubAccountPolicyInfo - a model defined in Swagger"""  # noqa: E501
        self._apply_to_new_sub_accounts = None
        self._sub_account_list = None
        self.discriminator = None
        if apply_to_new_sub_accounts is not None:
            self.apply_to_new_sub_accounts = apply_to_new_sub_accounts
        if sub_account_list is not None:
            self.sub_account_list = sub_account_list

    @property
    def apply_to_new_sub_accounts(self):
        """Gets the apply_to_new_sub_accounts of this SubAccountPolicyInfo.  # noqa: E501

        If value is ‘TRUE’, all newly onboarded sub accounts are automatically added to the notification policy's sub account list.  # noqa: E501

        :return: The apply_to_new_sub_accounts of this SubAccountPolicyInfo.  # noqa: E501
        :rtype: str
        """
        return self._apply_to_new_sub_accounts

    @apply_to_new_sub_accounts.setter
    def apply_to_new_sub_accounts(self, apply_to_new_sub_accounts):
        """Sets the apply_to_new_sub_accounts of this SubAccountPolicyInfo.

        If value is ‘TRUE’, all newly onboarded sub accounts are automatically added to the notification policy's sub account list.  # noqa: E501

        :param apply_to_new_sub_accounts: The apply_to_new_sub_accounts of this SubAccountPolicyInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["FALSE", "TRUE"]  # noqa: E501
        if apply_to_new_sub_accounts not in allowed_values:
            raise ValueError(
                "Invalid value for `apply_to_new_sub_accounts` ({0}), must be one of {1}"  # noqa: E501
                .format(apply_to_new_sub_accounts, allowed_values)
            )

        self._apply_to_new_sub_accounts = apply_to_new_sub_accounts

    @property
    def sub_account_list(self):
        """Gets the sub_account_list of this SubAccountPolicyInfo.  # noqa: E501

        The parent account will receive notifications for activity in the specified sub accounts.  # noqa: E501

        :return: The sub_account_list of this SubAccountPolicyInfo.  # noqa: E501
        :rtype: list[SubAccount]
        """
        return self._sub_account_list

    @sub_account_list.setter
    def sub_account_list(self, sub_account_list):
        """Sets the sub_account_list of this SubAccountPolicyInfo.

        The parent account will receive notifications for activity in the specified sub accounts.  # noqa: E501

        :param sub_account_list: The sub_account_list of this SubAccountPolicyInfo.  # noqa: E501
        :type: list[SubAccount]
        """

        self._sub_account_list = sub_account_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccountPolicyInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccountPolicyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
