# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationPoliciesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, body, **kwargs):  # noqa: E501
        """Create a notification policy  # noqa: E501

        Create a notification policy for account and website activity, application security events, and network security updates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyFull body: (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a notification policy  # noqa: E501

        Create a notification policy for account and website activity, application security events, and network security updates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyFull body: (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoNotificationPolicyFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, policy_id, **kwargs):  # noqa: E501
        """Delete a notification policy  # noqa: E501

        Delete the notification policy as per the specified CAID and policy ID parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Delete a notification policy  # noqa: E501

        Delete the notification policy as per the specified CAID and policy ID parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoNotificationPolicyFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve a notification policy  # noqa: E501

        Retrieve details of a given policy according to policy ID. To retrieve the policy ID, run the GET /v3/policies/lite API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve a notification policy  # noqa: E501

        Retrieve details of a given policy according to policy ID. To retrieve the policy ID, run the GET /v3/policies/lite API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoNotificationPolicyFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_notification_policy_lite_list(self, **kwargs):  # noqa: E501
        """Get account notification policies  # noqa: E501

        Get a summarized list of all notification policies in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_policy_lite_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoListNotificationPolicyLite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_notification_policy_lite_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_notification_policy_lite_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_notification_policy_lite_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get account notification policies  # noqa: E501

        Get a summarized list of all notification policies in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_notification_policy_lite_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoListNotificationPolicyLite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_notification_policy_lite_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policies/lite', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoListNotificationPolicyLite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, body, policy_id, **kwargs):  # noqa: E501
        """Update a notification policy  # noqa: E501

        Overwrite an existing policy (full update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyFull body: (required)
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(body, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(body, policy_id, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, body, policy_id, **kwargs):  # noqa: E501
        """Update a notification policy  # noqa: E501

        Overwrite an existing policy (full update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyFull body: (required)
        :param int policy_id: The Imperva ID of the policy. To retrieve the policy ID, run the GET /v3/policies/lite API. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyFull
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoNotificationPolicyFull',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_non_crud_policy(self, body, **kwargs):  # noqa: E501
        """Update notification policy status  # noqa: E501

        Enable or disable a notification policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_non_crud_policy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyUpdates body: (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyUpdates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_non_crud_policy_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_non_crud_policy_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_non_crud_policy_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update notification policy status  # noqa: E501

        Enable or disable a notification policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_non_crud_policy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImpervaApiDtoNotificationPolicyUpdates body: (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: ImpervaApiDtoNotificationPolicyUpdates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_non_crud_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_non_crud_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/policy/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiDtoNotificationPolicyUpdates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
