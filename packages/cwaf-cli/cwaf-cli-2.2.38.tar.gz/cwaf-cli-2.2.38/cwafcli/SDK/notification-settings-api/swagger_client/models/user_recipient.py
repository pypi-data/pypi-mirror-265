# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.recipient import Recipient  # noqa: F401,E501

class UserRecipient(Recipient):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recipient_type': 'str',
        'is_user_active': 'bool',
        'is_account_admin': 'bool',
        'id': 'int'
    }
    if hasattr(Recipient, "swagger_types"):
        swagger_types.update(Recipient.swagger_types)

    attribute_map = {
        'recipient_type': 'recipientType',
        'is_user_active': 'isUserActive',
        'is_account_admin': 'isAccountAdmin',
        'id': 'id'
    }
    if hasattr(Recipient, "attribute_map"):
        attribute_map.update(Recipient.attribute_map)

    def __init__(self, recipient_type=None, is_user_active=None, is_account_admin=None, id=None, *args, **kwargs):  # noqa: E501
        """UserRecipient - a model defined in Swagger"""  # noqa: E501
        self._recipient_type = None
        self._is_user_active = None
        self._is_account_admin = None
        self._id = None
        self.discriminator = None
        if recipient_type is not None:
            self.recipient_type = recipient_type
        if is_user_active is not None:
            self.is_user_active = is_user_active
        if is_account_admin is not None:
            self.is_account_admin = is_account_admin
        if id is not None:
            self.id = id
        Recipient.__init__(self, *args, **kwargs)

    @property
    def recipient_type(self):
        """Gets the recipient_type of this UserRecipient.  # noqa: E501

        Indicates whether recipient is an external or internal user.  # noqa: E501

        :return: The recipient_type of this UserRecipient.  # noqa: E501
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """Sets the recipient_type of this UserRecipient.

        Indicates whether recipient is an external or internal user.  # noqa: E501

        :param recipient_type: The recipient_type of this UserRecipient.  # noqa: E501
        :type: str
        """

        self._recipient_type = recipient_type

    @property
    def is_user_active(self):
        """Gets the is_user_active of this UserRecipient.  # noqa: E501

        Indicates whether user is active.  # noqa: E501

        :return: The is_user_active of this UserRecipient.  # noqa: E501
        :rtype: bool
        """
        return self._is_user_active

    @is_user_active.setter
    def is_user_active(self, is_user_active):
        """Sets the is_user_active of this UserRecipient.

        Indicates whether user is active.  # noqa: E501

        :param is_user_active: The is_user_active of this UserRecipient.  # noqa: E501
        :type: bool
        """

        self._is_user_active = is_user_active

    @property
    def is_account_admin(self):
        """Gets the is_account_admin of this UserRecipient.  # noqa: E501

        Indicates whether user has Admin privileges for the account.  # noqa: E501

        :return: The is_account_admin of this UserRecipient.  # noqa: E501
        :rtype: bool
        """
        return self._is_account_admin

    @is_account_admin.setter
    def is_account_admin(self, is_account_admin):
        """Sets the is_account_admin of this UserRecipient.

        Indicates whether user has Admin privileges for the account.  # noqa: E501

        :param is_account_admin: The is_account_admin of this UserRecipient.  # noqa: E501
        :type: bool
        """

        self._is_account_admin = is_account_admin

    @property
    def id(self):
        """Gets the id of this UserRecipient.  # noqa: E501

        Indicates the numeric value of the User ID.  # noqa: E501

        :return: The id of this UserRecipient.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRecipient.

        Indicates the numeric value of the User ID.  # noqa: E501

        :param id: The id of this UserRecipient.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRecipient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRecipient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
