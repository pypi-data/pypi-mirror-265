# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationPolicyFull(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy_id': 'int',
        'account_id': 'int',
        'policy_name': 'str',
        'status': 'str',
        'sub_category': 'str',
        'notification_channel_list': 'list[OneOfNotificationPolicyFullNotificationChannelListItems]',
        'asset_list': 'list[Asset]',
        'apply_to_new_assets': 'str',
        'policy_type': 'str',
        'sub_account_policy_info': 'SubAccountPolicyInfo'
    }

    attribute_map = {
        'policy_id': 'policyId',
        'account_id': 'accountId',
        'policy_name': 'policyName',
        'status': 'status',
        'sub_category': 'subCategory',
        'notification_channel_list': 'notificationChannelList',
        'asset_list': 'assetList',
        'apply_to_new_assets': 'applyToNewAssets',
        'policy_type': 'policyType',
        'sub_account_policy_info': 'subAccountPolicyInfo'
    }

    def __init__(self, policy_id=None, account_id=None, policy_name=None, status=None, sub_category=None, notification_channel_list=None, asset_list=None, apply_to_new_assets=None, policy_type=None, sub_account_policy_info=None):  # noqa: E501
        """NotificationPolicyFull - a model defined in Swagger"""  # noqa: E501
        self._policy_id = None
        self._account_id = None
        self._policy_name = None
        self._status = None
        self._sub_category = None
        self._notification_channel_list = None
        self._asset_list = None
        self._apply_to_new_assets = None
        self._policy_type = None
        self._sub_account_policy_info = None
        self.discriminator = None
        if policy_id is not None:
            self.policy_id = policy_id
        if account_id is not None:
            self.account_id = account_id
        self.policy_name = policy_name
        self.status = status
        self.sub_category = sub_category
        self.notification_channel_list = notification_channel_list
        if asset_list is not None:
            self.asset_list = asset_list
        self.apply_to_new_assets = apply_to_new_assets
        if policy_type is not None:
            self.policy_type = policy_type
        if sub_account_policy_info is not None:
            self.sub_account_policy_info = sub_account_policy_info

    @property
    def policy_id(self):
        """Gets the policy_id of this NotificationPolicyFull.  # noqa: E501

        The policy ID. Send a null value when creating a new policy. When updating a policy, send the ID of the relevant policy.  # noqa: E501

        :return: The policy_id of this NotificationPolicyFull.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this NotificationPolicyFull.

        The policy ID. Send a null value when creating a new policy. When updating a policy, send the ID of the relevant policy.  # noqa: E501

        :param policy_id: The policy_id of this NotificationPolicyFull.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def account_id(self):
        """Gets the account_id of this NotificationPolicyFull.  # noqa: E501

        The Imperva ID of the account or subaccount. The accountId must be either null, equal to the account id associated with the API key, or equal to the caid.  # noqa: E501

        :return: The account_id of this NotificationPolicyFull.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this NotificationPolicyFull.

        The Imperva ID of the account or subaccount. The accountId must be either null, equal to the account id associated with the API key, or equal to the caid.  # noqa: E501

        :param account_id: The account_id of this NotificationPolicyFull.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def policy_name(self):
        """Gets the policy_name of this NotificationPolicyFull.  # noqa: E501

        The name of the policy  # noqa: E501

        :return: The policy_name of this NotificationPolicyFull.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this NotificationPolicyFull.

        The name of the policy  # noqa: E501

        :param policy_name: The policy_name of this NotificationPolicyFull.  # noqa: E501
        :type: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")  # noqa: E501

        self._policy_name = policy_name

    @property
    def status(self):
        """Gets the status of this NotificationPolicyFull.  # noqa: E501

        Indicates whether policy is enabled or disabled.  # noqa: E501

        :return: The status of this NotificationPolicyFull.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationPolicyFull.

        Indicates whether policy is enabled or disabled.  # noqa: E501

        :param status: The status of this NotificationPolicyFull.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_category(self):
        """Gets the sub_category of this NotificationPolicyFull.  # noqa: E501

        The subtype of the notification policy.  # noqa: E501

        :return: The sub_category of this NotificationPolicyFull.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this NotificationPolicyFull.

        The subtype of the notification policy.  # noqa: E501

        :param sub_category: The sub_category of this NotificationPolicyFull.  # noqa: E501
        :type: str
        """
        if sub_category is None:
            raise ValueError("Invalid value for `sub_category`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNT_NOTIFICATIONS", "CERTIFICATE_MANAGEMENT", "SITE_NOTIFICATIONS", "SUBSCRIPTION", "SIEM_STORAGE", "EXECUTIVE_ATTACK_REPORT", "USER_NOTIFICATIONS", "WAF_ALERTS", "WEBSITE_DDOS", "WEBSITE_GROUP_DDOS", "DNS_PROTECTION", "INDIVIDUAL_IP_PROTECTION", "NETWORK_PROTECTION", "NETWORK_CONNECTIVITY", "NETWORK_MONITORING"]  # noqa: E501
        if sub_category not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_category` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_category, allowed_values)
            )

        self._sub_category = sub_category

    @property
    def notification_channel_list(self):
        """Gets the notification_channel_list of this NotificationPolicyFull.  # noqa: E501

        List of notification channels  # noqa: E501

        :return: The notification_channel_list of this NotificationPolicyFull.  # noqa: E501
        :rtype: list[OneOfNotificationPolicyFullNotificationChannelListItems]
        """
        return self._notification_channel_list

    @notification_channel_list.setter
    def notification_channel_list(self, notification_channel_list):
        """Sets the notification_channel_list of this NotificationPolicyFull.

        List of notification channels  # noqa: E501

        :param notification_channel_list: The notification_channel_list of this NotificationPolicyFull.  # noqa: E501
        :type: list[OneOfNotificationPolicyFullNotificationChannelListItems]
        """
        if notification_channel_list is None:
            raise ValueError("Invalid value for `notification_channel_list`, must not be `None`")  # noqa: E501

        self._notification_channel_list = notification_channel_list

    @property
    def asset_list(self):
        """Gets the asset_list of this NotificationPolicyFull.  # noqa: E501

        List of assets to receive notifications (if assets are relevant to the sub category type)  # noqa: E501

        :return: The asset_list of this NotificationPolicyFull.  # noqa: E501
        :rtype: list[Asset]
        """
        return self._asset_list

    @asset_list.setter
    def asset_list(self, asset_list):
        """Sets the asset_list of this NotificationPolicyFull.

        List of assets to receive notifications (if assets are relevant to the sub category type)  # noqa: E501

        :param asset_list: The asset_list of this NotificationPolicyFull.  # noqa: E501
        :type: list[Asset]
        """

        self._asset_list = asset_list

    @property
    def apply_to_new_assets(self):
        """Gets the apply_to_new_assets of this NotificationPolicyFull.  # noqa: E501

        If value is ‘TRUE’, all newly onboarded assets are automatically added to the notification policy's assets list.  # noqa: E501

        :return: The apply_to_new_assets of this NotificationPolicyFull.  # noqa: E501
        :rtype: str
        """
        return self._apply_to_new_assets

    @apply_to_new_assets.setter
    def apply_to_new_assets(self, apply_to_new_assets):
        """Sets the apply_to_new_assets of this NotificationPolicyFull.

        If value is ‘TRUE’, all newly onboarded assets are automatically added to the notification policy's assets list.  # noqa: E501

        :param apply_to_new_assets: The apply_to_new_assets of this NotificationPolicyFull.  # noqa: E501
        :type: str
        """
        if apply_to_new_assets is None:
            raise ValueError("Invalid value for `apply_to_new_assets`, must not be `None`")  # noqa: E501
        allowed_values = ["TRUE", "FALSE"]  # noqa: E501
        if apply_to_new_assets not in allowed_values:
            raise ValueError(
                "Invalid value for `apply_to_new_assets` ({0}), must be one of {1}"  # noqa: E501
                .format(apply_to_new_assets, allowed_values)
            )

        self._apply_to_new_assets = apply_to_new_assets

    @property
    def policy_type(self):
        """Gets the policy_type of this NotificationPolicyFull.  # noqa: E501

        If value is ‘ACCOUNT’, the policy will apply only to the current account. If the value is 'SUB_ACCOUNT' the policy applies to the sub accounts only. The parent account will receive notifications for activity in the sub accounts that are specified in the subAccountList parameter. This parameter is available only in accounts that can contain sub accounts.  # noqa: E501

        :return: The policy_type of this NotificationPolicyFull.  # noqa: E501
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this NotificationPolicyFull.

        If value is ‘ACCOUNT’, the policy will apply only to the current account. If the value is 'SUB_ACCOUNT' the policy applies to the sub accounts only. The parent account will receive notifications for activity in the sub accounts that are specified in the subAccountList parameter. This parameter is available only in accounts that can contain sub accounts.  # noqa: E501

        :param policy_type: The policy_type of this NotificationPolicyFull.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCOUNT", "SUB_ACCOUNT"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type

    @property
    def sub_account_policy_info(self):
        """Gets the sub_account_policy_info of this NotificationPolicyFull.  # noqa: E501


        :return: The sub_account_policy_info of this NotificationPolicyFull.  # noqa: E501
        :rtype: SubAccountPolicyInfo
        """
        return self._sub_account_policy_info

    @sub_account_policy_info.setter
    def sub_account_policy_info(self, sub_account_policy_info):
        """Sets the sub_account_policy_info of this NotificationPolicyFull.


        :param sub_account_policy_info: The sub_account_policy_info of this NotificationPolicyFull.  # noqa: E501
        :type: SubAccountPolicyInfo
        """

        self._sub_account_policy_info = sub_account_policy_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationPolicyFull, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationPolicyFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
