# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationPolicyLite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'policy_id': 'int',
        'account_id': 'int',
        'name': 'str',
        'status': 'str',
        'sub_category': 'str',
        'sub_category_display_name': 'str',
        'channel_type_list': 'list[ChannelType]',
        'assets_in_used_count': 'int',
        'assets_total_count': 'int',
        'category': 'str',
        'category_display_name': 'str',
        'sub_accounts_applied_count': 'int',
        'sub_accounts_total_count': 'int',
        'policy_type': 'str'
    }

    attribute_map = {
        'policy_id': 'policyId',
        'account_id': 'accountId',
        'name': 'name',
        'status': 'status',
        'sub_category': 'subCategory',
        'sub_category_display_name': 'subCategoryDisplayName',
        'channel_type_list': 'channelTypeList',
        'assets_in_used_count': 'assetsInUsedCount',
        'assets_total_count': 'assetsTotalCount',
        'category': 'category',
        'category_display_name': 'categoryDisplayName',
        'sub_accounts_applied_count': 'subAccountsAppliedCount',
        'sub_accounts_total_count': 'subAccountsTotalCount',
        'policy_type': 'policyType'
    }

    def __init__(self, policy_id=None, account_id=None, name=None, status=None, sub_category=None, sub_category_display_name=None, channel_type_list=None, assets_in_used_count=None, assets_total_count=None, category=None, category_display_name=None, sub_accounts_applied_count=None, sub_accounts_total_count=None, policy_type=None):  # noqa: E501
        """NotificationPolicyLite - a model defined in Swagger"""  # noqa: E501
        self._policy_id = None
        self._account_id = None
        self._name = None
        self._status = None
        self._sub_category = None
        self._sub_category_display_name = None
        self._channel_type_list = None
        self._assets_in_used_count = None
        self._assets_total_count = None
        self._category = None
        self._category_display_name = None
        self._sub_accounts_applied_count = None
        self._sub_accounts_total_count = None
        self._policy_type = None
        self.discriminator = None
        if policy_id is not None:
            self.policy_id = policy_id
        if account_id is not None:
            self.account_id = account_id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if sub_category is not None:
            self.sub_category = sub_category
        if sub_category_display_name is not None:
            self.sub_category_display_name = sub_category_display_name
        if channel_type_list is not None:
            self.channel_type_list = channel_type_list
        if assets_in_used_count is not None:
            self.assets_in_used_count = assets_in_used_count
        if assets_total_count is not None:
            self.assets_total_count = assets_total_count
        if category is not None:
            self.category = category
        if category_display_name is not None:
            self.category_display_name = category_display_name
        if sub_accounts_applied_count is not None:
            self.sub_accounts_applied_count = sub_accounts_applied_count
        if sub_accounts_total_count is not None:
            self.sub_accounts_total_count = sub_accounts_total_count
        if policy_type is not None:
            self.policy_type = policy_type

    @property
    def policy_id(self):
        """Gets the policy_id of this NotificationPolicyLite.  # noqa: E501

        The Imperva ID of the policy.  # noqa: E501

        :return: The policy_id of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this NotificationPolicyLite.

        The Imperva ID of the policy.  # noqa: E501

        :param policy_id: The policy_id of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def account_id(self):
        """Gets the account_id of this NotificationPolicyLite.  # noqa: E501

        The Imperva ID of the account.  # noqa: E501

        :return: The account_id of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this NotificationPolicyLite.

        The Imperva ID of the account.  # noqa: E501

        :param account_id: The account_id of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this NotificationPolicyLite.  # noqa: E501

        The name of the policy  # noqa: E501

        :return: The name of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationPolicyLite.

        The name of the policy  # noqa: E501

        :param name: The name of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this NotificationPolicyLite.  # noqa: E501

        Indicates whether policy is enabled or disabled.  # noqa: E501

        :return: The status of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationPolicyLite.

        Indicates whether policy is enabled or disabled.  # noqa: E501

        :param status: The status of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLE", "DISABLE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_category(self):
        """Gets the sub_category of this NotificationPolicyLite.  # noqa: E501

        The notification policy subtype, such as ACCOUNT_NOTIFICATIONS.  # noqa: E501

        :return: The sub_category of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._sub_category

    @sub_category.setter
    def sub_category(self, sub_category):
        """Sets the sub_category of this NotificationPolicyLite.

        The notification policy subtype, such as ACCOUNT_NOTIFICATIONS.  # noqa: E501

        :param sub_category: The sub_category of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCOUNT_NOTIFICATIONS", "CERTIFICATE_MANAGEMENT", "SITE_NOTIFICATIONS", "SUBSCRIPTION", "SIEM_STORAGE", "EXECUTIVE_ATTACK_REPORT", "USER_NOTIFICATIONS", "WAF_ALERTS", "WEBSITE_DDOS", "WEBSITE_GROUP_DDOS", "DNS_PROTECTION", "INDIVIDUAL_IP_PROTECTION", "NETWORK_PROTECTION", "NETWORK_CONNECTIVITY", "NETWORK_MONITORING"]  # noqa: E501
        if sub_category not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_category` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_category, allowed_values)
            )

        self._sub_category = sub_category

    @property
    def sub_category_display_name(self):
        """Gets the sub_category_display_name of this NotificationPolicyLite.  # noqa: E501

        Displayed name of the notification policy subtype.  # noqa: E501

        :return: The sub_category_display_name of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._sub_category_display_name

    @sub_category_display_name.setter
    def sub_category_display_name(self, sub_category_display_name):
        """Sets the sub_category_display_name of this NotificationPolicyLite.

        Displayed name of the notification policy subtype.  # noqa: E501

        :param sub_category_display_name: The sub_category_display_name of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """

        self._sub_category_display_name = sub_category_display_name

    @property
    def channel_type_list(self):
        """Gets the channel_type_list of this NotificationPolicyLite.  # noqa: E501

        List of the channel types of the policy.  # noqa: E501

        :return: The channel_type_list of this NotificationPolicyLite.  # noqa: E501
        :rtype: list[ChannelType]
        """
        return self._channel_type_list

    @channel_type_list.setter
    def channel_type_list(self, channel_type_list):
        """Sets the channel_type_list of this NotificationPolicyLite.

        List of the channel types of the policy.  # noqa: E501

        :param channel_type_list: The channel_type_list of this NotificationPolicyLite.  # noqa: E501
        :type: list[ChannelType]
        """

        self._channel_type_list = channel_type_list

    @property
    def assets_in_used_count(self):
        """Gets the assets_in_used_count of this NotificationPolicyLite.  # noqa: E501

        The number of assets in the account to which the policy is applied.  # noqa: E501

        :return: The assets_in_used_count of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._assets_in_used_count

    @assets_in_used_count.setter
    def assets_in_used_count(self, assets_in_used_count):
        """Sets the assets_in_used_count of this NotificationPolicyLite.

        The number of assets in the account to which the policy is applied.  # noqa: E501

        :param assets_in_used_count: The assets_in_used_count of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._assets_in_used_count = assets_in_used_count

    @property
    def assets_total_count(self):
        """Gets the assets_total_count of this NotificationPolicyLite.  # noqa: E501

        The total number of assets available in the account.  # noqa: E501

        :return: The assets_total_count of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._assets_total_count

    @assets_total_count.setter
    def assets_total_count(self, assets_total_count):
        """Sets the assets_total_count of this NotificationPolicyLite.

        The total number of assets available in the account.  # noqa: E501

        :param assets_total_count: The assets_total_count of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._assets_total_count = assets_total_count

    @property
    def category(self):
        """Gets the category of this NotificationPolicyLite.  # noqa: E501

        The notification policy type, such as ACCOUNT_AND_SITE.  # noqa: E501

        :return: The category of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NotificationPolicyLite.

        The notification policy type, such as ACCOUNT_AND_SITE.  # noqa: E501

        :param category: The category of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCOUNT_AND_SITE", "APPLICATION_SECURITY_EVENTS", "NETWORK_SECURITY", "SYSTEM"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def category_display_name(self):
        """Gets the category_display_name of this NotificationPolicyLite.  # noqa: E501

        Displayed name of the notification policy category.  # noqa: E501

        :return: The category_display_name of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._category_display_name

    @category_display_name.setter
    def category_display_name(self, category_display_name):
        """Sets the category_display_name of this NotificationPolicyLite.

        Displayed name of the notification policy category.  # noqa: E501

        :param category_display_name: The category_display_name of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """

        self._category_display_name = category_display_name

    @property
    def sub_accounts_applied_count(self):
        """Gets the sub_accounts_applied_count of this NotificationPolicyLite.  # noqa: E501

        The number of sub accounts that the parent account will receive notifications for, as specified by the subAccountList parameter.  # noqa: E501

        :return: The sub_accounts_applied_count of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._sub_accounts_applied_count

    @sub_accounts_applied_count.setter
    def sub_accounts_applied_count(self, sub_accounts_applied_count):
        """Sets the sub_accounts_applied_count of this NotificationPolicyLite.

        The number of sub accounts that the parent account will receive notifications for, as specified by the subAccountList parameter.  # noqa: E501

        :param sub_accounts_applied_count: The sub_accounts_applied_count of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._sub_accounts_applied_count = sub_accounts_applied_count

    @property
    def sub_accounts_total_count(self):
        """Gets the sub_accounts_total_count of this NotificationPolicyLite.  # noqa: E501

        The number of sub accounts in the account.  # noqa: E501

        :return: The sub_accounts_total_count of this NotificationPolicyLite.  # noqa: E501
        :rtype: int
        """
        return self._sub_accounts_total_count

    @sub_accounts_total_count.setter
    def sub_accounts_total_count(self, sub_accounts_total_count):
        """Sets the sub_accounts_total_count of this NotificationPolicyLite.

        The number of sub accounts in the account.  # noqa: E501

        :param sub_accounts_total_count: The sub_accounts_total_count of this NotificationPolicyLite.  # noqa: E501
        :type: int
        """

        self._sub_accounts_total_count = sub_accounts_total_count

    @property
    def policy_type(self):
        """Gets the policy_type of this NotificationPolicyLite.  # noqa: E501

        If value is ‘ACCOUNT’, the policy will apply only to the current account. If the value is 'SUB_ACCOUNT' the policy applies to the sub accounts only. The parent account will receive notifications for activity in the sub accounts that are specified in the subAccountList parameter. The 'SUB_ACCOUNT' value is available only in accounts that can contain sub accounts.  # noqa: E501

        :return: The policy_type of this NotificationPolicyLite.  # noqa: E501
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this NotificationPolicyLite.

        If value is ‘ACCOUNT’, the policy will apply only to the current account. If the value is 'SUB_ACCOUNT' the policy applies to the sub accounts only. The parent account will receive notifications for activity in the sub accounts that are specified in the subAccountList parameter. The 'SUB_ACCOUNT' value is available only in accounts that can contain sub accounts.  # noqa: E501

        :param policy_type: The policy_type of this NotificationPolicyLite.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCOUNT", "SUB_ACCOUNT"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationPolicyLite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationPolicyLite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
