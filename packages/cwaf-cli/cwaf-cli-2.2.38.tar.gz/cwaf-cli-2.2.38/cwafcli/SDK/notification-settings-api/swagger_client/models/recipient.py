# coding: utf-8

"""
    Notification Settings API

    Create and manage notification settings for your account using the API. For full feature documentation, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/settings/notification-settings.htm'> Notification Settings </a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Recipient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'recipient_type': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'recipient_type': 'recipientType'
    }

    discriminator_value_class_map = {
            'User'.lower(): '#/components/schemas/UserRecipient',
            'External'.lower(): '#/components/schemas/ExternalRecipient',
    }

    def __init__(self, display_name=None, recipient_type=None):  # noqa: E501
        """Recipient - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._recipient_type = None
        self.discriminator = 'recipient_type'
        if display_name is not None:
            self.display_name = display_name
        if recipient_type is not None:
            self.recipient_type = recipient_type

    @property
    def display_name(self):
        """Gets the display_name of this Recipient.  # noqa: E501

        Indicates name of recipient of the notification.  # noqa: E501

        :return: The display_name of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Recipient.

        Indicates name of recipient of the notification.  # noqa: E501

        :param display_name: The display_name of this Recipient.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def recipient_type(self):
        """Gets the recipient_type of this Recipient.  # noqa: E501


        :return: The recipient_type of this Recipient.  # noqa: E501
        :rtype: str
        """
        return self._recipient_type

    @recipient_type.setter
    def recipient_type(self, recipient_type):
        """Sets the recipient_type of this Recipient.


        :param recipient_type: The recipient_type of this Recipient.  # noqa: E501
        :type: str
        """
        allowed_values = ["External", "User"]  # noqa: E501
        if recipient_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_type` ({0}), must be one of {1}"  # noqa: E501
                .format(recipient_type, allowed_values)
            )

        self._recipient_type = recipient_type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Recipient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recipient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
