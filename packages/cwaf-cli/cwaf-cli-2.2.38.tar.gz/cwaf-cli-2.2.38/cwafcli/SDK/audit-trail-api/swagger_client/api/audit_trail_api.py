# coding: utf-8

"""
    Imperva audit-trail

    View a log of actions performed in your account by account users, system processes, and Imperva system administrators and support. For full feature documentation, see [Audit Trail](https://docs.imperva.com/bundle/cloud-application-security/page/audit-trail.htm)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuditTrailApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_audit_events_v2(self, start, **kwargs):  # noqa: E501
        """Get account audit events  # noqa: E501

        This is a list of audit events of the specified account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_events_v2(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Earliest time boundary (in milliseconds) (required)
        :param bool assume: Is the action performed by Imperva Support logged in as an account user
        :param int caid: Numeric identifier of the account to operate on. If not specified, operation will be performed on the account identified by the authentication parameters.
        :param int end: Latest time boundary (in milliseconds)
        :param int limit: The number of objects to return in the response. Defaults to 50. Maximum is 100
        :param int offset: Offset is the position of a particular record in the dataset. You can retrieve a subset of records starting with the offset value. The offset and limit parameters work together. Valid values for the offset parameter are multiples of the limit. For example, if you define limit as 50, you can define offset as either 0, 50, 100, 150, or any multiple of 50.
        :param str type: The action that was performed in the account, such as ACCOUNT_LOGIN
        :return: AuditRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_audit_events_v2_with_http_info(start, **kwargs)  # noqa: E501
        else:
            (data) = self.get_audit_events_v2_with_http_info(start, **kwargs)  # noqa: E501
            return data

    def get_audit_events_v2_with_http_info(self, start, **kwargs):  # noqa: E501
        """Get account audit events  # noqa: E501

        This is a list of audit events of the specified account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_audit_events_v2_with_http_info(start, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: Earliest time boundary (in milliseconds) (required)
        :param bool assume: Is the action performed by Imperva Support logged in as an account user
        :param int caid: Numeric identifier of the account to operate on. If not specified, operation will be performed on the account identified by the authentication parameters.
        :param int end: Latest time boundary (in milliseconds)
        :param int limit: The number of objects to return in the response. Defaults to 50. Maximum is 100
        :param int offset: Offset is the position of a particular record in the dataset. You can retrieve a subset of records starting with the offset value. The offset and limit parameters work together. Valid values for the offset parameter are multiples of the limit. For example, if you define limit as 50, you can define offset as either 0, 50, 100, 150, or any multiple of 50.
        :param str type: The action that was performed in the account, such as ACCOUNT_LOGIN
        :return: AuditRecordResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'assume', 'caid', 'end', 'limit', 'offset', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_audit_events_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `get_audit_events_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'assume' in params:
            query_params.append(('assume', params['assume']))  # noqa: E501
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'end' in params:
            query_params.append(('end', params['end']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuditRecordResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
