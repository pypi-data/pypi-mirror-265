# coding: utf-8

"""
    Imperva audit-trail

    View a log of actions performed in your account by account users, system processes, and Imperva system administrators and support. For full feature documentation, see [Audit Trail](https://docs.imperva.com/bundle/cloud-application-security/page/audit-trail.htm)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'type_key': 'str',
        'type_description': 'str',
        'user_id': 'str',
        'user_details': 'str',
        'account_id': 'str',
        'resource_type_key': 'str',
        'resource_id': 'str',
        'message': 'str',
        'context_key': 'str',
        'assumed_by_user': 'str'
    }

    attribute_map = {
        'time': 'time',
        'type_key': 'type_key',
        'type_description': 'type_description',
        'user_id': 'user_id',
        'user_details': 'user_details',
        'account_id': 'account_id',
        'resource_type_key': 'resource_type_key',
        'resource_id': 'resource_id',
        'message': 'message',
        'context_key': 'context_key',
        'assumed_by_user': 'assumed_by_user'
    }

    def __init__(self, time=None, type_key=None, type_description=None, user_id=None, user_details=None, account_id=None, resource_type_key=None, resource_id=None, message=None, context_key=None, assumed_by_user=None):  # noqa: E501
        """AuditRecord - a model defined in Swagger"""  # noqa: E501
        self._time = None
        self._type_key = None
        self._type_description = None
        self._user_id = None
        self._user_details = None
        self._account_id = None
        self._resource_type_key = None
        self._resource_id = None
        self._message = None
        self._context_key = None
        self._assumed_by_user = None
        self.discriminator = None
        if time is not None:
            self.time = time
        if type_key is not None:
            self.type_key = type_key
        if type_description is not None:
            self.type_description = type_description
        if user_id is not None:
            self.user_id = user_id
        if user_details is not None:
            self.user_details = user_details
        if account_id is not None:
            self.account_id = account_id
        if resource_type_key is not None:
            self.resource_type_key = resource_type_key
        if resource_id is not None:
            self.resource_id = resource_id
        if message is not None:
            self.message = message
        if context_key is not None:
            self.context_key = context_key
        if assumed_by_user is not None:
            self.assumed_by_user = assumed_by_user

    @property
    def time(self):
        """Gets the time of this AuditRecord.  # noqa: E501

        Time of the audit event  # noqa: E501

        :return: The time of this AuditRecord.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AuditRecord.

        Time of the audit event  # noqa: E501

        :param time: The time of this AuditRecord.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def type_key(self):
        """Gets the type_key of this AuditRecord.  # noqa: E501

        The name of the action that was performed in the account, such as ACCOUNT_LOGIN or SITE_ORIGIN_SERVERS_SETTINGS_CHANGED.  # noqa: E501

        :return: The type_key of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._type_key

    @type_key.setter
    def type_key(self, type_key):
        """Sets the type_key of this AuditRecord.

        The name of the action that was performed in the account, such as ACCOUNT_LOGIN or SITE_ORIGIN_SERVERS_SETTINGS_CHANGED.  # noqa: E501

        :param type_key: The type_key of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._type_key = type_key

    @property
    def type_description(self):
        """Gets the type_description of this AuditRecord.  # noqa: E501

        A description of the action that was performed in the account, such as logging in or changing site settings.  # noqa: E501

        :return: The type_description of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._type_description

    @type_description.setter
    def type_description(self, type_description):
        """Sets the type_description of this AuditRecord.

        A description of the action that was performed in the account, such as logging in or changing site settings.  # noqa: E501

        :param type_description: The type_description of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._type_description = type_description

    @property
    def user_id(self):
        """Gets the user_id of this AuditRecord.  # noqa: E501

        ID of the user who performed the action  # noqa: E501

        :return: The user_id of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditRecord.

        ID of the user who performed the action  # noqa: E501

        :param user_id: The user_id of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def user_details(self):
        """Gets the user_details of this AuditRecord.  # noqa: E501

        Email of the user who performed the action  # noqa: E501

        :return: The user_details of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_details

    @user_details.setter
    def user_details(self, user_details):
        """Sets the user_details of this AuditRecord.

        Email of the user who performed the action  # noqa: E501

        :param user_details: The user_details of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._user_details = user_details

    @property
    def account_id(self):
        """Gets the account_id of this AuditRecord.  # noqa: E501

        ID of the account that the action was done in  # noqa: E501

        :return: The account_id of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuditRecord.

        ID of the account that the action was done in  # noqa: E501

        :param account_id: The account_id of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def resource_type_key(self):
        """Gets the resource_type_key of this AuditRecord.  # noqa: E501

        The type of the resource that the action was done on  # noqa: E501

        :return: The resource_type_key of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._resource_type_key

    @resource_type_key.setter
    def resource_type_key(self, resource_type_key):
        """Sets the resource_type_key of this AuditRecord.

        The type of the resource that the action was done on  # noqa: E501

        :param resource_type_key: The resource_type_key of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._resource_type_key = resource_type_key

    @property
    def resource_id(self):
        """Gets the resource_id of this AuditRecord.  # noqa: E501

        ID of the resource that the action was done on  # noqa: E501

        :return: The resource_id of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AuditRecord.

        ID of the resource that the action was done on  # noqa: E501

        :param resource_id: The resource_id of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def message(self):
        """Gets the message of this AuditRecord.  # noqa: E501

        Detailed description of the audit event  # noqa: E501

        :return: The message of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AuditRecord.

        Detailed description of the audit event  # noqa: E501

        :param message: The message of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def context_key(self):
        """Gets the context_key of this AuditRecord.  # noqa: E501

        The audit activity context. Can be one of the following: UI, API, INTERNAL_API, JOB, NA  # noqa: E501

        :return: The context_key of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._context_key

    @context_key.setter
    def context_key(self, context_key):
        """Sets the context_key of this AuditRecord.

        The audit activity context. Can be one of the following: UI, API, INTERNAL_API, JOB, NA  # noqa: E501

        :param context_key: The context_key of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._context_key = context_key

    @property
    def assumed_by_user(self):
        """Gets the assumed_by_user of this AuditRecord.  # noqa: E501

        The user who performed the action on behalf of an account user  # noqa: E501

        :return: The assumed_by_user of this AuditRecord.  # noqa: E501
        :rtype: str
        """
        return self._assumed_by_user

    @assumed_by_user.setter
    def assumed_by_user(self, assumed_by_user):
        """Sets the assumed_by_user of this AuditRecord.

        The user who performed the action on behalf of an account user  # noqa: E501

        :param assumed_by_user: The assumed_by_user of this AuditRecord.  # noqa: E501
        :type: str
        """

        self._assumed_by_user = assumed_by_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
