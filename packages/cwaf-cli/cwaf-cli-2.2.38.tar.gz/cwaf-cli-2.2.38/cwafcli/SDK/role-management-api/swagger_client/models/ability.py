# coding: utf-8

"""
    User Management API

    This is an API for Imperva User Management  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ability_key': 'str',
        'ability_display_name': 'str',
        'is_relevant_for_sub_account': 'bool'
    }

    attribute_map = {
        'ability_key': 'abilityKey',
        'ability_display_name': 'abilityDisplayName',
        'is_relevant_for_sub_account': 'isRelevantForSubAccount'
    }

    def __init__(self, ability_key=None, ability_display_name=None, is_relevant_for_sub_account=None):  # noqa: E501
        """Ability - a model defined in Swagger"""  # noqa: E501
        self._ability_key = None
        self._ability_display_name = None
        self._is_relevant_for_sub_account = None
        self.discriminator = None
        if ability_key is not None:
            self.ability_key = ability_key
        if ability_display_name is not None:
            self.ability_display_name = ability_display_name
        if is_relevant_for_sub_account is not None:
            self.is_relevant_for_sub_account = is_relevant_for_sub_account

    @property
    def ability_key(self):
        """Gets the ability_key of this Ability.  # noqa: E501

        The ability key.  # noqa: E501

        :return: The ability_key of this Ability.  # noqa: E501
        :rtype: str
        """
        return self._ability_key

    @ability_key.setter
    def ability_key(self, ability_key):
        """Sets the ability_key of this Ability.

        The ability key.  # noqa: E501

        :param ability_key: The ability_key of this Ability.  # noqa: E501
        :type: str
        """

        self._ability_key = ability_key

    @property
    def ability_display_name(self):
        """Gets the ability_display_name of this Ability.  # noqa: E501

        The ability display name.  # noqa: E501

        :return: The ability_display_name of this Ability.  # noqa: E501
        :rtype: str
        """
        return self._ability_display_name

    @ability_display_name.setter
    def ability_display_name(self, ability_display_name):
        """Sets the ability_display_name of this Ability.

        The ability display name.  # noqa: E501

        :param ability_display_name: The ability_display_name of this Ability.  # noqa: E501
        :type: str
        """

        self._ability_display_name = ability_display_name

    @property
    def is_relevant_for_sub_account(self):
        """Gets the is_relevant_for_sub_account of this Ability.  # noqa: E501

        Is ability relevant for sub-account.  # noqa: E501

        :return: The is_relevant_for_sub_account of this Ability.  # noqa: E501
        :rtype: bool
        """
        return self._is_relevant_for_sub_account

    @is_relevant_for_sub_account.setter
    def is_relevant_for_sub_account(self, is_relevant_for_sub_account):
        """Sets the is_relevant_for_sub_account of this Ability.

        Is ability relevant for sub-account.  # noqa: E501

        :param is_relevant_for_sub_account: The is_relevant_for_sub_account of this Ability.  # noqa: E501
        :type: bool
        """

        self._is_relevant_for_sub_account = is_relevant_for_sub_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
