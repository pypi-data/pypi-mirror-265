# coding: utf-8

"""
    User Management API

    This is an API for Imperva User Management  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserManagementApiException(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cause': 'Throwable',
        'stack_trace': 'list[StackTraceElement]',
        'error_code': 'str',
        'placeholders': 'dict(str, str)',
        'message': 'str',
        'suppressed': 'list[Throwable]',
        'localized_message': 'str'
    }

    attribute_map = {
        'cause': 'cause',
        'stack_trace': 'stackTrace',
        'error_code': 'errorCode',
        'placeholders': 'placeholders',
        'message': 'message',
        'suppressed': 'suppressed',
        'localized_message': 'localizedMessage'
    }

    def __init__(self, cause=None, stack_trace=None, error_code=None, placeholders=None, message=None, suppressed=None, localized_message=None):  # noqa: E501
        """UserManagementApiException - a model defined in Swagger"""  # noqa: E501
        self._cause = None
        self._stack_trace = None
        self._error_code = None
        self._placeholders = None
        self._message = None
        self._suppressed = None
        self._localized_message = None
        self.discriminator = None
        self.cause = cause
        self.stack_trace = stack_trace
        self.error_code = error_code
        self.placeholders = placeholders
        self.message = message
        self.suppressed = suppressed
        self.localized_message = localized_message

    @property
    def cause(self):
        """Gets the cause of this UserManagementApiException.  # noqa: E501


        :return: The cause of this UserManagementApiException.  # noqa: E501
        :rtype: Throwable
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this UserManagementApiException.


        :param cause: The cause of this UserManagementApiException.  # noqa: E501
        :type: Throwable
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")  # noqa: E501

        self._cause = cause

    @property
    def stack_trace(self):
        """Gets the stack_trace of this UserManagementApiException.  # noqa: E501


        :return: The stack_trace of this UserManagementApiException.  # noqa: E501
        :rtype: list[StackTraceElement]
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this UserManagementApiException.


        :param stack_trace: The stack_trace of this UserManagementApiException.  # noqa: E501
        :type: list[StackTraceElement]
        """
        if stack_trace is None:
            raise ValueError("Invalid value for `stack_trace`, must not be `None`")  # noqa: E501

        self._stack_trace = stack_trace

    @property
    def error_code(self):
        """Gets the error_code of this UserManagementApiException.  # noqa: E501


        :return: The error_code of this UserManagementApiException.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this UserManagementApiException.


        :param error_code: The error_code of this UserManagementApiException.  # noqa: E501
        :type: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")  # noqa: E501
        allowed_values = ["STARTUP_FAILURE", "MISSING_PARAMETERS", "DATA_NOT_FOUND", "BAD_DATA", "INTERNAL_ERROR", "ILLEGAL_OPERATION", "ACCOUNT_FOR_MIGRATION_IS_NULL", "MIGRATE_FAILURE_FAILED_RECEIVING_MIGRATION_DATA_FROM_MY", "MIGRATE_FAILURE_GENERAL_FAILURE_RECEIVING_MIGRATION_DATA_FROM_MY", "MIGRATE_FAILURE_NON_ENTERPRISE_ACCOUNT", "MIGRATE_FAILURE_NO_ADMIN_USER_FOR_ACCOUNT", "MIGRATE_FAILURE_ACCOUNT_ALREADY_MIGRATED", "MIGRATE_FAILURE_ABILITY_IS_MISSING_IN_MS_DB", "MIGRATE_FAILURE_NO_ROLES_CREATED", "MIGRATE_FAILURE_NUMBER_OF_CREATED_ROLES_IS_WRONG", "MIGRATE_FAILURE_DIFFERENCE_IN_USER_ABILITIES", "MIGRATE_FAILURE_ACCOUNT_DOES_NOT_CONTAIN_USERS", "MIGRATE_FAILURE_EXTERNAL_USER_WITH_PERMISSION_ON_SUB_ACCOUNT", "UNAUTHORIZED", "MIGRATE_FAILURE_ROLLBACK_FAILED", "NO_SUCH_USER", "NO_SUCH_ACCOUNT", "NO_SUCH_ROLE", "MISSING_ROLE_NAME", "ADMIN_ROLE_ALREADY_EXISTS", "API_ROLE_NOT_EDITABLE", "ROLE_CANNOT_BE_REMOVED", "ROLE_NAME_UNIQUENESS", "ROLE_IS_ASSIGNED", "FAILED_TO_GET_ACCOUNT_ABILITIES", "NO_SUCH_ABILITY", "CANNOT_CHANGE_ADMIN_WITH_NO_ROLES", "DEFAULT_ERROR_MESSAGE", "API_PARAM_IS_MISSING", "API_ERROR_OCCURRED_WHILE_CREATING_NEW_ROLE", "API_PARAM_IS_MISSING_OR_INVALID", "ROLE_CANNOT_BE_CREATED_ON_SUB_ACCOUNT", "CANNOT_ASSIGN_MORE_THAN_MAX_ROLES_TO_USER", "API_HIDDEN_ABILITY", "FAILED_TO_GET_CUSTOMER_ADMIN_ACCOUNT_ABILITIES", "NO_SUCH_FEATURE", "API_NO_SUCH_ABILITY", "MIGRATE_FAILURE_ACCOUNT_NOT_SUPPORTED", "NO_SUCH_ACCOUNT_TYPE", "INVALID_PERCENTAGE", "NO_SUCH_USER_EMAIL", "API_NO_SUCH_ROLE_WITH_ROLE_ID", "NO_SUCH_ROLE_EXIST_ON_THE_ACCOUNT", "MAX_ROLES_PER_USER", "MIGRATE_FAILURE_FAILED_TO_LOAD_DUMMY_RESELLERS_FILE", "MIGRATE_FAILURE_ACCOUNT_IS_A_DUMMY_RESELLER", "READ_ONLY_ROLE_ALREADY_EXISTS", "DEFAULT_ROLE_ALREADY_EXISTS", "API_NO_SUCH_ACCOUNT_EXIST", "API_ERROR_AT_CREATE_USER", "API_ERROR_AT_DELETE_USER", "API_ERROR_AT_GET_USER", "API_USER_EMAIL_IS_ILLEGAL", "API_CANT_DELETE_ADMIN_USER", "API_NO_SUCH_ROLE_WITH_ROLE_NAME", "API_PARAM_SHOULD_NOT_BE_EXIST", "API_CANT_CREATE_USER_USER_ALREADY_EXISTS", "API_CANT_CREATE_USER_WITH_CAN_MANAGE_SUB_ACCOUNT_ABILITY", "API_UNRECOGNIZED_PROPERTY", "ABILITY_IN_ROLES_USE", "CANNOT_DELETE_MY_ABILITY", "ABILITY_NAME_UNIQUENESS", "ABILITY_DISPLAY_NAME_UNIQUENESS", "ABILITY_ILLEGAL_ACCESS_TYPE", "ABILITY_ILLEGAL_SERVICE", "ABILITY_ILLEGAL_ACCOUNT_TYPE", "FAILED_GET_ABILITY_FROM_MY", "ABILITY_DOESNT_EXIST_IN_MY", "ABILITY_EXISTS_IN_MY", "ABILITY_ENTITLEMENT_LIST_IS_EMPTY", "ABILITY_ID_INPUT_IS_ILLEGAL", "ABILITY_NAME_IS_NULL_OR_EMPTY", "ABILITY_DISPLAY_NAME_IS_NULL_OR_EMPTY"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"  # noqa: E501
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def placeholders(self):
        """Gets the placeholders of this UserManagementApiException.  # noqa: E501


        :return: The placeholders of this UserManagementApiException.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._placeholders

    @placeholders.setter
    def placeholders(self, placeholders):
        """Sets the placeholders of this UserManagementApiException.


        :param placeholders: The placeholders of this UserManagementApiException.  # noqa: E501
        :type: dict(str, str)
        """
        if placeholders is None:
            raise ValueError("Invalid value for `placeholders`, must not be `None`")  # noqa: E501

        self._placeholders = placeholders

    @property
    def message(self):
        """Gets the message of this UserManagementApiException.  # noqa: E501


        :return: The message of this UserManagementApiException.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UserManagementApiException.


        :param message: The message of this UserManagementApiException.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def suppressed(self):
        """Gets the suppressed of this UserManagementApiException.  # noqa: E501


        :return: The suppressed of this UserManagementApiException.  # noqa: E501
        :rtype: list[Throwable]
        """
        return self._suppressed

    @suppressed.setter
    def suppressed(self, suppressed):
        """Sets the suppressed of this UserManagementApiException.


        :param suppressed: The suppressed of this UserManagementApiException.  # noqa: E501
        :type: list[Throwable]
        """
        if suppressed is None:
            raise ValueError("Invalid value for `suppressed`, must not be `None`")  # noqa: E501

        self._suppressed = suppressed

    @property
    def localized_message(self):
        """Gets the localized_message of this UserManagementApiException.  # noqa: E501


        :return: The localized_message of this UserManagementApiException.  # noqa: E501
        :rtype: str
        """
        return self._localized_message

    @localized_message.setter
    def localized_message(self, localized_message):
        """Sets the localized_message of this UserManagementApiException.


        :param localized_message: The localized_message of this UserManagementApiException.  # noqa: E501
        :type: str
        """
        if localized_message is None:
            raise ValueError("Invalid value for `localized_message`, must not be `None`")  # noqa: E501

        self._localized_message = localized_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserManagementApiException, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserManagementApiException):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
