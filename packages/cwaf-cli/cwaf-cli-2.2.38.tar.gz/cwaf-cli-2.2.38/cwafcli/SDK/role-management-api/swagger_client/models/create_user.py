# coding: utf-8

"""
    User Management API

    This is an API for Imperva User Management  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'user_email': 'str',
        'role_ids': 'list[int]',
        'role_names': 'list[str]',
        'first_name': 'str',
        'last_name': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'user_email': 'userEmail',
        'role_ids': 'roleIds',
        'role_names': 'roleNames',
        'first_name': 'firstName',
        'last_name': 'lastName'
    }

    def __init__(self, account_id=None, user_email=None, role_ids=None, role_names=None, first_name=None, last_name=None):  # noqa: E501
        """CreateUser - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._user_email = None
        self._role_ids = None
        self._role_names = None
        self._first_name = None
        self._last_name = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if user_email is not None:
            self.user_email = user_email
        if role_ids is not None:
            self.role_ids = role_ids
        if role_names is not None:
            self.role_names = role_names
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name

    @property
    def account_id(self):
        """Gets the account_id of this CreateUser.  # noqa: E501

        ID of the account that was acted on.  # noqa: E501

        :return: The account_id of this CreateUser.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateUser.

        ID of the account that was acted on.  # noqa: E501

        :param account_id: The account_id of this CreateUser.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def user_email(self):
        """Gets the user_email of this CreateUser.  # noqa: E501

        The userEmail of the user that was acted on.  # noqa: E501

        :return: The user_email of this CreateUser.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this CreateUser.

        The userEmail of the user that was acted on.  # noqa: E501

        :param user_email: The user_email of this CreateUser.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def role_ids(self):
        """Gets the role_ids of this CreateUser.  # noqa: E501

        List of role IDs to add to the user. Use roleIds or roleNames to add roles to the user, but not both.  # noqa: E501

        :return: The role_ids of this CreateUser.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this CreateUser.

        List of role IDs to add to the user. Use roleIds or roleNames to add roles to the user, but not both.  # noqa: E501

        :param role_ids: The role_ids of this CreateUser.  # noqa: E501
        :type: list[int]
        """

        self._role_ids = role_ids

    @property
    def role_names(self):
        """Gets the role_names of this CreateUser.  # noqa: E501

        List of role names to add to the user. Use roleIds or roleNames to add roles to the user, but not both.  # noqa: E501

        :return: The role_names of this CreateUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_names

    @role_names.setter
    def role_names(self, role_names):
        """Sets the role_names of this CreateUser.

        List of role names to add to the user. Use roleIds or roleNames to add roles to the user, but not both.  # noqa: E501

        :param role_names: The role_names of this CreateUser.  # noqa: E501
        :type: list[str]
        """

        self._role_names = role_names

    @property
    def first_name(self):
        """Gets the first_name of this CreateUser.  # noqa: E501

        The first name of the user that was acted on.  # noqa: E501

        :return: The first_name of this CreateUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateUser.

        The first name of the user that was acted on.  # noqa: E501

        :param first_name: The first_name of this CreateUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateUser.  # noqa: E501

        The last name of the user that was acted on.  # noqa: E501

        :return: The last_name of this CreateUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateUser.

        The last name of the user that was acted on.  # noqa: E501

        :param last_name: The last_name of this CreateUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
