# coding: utf-8

"""
    Sites management API Documentation

    Get details of your websites configured in Imperva.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SiteManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_site(self, site_id, **kwargs):  # noqa: E501
        """Get site  # noqa: E501

        Retrieve details of a website according to its Imperva ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: CollectionSite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Get site  # noqa: E501

        Retrieve details of a website according to its Imperva ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site. (required)
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: CollectionSite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionSite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sites(self, **kwargs):  # noqa: E501
        """Get sites  # noqa: E501

        Retrieve details of all websites associated with the current account. <br />To filter for a subset of the account’s websites, provide website IDs and website names. <br />If multiple filters are provided, an AND operation is applied and the API will return all websites matching the filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] site_ids: A list of website ids. If this parameter is provided, only websites matching one of these IDs will be returned.
        :param list[str] names: A list of website names. If this parameter is provided, only websites matching one of these names will be returned.
        :param list[str] site_types: A list of website types. Indicates if the website is onboarded to Imperva Cloud WAF or configured for Imperva WAF Anywhere. If this parameter is provided, only websites with type matching one of these types will be returned.
        :param int page: The page to return starting from 0.
        :param int size: Page size used to determine the first object to be returned and the number of objects to be returned.
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: PaginatedCollectionSite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sites_with_http_info(self, **kwargs):  # noqa: E501
        """Get sites  # noqa: E501

        Retrieve details of all websites associated with the current account. <br />To filter for a subset of the account’s websites, provide website IDs and website names. <br />If multiple filters are provided, an AND operation is applied and the API will return all websites matching the filters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] site_ids: A list of website ids. If this parameter is provided, only websites matching one of these IDs will be returned.
        :param list[str] names: A list of website names. If this parameter is provided, only websites matching one of these names will be returned.
        :param list[str] site_types: A list of website types. Indicates if the website is onboarded to Imperva Cloud WAF or configured for Imperva WAF Anywhere. If this parameter is provided, only websites with type matching one of these types will be returned.
        :param int page: The page to return starting from 0.
        :param int size: Page size used to determine the first object to be returned and the number of objects to be returned.
        :param int caid: The Imperva ID of the account or subaccount. By default, the account ID is the ID associated with the API credentials used for authentication. To run an API on a sub account, specify the sub account ID.
        :return: PaginatedCollectionSite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_ids', 'names', 'site_types', 'page', 'size', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_ids' in params:
            query_params.append(('siteIds', params['site_ids']))  # noqa: E501
            collection_formats['siteIds'] = 'multi'  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
            collection_formats['names'] = 'multi'  # noqa: E501
        if 'site_types' in params:
            query_params.append(('siteTypes', params['site_types']))  # noqa: E501
            collection_formats['siteTypes'] = 'multi'  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedCollectionSite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
