# coding: utf-8

"""
    Sites management API Documentation

    Get details of your websites configured in Imperva.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'account_id': 'int',
        'creation_time': 'int',
        'cname': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'account_id': 'accountId',
        'creation_time': 'creationTime',
        'cname': 'cname'
    }

    def __init__(self, id=None, name=None, type=None, account_id=None, creation_time=None, cname=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._account_id = None
        self._creation_time = None
        self._cname = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        if account_id is not None:
            self.account_id = account_id
        if creation_time is not None:
            self.creation_time = creation_time
        if cname is not None:
            self.cname = cname

    @property
    def id(self):
        """Gets the id of this Site.  # noqa: E501

        The id of the site  # noqa: E501

        :return: The id of this Site.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Site.

        The id of the site  # noqa: E501

        :param id: The id of this Site.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Site.  # noqa: E501

        Friendly name of the site entity  # noqa: E501

        :return: The name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.

        Friendly name of the site entity  # noqa: E501

        :param name: The name of this Site.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Site.  # noqa: E501

        The website type. Indicates which kind of website will be created, e.g use CLOUD_WAF if the website is onboarded to Imperva Cloud WAF  # noqa: E501

        :return: The type of this Site.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Site.

        The website type. Indicates which kind of website will be created, e.g use CLOUD_WAF if the website is onboarded to Imperva Cloud WAF  # noqa: E501

        :param type: The type of this Site.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CLOUD_WAF", "LOCAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def account_id(self):
        """Gets the account_id of this Site.  # noqa: E501

        The account id of the site  # noqa: E501

        :return: The account_id of this Site.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Site.

        The account id of the site  # noqa: E501

        :param account_id: The account_id of this Site.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Site.  # noqa: E501

        The creation date of the site  # noqa: E501

        :return: The creation_time of this Site.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Site.

        The creation date of the site  # noqa: E501

        :param creation_time: The creation_time of this Site.  # noqa: E501
        :type: int
        """

        self._creation_time = creation_time

    @property
    def cname(self):
        """Gets the cname of this Site.  # noqa: E501

        The CNAME provided by Imperva that is used for pointing your website traffic to the Imperva network  # noqa: E501

        :return: The cname of this Site.  # noqa: E501
        :rtype: str
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this Site.

        The CNAME provided by Imperva that is used for pointing your website traffic to the Imperva network  # noqa: E501

        :param cname: The cname of this Site.  # noqa: E501
        :type: str
        """

        self._cname = cname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
