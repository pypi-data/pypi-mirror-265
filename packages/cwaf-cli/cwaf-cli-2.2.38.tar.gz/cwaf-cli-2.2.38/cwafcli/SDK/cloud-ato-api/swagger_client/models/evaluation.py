# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Evaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_factors': 'list[str]',
        'record_type': 'str',
        'reputation': 'list[str]'
    }

    attribute_map = {
        'risk_factors': 'riskFactors',
        'record_type': 'recordType',
        'reputation': 'reputation'
    }

    def __init__(self, risk_factors=None, record_type=None, reputation=None):  # noqa: E501
        """Evaluation - a model defined in Swagger"""  # noqa: E501
        self._risk_factors = None
        self._record_type = None
        self._reputation = None
        self.discriminator = None
        if risk_factors is not None:
            self.risk_factors = risk_factors
        if record_type is not None:
            self.record_type = record_type
        if reputation is not None:
            self.reputation = reputation

    @property
    def risk_factors(self):
        """Gets the risk_factors of this Evaluation.  # noqa: E501

        Additional risk factors contributing to the total risk score.  # noqa: E501

        :return: The risk_factors of this Evaluation.  # noqa: E501
        :rtype: list[str]
        """
        return self._risk_factors

    @risk_factors.setter
    def risk_factors(self, risk_factors):
        """Sets the risk_factors of this Evaluation.

        Additional risk factors contributing to the total risk score.  # noqa: E501

        :param risk_factors: The risk_factors of this Evaluation.  # noqa: E501
        :type: list[str]
        """

        self._risk_factors = risk_factors

    @property
    def record_type(self):
        """Gets the record_type of this Evaluation.  # noqa: E501

        Type of login evidence.  # noqa: E501

        :return: The record_type of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this Evaluation.

        Type of login evidence.  # noqa: E501

        :param record_type: The record_type of this Evaluation.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def reputation(self):
        """Gets the reputation of this Evaluation.  # noqa: E501

        IP reputation as classified by the proxy.  # noqa: E501

        :return: The reputation of this Evaluation.  # noqa: E501
        :rtype: list[str]
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this Evaluation.

        IP reputation as classified by the proxy.  # noqa: E501

        :param reputation: The reputation of this Evaluation.  # noqa: E501
        :type: list[str]
        """

        self._reputation = reputation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evaluation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
