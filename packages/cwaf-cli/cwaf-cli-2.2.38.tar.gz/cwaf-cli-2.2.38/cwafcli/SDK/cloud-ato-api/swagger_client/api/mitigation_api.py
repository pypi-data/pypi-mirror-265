# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MitigationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_mitigation_config(self, site_id, **kwargs):  # noqa: E501
        """Get the mitigation configuration for a specific site.  # noqa: E501

        Pass a comma-separated string of endpoint ids in order to get the mitigation configuration just for those ones. If not passed, this API will retrieve the mitigation configuration for all endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mitigation_config(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :param str endpoint_ids: Comma-separated list of endpoint ids
        :return: list[MitigationRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mitigation_config_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mitigation_config_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_mitigation_config_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Get the mitigation configuration for a specific site.  # noqa: E501

        Pass a comma-separated string of endpoint ids in order to get the mitigation configuration just for those ones. If not passed, this API will retrieve the mitigation configuration for all endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mitigation_config_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :param str endpoint_ids: Comma-separated list of endpoint ids
        :return: list[MitigationRequest]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'caid', 'endpoint_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mitigation_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_mitigation_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'endpoint_ids' in params:
            query_params.append(('endpointIds', params['endpoint_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/mitigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MitigationRequest]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_mitigation_config_for_endpoints(self, body, site_id, **kwargs):  # noqa: E501
        """Change the mitigation configuration for a specific site and endpoint. The actions (low, medium, high) should all be in UPPER CASE.  # noqa: E501

        Possible values for actions are: NONE, CAPTCHA, BLOCK, TARPIT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mitigation_config_for_endpoints(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MitigationRequest] body: Specify endpoint ID and mitigation actions list (required)
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_mitigation_config_for_endpoints_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_mitigation_config_for_endpoints_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def set_mitigation_config_for_endpoints_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Change the mitigation configuration for a specific site and endpoint. The actions (low, medium, high) should all be in UPPER CASE.  # noqa: E501

        Possible values for actions are: NONE, CAPTCHA, BLOCK, TARPIT.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_mitigation_config_for_endpoints_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MitigationRequest] body: Specify endpoint ID and mitigation actions list (required)
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_mitigation_config_for_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_mitigation_config_for_endpoints`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `set_mitigation_config_for_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/mitigation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
