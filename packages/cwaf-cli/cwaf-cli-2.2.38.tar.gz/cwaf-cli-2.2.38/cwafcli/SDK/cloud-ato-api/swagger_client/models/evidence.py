# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Evidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request': 'Request',
        'device_stats': 'DeviceStats',
        'evaluation': 'Evaluation'
    }

    attribute_map = {
        'request': 'request',
        'device_stats': 'deviceStats',
        'evaluation': 'evaluation'
    }

    def __init__(self, request=None, device_stats=None, evaluation=None):  # noqa: E501
        """Evidence - a model defined in Swagger"""  # noqa: E501
        self._request = None
        self._device_stats = None
        self._evaluation = None
        self.discriminator = None
        if request is not None:
            self.request = request
        if device_stats is not None:
            self.device_stats = device_stats
        if evaluation is not None:
            self.evaluation = evaluation

    @property
    def request(self):
        """Gets the request of this Evidence.  # noqa: E501


        :return: The request of this Evidence.  # noqa: E501
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this Evidence.


        :param request: The request of this Evidence.  # noqa: E501
        :type: Request
        """

        self._request = request

    @property
    def device_stats(self):
        """Gets the device_stats of this Evidence.  # noqa: E501


        :return: The device_stats of this Evidence.  # noqa: E501
        :rtype: DeviceStats
        """
        return self._device_stats

    @device_stats.setter
    def device_stats(self, device_stats):
        """Sets the device_stats of this Evidence.


        :param device_stats: The device_stats of this Evidence.  # noqa: E501
        :type: DeviceStats
        """

        self._device_stats = device_stats

    @property
    def evaluation(self):
        """Gets the evaluation of this Evidence.  # noqa: E501


        :return: The evaluation of this Evidence.  # noqa: E501
        :rtype: Evaluation
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation):
        """Sets the evaluation of this Evidence.


        :param evaluation: The evaluation of this Evidence.  # noqa: E501
        :type: Evaluation
        """

        self._evaluation = evaluation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
