# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EvidenceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pii_password': 'str',
        'endpoint_id': 'int',
        'start_time': 'int',
        'end_time': 'int',
        'range_hours': 'int'
    }

    attribute_map = {
        'pii_password': 'piiPassword',
        'endpoint_id': 'endpointId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'range_hours': 'rangeHours'
    }

    def __init__(self, pii_password=None, endpoint_id=None, start_time=None, end_time=None, range_hours=None):  # noqa: E501
        """EvidenceRequest - a model defined in Swagger"""  # noqa: E501
        self._pii_password = None
        self._endpoint_id = None
        self._start_time = None
        self._end_time = None
        self._range_hours = None
        self.discriminator = None
        if pii_password is not None:
            self.pii_password = pii_password
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if range_hours is not None:
            self.range_hours = range_hours

    @property
    def pii_password(self):
        """Gets the pii_password of this EvidenceRequest.  # noqa: E501

        Specify the PII password used to encrypt login information. If not specified, the user names will be hashed or encrypted.  # noqa: E501

        :return: The pii_password of this EvidenceRequest.  # noqa: E501
        :rtype: str
        """
        return self._pii_password

    @pii_password.setter
    def pii_password(self, pii_password):
        """Sets the pii_password of this EvidenceRequest.

        Specify the PII password used to encrypt login information. If not specified, the user names will be hashed or encrypted.  # noqa: E501

        :param pii_password: The pii_password of this EvidenceRequest.  # noqa: E501
        :type: str
        """

        self._pii_password = pii_password

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this EvidenceRequest.  # noqa: E501

        Optional: Specify the endpoint ID you would like to fetch information for. If not specified, all endpoints would be used. If no endpoint ID is supplied, the default will be all endpoints.  # noqa: E501

        :return: The endpoint_id of this EvidenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this EvidenceRequest.

        Optional: Specify the endpoint ID you would like to fetch information for. If not specified, all endpoints would be used. If no endpoint ID is supplied, the default will be all endpoints.  # noqa: E501

        :param endpoint_id: The endpoint_id of this EvidenceRequest.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    @property
    def start_time(self):
        """Gets the start_time of this EvidenceRequest.  # noqa: E501

        Specify the timestamp, in UNIX Epoch milliseconds, from which events are retrieved.  # noqa: E501

        :return: The start_time of this EvidenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EvidenceRequest.

        Specify the timestamp, in UNIX Epoch milliseconds, from which events are retrieved.  # noqa: E501

        :param start_time: The start_time of this EvidenceRequest.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this EvidenceRequest.  # noqa: E501

        Specify the timestamp, in UNIX Epoch milliseconds, to which events are retrieved.  # noqa: E501

        :return: The end_time of this EvidenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EvidenceRequest.

        Specify the timestamp, in UNIX Epoch milliseconds, to which events are retrieved.  # noqa: E501

        :param end_time: The end_time of this EvidenceRequest.  # noqa: E501
        :type: int
        """

        self._end_time = end_time

    @property
    def range_hours(self):
        """Gets the range_hours of this EvidenceRequest.  # noqa: E501

        Specify the range, in hours, for which events are retrieved. If specified, range will be used. If not specified, startTime and endTime will be used instead.  # noqa: E501

        :return: The range_hours of this EvidenceRequest.  # noqa: E501
        :rtype: int
        """
        return self._range_hours

    @range_hours.setter
    def range_hours(self, range_hours):
        """Sets the range_hours of this EvidenceRequest.

        Specify the range, in hours, for which events are retrieved. If specified, range will be used. If not specified, startTime and endTime will be used instead.  # noqa: E501

        :param range_hours: The range_hours of this EvidenceRequest.  # noqa: E501
        :type: int
        """

        self._range_hours = range_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EvidenceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EvidenceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
