# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PiiConfigPassword(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'str',
        'proposed': 'str'
    }

    attribute_map = {
        'current': 'current',
        'proposed': 'proposed'
    }

    def __init__(self, current=None, proposed=None):  # noqa: E501
        """PiiConfigPassword - a model defined in Swagger"""  # noqa: E501
        self._current = None
        self._proposed = None
        self.discriminator = None
        if current is not None:
            self.current = current
        if proposed is not None:
            self.proposed = proposed

    @property
    def current(self):
        """Gets the current of this PiiConfigPassword.  # noqa: E501

        Current password.  # noqa: E501

        :return: The current of this PiiConfigPassword.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this PiiConfigPassword.

        Current password.  # noqa: E501

        :param current: The current of this PiiConfigPassword.  # noqa: E501
        :type: str
        """

        self._current = current

    @property
    def proposed(self):
        """Gets the proposed of this PiiConfigPassword.  # noqa: E501

        Proposed password.  # noqa: E501

        :return: The proposed of this PiiConfigPassword.  # noqa: E501
        :rtype: str
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this PiiConfigPassword.

        Proposed password.  # noqa: E501

        :param proposed: The proposed of this PiiConfigPassword.  # noqa: E501
        :type: str
        """

        self._proposed = proposed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PiiConfigPassword, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PiiConfigPassword):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
