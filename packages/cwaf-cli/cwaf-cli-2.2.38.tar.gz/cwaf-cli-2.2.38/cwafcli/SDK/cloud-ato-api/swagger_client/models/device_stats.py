# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'failed_logins': 'int',
        'fingerprint': 'str',
        'leaked_credentials': 'int',
        'risk': 'str',
        'successful_logins': 'int'
    }

    attribute_map = {
        'failed_logins': 'failedLogins',
        'fingerprint': 'fingerprint',
        'leaked_credentials': 'leakedCredentials',
        'risk': 'risk',
        'successful_logins': 'successfulLogins'
    }

    def __init__(self, failed_logins=None, fingerprint=None, leaked_credentials=None, risk=None, successful_logins=None):  # noqa: E501
        """DeviceStats - a model defined in Swagger"""  # noqa: E501
        self._failed_logins = None
        self._fingerprint = None
        self._leaked_credentials = None
        self._risk = None
        self._successful_logins = None
        self.discriminator = None
        if failed_logins is not None:
            self.failed_logins = failed_logins
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if leaked_credentials is not None:
            self.leaked_credentials = leaked_credentials
        if risk is not None:
            self.risk = risk
        if successful_logins is not None:
            self.successful_logins = successful_logins

    @property
    def failed_logins(self):
        """Gets the failed_logins of this DeviceStats.  # noqa: E501

        Failed logins in last 24 hours.  # noqa: E501

        :return: The failed_logins of this DeviceStats.  # noqa: E501
        :rtype: int
        """
        return self._failed_logins

    @failed_logins.setter
    def failed_logins(self, failed_logins):
        """Sets the failed_logins of this DeviceStats.

        Failed logins in last 24 hours.  # noqa: E501

        :param failed_logins: The failed_logins of this DeviceStats.  # noqa: E501
        :type: int
        """

        self._failed_logins = failed_logins

    @property
    def fingerprint(self):
        """Gets the fingerprint of this DeviceStats.  # noqa: E501

        Client fingerprint.  # noqa: E501

        :return: The fingerprint of this DeviceStats.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this DeviceStats.

        Client fingerprint.  # noqa: E501

        :param fingerprint: The fingerprint of this DeviceStats.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def leaked_credentials(self):
        """Gets the leaked_credentials of this DeviceStats.  # noqa: E501

        Number of leaked credentials used to login in last 24 hours.  # noqa: E501

        :return: The leaked_credentials of this DeviceStats.  # noqa: E501
        :rtype: int
        """
        return self._leaked_credentials

    @leaked_credentials.setter
    def leaked_credentials(self, leaked_credentials):
        """Sets the leaked_credentials of this DeviceStats.

        Number of leaked credentials used to login in last 24 hours.  # noqa: E501

        :param leaked_credentials: The leaked_credentials of this DeviceStats.  # noqa: E501
        :type: int
        """

        self._leaked_credentials = leaked_credentials

    @property
    def risk(self):
        """Gets the risk of this DeviceStats.  # noqa: E501

        Probability that this event was part of an attack, as computed post-factum.  # noqa: E501

        :return: The risk of this DeviceStats.  # noqa: E501
        :rtype: str
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this DeviceStats.

        Probability that this event was part of an attack, as computed post-factum.  # noqa: E501

        :param risk: The risk of this DeviceStats.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if risk not in allowed_values:
            raise ValueError(
                "Invalid value for `risk` ({0}), must be one of {1}"  # noqa: E501
                .format(risk, allowed_values)
            )

        self._risk = risk

    @property
    def successful_logins(self):
        """Gets the successful_logins of this DeviceStats.  # noqa: E501

        Successful logins in last 24 hours.  # noqa: E501

        :return: The successful_logins of this DeviceStats.  # noqa: E501
        :rtype: int
        """
        return self._successful_logins

    @successful_logins.setter
    def successful_logins(self, successful_logins):
        """Sets the successful_logins of this DeviceStats.

        Successful logins in last 24 hours.  # noqa: E501

        :param successful_logins: The successful_logins of this DeviceStats.  # noqa: E501
        :type: int
        """

        self._successful_logins = successful_logins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
