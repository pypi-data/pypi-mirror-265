# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client': 'TopSource',
        'country': 'TopSource',
        'ip': 'TopSource',
        'ip_fingerprint': 'TopSource',
        'reputation': 'TopSource'
    }

    attribute_map = {
        'client': 'client',
        'country': 'country',
        'ip': 'ip',
        'ip_fingerprint': 'ipFingerprint',
        'reputation': 'reputation'
    }

    def __init__(self, client=None, country=None, ip=None, ip_fingerprint=None, reputation=None):  # noqa: E501
        """TopStats - a model defined in Swagger"""  # noqa: E501
        self._client = None
        self._country = None
        self._ip = None
        self._ip_fingerprint = None
        self._reputation = None
        self.discriminator = None
        if client is not None:
            self.client = client
        if country is not None:
            self.country = country
        if ip is not None:
            self.ip = ip
        if ip_fingerprint is not None:
            self.ip_fingerprint = ip_fingerprint
        if reputation is not None:
            self.reputation = reputation

    @property
    def client(self):
        """Gets the client of this TopStats.  # noqa: E501


        :return: The client of this TopStats.  # noqa: E501
        :rtype: TopSource
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this TopStats.


        :param client: The client of this TopStats.  # noqa: E501
        :type: TopSource
        """

        self._client = client

    @property
    def country(self):
        """Gets the country of this TopStats.  # noqa: E501


        :return: The country of this TopStats.  # noqa: E501
        :rtype: TopSource
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TopStats.


        :param country: The country of this TopStats.  # noqa: E501
        :type: TopSource
        """

        self._country = country

    @property
    def ip(self):
        """Gets the ip of this TopStats.  # noqa: E501


        :return: The ip of this TopStats.  # noqa: E501
        :rtype: TopSource
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this TopStats.


        :param ip: The ip of this TopStats.  # noqa: E501
        :type: TopSource
        """

        self._ip = ip

    @property
    def ip_fingerprint(self):
        """Gets the ip_fingerprint of this TopStats.  # noqa: E501


        :return: The ip_fingerprint of this TopStats.  # noqa: E501
        :rtype: TopSource
        """
        return self._ip_fingerprint

    @ip_fingerprint.setter
    def ip_fingerprint(self, ip_fingerprint):
        """Sets the ip_fingerprint of this TopStats.


        :param ip_fingerprint: The ip_fingerprint of this TopStats.  # noqa: E501
        :type: TopSource
        """

        self._ip_fingerprint = ip_fingerprint

    @property
    def reputation(self):
        """Gets the reputation of this TopStats.  # noqa: E501


        :return: The reputation of this TopStats.  # noqa: E501
        :rtype: TopSource
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this TopStats.


        :param reputation: The reputation of this TopStats.  # noqa: E501
        :type: TopSource
        """

        self._reputation = reputation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
