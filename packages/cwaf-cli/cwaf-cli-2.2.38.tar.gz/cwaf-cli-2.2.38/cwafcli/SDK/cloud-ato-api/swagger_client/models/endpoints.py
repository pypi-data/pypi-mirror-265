# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Endpoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_id': 'str',
        'url': 'str',
        'username_parameter': 'str',
        'password_parameter': 'str'
    }

    attribute_map = {
        'endpoint_id': 'endpointId',
        'url': 'url',
        'username_parameter': 'usernameParameter',
        'password_parameter': 'passwordParameter'
    }

    def __init__(self, endpoint_id=None, url=None, username_parameter=None, password_parameter=None):  # noqa: E501
        """Endpoints - a model defined in Swagger"""  # noqa: E501
        self._endpoint_id = None
        self._url = None
        self._username_parameter = None
        self._password_parameter = None
        self.discriminator = None
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if url is not None:
            self.url = url
        if username_parameter is not None:
            self.username_parameter = username_parameter
        if password_parameter is not None:
            self.password_parameter = password_parameter

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this Endpoints.  # noqa: E501

        The endpoint ID  # noqa: E501

        :return: The endpoint_id of this Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this Endpoints.

        The endpoint ID  # noqa: E501

        :param endpoint_id: The endpoint_id of this Endpoints.  # noqa: E501
        :type: str
        """

        self._endpoint_id = endpoint_id

    @property
    def url(self):
        """Gets the url of this Endpoints.  # noqa: E501

        URL configured for this endpoint  # noqa: E501

        :return: The url of this Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Endpoints.

        URL configured for this endpoint  # noqa: E501

        :param url: The url of this Endpoints.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def username_parameter(self):
        """Gets the username_parameter of this Endpoints.  # noqa: E501

        Username parameter configured for this endpoint  # noqa: E501

        :return: The username_parameter of this Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._username_parameter

    @username_parameter.setter
    def username_parameter(self, username_parameter):
        """Sets the username_parameter of this Endpoints.

        Username parameter configured for this endpoint  # noqa: E501

        :param username_parameter: The username_parameter of this Endpoints.  # noqa: E501
        :type: str
        """

        self._username_parameter = username_parameter

    @property
    def password_parameter(self):
        """Gets the password_parameter of this Endpoints.  # noqa: E501

        Password parameter configured for this endpoint  # noqa: E501

        :return: The password_parameter of this Endpoints.  # noqa: E501
        :rtype: str
        """
        return self._password_parameter

    @password_parameter.setter
    def password_parameter(self, password_parameter):
        """Sets the password_parameter of this Endpoints.

        Password parameter configured for this endpoint  # noqa: E501

        :param password_parameter: The password_parameter of this Endpoints.  # noqa: E501
        :type: str
        """

        self._password_parameter = password_parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Endpoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Endpoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
