# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginsTimeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'int',
        'interval_ms': 'int',
        'endpoint_id': 'str',
        'timeline': 'dict(str, RequestTimeline)'
    }

    attribute_map = {
        'start_time': 'startTime',
        'interval_ms': 'intervalMs',
        'endpoint_id': 'endpointId',
        'timeline': 'timeline'
    }

    def __init__(self, start_time=None, interval_ms=None, endpoint_id=None, timeline=None):  # noqa: E501
        """LoginsTimeline - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._interval_ms = None
        self._endpoint_id = None
        self._timeline = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if interval_ms is not None:
            self.interval_ms = interval_ms
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        self.timeline = timeline

    @property
    def start_time(self):
        """Gets the start_time of this LoginsTimeline.  # noqa: E501

        Starting timestamp in UNIX Epoch milliseconds from which this timeline data begins.  # noqa: E501

        :return: The start_time of this LoginsTimeline.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this LoginsTimeline.

        Starting timestamp in UNIX Epoch milliseconds from which this timeline data begins.  # noqa: E501

        :param start_time: The start_time of this LoginsTimeline.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def interval_ms(self):
        """Gets the interval_ms of this LoginsTimeline.  # noqa: E501

        Time interval between data points in milliseconds.  # noqa: E501

        :return: The interval_ms of this LoginsTimeline.  # noqa: E501
        :rtype: int
        """
        return self._interval_ms

    @interval_ms.setter
    def interval_ms(self, interval_ms):
        """Sets the interval_ms of this LoginsTimeline.

        Time interval between data points in milliseconds.  # noqa: E501

        :param interval_ms: The interval_ms of this LoginsTimeline.  # noqa: E501
        :type: int
        """

        self._interval_ms = interval_ms

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this LoginsTimeline.  # noqa: E501

        The endpoint ID related to this login timeline.  # noqa: E501

        :return: The endpoint_id of this LoginsTimeline.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this LoginsTimeline.

        The endpoint ID related to this login timeline.  # noqa: E501

        :param endpoint_id: The endpoint_id of this LoginsTimeline.  # noqa: E501
        :type: str
        """

        self._endpoint_id = endpoint_id

    @property
    def timeline(self):
        """Gets the timeline of this LoginsTimeline.  # noqa: E501


        :return: The timeline of this LoginsTimeline.  # noqa: E501
        :rtype: dict(str, RequestTimeline)
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this LoginsTimeline.


        :param timeline: The timeline of this LoginsTimeline.  # noqa: E501
        :type: dict(str, RequestTimeline)
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")  # noqa: E501

        self._timeline = timeline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginsTimeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginsTimeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
