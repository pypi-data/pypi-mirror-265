# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestTimeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'prev_total': 'int',
        'data': 'list[int]'
    }

    attribute_map = {
        'total': 'total',
        'prev_total': 'prevTotal',
        'data': 'data'
    }

    def __init__(self, total=None, prev_total=None, data=None):  # noqa: E501
        """RequestTimeline - a model defined in Swagger"""  # noqa: E501
        self._total = None
        self._prev_total = None
        self._data = None
        self.discriminator = None
        if total is not None:
            self.total = total
        if prev_total is not None:
            self.prev_total = prev_total
        if data is not None:
            self.data = data

    @property
    def total(self):
        """Gets the total of this RequestTimeline.  # noqa: E501

        Total requests for the current time span selection.  # noqa: E501

        :return: The total of this RequestTimeline.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this RequestTimeline.

        Total requests for the current time span selection.  # noqa: E501

        :param total: The total of this RequestTimeline.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def prev_total(self):
        """Gets the prev_total of this RequestTimeline.  # noqa: E501

        Total requests for the previous time span selection.  # noqa: E501

        :return: The prev_total of this RequestTimeline.  # noqa: E501
        :rtype: int
        """
        return self._prev_total

    @prev_total.setter
    def prev_total(self, prev_total):
        """Sets the prev_total of this RequestTimeline.

        Total requests for the previous time span selection.  # noqa: E501

        :param prev_total: The prev_total of this RequestTimeline.  # noqa: E501
        :type: int
        """

        self._prev_total = prev_total

    @property
    def data(self):
        """Gets the data of this RequestTimeline.  # noqa: E501

        List where every value is the count of login requests for that time interval.  # noqa: E501

        :return: The data of this RequestTimeline.  # noqa: E501
        :rtype: list[int]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RequestTimeline.

        List where every value is the count of login requests for that time interval.  # noqa: E501

        :param data: The data of this RequestTimeline.  # noqa: E501
        :type: list[int]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestTimeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestTimeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
