# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllowlistIp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'mask': 'str',
        'updated': 'int',
        'desc': 'str'
    }

    attribute_map = {
        'ip': 'ip',
        'mask': 'mask',
        'updated': 'updated',
        'desc': 'desc'
    }

    def __init__(self, ip=None, mask=None, updated=None, desc=None):  # noqa: E501
        """AllowlistIp - a model defined in Swagger"""  # noqa: E501
        self._ip = None
        self._mask = None
        self._updated = None
        self._desc = None
        self.discriminator = None
        self.ip = ip
        if mask is not None:
            self.mask = mask
        if updated is not None:
            self.updated = updated
        if desc is not None:
            self.desc = desc

    @property
    def ip(self):
        """Gets the ip of this AllowlistIp.  # noqa: E501

        IP address to exclude. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :return: The ip of this AllowlistIp.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AllowlistIp.

        IP address to exclude. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :param ip: The ip of this AllowlistIp.  # noqa: E501
        :type: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def mask(self):
        """Gets the mask of this AllowlistIp.  # noqa: E501

        [Optional] IP subnet mask to use for excluding a range of IPs. This is the number of bits to use from the IP address as a subnet mask to apply on the source IP of incoming traffic.  # noqa: E501

        :return: The mask of this AllowlistIp.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this AllowlistIp.

        [Optional] IP subnet mask to use for excluding a range of IPs. This is the number of bits to use from the IP address as a subnet mask to apply on the source IP of incoming traffic.  # noqa: E501

        :param mask: The mask of this AllowlistIp.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def updated(self):
        """Gets the updated of this AllowlistIp.  # noqa: E501

        Timestamp, in UNIX Epoch milliseconds, of the latest update of this entry.  # noqa: E501

        :return: The updated of this AllowlistIp.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AllowlistIp.

        Timestamp, in UNIX Epoch milliseconds, of the latest update of this entry.  # noqa: E501

        :param updated: The updated of this AllowlistIp.  # noqa: E501
        :type: int
        """

        self._updated = updated

    @property
    def desc(self):
        """Gets the desc of this AllowlistIp.  # noqa: E501

        Description of the IP/subnet.  # noqa: E501

        :return: The desc of this AllowlistIp.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this AllowlistIp.

        Description of the IP/subnet.  # noqa: E501

        :param desc: The desc of this AllowlistIp.  # noqa: E501
        :type: str
        """

        self._desc = desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowlistIp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllowlistIp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
