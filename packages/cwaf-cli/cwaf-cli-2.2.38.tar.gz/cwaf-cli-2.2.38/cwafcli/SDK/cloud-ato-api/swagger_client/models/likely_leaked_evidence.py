# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LikelyLeakedEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'str',
        'ip': 'str',
        'timestamp': 'int'
    }

    attribute_map = {
        'user': 'user',
        'ip': 'ip',
        'timestamp': 'timestamp'
    }

    def __init__(self, user=None, ip=None, timestamp=None):  # noqa: E501
        """LikelyLeakedEvidence - a model defined in Swagger"""  # noqa: E501
        self._user = None
        self._ip = None
        self._timestamp = None
        self.discriminator = None
        if user is not None:
            self.user = user
        if ip is not None:
            self.ip = ip
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this LikelyLeakedEvidence.  # noqa: E501

        The username of the user sending the login request. If the PII password was specified, the username is returned. If the PII password was not specified or does not match our record, a hashed/encrypted form of the username is returned.  # noqa: E501

        :return: The user of this LikelyLeakedEvidence.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LikelyLeakedEvidence.

        The username of the user sending the login request. If the PII password was specified, the username is returned. If the PII password was not specified or does not match our record, a hashed/encrypted form of the username is returned.  # noqa: E501

        :param user: The user of this LikelyLeakedEvidence.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def ip(self):
        """Gets the ip of this LikelyLeakedEvidence.  # noqa: E501

        IP address from which the login attempt was made. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :return: The ip of this LikelyLeakedEvidence.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this LikelyLeakedEvidence.

        IP address from which the login attempt was made. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :param ip: The ip of this LikelyLeakedEvidence.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def timestamp(self):
        """Gets the timestamp of this LikelyLeakedEvidence.  # noqa: E501

        Timestamp, in UNIX Epoch milliseconds, of the login event.  # noqa: E501

        :return: The timestamp of this LikelyLeakedEvidence.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LikelyLeakedEvidence.

        Timestamp, in UNIX Epoch milliseconds, of the login event.  # noqa: E501

        :param timestamp: The timestamp of this LikelyLeakedEvidence.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LikelyLeakedEvidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LikelyLeakedEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
