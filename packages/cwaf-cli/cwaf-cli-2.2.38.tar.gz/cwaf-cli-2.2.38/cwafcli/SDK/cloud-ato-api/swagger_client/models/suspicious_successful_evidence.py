# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SuspiciousSuccessfulEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'likely_leaked': 'str',
        'aggregators': 'str',
        'suspicious_successful': 'str',
        'mitigated': 'str',
        'leaked': 'str'
    }

    attribute_map = {
        'likely_leaked': 'likelyLeaked',
        'aggregators': 'aggregators',
        'suspicious_successful': 'suspiciousSuccessful',
        'mitigated': 'mitigated',
        'leaked': 'leaked'
    }

    def __init__(self, likely_leaked=None, aggregators=None, suspicious_successful=None, mitigated=None, leaked=None):  # noqa: E501
        """SuspiciousSuccessfulEvidence - a model defined in Swagger"""  # noqa: E501
        self._likely_leaked = None
        self._aggregators = None
        self._suspicious_successful = None
        self._mitigated = None
        self._leaked = None
        self.discriminator = None
        if likely_leaked is not None:
            self.likely_leaked = likely_leaked
        if aggregators is not None:
            self.aggregators = aggregators
        if suspicious_successful is not None:
            self.suspicious_successful = suspicious_successful
        if mitigated is not None:
            self.mitigated = mitigated
        if leaked is not None:
            self.leaked = leaked

    @property
    def likely_leaked(self):
        """Gets the likely_leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501


        :return: The likely_leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :rtype: str
        """
        return self._likely_leaked

    @likely_leaked.setter
    def likely_leaked(self, likely_leaked):
        """Sets the likely_leaked of this SuspiciousSuccessfulEvidence.


        :param likely_leaked: The likely_leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :type: str
        """

        self._likely_leaked = likely_leaked

    @property
    def aggregators(self):
        """Gets the aggregators of this SuspiciousSuccessfulEvidence.  # noqa: E501


        :return: The aggregators of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :rtype: str
        """
        return self._aggregators

    @aggregators.setter
    def aggregators(self, aggregators):
        """Sets the aggregators of this SuspiciousSuccessfulEvidence.


        :param aggregators: The aggregators of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :type: str
        """

        self._aggregators = aggregators

    @property
    def suspicious_successful(self):
        """Gets the suspicious_successful of this SuspiciousSuccessfulEvidence.  # noqa: E501


        :return: The suspicious_successful of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :rtype: str
        """
        return self._suspicious_successful

    @suspicious_successful.setter
    def suspicious_successful(self, suspicious_successful):
        """Sets the suspicious_successful of this SuspiciousSuccessfulEvidence.


        :param suspicious_successful: The suspicious_successful of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :type: str
        """

        self._suspicious_successful = suspicious_successful

    @property
    def mitigated(self):
        """Gets the mitigated of this SuspiciousSuccessfulEvidence.  # noqa: E501


        :return: The mitigated of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :rtype: str
        """
        return self._mitigated

    @mitigated.setter
    def mitigated(self, mitigated):
        """Sets the mitigated of this SuspiciousSuccessfulEvidence.


        :param mitigated: The mitigated of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :type: str
        """

        self._mitigated = mitigated

    @property
    def leaked(self):
        """Gets the leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501


        :return: The leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :rtype: str
        """
        return self._leaked

    @leaked.setter
    def leaked(self, leaked):
        """Sets the leaked of this SuspiciousSuccessfulEvidence.


        :param leaked: The leaked of this SuspiciousSuccessfulEvidence.  # noqa: E501
        :type: str
        """

        self._leaked = leaked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SuspiciousSuccessfulEvidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuspiciousSuccessfulEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
