# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_none': 'dict(str, int)',
        'low': 'dict(str, int)',
        'medium': 'dict(str, int)',
        'high': 'dict(str, int)'
    }

    attribute_map = {
        '_none': 'none',
        'low': 'low',
        'medium': 'medium',
        'high': 'high'
    }

    def __init__(self, _none=None, low=None, medium=None, high=None):  # noqa: E501
        """TopSource - a model defined in Swagger"""  # noqa: E501
        self.__none = None
        self._low = None
        self._medium = None
        self._high = None
        self.discriminator = None
        if _none is not None:
            self._none = _none
        if low is not None:
            self.low = low
        if medium is not None:
            self.medium = medium
        if high is not None:
            self.high = high

    @property
    def _none(self):
        """Gets the _none of this TopSource.  # noqa: E501

        Top source by type mapped to a count of requests with risk level \"none\".  # noqa: E501

        :return: The _none of this TopSource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self.__none

    @_none.setter
    def _none(self, _none):
        """Sets the _none of this TopSource.

        Top source by type mapped to a count of requests with risk level \"none\".  # noqa: E501

        :param _none: The _none of this TopSource.  # noqa: E501
        :type: dict(str, int)
        """

        self.__none = _none

    @property
    def low(self):
        """Gets the low of this TopSource.  # noqa: E501

        Top source by type mapped to a count of requests with risk level \"low\".  # noqa: E501

        :return: The low of this TopSource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this TopSource.

        Top source by type mapped to a count of requests with risk level \"low\".  # noqa: E501

        :param low: The low of this TopSource.  # noqa: E501
        :type: dict(str, int)
        """

        self._low = low

    @property
    def medium(self):
        """Gets the medium of this TopSource.  # noqa: E501

        Top source by type mapped to a count of requests with risk level \"medium\".  # noqa: E501

        :return: The medium of this TopSource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this TopSource.

        Top source by type mapped to a count of requests with risk level \"medium\".  # noqa: E501

        :param medium: The medium of this TopSource.  # noqa: E501
        :type: dict(str, int)
        """

        self._medium = medium

    @property
    def high(self):
        """Gets the high of this TopSource.  # noqa: E501

        Top source by type mapped to a count of requests with risk level \"high\".  # noqa: E501

        :return: The high of this TopSource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this TopSource.

        Top source by type mapped to a count of requests with risk level \"high\".  # noqa: E501

        :param high: The high of this TopSource.  # noqa: E501
        :type: dict(str, int)
        """

        self._high = high

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
