# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'website_name': 'str',
        'is_mitigation_on': 'bool'
    }

    attribute_map = {
        'site_id': 'siteId',
        'website_name': 'websiteName',
        'is_mitigation_on': 'isMitigationOn'
    }

    def __init__(self, site_id=None, website_name=None, is_mitigation_on=None):  # noqa: E501
        """SiteStatus - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._website_name = None
        self._is_mitigation_on = None
        self.discriminator = None
        if site_id is not None:
            self.site_id = site_id
        if website_name is not None:
            self.website_name = website_name
        if is_mitigation_on is not None:
            self.is_mitigation_on = is_mitigation_on

    @property
    def site_id(self):
        """Gets the site_id of this SiteStatus.  # noqa: E501

        The Imperva website ID  # noqa: E501

        :return: The site_id of this SiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this SiteStatus.

        The Imperva website ID  # noqa: E501

        :param site_id: The site_id of this SiteStatus.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def website_name(self):
        """Gets the website_name of this SiteStatus.  # noqa: E501

        The site name (URL)  # noqa: E501

        :return: The website_name of this SiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._website_name

    @website_name.setter
    def website_name(self, website_name):
        """Sets the website_name of this SiteStatus.

        The site name (URL)  # noqa: E501

        :param website_name: The website_name of this SiteStatus.  # noqa: E501
        :type: str
        """

        self._website_name = website_name

    @property
    def is_mitigation_on(self):
        """Gets the is_mitigation_on of this SiteStatus.  # noqa: E501

        The site mitigation status (true/false)  # noqa: E501

        :return: The is_mitigation_on of this SiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_mitigation_on

    @is_mitigation_on.setter
    def is_mitigation_on(self, is_mitigation_on):
        """Sets the is_mitigation_on of this SiteStatus.

        The site mitigation status (true/false)  # noqa: E501

        :param is_mitigation_on: The is_mitigation_on of this SiteStatus.  # noqa: E501
        :type: bool
        """

        self._is_mitigation_on = is_mitigation_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
