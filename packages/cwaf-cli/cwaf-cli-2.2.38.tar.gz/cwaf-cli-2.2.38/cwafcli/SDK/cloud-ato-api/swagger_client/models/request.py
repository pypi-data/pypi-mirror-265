# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Request(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'str',
        'client': 'str',
        'declared_client': 'str',
        'clients': 'list[str]',
        'declared_clients': 'list[str]',
        'request_id': 'int',
        'session_id': 'int',
        'ip': 'str',
        'timestamp': 'int',
        'path': 'str',
        'country': 'str',
        'referrer': 'str'
    }

    attribute_map = {
        'user': 'user',
        'client': 'client',
        'declared_client': 'declaredClient',
        'clients': 'clients',
        'declared_clients': 'declaredClients',
        'request_id': 'requestId',
        'session_id': 'sessionId',
        'ip': 'ip',
        'timestamp': 'timestamp',
        'path': 'path',
        'country': 'country',
        'referrer': 'referrer'
    }

    def __init__(self, user=None, client=None, declared_client=None, clients=None, declared_clients=None, request_id=None, session_id=None, ip=None, timestamp=None, path=None, country=None, referrer=None):  # noqa: E501
        """Request - a model defined in Swagger"""  # noqa: E501
        self._user = None
        self._client = None
        self._declared_client = None
        self._clients = None
        self._declared_clients = None
        self._request_id = None
        self._session_id = None
        self._ip = None
        self._timestamp = None
        self._path = None
        self._country = None
        self._referrer = None
        self.discriminator = None
        if user is not None:
            self.user = user
        if client is not None:
            self.client = client
        if declared_client is not None:
            self.declared_client = declared_client
        if clients is not None:
            self.clients = clients
        if declared_clients is not None:
            self.declared_clients = declared_clients
        if request_id is not None:
            self.request_id = request_id
        if session_id is not None:
            self.session_id = session_id
        if ip is not None:
            self.ip = ip
        if timestamp is not None:
            self.timestamp = timestamp
        if path is not None:
            self.path = path
        if country is not None:
            self.country = country
        if referrer is not None:
            self.referrer = referrer

    @property
    def user(self):
        """Gets the user of this Request.  # noqa: E501

        The username of the user sending the login request. If the PII password was specified, the username is returned. If the PII password was not specified or does not match our record, a hashed/encrypted form of the username is returned.  # noqa: E501

        :return: The user of this Request.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Request.

        The username of the user sending the login request. If the PII password was specified, the username is returned. If the PII password was not specified or does not match our record, a hashed/encrypted form of the username is returned.  # noqa: E501

        :param user: The user of this Request.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def client(self):
        """Gets the client of this Request.  # noqa: E501

        The client application used to send the request.  # noqa: E501

        :return: The client of this Request.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Request.

        The client application used to send the request.  # noqa: E501

        :param client: The client of this Request.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def declared_client(self):
        """Gets the declared_client of this Request.  # noqa: E501

        The client application used to send the request, according to the declaration in the UserAgent HTTP header.  # noqa: E501

        :return: The declared_client of this Request.  # noqa: E501
        :rtype: str
        """
        return self._declared_client

    @declared_client.setter
    def declared_client(self, declared_client):
        """Sets the declared_client of this Request.

        The client application used to send the request, according to the declaration in the UserAgent HTTP header.  # noqa: E501

        :param declared_client: The declared_client of this Request.  # noqa: E501
        :type: str
        """

        self._declared_client = declared_client

    @property
    def clients(self):
        """Gets the clients of this Request.  # noqa: E501

        All client applications used to send requests during the specified timeframe.  # noqa: E501

        :return: The clients of this Request.  # noqa: E501
        :rtype: list[str]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this Request.

        All client applications used to send requests during the specified timeframe.  # noqa: E501

        :param clients: The clients of this Request.  # noqa: E501
        :type: list[str]
        """

        self._clients = clients

    @property
    def declared_clients(self):
        """Gets the declared_clients of this Request.  # noqa: E501

        All client applications used to send requests during the specified timeframe, according to the declaration in the UserAgent HTTP header.  # noqa: E501

        :return: The declared_clients of this Request.  # noqa: E501
        :rtype: list[str]
        """
        return self._declared_clients

    @declared_clients.setter
    def declared_clients(self, declared_clients):
        """Sets the declared_clients of this Request.

        All client applications used to send requests during the specified timeframe, according to the declaration in the UserAgent HTTP header.  # noqa: E501

        :param declared_clients: The declared_clients of this Request.  # noqa: E501
        :type: list[str]
        """

        self._declared_clients = declared_clients

    @property
    def request_id(self):
        """Gets the request_id of this Request.  # noqa: E501

        A unique identifier assigned to the request.  # noqa: E501

        :return: The request_id of this Request.  # noqa: E501
        :rtype: int
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Request.

        A unique identifier assigned to the request.  # noqa: E501

        :param request_id: The request_id of this Request.  # noqa: E501
        :type: int
        """

        self._request_id = request_id

    @property
    def session_id(self):
        """Gets the session_id of this Request.  # noqa: E501

        A unique identifier assigned to the session.  # noqa: E501

        :return: The session_id of this Request.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Request.

        A unique identifier assigned to the session.  # noqa: E501

        :param session_id: The session_id of this Request.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def ip(self):
        """Gets the ip of this Request.  # noqa: E501

        IP address from which the login attempt was made. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :return: The ip of this Request.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Request.

        IP address from which the login attempt was made. This will be either an IPv4 (e.g. 50.3.183.2) or normalized IPv6 representation (e.g. 2001:db8:0:0:1:0:0:1).  # noqa: E501

        :param ip: The ip of this Request.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def timestamp(self):
        """Gets the timestamp of this Request.  # noqa: E501

        Timestamp, in UNIX Epoch milliseconds, of the login event.  # noqa: E501

        :return: The timestamp of this Request.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Request.

        Timestamp, in UNIX Epoch milliseconds, of the login event.  # noqa: E501

        :param timestamp: The timestamp of this Request.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def path(self):
        """Gets the path of this Request.  # noqa: E501

        The login request endpoint path.  # noqa: E501

        :return: The path of this Request.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Request.

        The login request endpoint path.  # noqa: E501

        :param path: The path of this Request.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def country(self):
        """Gets the country of this Request.  # noqa: E501

        Country code where the login attempt was made.  # noqa: E501

        :return: The country of this Request.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Request.

        Country code where the login attempt was made.  # noqa: E501

        :param country: The country of this Request.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def referrer(self):
        """Gets the referrer of this Request.  # noqa: E501

        The URL of the referring page.  # noqa: E501

        :return: The referrer of this Request.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Request.

        The URL of the referring page.  # noqa: E501

        :param referrer: The referrer of this Request.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Request, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
