# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_endpoint_configuration_from_site_to_another_site(self, site_id, target_site_id, **kwargs):  # noqa: E501
        """Copy a single login endpoint, or all of them, from the \"source\" website to the \"target\" website under the same account ID  # noqa: E501

        Both sites must be under the same account ID (no sub-accounts support yet). In addition, mitigation settings are not copied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_endpoint_configuration_from_site_to_another_site(site_id, target_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the \"source\" website (the website we copy from) (required)
        :param int target_site_id: The Imperva ID of the \"target\" website (the website we want to copy the endpoint config to) (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :param str endpoint_id: Optional: pass an endpoint ID to copy, if none passed all endpoints will be copied
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_endpoint_configuration_from_site_to_another_site_with_http_info(site_id, target_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_endpoint_configuration_from_site_to_another_site_with_http_info(site_id, target_site_id, **kwargs)  # noqa: E501
            return data

    def copy_endpoint_configuration_from_site_to_another_site_with_http_info(self, site_id, target_site_id, **kwargs):  # noqa: E501
        """Copy a single login endpoint, or all of them, from the \"source\" website to the \"target\" website under the same account ID  # noqa: E501

        Both sites must be under the same account ID (no sub-accounts support yet). In addition, mitigation settings are not copied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_endpoint_configuration_from_site_to_another_site_with_http_info(site_id, target_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the \"source\" website (the website we copy from) (required)
        :param int target_site_id: The Imperva ID of the \"target\" website (the website we want to copy the endpoint config to) (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :param str endpoint_id: Optional: pass an endpoint ID to copy, if none passed all endpoints will be copied
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'target_site_id', 'caid', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_endpoint_configuration_from_site_to_another_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `copy_endpoint_configuration_from_site_to_another_site`")  # noqa: E501
        # verify the required parameter 'target_site_id' is set
        if ('target_site_id' not in params or
                params['target_site_id'] is None):
            raise ValueError("Missing the required parameter `target_site_id` when calling `copy_endpoint_configuration_from_site_to_another_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'target_site_id' in params:
            path_params['target-site-id'] = params['target_site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/onboard/copy-to/{target-site-id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_endpoint(self, endpoint_id, site_id, **kwargs):  # noqa: E501
        """Delete an endpoint for this website  # noqa: E501

        Delete the specified endpoint from the specified website.If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoint(endpoint_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The endpoint ID to delete (required)
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_endpoint_with_http_info(endpoint_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_endpoint_with_http_info(endpoint_id, site_id, **kwargs)  # noqa: E501
            return data

    def delete_endpoint_with_http_info(self, endpoint_id, site_id, **kwargs):  # noqa: E501
        """Delete an endpoint for this website  # noqa: E501

        Delete the specified endpoint from the specified website.If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_endpoint_with_http_info(endpoint_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str endpoint_id: The endpoint ID to delete (required)
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['endpoint_id', 'site_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_endpoint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'endpoint_id' is set
        if ('endpoint_id' not in params or
                params['endpoint_id'] is None):
            raise ValueError("Missing the required parameter `endpoint_id` when calling `delete_endpoint`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_endpoint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'endpoint_id' in params:
            path_params['endpointId'] = params['endpoint_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/endpoint/{endpointId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_endpoints(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all the onboarded login endpoints for this website  # noqa: E501

        Retrieve a list of all onboarded login endpoints for your website. Each endpoint will include its id, url, username and password parameters. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: list[Endpoints]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_endpoints_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_endpoints_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_endpoints_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all the onboarded login endpoints for this website  # noqa: E501

        Retrieve a list of all onboarded login endpoints for your website. Each endpoint will include its id, url, username and password parameters. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_endpoints_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID of the website (required)
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: list[Endpoints]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/endpoints', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Endpoints]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_onboarded_sites_with_mitigation_status(self, **kwargs):  # noqa: E501
        """Retrieve all onboarded sites with their mitigation status.  # noqa: E501

        Retrieve a list of all onboarded sites for the account ID. Each site will include the Imperva website ID, site name, and mitigation status. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_onboarded_sites_with_mitigation_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: list[SiteStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_onboarded_sites_with_mitigation_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_onboarded_sites_with_mitigation_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_onboarded_sites_with_mitigation_status_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all onboarded sites with their mitigation status.  # noqa: E501

        Retrieve a list of all onboarded sites for the account ID. Each site will include the Imperva website ID, site name, and mitigation status. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_onboarded_sites_with_mitigation_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: The Imperva account ID. By default, the API operates on account (A) associated with the API credentials used for authentication. To operate on a different account (an account under the account (A)), specify the account ID.
        :return: list[SiteStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_onboarded_sites_with_mitigation_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
