# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MitigationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_id': 'str',
        'low_action': 'str',
        'medium_action': 'str',
        'high_action': 'str'
    }

    attribute_map = {
        'endpoint_id': 'endpointId',
        'low_action': 'lowAction',
        'medium_action': 'mediumAction',
        'high_action': 'highAction'
    }

    def __init__(self, endpoint_id=None, low_action=None, medium_action=None, high_action=None):  # noqa: E501
        """MitigationRequest - a model defined in Swagger"""  # noqa: E501
        self._endpoint_id = None
        self._low_action = None
        self._medium_action = None
        self._high_action = None
        self.discriminator = None
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if low_action is not None:
            self.low_action = low_action
        if medium_action is not None:
            self.medium_action = medium_action
        if high_action is not None:
            self.high_action = high_action

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this MitigationRequest.  # noqa: E501

        Endpoint ID associated with this request.  # noqa: E501

        :return: The endpoint_id of this MitigationRequest.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this MitigationRequest.

        Endpoint ID associated with this request.  # noqa: E501

        :param endpoint_id: The endpoint_id of this MitigationRequest.  # noqa: E501
        :type: str
        """

        self._endpoint_id = endpoint_id

    @property
    def low_action(self):
        """Gets the low_action of this MitigationRequest.  # noqa: E501

        Mitigation action configured for low risk requests - in UPPER CASE.  # noqa: E501

        :return: The low_action of this MitigationRequest.  # noqa: E501
        :rtype: str
        """
        return self._low_action

    @low_action.setter
    def low_action(self, low_action):
        """Sets the low_action of this MitigationRequest.

        Mitigation action configured for low risk requests - in UPPER CASE.  # noqa: E501

        :param low_action: The low_action of this MitigationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CAPTCHA", "BLOCK", "TARPIT"]  # noqa: E501
        if low_action not in allowed_values:
            raise ValueError(
                "Invalid value for `low_action` ({0}), must be one of {1}"  # noqa: E501
                .format(low_action, allowed_values)
            )

        self._low_action = low_action

    @property
    def medium_action(self):
        """Gets the medium_action of this MitigationRequest.  # noqa: E501

        Mitigation action configured for medium risk requests - in UPPER CASE.  # noqa: E501

        :return: The medium_action of this MitigationRequest.  # noqa: E501
        :rtype: str
        """
        return self._medium_action

    @medium_action.setter
    def medium_action(self, medium_action):
        """Sets the medium_action of this MitigationRequest.

        Mitigation action configured for medium risk requests - in UPPER CASE.  # noqa: E501

        :param medium_action: The medium_action of this MitigationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CAPTCHA", "BLOCK", "TARPIT"]  # noqa: E501
        if medium_action not in allowed_values:
            raise ValueError(
                "Invalid value for `medium_action` ({0}), must be one of {1}"  # noqa: E501
                .format(medium_action, allowed_values)
            )

        self._medium_action = medium_action

    @property
    def high_action(self):
        """Gets the high_action of this MitigationRequest.  # noqa: E501

        Mitigation action configured for high risk requests - in UPPER CASE.  # noqa: E501

        :return: The high_action of this MitigationRequest.  # noqa: E501
        :rtype: str
        """
        return self._high_action

    @high_action.setter
    def high_action(self, high_action):
        """Sets the high_action of this MitigationRequest.

        Mitigation action configured for high risk requests - in UPPER CASE.  # noqa: E501

        :param high_action: The high_action of this MitigationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "CAPTCHA", "BLOCK", "TARPIT"]  # noqa: E501
        if high_action not in allowed_values:
            raise ValueError(
                "Invalid value for `high_action` ({0}), must be one of {1}"  # noqa: E501
                .format(high_action, allowed_values)
            )

        self._high_action = high_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MitigationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MitigationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
