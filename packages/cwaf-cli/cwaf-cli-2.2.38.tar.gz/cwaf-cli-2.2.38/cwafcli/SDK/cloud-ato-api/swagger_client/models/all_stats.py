# coding: utf-8

"""
    Account Takeover Protection API

    This is the API documentation for Imperva Account Takeover Protection. ATO detects and mitigates account takeover attempts, protecting your web applications against volumetric and low and slow ATO attacks. For the full feature documentation, see https://docs.imperva.com/bundle/account-takeover.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'users': 'AllUserStats',
        'top': 'TopStats'
    }

    attribute_map = {
        'users': 'users',
        'top': 'top'
    }

    def __init__(self, users=None, top=None):  # noqa: E501
        """AllStats - a model defined in Swagger"""  # noqa: E501
        self._users = None
        self._top = None
        self.discriminator = None
        if users is not None:
            self.users = users
        if top is not None:
            self.top = top

    @property
    def users(self):
        """Gets the users of this AllStats.  # noqa: E501


        :return: The users of this AllStats.  # noqa: E501
        :rtype: AllUserStats
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this AllStats.


        :param users: The users of this AllStats.  # noqa: E501
        :type: AllUserStats
        """

        self._users = users

    @property
    def top(self):
        """Gets the top of this AllStats.  # noqa: E501


        :return: The top of this AllStats.  # noqa: E501
        :rtype: TopStats
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this AllStats.


        :param top: The top of this AllStats.  # noqa: E501
        :type: TopStats
        """

        self._top = top

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
