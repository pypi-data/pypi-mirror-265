# coding: utf-8

"""
    Imperva Usage Management API

    Access the usage history for your account using the API. For the full feature documentation, see [View Account Usage](https://docs.imperva.com/bundle/cloud-application-security/page/usage-report.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionUsageRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'subscription_id': 'str',
        'account_id': 'int',
        'record_status': 'str',
        'usage_cycle_day': 'int',
        'cycle_start_date': 'date',
        'cycle_end_date': 'date',
        'resource_usage_records': 'list[ResourceUsageRecord]',
        'base_plan_sku_display_names': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'subscription_id': 'subscription_id',
        'account_id': 'account_id',
        'record_status': 'record_status',
        'usage_cycle_day': 'usage_cycle_day',
        'cycle_start_date': 'cycle_start_date',
        'cycle_end_date': 'cycle_end_date',
        'resource_usage_records': 'resource_usage_records',
        'base_plan_sku_display_names': 'base_plan_sku_display_names'
    }

    def __init__(self, id=None, subscription_id=None, account_id=None, record_status=None, usage_cycle_day=None, cycle_start_date=None, cycle_end_date=None, resource_usage_records=None, base_plan_sku_display_names=None):  # noqa: E501
        """SubscriptionUsageRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._subscription_id = None
        self._account_id = None
        self._record_status = None
        self._usage_cycle_day = None
        self._cycle_start_date = None
        self._cycle_end_date = None
        self._resource_usage_records = None
        self._base_plan_sku_display_names = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if account_id is not None:
            self.account_id = account_id
        if record_status is not None:
            self.record_status = record_status
        if usage_cycle_day is not None:
            self.usage_cycle_day = usage_cycle_day
        if cycle_start_date is not None:
            self.cycle_start_date = cycle_start_date
        if cycle_end_date is not None:
            self.cycle_end_date = cycle_end_date
        if resource_usage_records is not None:
            self.resource_usage_records = resource_usage_records
        if base_plan_sku_display_names is not None:
            self.base_plan_sku_display_names = base_plan_sku_display_names

    @property
    def id(self):
        """Gets the id of this SubscriptionUsageRecord.  # noqa: E501

        Subscription Usage Record ID.  # noqa: E501

        :return: The id of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionUsageRecord.

        Subscription Usage Record ID.  # noqa: E501

        :param id: The id of this SubscriptionUsageRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionUsageRecord.  # noqa: E501

        Subscription ID.  # noqa: E501

        :return: The subscription_id of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionUsageRecord.

        Subscription ID.  # noqa: E501

        :param subscription_id: The subscription_id of this SubscriptionUsageRecord.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def account_id(self):
        """Gets the account_id of this SubscriptionUsageRecord.  # noqa: E501

        Account ID.  # noqa: E501

        :return: The account_id of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubscriptionUsageRecord.

        Account ID.  # noqa: E501

        :param account_id: The account_id of this SubscriptionUsageRecord.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def record_status(self):
        """Gets the record_status of this SubscriptionUsageRecord.  # noqa: E501

        Subscription Record Status.  # noqa: E501

        :return: The record_status of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this SubscriptionUsageRecord.

        Subscription Record Status.  # noqa: E501

        :param record_status: The record_status of this SubscriptionUsageRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED", "CLOSED_MID_CYCLE"]  # noqa: E501
        if record_status not in allowed_values:
            raise ValueError(
                "Invalid value for `record_status` ({0}), must be one of {1}"  # noqa: E501
                .format(record_status, allowed_values)
            )

        self._record_status = record_status

    @property
    def usage_cycle_day(self):
        """Gets the usage_cycle_day of this SubscriptionUsageRecord.  # noqa: E501

        The start of the period used for calculating usage. For example, the value 10 indicates that the usage period starts on the 10th of the month and ends on the 9th of the following month.  # noqa: E501

        :return: The usage_cycle_day of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: int
        """
        return self._usage_cycle_day

    @usage_cycle_day.setter
    def usage_cycle_day(self, usage_cycle_day):
        """Sets the usage_cycle_day of this SubscriptionUsageRecord.

        The start of the period used for calculating usage. For example, the value 10 indicates that the usage period starts on the 10th of the month and ends on the 9th of the following month.  # noqa: E501

        :param usage_cycle_day: The usage_cycle_day of this SubscriptionUsageRecord.  # noqa: E501
        :type: int
        """

        self._usage_cycle_day = usage_cycle_day

    @property
    def cycle_start_date(self):
        """Gets the cycle_start_date of this SubscriptionUsageRecord.  # noqa: E501

        The start of the usage cycle.  # noqa: E501

        :return: The cycle_start_date of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: date
        """
        return self._cycle_start_date

    @cycle_start_date.setter
    def cycle_start_date(self, cycle_start_date):
        """Sets the cycle_start_date of this SubscriptionUsageRecord.

        The start of the usage cycle.  # noqa: E501

        :param cycle_start_date: The cycle_start_date of this SubscriptionUsageRecord.  # noqa: E501
        :type: date
        """

        self._cycle_start_date = cycle_start_date

    @property
    def cycle_end_date(self):
        """Gets the cycle_end_date of this SubscriptionUsageRecord.  # noqa: E501

        The end of the usage cycle.  # noqa: E501

        :return: The cycle_end_date of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: date
        """
        return self._cycle_end_date

    @cycle_end_date.setter
    def cycle_end_date(self, cycle_end_date):
        """Sets the cycle_end_date of this SubscriptionUsageRecord.

        The end of the usage cycle.  # noqa: E501

        :param cycle_end_date: The cycle_end_date of this SubscriptionUsageRecord.  # noqa: E501
        :type: date
        """

        self._cycle_end_date = cycle_end_date

    @property
    def resource_usage_records(self):
        """Gets the resource_usage_records of this SubscriptionUsageRecord.  # noqa: E501

        a list of the Subscription's resources' usage records.  # noqa: E501

        :return: The resource_usage_records of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: list[ResourceUsageRecord]
        """
        return self._resource_usage_records

    @resource_usage_records.setter
    def resource_usage_records(self, resource_usage_records):
        """Sets the resource_usage_records of this SubscriptionUsageRecord.

        a list of the Subscription's resources' usage records.  # noqa: E501

        :param resource_usage_records: The resource_usage_records of this SubscriptionUsageRecord.  # noqa: E501
        :type: list[ResourceUsageRecord]
        """

        self._resource_usage_records = resource_usage_records

    @property
    def base_plan_sku_display_names(self):
        """Gets the base_plan_sku_display_names of this SubscriptionUsageRecord.  # noqa: E501

        The name of the subscription plan as displayed in the management console.  # noqa: E501

        :return: The base_plan_sku_display_names of this SubscriptionUsageRecord.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_plan_sku_display_names

    @base_plan_sku_display_names.setter
    def base_plan_sku_display_names(self, base_plan_sku_display_names):
        """Sets the base_plan_sku_display_names of this SubscriptionUsageRecord.

        The name of the subscription plan as displayed in the management console.  # noqa: E501

        :param base_plan_sku_display_names: The base_plan_sku_display_names of this SubscriptionUsageRecord.  # noqa: E501
        :type: list[str]
        """

        self._base_plan_sku_display_names = base_plan_sku_display_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionUsageRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionUsageRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
