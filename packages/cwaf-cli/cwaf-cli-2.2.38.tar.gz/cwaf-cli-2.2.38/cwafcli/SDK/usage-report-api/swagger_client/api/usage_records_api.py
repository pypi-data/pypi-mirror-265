# coding: utf-8

"""
    Imperva Usage Management API

    Access the usage history for your account using the API. For the full feature documentation, see [View Account Usage](https://docs.imperva.com/bundle/cloud-application-security/page/usage-report.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UsageRecordsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_detailed_usage(self, caid, subscription_usage_record_id, resource, **kwargs):  # noqa: E501
        """Retrieve a usage record's detailed information.  # noqa: E501

        Retrieve a usage record's detailed information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_detailed_usage(caid, subscription_usage_record_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param str subscription_usage_record_id: Unique identifier of the subscription usage record. Run the GET /v3/subscription-usage-record API to locate the value of the ‘id’ parameter in the response. (required)
        :param str resource: Resource ID. (required)
        :return: ImpervaApiBodyListDetailedSubscriptionUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_detailed_usage_with_http_info(caid, subscription_usage_record_id, resource, **kwargs)  # noqa: E501
        else:
            (data) = self.get_detailed_usage_with_http_info(caid, subscription_usage_record_id, resource, **kwargs)  # noqa: E501
            return data

    def get_detailed_usage_with_http_info(self, caid, subscription_usage_record_id, resource, **kwargs):  # noqa: E501
        """Retrieve a usage record's detailed information.  # noqa: E501

        Retrieve a usage record's detailed information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_detailed_usage_with_http_info(caid, subscription_usage_record_id, resource, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param str subscription_usage_record_id: Unique identifier of the subscription usage record. Run the GET /v3/subscription-usage-record API to locate the value of the ‘id’ parameter in the response. (required)
        :param str resource: Resource ID. (required)
        :return: ImpervaApiBodyListDetailedSubscriptionUsage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', 'subscription_usage_record_id', 'resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_detailed_usage" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_detailed_usage`")  # noqa: E501
        # verify the required parameter 'subscription_usage_record_id' is set
        if ('subscription_usage_record_id' not in params or
                params['subscription_usage_record_id'] is None):
            raise ValueError("Missing the required parameter `subscription_usage_record_id` when calling `get_detailed_usage`")  # noqa: E501
        # verify the required parameter 'resource' is set
        if ('resource' not in params or
                params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `get_detailed_usage`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'subscription_usage_record_id' in params:
            path_params['subscription-usage-record-id'] = params['subscription_usage_record_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'resource' in params:
            query_params.append(('resource', params['resource']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/subscription-usage-records/{subscription-usage-record-id}/detailed-usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiBodyListDetailedSubscriptionUsage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_usage_summary(self, caid, **kwargs):  # noqa: E501
        """Retrieve a summary of usage records.  # noqa: E501

        Retrieve a summary of usage records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usage_summary(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param date _from: Earliest time boundary, specified as an ISO Date Format yyyy-MM-dd.
        :param date to: Latest time boundary, specified as an ISO Date Format yyyy-MM-dd.
        :param str resource: Resource ID. Possible values : advanced_bot_protection_connector, api_security_anywhere ,bot_management ,infra_protect_always_on_bandwidth, on_demand_throughput, throughput
        :return: ImpervaApiBodyListSubscriptionUsageRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_usage_summary_with_http_info(caid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_usage_summary_with_http_info(caid, **kwargs)  # noqa: E501
            return data

    def get_usage_summary_with_http_info(self, caid, **kwargs):  # noqa: E501
        """Retrieve a summary of usage records.  # noqa: E501

        Retrieve a summary of usage records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_usage_summary_with_http_info(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param date _from: Earliest time boundary, specified as an ISO Date Format yyyy-MM-dd.
        :param date to: Latest time boundary, specified as an ISO Date Format yyyy-MM-dd.
        :param str resource: Resource ID. Possible values : advanced_bot_protection_connector, api_security_anywhere ,bot_management ,infra_protect_always_on_bandwidth, on_demand_throughput, throughput
        :return: ImpervaApiBodyListSubscriptionUsageRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', '_from', 'to', 'resource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_usage_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_usage_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'resource' in params:
            query_params.append(('resource', params['resource']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/subscription-usage-records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImpervaApiBodyListSubscriptionUsageRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
