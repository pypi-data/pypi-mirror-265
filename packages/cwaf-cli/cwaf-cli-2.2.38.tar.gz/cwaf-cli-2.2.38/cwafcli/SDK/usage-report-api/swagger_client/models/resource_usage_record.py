# coding: utf-8

"""
    Imperva Usage Management API

    Access the usage history for your account using the API. For the full feature documentation, see [View Account Usage](https://docs.imperva.com/bundle/cloud-application-security/page/usage-report.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceUsageRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'record_status': 'str',
        'purchased': 'float',
        'trial': 'float',
        'used': 'float',
        'overages': 'float',
        'data_unit': 'str',
        'cycle_start_date': 'date',
        'cycle_end_date': 'date',
        'close_term_reason': 'str',
        'calculated_for_resources': 'list[str]',
        'unlimited_purchase': 'bool',
        'unlimited_trial': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'record_status': 'record_status',
        'purchased': 'purchased',
        'trial': 'trial',
        'used': 'used',
        'overages': 'overages',
        'data_unit': 'data_unit',
        'cycle_start_date': 'cycle_start_date',
        'cycle_end_date': 'cycle_end_date',
        'close_term_reason': 'close_term_reason',
        'calculated_for_resources': 'calculated_for_resources',
        'unlimited_purchase': 'unlimited_purchase',
        'unlimited_trial': 'unlimited_trial'
    }

    def __init__(self, id=None, resource_id=None, resource_name=None, record_status=None, purchased=None, trial=None, used=None, overages=None, data_unit=None, cycle_start_date=None, cycle_end_date=None, close_term_reason=None, calculated_for_resources=None, unlimited_purchase=None, unlimited_trial=None):  # noqa: E501
        """ResourceUsageRecord - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._resource_id = None
        self._resource_name = None
        self._record_status = None
        self._purchased = None
        self._trial = None
        self._used = None
        self._overages = None
        self._data_unit = None
        self._cycle_start_date = None
        self._cycle_end_date = None
        self._close_term_reason = None
        self._calculated_for_resources = None
        self._unlimited_purchase = None
        self._unlimited_trial = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if record_status is not None:
            self.record_status = record_status
        if purchased is not None:
            self.purchased = purchased
        if trial is not None:
            self.trial = trial
        if used is not None:
            self.used = used
        if overages is not None:
            self.overages = overages
        if data_unit is not None:
            self.data_unit = data_unit
        if cycle_start_date is not None:
            self.cycle_start_date = cycle_start_date
        if cycle_end_date is not None:
            self.cycle_end_date = cycle_end_date
        if close_term_reason is not None:
            self.close_term_reason = close_term_reason
        if calculated_for_resources is not None:
            self.calculated_for_resources = calculated_for_resources
        if unlimited_purchase is not None:
            self.unlimited_purchase = unlimited_purchase
        if unlimited_trial is not None:
            self.unlimited_trial = unlimited_trial

    @property
    def id(self):
        """Gets the id of this ResourceUsageRecord.  # noqa: E501

        Resource Usage Record ID.  # noqa: E501

        :return: The id of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResourceUsageRecord.

        Resource Usage Record ID.  # noqa: E501

        :param id: The id of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceUsageRecord.  # noqa: E501

        The ID of the resource.  # noqa: E501

        :return: The resource_id of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceUsageRecord.

        The ID of the resource.  # noqa: E501

        :param resource_id: The resource_id of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceUsageRecord.  # noqa: E501

        The display name of the resource.  # noqa: E501

        :return: The resource_name of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceUsageRecord.

        The display name of the resource.  # noqa: E501

        :param resource_name: The resource_name of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def record_status(self):
        """Gets the record_status of this ResourceUsageRecord.  # noqa: E501

        The status of this resource usage record.  # noqa: E501

        :return: The record_status of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_status

    @record_status.setter
    def record_status(self, record_status):
        """Sets the record_status of this ResourceUsageRecord.

        The status of this resource usage record.  # noqa: E501

        :param record_status: The record_status of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED", "CLOSED_MID_CYCLE"]  # noqa: E501
        if record_status not in allowed_values:
            raise ValueError(
                "Invalid value for `record_status` ({0}), must be one of {1}"  # noqa: E501
                .format(record_status, allowed_values)
            )

        self._record_status = record_status

    @property
    def purchased(self):
        """Gets the purchased of this ResourceUsageRecord.  # noqa: E501

        The purchased amount of the resource.  # noqa: E501

        :return: The purchased of this ResourceUsageRecord.  # noqa: E501
        :rtype: float
        """
        return self._purchased

    @purchased.setter
    def purchased(self, purchased):
        """Sets the purchased of this ResourceUsageRecord.

        The purchased amount of the resource.  # noqa: E501

        :param purchased: The purchased of this ResourceUsageRecord.  # noqa: E501
        :type: float
        """

        self._purchased = purchased

    @property
    def trial(self):
        """Gets the trial of this ResourceUsageRecord.  # noqa: E501

        The trial portion of the resource.  # noqa: E501

        :return: The trial of this ResourceUsageRecord.  # noqa: E501
        :rtype: float
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this ResourceUsageRecord.

        The trial portion of the resource.  # noqa: E501

        :param trial: The trial of this ResourceUsageRecord.  # noqa: E501
        :type: float
        """

        self._trial = trial

    @property
    def used(self):
        """Gets the used of this ResourceUsageRecord.  # noqa: E501

        The amount of the resource that was used, out of the purchased amount.  # noqa: E501

        :return: The used of this ResourceUsageRecord.  # noqa: E501
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this ResourceUsageRecord.

        The amount of the resource that was used, out of the purchased amount.  # noqa: E501

        :param used: The used of this ResourceUsageRecord.  # noqa: E501
        :type: float
        """

        self._used = used

    @property
    def overages(self):
        """Gets the overages of this ResourceUsageRecord.  # noqa: E501

        The amount of monthly usage in excess of the amount included with your plan.  # noqa: E501

        :return: The overages of this ResourceUsageRecord.  # noqa: E501
        :rtype: float
        """
        return self._overages

    @overages.setter
    def overages(self, overages):
        """Sets the overages of this ResourceUsageRecord.

        The amount of monthly usage in excess of the amount included with your plan.  # noqa: E501

        :param overages: The overages of this ResourceUsageRecord.  # noqa: E501
        :type: float
        """

        self._overages = overages

    @property
    def data_unit(self):
        """Gets the data_unit of this ResourceUsageRecord.  # noqa: E501

        The measurement unit of the data. Possible values: Mbps, Gb, M Requests.  # noqa: E501

        :return: The data_unit of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._data_unit

    @data_unit.setter
    def data_unit(self, data_unit):
        """Sets the data_unit of this ResourceUsageRecord.

        The measurement unit of the data. Possible values: Mbps, Gb, M Requests.  # noqa: E501

        :param data_unit: The data_unit of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """

        self._data_unit = data_unit

    @property
    def cycle_start_date(self):
        """Gets the cycle_start_date of this ResourceUsageRecord.  # noqa: E501

        The start date of this resource usage record.  # noqa: E501

        :return: The cycle_start_date of this ResourceUsageRecord.  # noqa: E501
        :rtype: date
        """
        return self._cycle_start_date

    @cycle_start_date.setter
    def cycle_start_date(self, cycle_start_date):
        """Sets the cycle_start_date of this ResourceUsageRecord.

        The start date of this resource usage record.  # noqa: E501

        :param cycle_start_date: The cycle_start_date of this ResourceUsageRecord.  # noqa: E501
        :type: date
        """

        self._cycle_start_date = cycle_start_date

    @property
    def cycle_end_date(self):
        """Gets the cycle_end_date of this ResourceUsageRecord.  # noqa: E501

        The end date of this resource usage record.  # noqa: E501

        :return: The cycle_end_date of this ResourceUsageRecord.  # noqa: E501
        :rtype: date
        """
        return self._cycle_end_date

    @cycle_end_date.setter
    def cycle_end_date(self, cycle_end_date):
        """Sets the cycle_end_date of this ResourceUsageRecord.

        The end date of this resource usage record.  # noqa: E501

        :param cycle_end_date: The cycle_end_date of this ResourceUsageRecord.  # noqa: E501
        :type: date
        """

        self._cycle_end_date = cycle_end_date

    @property
    def close_term_reason(self):
        """Gets the close_term_reason of this ResourceUsageRecord.  # noqa: E501

        The reason for term closure. Possible values: End of cycle, Quantity changed, Usage cycle day changed, Resource cancelled, Subscription cancelled, SubAccount deleted, Change in services included in calculation.  # noqa: E501

        :return: The close_term_reason of this ResourceUsageRecord.  # noqa: E501
        :rtype: str
        """
        return self._close_term_reason

    @close_term_reason.setter
    def close_term_reason(self, close_term_reason):
        """Sets the close_term_reason of this ResourceUsageRecord.

        The reason for term closure. Possible values: End of cycle, Quantity changed, Usage cycle day changed, Resource cancelled, Subscription cancelled, SubAccount deleted, Change in services included in calculation.  # noqa: E501

        :param close_term_reason: The close_term_reason of this ResourceUsageRecord.  # noqa: E501
        :type: str
        """

        self._close_term_reason = close_term_reason

    @property
    def calculated_for_resources(self):
        """Gets the calculated_for_resources of this ResourceUsageRecord.  # noqa: E501

        Additional resources included in this usage calculation.  # noqa: E501

        :return: The calculated_for_resources of this ResourceUsageRecord.  # noqa: E501
        :rtype: list[str]
        """
        return self._calculated_for_resources

    @calculated_for_resources.setter
    def calculated_for_resources(self, calculated_for_resources):
        """Sets the calculated_for_resources of this ResourceUsageRecord.

        Additional resources included in this usage calculation.  # noqa: E501

        :param calculated_for_resources: The calculated_for_resources of this ResourceUsageRecord.  # noqa: E501
        :type: list[str]
        """

        self._calculated_for_resources = calculated_for_resources

    @property
    def unlimited_purchase(self):
        """Gets the unlimited_purchase of this ResourceUsageRecord.  # noqa: E501

        Indicates if the plan includes unlimited usage of the resource.  # noqa: E501

        :return: The unlimited_purchase of this ResourceUsageRecord.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited_purchase

    @unlimited_purchase.setter
    def unlimited_purchase(self, unlimited_purchase):
        """Sets the unlimited_purchase of this ResourceUsageRecord.

        Indicates if the plan includes unlimited usage of the resource.  # noqa: E501

        :param unlimited_purchase: The unlimited_purchase of this ResourceUsageRecord.  # noqa: E501
        :type: bool
        """

        self._unlimited_purchase = unlimited_purchase

    @property
    def unlimited_trial(self):
        """Gets the unlimited_trial of this ResourceUsageRecord.  # noqa: E501

        Indicates if the trial plan includes unlimited usage of the resource.  # noqa: E501

        :return: The unlimited_trial of this ResourceUsageRecord.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited_trial

    @unlimited_trial.setter
    def unlimited_trial(self, unlimited_trial):
        """Sets the unlimited_trial of this ResourceUsageRecord.

        Indicates if the trial plan includes unlimited usage of the resource.  # noqa: E501

        :param unlimited_trial: The unlimited_trial of this ResourceUsageRecord.  # noqa: E501
        :type: bool
        """

        self._unlimited_trial = unlimited_trial

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceUsageRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceUsageRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
