# coding: utf-8

"""
    Certificate Manager API

    Configure client certificate support for your websites or web applications. <br/>Manage and upload a Certificate Revocation List (CRL) file to verify whether certificates are valid and trustworthy. <br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/more/client-certificate-support.htm\">Client Certificate Support</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientCACertificateSiteConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mandatory': 'bool',
        'ports': 'list[int]',
        'is_ports_exception': 'bool',
        'hosts': 'list[str]',
        'is_hosts_exception': 'bool',
        'fingerprints': 'list[str]',
        'forward_to_origin': 'bool',
        'header_name': 'str',
        'header_value': 'str',
        'is_disable_session_resumption': 'bool'
    }

    attribute_map = {
        'mandatory': 'mandatory',
        'ports': 'ports',
        'is_ports_exception': 'isPortsException',
        'hosts': 'hosts',
        'is_hosts_exception': 'isHostsException',
        'fingerprints': 'fingerprints',
        'forward_to_origin': 'forwardToOrigin',
        'header_name': 'headerName',
        'header_value': 'headerValue',
        'is_disable_session_resumption': 'isDisableSessionResumption'
    }

    def __init__(self, mandatory=None, ports=None, is_ports_exception=None, hosts=None, is_hosts_exception=None, fingerprints=None, forward_to_origin=None, header_name=None, header_value=None, is_disable_session_resumption=None):  # noqa: E501
        """ClientCACertificateSiteConfiguration - a model defined in Swagger"""  # noqa: E501
        self._mandatory = None
        self._ports = None
        self._is_ports_exception = None
        self._hosts = None
        self._is_hosts_exception = None
        self._fingerprints = None
        self._forward_to_origin = None
        self._header_name = None
        self._header_value = None
        self._is_disable_session_resumption = None
        self.discriminator = None
        if mandatory is not None:
            self.mandatory = mandatory
        if ports is not None:
            self.ports = ports
        if is_ports_exception is not None:
            self.is_ports_exception = is_ports_exception
        if hosts is not None:
            self.hosts = hosts
        if is_hosts_exception is not None:
            self.is_hosts_exception = is_hosts_exception
        if fingerprints is not None:
            self.fingerprints = fingerprints
        if forward_to_origin is not None:
            self.forward_to_origin = forward_to_origin
        if header_name is not None:
            self.header_name = header_name
        if header_value is not None:
            self.header_value = header_value
        if is_disable_session_resumption is not None:
            self.is_disable_session_resumption = is_disable_session_resumption

    @property
    def mandatory(self):
        """Gets the mandatory of this ClientCACertificateSiteConfiguration.  # noqa: E501

        When set to true, the end user is required to present the client certificate in order to access the site.By default, set to false.  # noqa: E501

        :return: The mandatory of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this ClientCACertificateSiteConfiguration.

        When set to true, the end user is required to present the client certificate in order to access the site.By default, set to false.  # noqa: E501

        :param mandatory: The mandatory of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: bool
        """

        self._mandatory = mandatory

    @property
    def ports(self):
        """Gets the ports of this ClientCACertificateSiteConfiguration.  # noqa: E501

        The ports on which client certificate authentication is supported. If left empty, client certificates are supported on all ports.  # noqa: E501

        :return: The ports of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: list[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ClientCACertificateSiteConfiguration.

        The ports on which client certificate authentication is supported. If left empty, client certificates are supported on all ports.  # noqa: E501

        :param ports: The ports of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: list[int]
        """

        self._ports = ports

    @property
    def is_ports_exception(self):
        """Gets the is_ports_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501

        When set to true, client certificates are not supported on the ports listed in the Ports field ('blacklisted'). By default, set to false.  # noqa: E501

        :return: The is_ports_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_ports_exception

    @is_ports_exception.setter
    def is_ports_exception(self, is_ports_exception):
        """Sets the is_ports_exception of this ClientCACertificateSiteConfiguration.

        When set to true, client certificates are not supported on the ports listed in the Ports field ('blacklisted'). By default, set to false.  # noqa: E501

        :param is_ports_exception: The is_ports_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_ports_exception = is_ports_exception

    @property
    def hosts(self):
        """Gets the hosts of this ClientCACertificateSiteConfiguration.  # noqa: E501

        The hosts on which client certificate authentication is supported. If left empty, client certificates are supported on all hosts.  # noqa: E501

        :return: The hosts of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this ClientCACertificateSiteConfiguration.

        The hosts on which client certificate authentication is supported. If left empty, client certificates are supported on all hosts.  # noqa: E501

        :param hosts: The hosts of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def is_hosts_exception(self):
        """Gets the is_hosts_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501

        When set to true, client certificates are not supported on the hosts listed in the Hosts field ('blacklisted').By default, set to false.  # noqa: E501

        :return: The is_hosts_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_hosts_exception

    @is_hosts_exception.setter
    def is_hosts_exception(self, is_hosts_exception):
        """Sets the is_hosts_exception of this ClientCACertificateSiteConfiguration.

        When set to true, client certificates are not supported on the hosts listed in the Hosts field ('blacklisted').By default, set to false.  # noqa: E501

        :param is_hosts_exception: The is_hosts_exception of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_hosts_exception = is_hosts_exception

    @property
    def fingerprints(self):
        """Gets the fingerprints of this ClientCACertificateSiteConfiguration.  # noqa: E501

        Permitted client certificate fingerprints. If left empty, all fingerprints are permitted.  # noqa: E501

        :return: The fingerprints of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._fingerprints

    @fingerprints.setter
    def fingerprints(self, fingerprints):
        """Sets the fingerprints of this ClientCACertificateSiteConfiguration.

        Permitted client certificate fingerprints. If left empty, all fingerprints are permitted.  # noqa: E501

        :param fingerprints: The fingerprints of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._fingerprints = fingerprints

    @property
    def forward_to_origin(self):
        """Gets the forward_to_origin of this ClientCACertificateSiteConfiguration.  # noqa: E501

        When set to true, the contents specified in headerValue are sent to the origin server in the header specified by headerName. By default, set to false.  # noqa: E501

        :return: The forward_to_origin of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._forward_to_origin

    @forward_to_origin.setter
    def forward_to_origin(self, forward_to_origin):
        """Sets the forward_to_origin of this ClientCACertificateSiteConfiguration.

        When set to true, the contents specified in headerValue are sent to the origin server in the header specified by headerName. By default, set to false.  # noqa: E501

        :param forward_to_origin: The forward_to_origin of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: bool
        """

        self._forward_to_origin = forward_to_origin

    @property
    def header_name(self):
        """Gets the header_name of this ClientCACertificateSiteConfiguration.  # noqa: E501

        The name of the header to send header content in. By default, the header name is 'clientCertificateInfo'.  # noqa: E501

        :return: The header_name of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._header_name

    @header_name.setter
    def header_name(self, header_name):
        """Sets the header_name of this ClientCACertificateSiteConfiguration.

        The name of the header to send header content in. By default, the header name is 'clientCertificateInfo'.  # noqa: E501

        :param header_name: The header_name of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: str
        """

        self._header_name = header_name

    @property
    def header_value(self):
        """Gets the header_value of this ClientCACertificateSiteConfiguration.  # noqa: E501

        The content to send in the header specified by headerName. One of the following:   FULL_CERT (for full certificate in Base64)  COMMON_NAME (for certificate's common name (CN)) FINGERPRINT (for the certificate fingerprints in SHA1) SERIAL_NUMBER (for the certificate's serial number)  # noqa: E501

        :return: The header_value of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._header_value

    @header_value.setter
    def header_value(self, header_value):
        """Sets the header_value of this ClientCACertificateSiteConfiguration.

        The content to send in the header specified by headerName. One of the following:   FULL_CERT (for full certificate in Base64)  COMMON_NAME (for certificate's common name (CN)) FINGERPRINT (for the certificate fingerprints in SHA1) SERIAL_NUMBER (for the certificate's serial number)  # noqa: E501

        :param header_value: The header_value of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL_CERT", "COMMON_NAME", "FINGERPRINT", "SERIAL_NUMBER"]  # noqa: E501
        if header_value not in allowed_values:
            raise ValueError(
                "Invalid value for `header_value` ({0}), must be one of {1}"  # noqa: E501
                .format(header_value, allowed_values)
            )

        self._header_value = header_value

    @property
    def is_disable_session_resumption(self):
        """Gets the is_disable_session_resumption of this ClientCACertificateSiteConfiguration.  # noqa: E501


        :return: The is_disable_session_resumption of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_disable_session_resumption

    @is_disable_session_resumption.setter
    def is_disable_session_resumption(self, is_disable_session_resumption):
        """Sets the is_disable_session_resumption of this ClientCACertificateSiteConfiguration.


        :param is_disable_session_resumption: The is_disable_session_resumption of this ClientCACertificateSiteConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_disable_session_resumption = is_disable_session_resumption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCACertificateSiteConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCACertificateSiteConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
