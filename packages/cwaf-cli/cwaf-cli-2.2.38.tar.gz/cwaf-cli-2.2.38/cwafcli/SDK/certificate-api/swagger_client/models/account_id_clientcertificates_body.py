# coding: utf-8

"""
    Certificate Manager API

    Configure client certificate support for your websites or web applications. <br/>Manage and upload a Certificate Revocation List (CRL) file to verify whether certificates are valid and trustworthy. <br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/more/client-certificate-support.htm\">Client Certificate Support</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountIdClientcertificatesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_file': 'str',
        'name': 'str'
    }

    attribute_map = {
        'ca_file': 'ca_file',
        'name': 'name'
    }

    def __init__(self, ca_file=None, name=None):  # noqa: E501
        """AccountIdClientcertificatesBody - a model defined in Swagger"""  # noqa: E501
        self._ca_file = None
        self._name = None
        self.discriminator = None
        self.ca_file = ca_file
        if name is not None:
            self.name = name

    @property
    def ca_file(self):
        """Gets the ca_file of this AccountIdClientcertificatesBody.  # noqa: E501

        Upload a client certificate for your website.<br>The certificate must be in PEM format.<br>Supported file extensions include .pem, .crt and .cer.  # noqa: E501

        :return: The ca_file of this AccountIdClientcertificatesBody.  # noqa: E501
        :rtype: str
        """
        return self._ca_file

    @ca_file.setter
    def ca_file(self, ca_file):
        """Sets the ca_file of this AccountIdClientcertificatesBody.

        Upload a client certificate for your website.<br>The certificate must be in PEM format.<br>Supported file extensions include .pem, .crt and .cer.  # noqa: E501

        :param ca_file: The ca_file of this AccountIdClientcertificatesBody.  # noqa: E501
        :type: str
        """
        if ca_file is None:
            raise ValueError("Invalid value for `ca_file`, must not be `None`")  # noqa: E501

        self._ca_file = ca_file

    @property
    def name(self):
        """Gets the name of this AccountIdClientcertificatesBody.  # noqa: E501

        CA certificate file name  # noqa: E501

        :return: The name of this AccountIdClientcertificatesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountIdClientcertificatesBody.

        CA certificate file name  # noqa: E501

        :param name: The name of this AccountIdClientcertificatesBody.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountIdClientcertificatesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountIdClientcertificatesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
