# coding: utf-8

"""
    Certificate Manager API

    Configure client certificate support for your websites or web applications. <br/>Manage and upload a Certificate Revocation List (CRL) file to verify whether certificates are valid and trustworthy. <br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/more/client-certificate-support.htm\">Client Certificate Support</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CRLApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_crl(self, site_id, **kwargs):  # noqa: E501
        """Add CRL to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_crl(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param str crl_file:
        :param str name:
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_crl_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_crl_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def add_crl_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Add CRL to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_crl_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param str crl_file:
        :param str name:
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'crl_file', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_crl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_crl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'crl_file' in params:
            local_var_files['crl_file'] = params['crl_file']  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/CRL', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CRLDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_crl(self, site_id, crl_id, **kwargs):  # noqa: E501
        """Update existing CRL on site  # noqa: E501

        Replaces the CRL currently uploaded to the website  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_crl(site_id, crl_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int crl_id: The Imperva ID for the CRL. (required)
        :param str crl_file:
        :param str name:
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_crl_with_http_info(site_id, crl_id, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_crl_with_http_info(site_id, crl_id, **kwargs)  # noqa: E501
            return data

    def full_update_crl_with_http_info(self, site_id, crl_id, **kwargs):  # noqa: E501
        """Update existing CRL on site  # noqa: E501

        Replaces the CRL currently uploaded to the website  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_crl_with_http_info(site_id, crl_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int crl_id: The Imperva ID for the CRL. (required)
        :param str crl_file:
        :param str name:
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'crl_id', 'crl_file', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_crl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `full_update_crl`")  # noqa: E501
        # verify the required parameter 'crl_id' is set
        if ('crl_id' not in params or
                params['crl_id'] is None):
            raise ValueError("Missing the required parameter `crl_id` when calling `full_update_crl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'crl_id' in params:
            path_params['crlId'] = params['crl_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'crl_file' in params:
            local_var_files['crl_file'] = params['crl_file']  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/CRL/{crlId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CRLDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_crls(self, site_id, **kwargs):  # noqa: E501
        """List site CRLs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_crls(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_crls_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_crls_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def list_crls_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """List site CRLs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_crls_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: CRLDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_crls" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `list_crls`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/CRL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CRLDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_crl(self, site_id, crl_id, **kwargs):  # noqa: E501
        """Remove CRL from site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_crl(site_id, crl_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int crl_id: The Imperva ID for the CRL. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_crl_with_http_info(site_id, crl_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_crl_with_http_info(site_id, crl_id, **kwargs)  # noqa: E501
            return data

    def remove_crl_with_http_info(self, site_id, crl_id, **kwargs):  # noqa: E501
        """Remove CRL from site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_crl_with_http_info(site_id, crl_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int crl_id: The Imperva ID for the CRL. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'crl_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_crl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `remove_crl`")  # noqa: E501
        # verify the required parameter 'crl_id' is set
        if ('crl_id' not in params or
                params['crl_id'] is None):
            raise ValueError("Missing the required parameter `crl_id` when calling `remove_crl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'crl_id' in params:
            path_params['crlId'] = params['crl_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/CRL/{crlId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
