# coding: utf-8

"""
    Certificate Manager API

    Configure client certificate support for your websites or web applications. <br/>Manage and upload a Certificate Revocation List (CRL) file to verify whether certificates are valid and trustworthy. <br/>For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/more/client-certificate-support.htm\">Client Certificate Support</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClientCertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_client_ca_cert(self, account_id, **kwargs):  # noqa: E501
        """Add client CA certificate to account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_ca_cert(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param str ca_file:
        :param str name:
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_client_ca_cert_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_client_ca_cert_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def add_client_ca_cert_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Add client CA certificate to account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_client_ca_cert_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param str ca_file:
        :param str name:
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'ca_file', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_client_ca_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_client_ca_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ca_file' in params:
            form_params.append(('ca_file', params['ca_file']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{accountId}/client-certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_site_to_certificate(self, site_id, cert_id, **kwargs):  # noqa: E501
        """Assign client CA certificate of the account to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_site_to_certificate(site_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_site_to_certificate_with_http_info(site_id, cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_site_to_certificate_with_http_info(site_id, cert_id, **kwargs)  # noqa: E501
            return data

    def assign_site_to_certificate_with_http_info(self, site_id, cert_id, **kwargs):  # noqa: E501
        """Assign client CA certificate of the account to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_site_to_certificate_with_http_info(site_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'cert_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_site_to_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `assign_site_to_certificate`")  # noqa: E501
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `assign_site_to_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'cert_id' in params:
            path_params['certId'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/client-certificates/{certId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deassign_cert_from_site(self, site_id, cert_id, **kwargs):  # noqa: E501
        """Remove client CA certificate from site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deassign_cert_from_site(site_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deassign_cert_from_site_with_http_info(site_id, cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deassign_cert_from_site_with_http_info(site_id, cert_id, **kwargs)  # noqa: E501
            return data

    def deassign_cert_from_site_with_http_info(self, site_id, cert_id, **kwargs):  # noqa: E501
        """Remove client CA certificate from site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deassign_cert_from_site_with_http_info(site_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'cert_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deassign_cert_from_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `deassign_cert_from_site`")  # noqa: E501
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `deassign_cert_from_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'cert_id' in params:
            path_params['certId'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/client-certificates/{certId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_client_ca_cert(self, account_id, cert_id, **kwargs):  # noqa: E501
        """Delete client CA certificate from account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_ca_cert(account_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_client_ca_cert_with_http_info(account_id, cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_client_ca_cert_with_http_info(account_id, cert_id, **kwargs)  # noqa: E501
            return data

    def delete_client_ca_cert_with_http_info(self, account_id, cert_id, **kwargs):  # noqa: E501
        """Delete client CA certificate from account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_client_ca_cert_with_http_info(account_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client_ca_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_client_ca_cert`")  # noqa: E501
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `delete_client_ca_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'cert_id' in params:
            path_params['certId'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{accountId}/client-certificates/{certId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def full_update_site_configuration(self, body, site_id, **kwargs):  # noqa: E501
        """Overwrite the client CA certificate configuration (full update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_site_configuration(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCACertificateSiteConfiguration body: configuration to update (required)
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.full_update_site_configuration_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.full_update_site_configuration_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def full_update_site_configuration_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Overwrite the client CA certificate configuration (full update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.full_update_site_configuration_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCACertificateSiteConfiguration body: configuration to update (required)
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method full_update_site_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `full_update_site_configuration`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `full_update_site_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/configuration/client-certificates', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateSiteConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_certs_for_site(self, site_id, **kwargs):  # noqa: E501
        """List all client CA certificates assigned to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_certs_for_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_certs_for_site_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_certs_for_site_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_all_certs_for_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """List all client CA certificates assigned to site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_certs_for_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_certs_for_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_all_certs_for_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/client-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_configuration(self, site_id, **kwargs):  # noqa: E501
        """Get client CA certificate configuration for site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_configuration(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_configuration_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_configuration_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_configuration_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Get client CA certificate configuration for site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_configuration_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/configuration/client-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateSiteConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_client_ca_certs_by_account(self, account_id, **kwargs):  # noqa: E501
        """List client CA certificates in account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_ca_certs_by_account(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :return: list[ClientCACertificateDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_client_ca_certs_by_account_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_client_ca_certs_by_account_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_client_ca_certs_by_account_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List client CA certificates in account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_client_ca_certs_by_account_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :return: list[ClientCACertificateDetails]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_client_ca_certs_by_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_client_ca_certs_by_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{accountId}/client-certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ClientCACertificateDetails]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_sites_by_cert(self, account_id, cert_id, **kwargs):  # noqa: E501
        """Get client CA certificate information including assigned sites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sites_by_cert(account_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_sites_by_cert_with_http_info(account_id, cert_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_sites_by_cert_with_http_info(account_id, cert_id, **kwargs)  # noqa: E501
            return data

    def list_sites_by_cert_with_http_info(self, account_id, cert_id, **kwargs):  # noqa: E501
        """Get client CA certificate information including assigned sites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_sites_by_cert_with_http_info(account_id, cert_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The Imperva ID for the account. (required)
        :param int cert_id: The Imperva ID assigned to an uploaded certificate. <br>Run GET method to locate the certificate ID. (required)
        :return: ClientCACertificateDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'cert_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sites_by_cert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_sites_by_cert`")  # noqa: E501
        # verify the required parameter 'cert_id' is set
        if ('cert_id' not in params or
                params['cert_id'] is None):
            raise ValueError("Missing the required parameter `cert_id` when calling `list_sites_by_cert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountId'] = params['account_id']  # noqa: E501
        if 'cert_id' in params:
            path_params['certId'] = params['cert_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{accountId}/client-certificates/{certId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_site_configuration(self, body, site_id, **kwargs):  # noqa: E501
        """Modify the client CA certificate configuration (partial update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_site_configuration(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCACertificateSiteConfiguration body: configuration sections to update (required)
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_site_configuration_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_site_configuration_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def partial_update_site_configuration_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Modify the client CA certificate configuration (partial update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_site_configuration_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClientCACertificateSiteConfiguration body: configuration sections to update (required)
        :param int site_id: The Imperva ID for the website. (required)
        :return: ClientCACertificateSiteConfiguration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_site_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `partial_update_site_configuration`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `partial_update_site_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/sites/{siteId}/configuration/client-certificates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCACertificateSiteConfiguration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
