# coding: utf-8

"""
    Imperva SIEM Configurations API 3.0

    Set up and manage the Imperva SIEM log integration.  - Create, view, and edit connections to your log storage repository.  - Configure which logs you want to receive from Imperva, and where to receive them.  For full feature documentation, see  [Near Real-Time SIEM Log Integration](https://docs.imperva.com/bundle/cloud-application-security/page/siem-log-configuration.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LogConfigurationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, body, **kwargs):  # noqa: E501
        """Create log configuration  # noqa: E501

        Define the logs that you want to receive from Imperva, and the connection to use to receive them. The available services and log types are based on the account’s subscribed services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogConfigurationDtoResponse body: JSON body. Schema is identical to the response. (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create log configuration  # noqa: E501

        Define the logs that you want to receive from Imperva, and the connection to use to receive them. The available services and log types are based on the account’s subscribed services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogConfigurationDtoResponse body: JSON body. Schema is identical to the response. (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/log-configurations/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogConfigurationDtoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, configuration_id, **kwargs):  # noqa: E501
        """Delete log configuration  # noqa: E501

        Deletes a log configuration according to the configuration ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(configuration_id, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, configuration_id, **kwargs):  # noqa: E501
        """Delete log configuration  # noqa: E501

        Deletes a log configuration according to the configuration ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_id' is set
        if ('configuration_id' not in params or
                params['configuration_id'] is None):
            raise ValueError("Missing the required parameter `configuration_id` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_id' in params:
            path_params['configurationId'] = params['configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/log-configurations/{configurationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, configuration_id, **kwargs):  # noqa: E501
        """Retrieve log configuration  # noqa: E501

        Retrieves details of a specific log configuration according to the configuration ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(configuration_id, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, configuration_id, **kwargs):  # noqa: E501
        """Retrieve log configuration  # noqa: E501

        Retrieves details of a specific log configuration according to the configuration ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'configuration_id' is set
        if ('configuration_id' not in params or
                params['configuration_id'] is None):
            raise ValueError("Missing the required parameter `configuration_id` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_id' in params:
            path_params['configurationId'] = params['configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/log-configurations/{configurationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogConfigurationDtoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all(self, **kwargs):  # noqa: E501
        """Retrieve all log configurations  # noqa: E501

        Retrieves details of all configurations in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all log configurations  # noqa: E501

        Retrieves details of all configurations in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/log-configurations/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogConfigurationDtoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, body, configuration_id, **kwargs):  # noqa: E501
        """Overwrite log configuration  # noqa: E501

        Updates a log configuration according to the configuration ID. Overwrites the configuration’s previous values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(body, configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogConfigurationDtoResponse body: JSON body. Schema is identical to the response. (required)
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(body, configuration_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(body, configuration_id, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, body, configuration_id, **kwargs):  # noqa: E501
        """Overwrite log configuration  # noqa: E501

        Updates a log configuration according to the configuration ID. Overwrites the configuration’s previous values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(body, configuration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LogConfigurationDtoResponse body: JSON body. Schema is identical to the response. (required)
        :param str configuration_id: The unique ID for the log configuration, assigned by Imperva. To find the configuration ID, run GET /v3/log-configurations (required)
        :return: LogConfigurationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'configuration_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501
        # verify the required parameter 'configuration_id' is set
        if ('configuration_id' not in params or
                params['configuration_id'] is None):
            raise ValueError("Missing the required parameter `configuration_id` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'configuration_id' in params:
            path_params['configurationId'] = params['configuration_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/log-configurations/{configurationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogConfigurationDtoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
