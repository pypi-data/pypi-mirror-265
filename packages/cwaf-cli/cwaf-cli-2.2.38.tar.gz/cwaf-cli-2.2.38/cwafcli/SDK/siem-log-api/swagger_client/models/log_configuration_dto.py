# coding: utf-8

"""
    Imperva SIEM Configurations API 3.0

    Set up and manage the Imperva SIEM log integration.  - Create, view, and edit connections to your log storage repository.  - Configure which logs you want to receive from Imperva, and where to receive them.  For full feature documentation, see  [Near Real-Time SIEM Log Integration](https://docs.imperva.com/bundle/cloud-application-security/page/siem-log-configuration.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LogConfigurationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_name': 'str',
        'provider': 'str',
        'datasets': 'list[str]',
        'enabled': 'bool',
        'connection_id': 'str'
    }

    attribute_map = {
        'configuration_name': 'configurationName',
        'provider': 'provider',
        'datasets': 'datasets',
        'enabled': 'enabled',
        'connection_id': 'connectionId'
    }

    def __init__(self, configuration_name=None, provider=None, datasets=None, enabled=None, connection_id=None):  # noqa: E501
        """LogConfigurationDto - a model defined in Swagger"""  # noqa: E501
        self._configuration_name = None
        self._provider = None
        self._datasets = None
        self._enabled = None
        self._connection_id = None
        self.discriminator = None
        self.configuration_name = configuration_name
        self.provider = provider
        self.datasets = datasets
        self.enabled = enabled
        self.connection_id = connection_id

    @property
    def configuration_name(self):
        """Gets the configuration_name of this LogConfigurationDto.  # noqa: E501

        Log configuration name.  # noqa: E501

        :return: The configuration_name of this LogConfigurationDto.  # noqa: E501
        :rtype: str
        """
        return self._configuration_name

    @configuration_name.setter
    def configuration_name(self, configuration_name):
        """Sets the configuration_name of this LogConfigurationDto.

        Log configuration name.  # noqa: E501

        :param configuration_name: The configuration_name of this LogConfigurationDto.  # noqa: E501
        :type: str
        """
        if configuration_name is None:
            raise ValueError("Invalid value for `configuration_name`, must not be `None`")  # noqa: E501

        self._configuration_name = configuration_name

    @property
    def provider(self):
        """Gets the provider of this LogConfigurationDto.  # noqa: E501

        The service providing the logs. The available providers are based on the account’s subscribed services.  # noqa: E501

        :return: The provider of this LogConfigurationDto.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this LogConfigurationDto.

        The service providing the logs. The available providers are based on the account’s subscribed services.  # noqa: E501

        :param provider: The provider of this LogConfigurationDto.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["ABP", "NETSEC", "AUDIT", "ATO"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def datasets(self):
        """Gets the datasets of this LogConfigurationDto.  # noqa: E501

        The log types. The available types are based on the provider.  # noqa: E501

        :return: The datasets of this LogConfigurationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this LogConfigurationDto.

        The log types. The available types are based on the provider.  # noqa: E501

        :param datasets: The datasets of this LogConfigurationDto.  # noqa: E501
        :type: list[str]
        """
        if datasets is None:
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501
        allowed_values = ["ABP", "CONNECTION", "NETFLOW", "IP", "ATTACK", "AUDIT_TRAIL", "ATO"]  # noqa: E501
        if not set(datasets).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `datasets` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(datasets) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._datasets = datasets

    @property
    def enabled(self):
        """Gets the enabled of this LogConfigurationDto.  # noqa: E501

        Enable / disable the log configuration  # noqa: E501

        :return: The enabled of this LogConfigurationDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LogConfigurationDto.

        Enable / disable the log configuration  # noqa: E501

        :param enabled: The enabled of this LogConfigurationDto.  # noqa: E501
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def connection_id(self):
        """Gets the connection_id of this LogConfigurationDto.  # noqa: E501

        The connection used for the log configuration. The connection defines the log storage repository that receives the logs.  # noqa: E501

        :return: The connection_id of this LogConfigurationDto.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this LogConfigurationDto.

        The connection used for the log configuration. The connection defines the log storage repository that receives the logs.  # noqa: E501

        :param connection_id: The connection_id of this LogConfigurationDto.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogConfigurationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogConfigurationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
