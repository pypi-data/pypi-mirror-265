# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sites_site_id_rules_post(self, body, site_id, **kwargs):  # noqa: E501
        """Create rule  # noqa: E501

        Create a custom rule. For full feature documentation, see [Rules](https://docs.imperva.com/bundle/cloud-application-security/page/rules/rules.htm).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_post(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to create (required)
        :param int site_id: Site id (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_rules_post_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_rules_post_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_rules_post_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Create rule  # noqa: E501

        Create a custom rule. For full feature documentation, see [Rules](https://docs.imperva.com/bundle/cloud-application-security/page/rules/rules.htm).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_post_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to create (required)
        :param int site_id: Site id (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_rules_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sites_site_id_rules_post`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_rules_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_rules_rule_id_delete(self, site_id, rule_id, **kwargs):  # noqa: E501
        """Delete rule - must contain valid rule id  # noqa: E501

        Delete rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_delete(site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_rules_rule_id_delete_with_http_info(site_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_rules_rule_id_delete_with_http_info(site_id, rule_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_rules_rule_id_delete_with_http_info(self, site_id, rule_id, **kwargs):  # noqa: E501
        """Delete rule - must contain valid rule id  # noqa: E501

        Delete rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_delete_with_http_info(site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_rules_rule_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_rules_rule_id_delete`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `sites_site_id_rules_rule_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/rules/{ruleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_rules_rule_id_get(self, site_id, rule_id, **kwargs):  # noqa: E501
        """Read rule - must contain valid rule id  # noqa: E501

        Read rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_get(site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_rules_rule_id_get_with_http_info(site_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_rules_rule_id_get_with_http_info(site_id, rule_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_rules_rule_id_get_with_http_info(self, site_id, rule_id, **kwargs):  # noqa: E501
        """Read rule - must contain valid rule id  # noqa: E501

        Read rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_get_with_http_info(site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_rules_rule_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_rules_rule_id_get`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `sites_site_id_rules_rule_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/rules/{ruleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_rules_rule_id_post(self, body, site_id, rule_id, **kwargs):  # noqa: E501
        """Update rule - must contain valid rule id  # noqa: E501

        Update rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_post(body, site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to update (required)
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_rules_rule_id_post_with_http_info(body, site_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_rules_rule_id_post_with_http_info(body, site_id, rule_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_rules_rule_id_post_with_http_info(self, body, site_id, rule_id, **kwargs):  # noqa: E501
        """Update rule - must contain valid rule id  # noqa: E501

        Update rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_post_with_http_info(body, site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to update (required)
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_rules_rule_id_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sites_site_id_rules_rule_id_post`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_rules_rule_id_post`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `sites_site_id_rules_rule_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/rules/{ruleId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_rules_rule_id_put(self, body, site_id, rule_id, **kwargs):  # noqa: E501
        """Overwrite rule - must contain valid rule id  # noqa: E501

        Overwrite rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_put(body, site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to overwrite (required)
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_rules_rule_id_put_with_http_info(body, site_id, rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_rules_rule_id_put_with_http_info(body, site_id, rule_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_rules_rule_id_put_with_http_info(self, body, site_id, rule_id, **kwargs):  # noqa: E501
        """Overwrite rule - must contain valid rule id  # noqa: E501

        Overwrite rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_rules_rule_id_put_with_http_info(body, site_id, rule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Rule body: The rule to overwrite (required)
        :param int site_id: Numeric identifier of the site to operate on (required)
        :param int rule_id: Numeric identifier of the rule to operate on (required)
        :return: Rule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'rule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_rules_rule_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sites_site_id_rules_rule_id_put`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_rules_rule_id_put`")  # noqa: E501
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `sites_site_id_rules_rule_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'rule_id' in params:
            path_params['ruleId'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/rules/{ruleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rule',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
