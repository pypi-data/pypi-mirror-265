# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sites_ext_site_id_settings_general_additional_txt_records_delete(self, ext_site_id, **kwargs):  # noqa: E501
        """Delete a specific TXT record that is defined for the site in Cloud WAF  # noqa: E501

        Delete a specific TXT record that is defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_delete(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str record_number: Number of txt record to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_settings_general_additional_txt_records_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_settings_general_additional_txt_records_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_settings_general_additional_txt_records_delete_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Delete a specific TXT record that is defined for the site in Cloud WAF  # noqa: E501

        Delete a specific TXT record that is defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_delete_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str record_number: Number of txt record to delete
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id', 'record_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_settings_general_additional_txt_records_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_settings_general_additional_txt_records_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []
        if 'record_number' in params:
            query_params.append(('record_number', params['record_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/settings/general/additionalTxtRecords', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete(self, ext_site_id, **kwargs):  # noqa: E501
        """Delete all TXT records that are defined for the site in Cloud WAF  # noqa: E501

        Delete all TXT records that are defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Delete all TXT records that are defined for the site in Cloud WAF  # noqa: E501

        Delete all TXT records that are defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_settings_general_additional_txt_records_delete_all_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/settings/general/additionalTxtRecords/delete-all', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_settings_general_additional_txt_records_get(self, ext_site_id, **kwargs):  # noqa: E501
        """Return all TXT records defined for the site in Cloud WAF  # noqa: E501

        Return all TXT records defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_get(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_settings_general_additional_txt_records_get_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_settings_general_additional_txt_records_get_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_settings_general_additional_txt_records_get_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Return all TXT records defined for the site in Cloud WAF  # noqa: E501

        Return all TXT records defined for the site in Cloud WAF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_get_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_settings_general_additional_txt_records_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_settings_general_additional_txt_records_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/settings/general/additionalTxtRecords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_settings_general_additional_txt_records_post(self, ext_site_id, **kwargs):  # noqa: E501
        """Create or modify one or more of the TXT records defined for the site in Cloud WAF  (partial update)  # noqa: E501

        Create or modify one or more of the TXT records defined for the site in Cloud WAF  (partial update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_post(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str txt_record_value_one: New value for txt record number one
        :param str txt_record_value_two: New value for txt record number two
        :param str txt_record_value_three: New value for txt record number three
        :param str txt_record_value_four: New value for txt record number four
        :param str txt_record_value_five: New value for txt record number five
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_settings_general_additional_txt_records_post_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_settings_general_additional_txt_records_post_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_settings_general_additional_txt_records_post_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Create or modify one or more of the TXT records defined for the site in Cloud WAF  (partial update)  # noqa: E501

        Create or modify one or more of the TXT records defined for the site in Cloud WAF  (partial update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_post_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str txt_record_value_one: New value for txt record number one
        :param str txt_record_value_two: New value for txt record number two
        :param str txt_record_value_three: New value for txt record number three
        :param str txt_record_value_four: New value for txt record number four
        :param str txt_record_value_five: New value for txt record number five
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id', 'txt_record_value_one', 'txt_record_value_two', 'txt_record_value_three', 'txt_record_value_four', 'txt_record_value_five']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_settings_general_additional_txt_records_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_settings_general_additional_txt_records_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []
        if 'txt_record_value_one' in params:
            query_params.append(('txt_record_value_one', params['txt_record_value_one']))  # noqa: E501
        if 'txt_record_value_two' in params:
            query_params.append(('txt_record_value_two', params['txt_record_value_two']))  # noqa: E501
        if 'txt_record_value_three' in params:
            query_params.append(('txt_record_value_three', params['txt_record_value_three']))  # noqa: E501
        if 'txt_record_value_four' in params:
            query_params.append(('txt_record_value_four', params['txt_record_value_four']))  # noqa: E501
        if 'txt_record_value_five' in params:
            query_params.append(('txt_record_value_five', params['txt_record_value_five']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/settings/general/additionalTxtRecords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_settings_general_additional_txt_records_put(self, ext_site_id, **kwargs):  # noqa: E501
        """Overwrite a specific TXT record that is defined for the site in Cloud WAF  (full update)  # noqa: E501

        Overwrite a specific TXT record that is defined for the site in Cloud WAF  (full update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_put(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str record_number: Number of txt record to edit
        :param str txt_record_value: New value for txt record
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_settings_general_additional_txt_records_put_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_settings_general_additional_txt_records_put_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_settings_general_additional_txt_records_put_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Overwrite a specific TXT record that is defined for the site in Cloud WAF  (full update)  # noqa: E501

        Overwrite a specific TXT record that is defined for the site in Cloud WAF  (full update)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_settings_general_additional_txt_records_put_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: Site id (required)
        :param str record_number: Number of txt record to edit
        :param str txt_record_value: New value for txt record
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id', 'record_number', 'txt_record_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_settings_general_additional_txt_records_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_settings_general_additional_txt_records_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []
        if 'record_number' in params:
            query_params.append(('record_number', params['record_number']))  # noqa: E501
        if 'txt_record_value' in params:
            query_params.append(('txt_record_value', params['txt_record_value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/settings/general/additionalTxtRecords', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_settings_masking_get(self, site_id, **kwargs):  # noqa: E501
        """Returns a masking setting for the given site.  # noqa: E501

        Read masking settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_settings_masking_get(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_settings_masking_get_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_settings_masking_get_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_settings_masking_get_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Returns a masking setting for the given site.  # noqa: E501

        Read masking settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_settings_masking_get_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_settings_masking_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_settings_masking_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/settings/masking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_site_id_settings_masking_post(self, body, site_id, **kwargs):  # noqa: E501
        """Update masking settings for site  # noqa: E501

        Update masking settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_settings_masking_post(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaskingSettings body: The masking setting to configure (required)
        :param int site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_site_id_settings_masking_post_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_site_id_settings_masking_post_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def sites_site_id_settings_masking_post_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Update masking settings for site  # noqa: E501

        Update masking settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_site_id_settings_masking_post_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaskingSettings body: The masking setting to configure (required)
        :param int site_id: Site id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_site_id_settings_masking_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sites_site_id_settings_masking_post`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sites_site_id_settings_masking_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{siteId}/settings/masking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
