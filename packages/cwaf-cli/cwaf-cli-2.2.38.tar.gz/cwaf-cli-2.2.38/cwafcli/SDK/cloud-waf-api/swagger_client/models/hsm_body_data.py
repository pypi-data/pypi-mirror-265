# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HsmBodyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'str',
        'hsm_details': 'list[HsmBodyDataHsmDetails]'
    }

    attribute_map = {
        'certificate': 'certificate',
        'hsm_details': 'hsmDetails'
    }

    def __init__(self, certificate=None, hsm_details=None):  # noqa: E501
        """HsmBodyData - a model defined in Swagger"""  # noqa: E501
        self._certificate = None
        self._hsm_details = None
        self.discriminator = None
        if certificate is not None:
            self.certificate = certificate
        if hsm_details is not None:
            self.hsm_details = hsm_details

    @property
    def certificate(self):
        """Gets the certificate of this HsmBodyData.  # noqa: E501

        The certificate content in base64 format.  # noqa: E501

        :return: The certificate of this HsmBodyData.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this HsmBodyData.

        The certificate content in base64 format.  # noqa: E501

        :param certificate: The certificate of this HsmBodyData.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def hsm_details(self):
        """Gets the hsm_details of this HsmBodyData.  # noqa: E501

        An array of your private key asset details in your HSM service  # noqa: E501

        :return: The hsm_details of this HsmBodyData.  # noqa: E501
        :rtype: list[HsmBodyDataHsmDetails]
        """
        return self._hsm_details

    @hsm_details.setter
    def hsm_details(self, hsm_details):
        """Sets the hsm_details of this HsmBodyData.

        An array of your private key asset details in your HSM service  # noqa: E501

        :param hsm_details: The hsm_details of this HsmBodyData.  # noqa: E501
        :type: list[HsmBodyDataHsmDetails]
        """

        self._hsm_details = hsm_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HsmBodyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HsmBodyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
