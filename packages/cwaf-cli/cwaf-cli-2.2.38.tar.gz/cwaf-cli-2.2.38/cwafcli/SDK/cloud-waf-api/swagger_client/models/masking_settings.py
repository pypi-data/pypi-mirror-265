# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MaskingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hashing_enabled': 'bool',
        'hash_salt': 'str'
    }

    attribute_map = {
        'hashing_enabled': 'hashing_enabled',
        'hash_salt': 'hash_salt'
    }

    def __init__(self, hashing_enabled=None, hash_salt=None):  # noqa: E501
        """MaskingSettings - a model defined in Swagger"""  # noqa: E501
        self._hashing_enabled = None
        self._hash_salt = None
        self.discriminator = None
        if hashing_enabled is not None:
            self.hashing_enabled = hashing_enabled
        if hash_salt is not None:
            self.hash_salt = hash_salt

    @property
    def hashing_enabled(self):
        """Gets the hashing_enabled of this MaskingSettings.  # noqa: E501

        Use the hashing method for masking fields in your logs and events page.  # noqa: E501

        :return: The hashing_enabled of this MaskingSettings.  # noqa: E501
        :rtype: bool
        """
        return self._hashing_enabled

    @hashing_enabled.setter
    def hashing_enabled(self, hashing_enabled):
        """Sets the hashing_enabled of this MaskingSettings.

        Use the hashing method for masking fields in your logs and events page.  # noqa: E501

        :param hashing_enabled: The hashing_enabled of this MaskingSettings.  # noqa: E501
        :type: bool
        """

        self._hashing_enabled = hashing_enabled

    @property
    def hash_salt(self):
        """Gets the hash_salt of this MaskingSettings.  # noqa: E501

        The hash salt to use for the hashing algorithm.  # noqa: E501

        :return: The hash_salt of this MaskingSettings.  # noqa: E501
        :rtype: str
        """
        return self._hash_salt

    @hash_salt.setter
    def hash_salt(self, hash_salt):
        """Sets the hash_salt of this MaskingSettings.

        The hash salt to use for the hashing algorithm.  # noqa: E501

        :param hash_salt: The hash_salt of this MaskingSettings.  # noqa: E501
        :type: str
        """

        self._hash_salt = hash_salt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaskingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaskingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
