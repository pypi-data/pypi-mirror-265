# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomCertificateWithHSMSupportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sites_ext_site_id_hsm_certificate_connectivity_test_get(self, ext_site_id, **kwargs):  # noqa: E501
        """Test connectivity between Imperva and HSM provider  # noqa: E501

        Test connectivity between Imperva and your HSM service provider. This endpoint also validates the integrity between the certificate and the private key, provided by the HSM service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_connectivity_test_get(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_hsm_certificate_connectivity_test_get_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_hsm_certificate_connectivity_test_get_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_hsm_certificate_connectivity_test_get_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Test connectivity between Imperva and HSM provider  # noqa: E501

        Test connectivity between Imperva and your HSM service provider. This endpoint also validates the integrity between the certificate and the private key, provided by the HSM service.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_connectivity_test_get_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_hsm_certificate_connectivity_test_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_hsm_certificate_connectivity_test_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/hsmCertificate/connectivityTest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_hsm_certificate_delete(self, ext_site_id, **kwargs):  # noqa: E501
        """Remove custom certificate and HSM credentials  # noqa: E501

        Remove custom certificate and HSM credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_delete(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_hsm_certificate_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_hsm_certificate_delete_with_http_info(ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_hsm_certificate_delete_with_http_info(self, ext_site_id, **kwargs):  # noqa: E501
        """Remove custom certificate and HSM credentials  # noqa: E501

        Remove custom certificate and HSM credentials.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_delete_with_http_info(ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_hsm_certificate_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_hsm_certificate_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/hsmCertificate', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sites_ext_site_id_hsm_certificate_put(self, body, ext_site_id, **kwargs):  # noqa: E501
        """Upload custom certificate and HSM credentials  # noqa: E501

        Upload a custom certificate without the private key. Provide credentials for the HSM service that is managing your private key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_put(body, ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HsmBody body: The private key asset details in your HSM service. (required)
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sites_ext_site_id_hsm_certificate_put_with_http_info(body, ext_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sites_ext_site_id_hsm_certificate_put_with_http_info(body, ext_site_id, **kwargs)  # noqa: E501
            return data

    def sites_ext_site_id_hsm_certificate_put_with_http_info(self, body, ext_site_id, **kwargs):  # noqa: E501
        """Upload custom certificate and HSM credentials  # noqa: E501

        Upload a custom certificate without the private key. Provide credentials for the HSM service that is managing your private key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sites_ext_site_id_hsm_certificate_put_with_http_info(body, ext_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HsmBody body: The private key asset details in your HSM service. (required)
        :param int ext_site_id: The Imperva ID of your website. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'ext_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sites_ext_site_id_hsm_certificate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sites_ext_site_id_hsm_certificate_put`")  # noqa: E501
        # verify the required parameter 'ext_site_id' is set
        if ('ext_site_id' not in params or
                params['ext_site_id'] is None):
            raise ValueError("Missing the required parameter `ext_site_id` when calling `sites_ext_site_id_hsm_certificate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ext_site_id' in params:
            path_params['extSiteId'] = params['ext_site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{extSiteId}/hsmCertificate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
