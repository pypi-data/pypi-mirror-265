# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_id': 'int',
        'name': 'str',
        'action': 'str',
        'filter': 'str',
        'response_code': 'int',
        'add_missing': 'bool',
        'rewrite_existing': 'bool',
        '_from': 'str',
        'to': 'str',
        'rewrite_name': 'str',
        'dc_id': 'int',
        'port_forwarding_context': 'str',
        'port_forwarding_value': 'str',
        'rate_context': 'str',
        'rate_interval': 'int',
        'error_type': 'str',
        'error_response_format': 'str',
        'error_response_data': 'str',
        'multiple_deletions': 'bool',
        'override_waf_rule': 'str',
        'override_waf_action': 'str',
        'enabled': 'bool',
        'block_duration_details': 'RuleBlockDurationDetails'
    }

    attribute_map = {
        'rule_id': 'rule_id',
        'name': 'name',
        'action': 'action',
        'filter': 'filter',
        'response_code': 'response_code',
        'add_missing': 'add_missing',
        'rewrite_existing': 'rewrite_existing',
        '_from': 'from',
        'to': 'to',
        'rewrite_name': 'rewrite_name',
        'dc_id': 'dc_id',
        'port_forwarding_context': 'port_forwarding_context',
        'port_forwarding_value': 'port_forwarding_value',
        'rate_context': 'rate_context',
        'rate_interval': 'rate_interval',
        'error_type': 'error_type',
        'error_response_format': 'error_response_format',
        'error_response_data': 'error_response_data',
        'multiple_deletions': 'multiple_deletions',
        'override_waf_rule': 'overrideWafRule',
        'override_waf_action': 'overrideWafAction',
        'enabled': 'enabled',
        'block_duration_details': 'blockDurationDetails'
    }

    def __init__(self, rule_id=None, name=None, action=None, filter=None, response_code=None, add_missing=None, rewrite_existing=None, _from=None, to=None, rewrite_name=None, dc_id=None, port_forwarding_context=None, port_forwarding_value=None, rate_context=None, rate_interval=None, error_type=None, error_response_format=None, error_response_data=None, multiple_deletions=None, override_waf_rule=None, override_waf_action=None, enabled=None, block_duration_details=None):  # noqa: E501
        """Rule - a model defined in Swagger"""  # noqa: E501
        self._rule_id = None
        self._name = None
        self._action = None
        self._filter = None
        self._response_code = None
        self._add_missing = None
        self._rewrite_existing = None
        self.__from = None
        self._to = None
        self._rewrite_name = None
        self._dc_id = None
        self._port_forwarding_context = None
        self._port_forwarding_value = None
        self._rate_context = None
        self._rate_interval = None
        self._error_type = None
        self._error_response_format = None
        self._error_response_data = None
        self._multiple_deletions = None
        self._override_waf_rule = None
        self._override_waf_action = None
        self._enabled = None
        self._block_duration_details = None
        self.discriminator = None
        if rule_id is not None:
            self.rule_id = rule_id
        self.name = name
        self.action = action
        if filter is not None:
            self.filter = filter
        if response_code is not None:
            self.response_code = response_code
        if add_missing is not None:
            self.add_missing = add_missing
        if rewrite_existing is not None:
            self.rewrite_existing = rewrite_existing
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if rewrite_name is not None:
            self.rewrite_name = rewrite_name
        if dc_id is not None:
            self.dc_id = dc_id
        if port_forwarding_context is not None:
            self.port_forwarding_context = port_forwarding_context
        if port_forwarding_value is not None:
            self.port_forwarding_value = port_forwarding_value
        if rate_context is not None:
            self.rate_context = rate_context
        if rate_interval is not None:
            self.rate_interval = rate_interval
        if error_type is not None:
            self.error_type = error_type
        if error_response_format is not None:
            self.error_response_format = error_response_format
        if error_response_data is not None:
            self.error_response_data = error_response_data
        if multiple_deletions is not None:
            self.multiple_deletions = multiple_deletions
        if override_waf_rule is not None:
            self.override_waf_rule = override_waf_rule
        if override_waf_action is not None:
            self.override_waf_action = override_waf_action
        if enabled is not None:
            self.enabled = enabled
        if block_duration_details is not None:
            self.block_duration_details = block_duration_details

    @property
    def rule_id(self):
        """Gets the rule_id of this Rule.  # noqa: E501

        Numeric identifier of the rule to operate on  # noqa: E501

        :return: The rule_id of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this Rule.

        Numeric identifier of the rule to operate on  # noqa: E501

        :param rule_id: The rule_id of this Rule.  # noqa: E501
        :type: int
        """

        self._rule_id = rule_id

    @property
    def name(self):
        """Gets the name of this Rule.  # noqa: E501

        Rule name  # noqa: E501

        :return: The name of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.

        Rule name  # noqa: E501

        :param name: The name of this Rule.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def action(self):
        """Gets the action of this Rule.  # noqa: E501

        Rule action.  * RULE_ACTION_REDIRECT - Redirect rule. Redirect the client to a different URL, responding with a 30X response.  * RULE_ACTION_SIMPLIFIED_REDIRECT - Redirect the client to a different URL using restricted redirect settings.  * RULE_ACTION_REWRITE_URL - Redirect rule. Modify the path to which a specific request is targeted.  * RULE_ACTION_REWRITE_HEADER - Redirect rule. Modify or add a request header before passing traffic to the origin server.  * RULE_ACTION_REWRITE_COOKIE - Redirect rule. Allows the modification and addition of cookies that are sent by the client to the origin server. The cookie name and value should be indicated.  * RULE_ACTION_DELETE_HEADER - Redirect rule. Remove a specific request header, which means that it won’t be sent to the origin server.  * RULE_ACTION_DELETE_COOKIE - Redirect rule. Allows the removal a specific cookie set on the client, which means that it won’t be sent to the origin server.  * RULE_ACTION_RESPONSE_REWRITE_HEADER - Redirect rule. Modify or add a response header before passing traffic by the origin server to the client.  * RULE_ACTION_RESPONSE_DELETE_HEADER - Redirect rule. Remove a specific response header, which means that it won’t be sent to the client.  * RULE_ACTION_RESPONSE_REWRITE_RESPONSE_CODE - Redirect rule. Modify the response status code before passing traffic by the origin server to the client.  * RULE_ACTION_FORWARD_TO_DC - Redirect rule. Used to define the data center to which a specific request will be sent.  * RULE_ACTION_FORWARD_TO_PORT - Redirect rule. Used to define the port to which a specific request will be sent.  * RULE_ACTION_ALERT - Security rule. Generate a non blocking alert for this event.  * RULE_ACTION_BLOCK - Security rule. Block the current request and generate an alert for this event.  * RULE_ACTION_BLOCK_USER - Security rule. Block the current session and generate an alert for this event. Any subsequent request from the same Session will be blocked.  * RULE_ACTION_BLOCK_IP - Security rule. Block the current IP and generate an alert for this event. Any subsequent request from the same IP will be blocked for a period of 10 minutes.  * RULE_ACTION_RETRY - Security rule. Require any client matching the rule filters to support cookies in order to complete the request.  * RULE_ACTION_INTRUSIVE_HTML - Security rule. Require any client matching the rule filters to support javascript in order to complete the request. Since the Javascript test is embedded in an HTML page, this action should only be enabled for HTML resources.  * RULE_ACTION_CAPTCHA - Security rule. Require any client matching the rule filters to pass a CAPTCHA test in order to complete the request. Since the CAPTCHA test is embedded in an HTML page, this action should only be enabled for HTML resources.  * RULE_ACTION_RATE - Count the number of requests received that match the rule filter.  * RULE_ACTION_CUSTOM_ERROR_RESPONSE - Replace default error response & error code with custom ones. Once blocked a rule that matches the provided filter & error type will return a custom error & error code.  * RULE_ACTION_WAF_OVERRIDE - Overrides the global WAF setting for a specific threat type.   # noqa: E501

        :return: The action of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Rule.

        Rule action.  * RULE_ACTION_REDIRECT - Redirect rule. Redirect the client to a different URL, responding with a 30X response.  * RULE_ACTION_SIMPLIFIED_REDIRECT - Redirect the client to a different URL using restricted redirect settings.  * RULE_ACTION_REWRITE_URL - Redirect rule. Modify the path to which a specific request is targeted.  * RULE_ACTION_REWRITE_HEADER - Redirect rule. Modify or add a request header before passing traffic to the origin server.  * RULE_ACTION_REWRITE_COOKIE - Redirect rule. Allows the modification and addition of cookies that are sent by the client to the origin server. The cookie name and value should be indicated.  * RULE_ACTION_DELETE_HEADER - Redirect rule. Remove a specific request header, which means that it won’t be sent to the origin server.  * RULE_ACTION_DELETE_COOKIE - Redirect rule. Allows the removal a specific cookie set on the client, which means that it won’t be sent to the origin server.  * RULE_ACTION_RESPONSE_REWRITE_HEADER - Redirect rule. Modify or add a response header before passing traffic by the origin server to the client.  * RULE_ACTION_RESPONSE_DELETE_HEADER - Redirect rule. Remove a specific response header, which means that it won’t be sent to the client.  * RULE_ACTION_RESPONSE_REWRITE_RESPONSE_CODE - Redirect rule. Modify the response status code before passing traffic by the origin server to the client.  * RULE_ACTION_FORWARD_TO_DC - Redirect rule. Used to define the data center to which a specific request will be sent.  * RULE_ACTION_FORWARD_TO_PORT - Redirect rule. Used to define the port to which a specific request will be sent.  * RULE_ACTION_ALERT - Security rule. Generate a non blocking alert for this event.  * RULE_ACTION_BLOCK - Security rule. Block the current request and generate an alert for this event.  * RULE_ACTION_BLOCK_USER - Security rule. Block the current session and generate an alert for this event. Any subsequent request from the same Session will be blocked.  * RULE_ACTION_BLOCK_IP - Security rule. Block the current IP and generate an alert for this event. Any subsequent request from the same IP will be blocked for a period of 10 minutes.  * RULE_ACTION_RETRY - Security rule. Require any client matching the rule filters to support cookies in order to complete the request.  * RULE_ACTION_INTRUSIVE_HTML - Security rule. Require any client matching the rule filters to support javascript in order to complete the request. Since the Javascript test is embedded in an HTML page, this action should only be enabled for HTML resources.  * RULE_ACTION_CAPTCHA - Security rule. Require any client matching the rule filters to pass a CAPTCHA test in order to complete the request. Since the CAPTCHA test is embedded in an HTML page, this action should only be enabled for HTML resources.  * RULE_ACTION_RATE - Count the number of requests received that match the rule filter.  * RULE_ACTION_CUSTOM_ERROR_RESPONSE - Replace default error response & error code with custom ones. Once blocked a rule that matches the provided filter & error type will return a custom error & error code.  * RULE_ACTION_WAF_OVERRIDE - Overrides the global WAF setting for a specific threat type.   # noqa: E501

        :param action: The action of this Rule.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["RULE_ACTION_REDIRECT", "RULE_ACTION_SIMPLIFIED_REDIRECT", "RULE_ACTION_REWRITE_URL", "RULE_ACTION_REWRITE_HEADER", "RULE_ACTION_REWRITE_COOKIE", "RULE_ACTION_DELETE_HEADER", "RULE_ACTION_DELETE_COOKIE", "RULE_ACTION_RESPONSE_REWRITE_HEADER", "RULE_ACTION_RESPONSE_DELETE_HEADER", "RULE_ACTION_RESPONSE_REWRITE_RESPONSE_CODE", "RULE_ACTION_FORWARD_TO_DC", "RULE_ACTION_FORWARD_TO_PORT", "RULE_ACTION_ALERT", "RULE_ACTION_BLOCK", "RULE_ACTION_BLOCK_USER", "RULE_ACTION_BLOCK_IP", "RULE_ACTION_RETRY", "RULE_ACTION_INTRUSIVE_HTML", "RULE_ACTION_CAPTCHA", "RULE_ACTION_RATE", "RULE_ACTION_CUSTOM_ERROR_RESPONSE", "RULE_ACTION_WAF_OVERRIDE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def filter(self):
        """Gets the filter of this Rule.  # noqa: E501

        The filter defines the conditions that trigger the rule action. For action RULE_ACTION_SIMPLIFIED_REDIRECT filter is not relevant. For other actions, if left empty, the rule is always run.  # noqa: E501

        :return: The filter of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Rule.

        The filter defines the conditions that trigger the rule action. For action RULE_ACTION_SIMPLIFIED_REDIRECT filter is not relevant. For other actions, if left empty, the rule is always run.  # noqa: E501

        :param filter: The filter of this Rule.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def response_code(self):
        """Gets the response_code of this Rule.  # noqa: E501

        For RULE_ACTION_REDIRECT or RULE_ACTION_SIMPLIFIED_REDIRECT rule's response code, valid values are 302, 301, 303, 307, 308. For RULE_ACTION_RESPONSE_REWRITE_RESPONSE_CODE rule's response code, valid values are all 3-digits numbers. For RULE_ACTION_CUSTOM_ERROR_RESPONSE, valid values are [ 200, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 429, 500, 501, 502, 503, 504, 505, 507 ]  # noqa: E501

        :return: The response_code of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this Rule.

        For RULE_ACTION_REDIRECT or RULE_ACTION_SIMPLIFIED_REDIRECT rule's response code, valid values are 302, 301, 303, 307, 308. For RULE_ACTION_RESPONSE_REWRITE_RESPONSE_CODE rule's response code, valid values are all 3-digits numbers. For RULE_ACTION_CUSTOM_ERROR_RESPONSE, valid values are [ 200, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 429, 500, 501, 502, 503, 504, 505, 507 ]  # noqa: E501

        :param response_code: The response_code of this Rule.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def add_missing(self):
        """Gets the add_missing of this Rule.  # noqa: E501

        Add cookie or header if it doesn't exist (Rewrite cookie rule only)  # noqa: E501

        :return: The add_missing of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._add_missing

    @add_missing.setter
    def add_missing(self, add_missing):
        """Sets the add_missing of this Rule.

        Add cookie or header if it doesn't exist (Rewrite cookie rule only)  # noqa: E501

        :param add_missing: The add_missing of this Rule.  # noqa: E501
        :type: bool
        """

        self._add_missing = add_missing

    @property
    def rewrite_existing(self):
        """Gets the rewrite_existing of this Rule.  # noqa: E501

        Rewrite cookie or header if it exists  # noqa: E501

        :return: The rewrite_existing of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._rewrite_existing

    @rewrite_existing.setter
    def rewrite_existing(self, rewrite_existing):
        """Sets the rewrite_existing of this Rule.

        Rewrite cookie or header if it exists  # noqa: E501

        :param rewrite_existing: The rewrite_existing of this Rule.  # noqa: E501
        :type: bool
        """

        self._rewrite_existing = rewrite_existing

    @property
    def _from(self):
        """Gets the _from of this Rule.  # noqa: E501

        Pattern to rewrite. For RULE_ACTION_REWRITE_URL - Url to rewrite. For RULE_ACTION_REWRITE_HEADER/RULE_ACTION_RESPONSE_REWRITE_HEADER - Header value to rewrite. For RULE_ACTION_REWRITE_COOKIE - Cookie value to rewrite  # noqa: E501

        :return: The _from of this Rule.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Rule.

        Pattern to rewrite. For RULE_ACTION_REWRITE_URL - Url to rewrite. For RULE_ACTION_REWRITE_HEADER/RULE_ACTION_RESPONSE_REWRITE_HEADER - Header value to rewrite. For RULE_ACTION_REWRITE_COOKIE - Cookie value to rewrite  # noqa: E501

        :param _from: The _from of this Rule.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Rule.  # noqa: E501

        Pattern to change to. RULE_ACTION_REWRITE_URL - Url to change to. RULE_ACTION_REWRITE_HEADER/RULE_ACTION_RESPONSE_REWRITE_HEADER - Header value to change to. RULE_ACTION_REWRITE_COOKIE - Cookie value to change to  # noqa: E501

        :return: The to of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Rule.

        Pattern to change to. RULE_ACTION_REWRITE_URL - Url to change to. RULE_ACTION_REWRITE_HEADER/RULE_ACTION_RESPONSE_REWRITE_HEADER - Header value to change to. RULE_ACTION_REWRITE_COOKIE - Cookie value to change to  # noqa: E501

        :param to: The to of this Rule.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def rewrite_name(self):
        """Gets the rewrite_name of this Rule.  # noqa: E501

        Name of cookie or header to rewrite. Applies only for RULE_ACTION_REWRITE_COOKIE, RULE_ACTION_REWRITE_HEADER and RULE_ACTION_RESPONSE_REWRITE_HEADER  # noqa: E501

        :return: The rewrite_name of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._rewrite_name

    @rewrite_name.setter
    def rewrite_name(self, rewrite_name):
        """Sets the rewrite_name of this Rule.

        Name of cookie or header to rewrite. Applies only for RULE_ACTION_REWRITE_COOKIE, RULE_ACTION_REWRITE_HEADER and RULE_ACTION_RESPONSE_REWRITE_HEADER  # noqa: E501

        :param rewrite_name: The rewrite_name of this Rule.  # noqa: E501
        :type: str
        """

        self._rewrite_name = rewrite_name

    @property
    def dc_id(self):
        """Gets the dc_id of this Rule.  # noqa: E501

        Data center to forward request to. Applies only for RULE_ACTION_FORWARD_TO_DC  # noqa: E501

        :return: The dc_id of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._dc_id

    @dc_id.setter
    def dc_id(self, dc_id):
        """Sets the dc_id of this Rule.

        Data center to forward request to. Applies only for RULE_ACTION_FORWARD_TO_DC  # noqa: E501

        :param dc_id: The dc_id of this Rule.  # noqa: E501
        :type: int
        """

        self._dc_id = dc_id

    @property
    def port_forwarding_context(self):
        """Gets the port_forwarding_context of this Rule.  # noqa: E501

        Context for port forwarding. \"Use Port Value\" or \"Use Header Name\". Applies only for RULE_ACTION_FORWARD_TO_PORT  # noqa: E501

        :return: The port_forwarding_context of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._port_forwarding_context

    @port_forwarding_context.setter
    def port_forwarding_context(self, port_forwarding_context):
        """Sets the port_forwarding_context of this Rule.

        Context for port forwarding. \"Use Port Value\" or \"Use Header Name\". Applies only for RULE_ACTION_FORWARD_TO_PORT  # noqa: E501

        :param port_forwarding_context: The port_forwarding_context of this Rule.  # noqa: E501
        :type: str
        """

        self._port_forwarding_context = port_forwarding_context

    @property
    def port_forwarding_value(self):
        """Gets the port_forwarding_value of this Rule.  # noqa: E501

        Port number or header name for port forwarding. Applies only for RULE_ACTION_FORWARD_TO_PORT  # noqa: E501

        :return: The port_forwarding_value of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._port_forwarding_value

    @port_forwarding_value.setter
    def port_forwarding_value(self, port_forwarding_value):
        """Sets the port_forwarding_value of this Rule.

        Port number or header name for port forwarding. Applies only for RULE_ACTION_FORWARD_TO_PORT  # noqa: E501

        :param port_forwarding_value: The port_forwarding_value of this Rule.  # noqa: E501
        :type: str
        """

        self._port_forwarding_value = port_forwarding_value

    @property
    def rate_context(self):
        """Gets the rate_context of this Rule.  # noqa: E501

        The context of the rate counter. Possible values IP or Session. Applies only to rules using RULE_ACTION_RATE.  # noqa: E501

        :return: The rate_context of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._rate_context

    @rate_context.setter
    def rate_context(self, rate_context):
        """Sets the rate_context of this Rule.

        The context of the rate counter. Possible values IP or Session. Applies only to rules using RULE_ACTION_RATE.  # noqa: E501

        :param rate_context: The rate_context of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["IP", "Session"]  # noqa: E501
        if rate_context not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_context` ({0}), must be one of {1}"  # noqa: E501
                .format(rate_context, allowed_values)
            )

        self._rate_context = rate_context

    @property
    def rate_interval(self):
        """Gets the rate_interval of this Rule.  # noqa: E501

        The interval in seconds of the rate counter. Possible values is a multiple of 10 minimum 10 maximum 300. Applies only to rules using RULE_ACTION_RATE.  # noqa: E501

        :return: The rate_interval of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._rate_interval

    @rate_interval.setter
    def rate_interval(self, rate_interval):
        """Sets the rate_interval of this Rule.

        The interval in seconds of the rate counter. Possible values is a multiple of 10 minimum 10 maximum 300. Applies only to rules using RULE_ACTION_RATE.  # noqa: E501

        :param rate_interval: The rate_interval of this Rule.  # noqa: E501
        :type: int
        """

        self._rate_interval = rate_interval

    @property
    def error_type(self):
        """Gets the error_type of this Rule.  # noqa: E501

        The error that triggers the rule. error.type.all triggers the rule regardless of the error type. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :return: The error_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this Rule.

        The error that triggers the rule. error.type.all triggers the rule regardless of the error type. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :param error_type: The error_type of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["error.type.all", "error.type.connection_timeout", "error.type.access_denied", "error.type.parse_req_error", "error.type.parse_resp_error", "error.type.connection_failed", "error.type.deny_and_retry", "error.type.ssl_failed", "error.type.deny_and_captcha", "error.type.2fa_required", "error.type.no_ssl_config", "error.type.no_ipv6_config", "error.type.waiting_room"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"  # noqa: E501
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def error_response_format(self):
        """Gets the error_response_format of this Rule.  # noqa: E501

        The format of the given error response in the error_response_data field. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :return: The error_response_format of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._error_response_format

    @error_response_format.setter
    def error_response_format(self, error_response_format):
        """Sets the error_response_format of this Rule.

        The format of the given error response in the error_response_data field. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :param error_response_format: The error_response_format of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["json", "xml"]  # noqa: E501
        if error_response_format not in allowed_values:
            raise ValueError(
                "Invalid value for `error_response_format` ({0}), must be one of {1}"  # noqa: E501
                .format(error_response_format, allowed_values)
            )

        self._error_response_format = error_response_format

    @property
    def error_response_data(self):
        """Gets the error_response_data of this Rule.  # noqa: E501

        The response returned when the request matches the filter and is blocked. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :return: The error_response_data of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._error_response_data

    @error_response_data.setter
    def error_response_data(self, error_response_data):
        """Sets the error_response_data of this Rule.

        The response returned when the request matches the filter and is blocked. Applies only for RULE_ACTION_CUSTOM_ERROR_RESPONSE  # noqa: E501

        :param error_response_data: The error_response_data of this Rule.  # noqa: E501
        :type: str
        """

        self._error_response_data = error_response_data

    @property
    def multiple_deletions(self):
        """Gets the multiple_deletions of this Rule.  # noqa: E501

        Delete multiple header occurrences. Applies only to rules using RULE_ACTION_DELETE_HEADER and RULE_ACTION_RESPONSE_DELETE_HEADER  # noqa: E501

        :return: The multiple_deletions of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_deletions

    @multiple_deletions.setter
    def multiple_deletions(self, multiple_deletions):
        """Sets the multiple_deletions of this Rule.

        Delete multiple header occurrences. Applies only to rules using RULE_ACTION_DELETE_HEADER and RULE_ACTION_RESPONSE_DELETE_HEADER  # noqa: E501

        :param multiple_deletions: The multiple_deletions of this Rule.  # noqa: E501
        :type: bool
        """

        self._multiple_deletions = multiple_deletions

    @property
    def override_waf_rule(self):
        """Gets the override_waf_rule of this Rule.  # noqa: E501

        The setting to override. Possible values: SQL Injection, Remote File Inclusion, Cross Site Scripting, Illegal Resource Access  # noqa: E501

        :return: The override_waf_rule of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._override_waf_rule

    @override_waf_rule.setter
    def override_waf_rule(self, override_waf_rule):
        """Sets the override_waf_rule of this Rule.

        The setting to override. Possible values: SQL Injection, Remote File Inclusion, Cross Site Scripting, Illegal Resource Access  # noqa: E501

        :param override_waf_rule: The override_waf_rule of this Rule.  # noqa: E501
        :type: str
        """

        self._override_waf_rule = override_waf_rule

    @property
    def override_waf_action(self):
        """Gets the override_waf_action of this Rule.  # noqa: E501

        The action for the override rule. Possible values: Alert Only, Block Request, Block User, Block IP, Ignore  # noqa: E501

        :return: The override_waf_action of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._override_waf_action

    @override_waf_action.setter
    def override_waf_action(self, override_waf_action):
        """Sets the override_waf_action of this Rule.

        The action for the override rule. Possible values: Alert Only, Block Request, Block User, Block IP, Ignore  # noqa: E501

        :param override_waf_action: The override_waf_action of this Rule.  # noqa: E501
        :type: str
        """

        self._override_waf_action = override_waf_action

    @property
    def enabled(self):
        """Gets the enabled of this Rule.  # noqa: E501

        The setting enables or disables the rule.  # noqa: E501

        :return: The enabled of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Rule.

        The setting enables or disables the rule.  # noqa: E501

        :param enabled: The enabled of this Rule.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def block_duration_details(self):
        """Gets the block_duration_details of this Rule.  # noqa: E501


        :return: The block_duration_details of this Rule.  # noqa: E501
        :rtype: RuleBlockDurationDetails
        """
        return self._block_duration_details

    @block_duration_details.setter
    def block_duration_details(self, block_duration_details):
        """Sets the block_duration_details of this Rule.


        :param block_duration_details: The block_duration_details of this Rule.  # noqa: E501
        :type: RuleBlockDurationDetails
        """

        self._block_duration_details = block_duration_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
