# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuleBlockDurationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_duration_period_type': 'str',
        'block_fixed_duration_value': 'int',
        'block_randomized_duration_min_value': 'int',
        'block_randomized_duration_max_value': 'int'
    }

    attribute_map = {
        'block_duration_period_type': 'blockDurationPeriodType',
        'block_fixed_duration_value': 'blockFixedDurationValue',
        'block_randomized_duration_min_value': 'blockRandomizedDurationMinValue',
        'block_randomized_duration_max_value': 'blockRandomizedDurationMaxValue'
    }

    def __init__(self, block_duration_period_type=None, block_fixed_duration_value=None, block_randomized_duration_min_value=None, block_randomized_duration_max_value=None):  # noqa: E501
        """RuleBlockDurationDetails - a model defined in Swagger"""  # noqa: E501
        self._block_duration_period_type = None
        self._block_fixed_duration_value = None
        self._block_randomized_duration_min_value = None
        self._block_randomized_duration_max_value = None
        self.discriminator = None
        if block_duration_period_type is not None:
            self.block_duration_period_type = block_duration_period_type
        if block_fixed_duration_value is not None:
            self.block_fixed_duration_value = block_fixed_duration_value
        if block_randomized_duration_min_value is not None:
            self.block_randomized_duration_min_value = block_randomized_duration_min_value
        if block_randomized_duration_max_value is not None:
            self.block_randomized_duration_max_value = block_randomized_duration_max_value

    @property
    def block_duration_period_type(self):
        """Gets the block_duration_period_type of this RuleBlockDurationDetails.  # noqa: E501

        Block duration types: Fixed, Randomized. Time range: 1-1440 minutes.The Fixed type blocks the IP address or session for the duration specified by the blockFixedDurationValue parameter. The Randomized type generates a random duration for each block between the specified minimum and maximum values.  # noqa: E501

        :return: The block_duration_period_type of this RuleBlockDurationDetails.  # noqa: E501
        :rtype: str
        """
        return self._block_duration_period_type

    @block_duration_period_type.setter
    def block_duration_period_type(self, block_duration_period_type):
        """Sets the block_duration_period_type of this RuleBlockDurationDetails.

        Block duration types: Fixed, Randomized. Time range: 1-1440 minutes.The Fixed type blocks the IP address or session for the duration specified by the blockFixedDurationValue parameter. The Randomized type generates a random duration for each block between the specified minimum and maximum values.  # noqa: E501

        :param block_duration_period_type: The block_duration_period_type of this RuleBlockDurationDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["fixed", "randomized"]  # noqa: E501
        if block_duration_period_type not in allowed_values:
            raise ValueError(
                "Invalid value for `block_duration_period_type` ({0}), must be one of {1}"  # noqa: E501
                .format(block_duration_period_type, allowed_values)
            )

        self._block_duration_period_type = block_duration_period_type

    @property
    def block_fixed_duration_value(self):
        """Gets the block_fixed_duration_value of this RuleBlockDurationDetails.  # noqa: E501

        Value of the fixed block duration. Valid only for 'fixed' blockDurationPeriodType  # noqa: E501

        :return: The block_fixed_duration_value of this RuleBlockDurationDetails.  # noqa: E501
        :rtype: int
        """
        return self._block_fixed_duration_value

    @block_fixed_duration_value.setter
    def block_fixed_duration_value(self, block_fixed_duration_value):
        """Sets the block_fixed_duration_value of this RuleBlockDurationDetails.

        Value of the fixed block duration. Valid only for 'fixed' blockDurationPeriodType  # noqa: E501

        :param block_fixed_duration_value: The block_fixed_duration_value of this RuleBlockDurationDetails.  # noqa: E501
        :type: int
        """

        self._block_fixed_duration_value = block_fixed_duration_value

    @property
    def block_randomized_duration_min_value(self):
        """Gets the block_randomized_duration_min_value of this RuleBlockDurationDetails.  # noqa: E501

        The lower limit for the randomized block duration. Valid only for 'randomized' blockDurationPeriodType  # noqa: E501

        :return: The block_randomized_duration_min_value of this RuleBlockDurationDetails.  # noqa: E501
        :rtype: int
        """
        return self._block_randomized_duration_min_value

    @block_randomized_duration_min_value.setter
    def block_randomized_duration_min_value(self, block_randomized_duration_min_value):
        """Sets the block_randomized_duration_min_value of this RuleBlockDurationDetails.

        The lower limit for the randomized block duration. Valid only for 'randomized' blockDurationPeriodType  # noqa: E501

        :param block_randomized_duration_min_value: The block_randomized_duration_min_value of this RuleBlockDurationDetails.  # noqa: E501
        :type: int
        """

        self._block_randomized_duration_min_value = block_randomized_duration_min_value

    @property
    def block_randomized_duration_max_value(self):
        """Gets the block_randomized_duration_max_value of this RuleBlockDurationDetails.  # noqa: E501

        The upper limit for the randomized block duration. Valid only for 'randomized' blockDurationPeriodType  # noqa: E501

        :return: The block_randomized_duration_max_value of this RuleBlockDurationDetails.  # noqa: E501
        :rtype: int
        """
        return self._block_randomized_duration_max_value

    @block_randomized_duration_max_value.setter
    def block_randomized_duration_max_value(self, block_randomized_duration_max_value):
        """Sets the block_randomized_duration_max_value of this RuleBlockDurationDetails.

        The upper limit for the randomized block duration. Valid only for 'randomized' blockDurationPeriodType  # noqa: E501

        :param block_randomized_duration_max_value: The block_randomized_duration_max_value of this RuleBlockDurationDetails.  # noqa: E501
        :type: int
        """

        self._block_randomized_duration_max_value = block_randomized_duration_max_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleBlockDurationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleBlockDurationDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
