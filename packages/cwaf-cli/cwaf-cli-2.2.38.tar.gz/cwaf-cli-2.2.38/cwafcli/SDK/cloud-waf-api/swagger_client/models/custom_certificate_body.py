# coding: utf-8

"""
    Imperva API2 WAF

    To better align with REST API standards and best practices, Imperva is gradually rolling out a new version of APIs, available for your use in managing your Cloud Application Security account and websites. These APIs provide either an alternative to existing APIs, or provide APIs with new functionality. For more details about Imperva APIs, see <a href=https://docs.imperva.com/bundle/api-docs/page/api/api-overview.htm>Imperva API Documentation</a>.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomCertificateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'certificate': 'str',
        'private_key': 'str',
        'passphrase': 'str',
        'auth_type': 'str'
    }

    attribute_map = {
        'certificate': 'certificate',
        'private_key': 'private_key',
        'passphrase': 'passphrase',
        'auth_type': 'auth_type'
    }

    def __init__(self, certificate=None, private_key=None, passphrase=None, auth_type=None):  # noqa: E501
        """CustomCertificateBody - a model defined in Swagger"""  # noqa: E501
        self._certificate = None
        self._private_key = None
        self._passphrase = None
        self._auth_type = None
        self.discriminator = None
        if certificate is not None:
            self.certificate = certificate
        if private_key is not None:
            self.private_key = private_key
        if passphrase is not None:
            self.passphrase = passphrase
        if auth_type is not None:
            self.auth_type = auth_type

    @property
    def certificate(self):
        """Gets the certificate of this CustomCertificateBody.  # noqa: E501

        The certificate content in base64 format.  # noqa: E501

        :return: The certificate of this CustomCertificateBody.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CustomCertificateBody.

        The certificate content in base64 format.  # noqa: E501

        :param certificate: The certificate of this CustomCertificateBody.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def private_key(self):
        """Gets the private_key of this CustomCertificateBody.  # noqa: E501

        The private key of the certificate in base64 format.  # noqa: E501

        :return: The private_key of this CustomCertificateBody.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this CustomCertificateBody.

        The private key of the certificate in base64 format.  # noqa: E501

        :param private_key: The private_key of this CustomCertificateBody.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def passphrase(self):
        """Gets the passphrase of this CustomCertificateBody.  # noqa: E501

        The passphrase used to protect your SSL certificate.  # noqa: E501

        :return: The passphrase of this CustomCertificateBody.  # noqa: E501
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this CustomCertificateBody.

        The passphrase used to protect your SSL certificate.  # noqa: E501

        :param passphrase: The passphrase of this CustomCertificateBody.  # noqa: E501
        :type: str
        """

        self._passphrase = passphrase

    @property
    def auth_type(self):
        """Gets the auth_type of this CustomCertificateBody.  # noqa: E501

        The authentication type of the certificate (RSA or ECC)  # noqa: E501

        :return: The auth_type of this CustomCertificateBody.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this CustomCertificateBody.

        The authentication type of the certificate (RSA or ECC)  # noqa: E501

        :param auth_type: The auth_type of this CustomCertificateBody.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomCertificateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomCertificateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
