# coding: utf-8

"""
    Advanced Bot Protection API

    This is the API for onboarding websites into Advanced Bot Protection. For full feature documentation, see [Advanced Bot Protection](https://docs.imperva.com/bundle/advanced-bot-protection/page/74791.htm)  ## Terminology differences  The API term *Domain* corresponds to, and is interchangeable with, a *Website* as used in the UI and web based documentation.  The API term *Site* corresponds to and is interchangeable with a *Website Group* as used in the UI and web based documentation.  The API term *Selector* corresponds to and is interchangeable with a *per-Path* *Policy* as used in the UI and web based documentation.  Besides the Imperva *account*, there is also an Advanced Bot Protection *account*. The are connected but have their own identifiers that cannot be mixed. In the API, *account* always refers to an ABP account unless otherwise specified.  ## Updates  When using PUT to update a resource, the entire resource will be replaced and any omitted fields may be deleted. To prevent data loss when performing an update you must GET the resource, update the returned response, and then send the result as the PUT request body.  ## API compatibility  Previous versions of the API are deprecated when a new version is released. Previous versions will be supported until further notice.  For a client to stay compatible with non breaking changes they need to take the following into account:  * New optional properties and properties with default values may   be added to JSON objects used as API request bodies.  * New properties may be added to JSON objects in API response bodies.  * Certain sum types (e.g. `enum` and `oneOf`) are documented as *open*   which means new alternatives can be added. The new values will only   be present if configured using the API or UI.  ## Authentication  See [API Key Management](https://docs.imperva.com/bundle/cloud-application-security/page/settings/api-keys.htm) for instructions on how to authenticate to this API.  ## Pagination  Resources may be paginated. This is indicated by the inclusion of the 'next' and/or the 'prev' relations in the '_links' property. See the Links schema documentation.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Links(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'OneOfLinksAccount',
        'analysis_host': 'OneOfLinksAnalysisHost',
        'condition': 'OneOfLinksCondition',
        'create_condition': 'OneOfLinksCreateCondition',
        'create_domain': 'OneOfLinksCreateDomain',
        'create_preflight': 'OneOfLinksCreatePreflight',
        'create_site': 'OneOfLinksCreateSite',
        'create_policy': 'OneOfLinksCreatePolicy',
        'create_publish': 'OneOfLinksCreatePublish',
        'preflight': 'OneOfLinksPreflight',
        'publish': 'OneOfLinksPublish',
        'policy': 'OneOfLinksPolicy',
        'delete_policy': 'OneOfLinksDeletePolicy',
        'update_policy': 'OneOfLinksUpdatePolicy',
        'credential': 'OneOfLinksCredential',
        'default_encryption_key': 'OneOfLinksDefaultEncryptionKey',
        'delete_condition': 'OneOfLinksDeleteCondition',
        'delete_domain': 'OneOfLinksDeleteDomain',
        'delete_encryptionkey': 'OneOfLinksDeleteEncryptionkey',
        'delete_site': 'OneOfLinksDeleteSite',
        'delete_snapshot': 'OneOfLinksDeleteSnapshot',
        'domain': 'OneOfLinksDomain',
        'domain_priority': 'OneOfLinksDomainPriority',
        'encryptionkey': 'OneOfLinksEncryptionkey',
        'list_conditions': 'OneOfLinksListConditions',
        'list_condition_children': 'OneOfLinksListConditionChildren',
        'list_credentials': 'OneOfLinksListCredentials',
        'list_domains': 'OneOfLinksListDomains',
        'list_policies': 'OneOfLinksListPolicies',
        'list_encryptionkeys': 'OneOfLinksListEncryptionkeys',
        'list_sites': 'OneOfLinksListSites',
        'list_snapshots': 'OneOfLinksListSnapshots',
        'next': 'OneOfLinksNext',
        'prev': 'OneOfLinksPrev',
        'search_conditions': 'OneOfLinksSearchConditions',
        'restore_snapshot': 'OneOfLinksRestoreSnapshot',
        'site': 'OneOfLinksSite',
        'site_priority': 'OneOfLinksSitePriority',
        'update_condition': 'OneOfLinksUpdateCondition',
        'snapshot': 'OneOfLinksSnapshot',
        'update_domain': 'OneOfLinksUpdateDomain',
        'update_domain_priority': 'OneOfLinksUpdateDomainPriority',
        'update_site': 'OneOfLinksUpdateSite',
        'update_site_priority': 'OneOfLinksUpdateSitePriority'
    }

    attribute_map = {
        'account': 'account',
        'analysis_host': 'analysis_host',
        'condition': 'condition',
        'create_condition': 'create_condition',
        'create_domain': 'create_domain',
        'create_preflight': 'create_preflight',
        'create_site': 'create_site',
        'create_policy': 'create_policy',
        'create_publish': 'create_publish',
        'preflight': 'preflight',
        'publish': 'publish',
        'policy': 'policy',
        'delete_policy': 'delete_policy',
        'update_policy': 'update_policy',
        'credential': 'credential',
        'default_encryption_key': 'default_encryption_key',
        'delete_condition': 'delete_condition',
        'delete_domain': 'delete_domain',
        'delete_encryptionkey': 'delete_encryptionkey',
        'delete_site': 'delete_site',
        'delete_snapshot': 'delete_snapshot',
        'domain': 'domain',
        'domain_priority': 'domain_priority',
        'encryptionkey': 'encryptionkey',
        'list_conditions': 'list_conditions',
        'list_condition_children': 'list_condition_children',
        'list_credentials': 'list_credentials',
        'list_domains': 'list_domains',
        'list_policies': 'list_policies',
        'list_encryptionkeys': 'list_encryptionkeys',
        'list_sites': 'list_sites',
        'list_snapshots': 'list_snapshots',
        'next': 'next',
        'prev': 'prev',
        'search_conditions': 'search_conditions',
        'restore_snapshot': 'restore_snapshot',
        'site': 'site',
        'site_priority': 'site_priority',
        'update_condition': 'update_condition',
        'snapshot': 'snapshot',
        'update_domain': 'update_domain',
        'update_domain_priority': 'update_domain_priority',
        'update_site': 'update_site',
        'update_site_priority': 'update_site_priority'
    }

    def __init__(self, account=None, analysis_host=None, condition=None, create_condition=None, create_domain=None, create_preflight=None, create_site=None, create_policy=None, create_publish=None, preflight=None, publish=None, policy=None, delete_policy=None, update_policy=None, credential=None, default_encryption_key=None, delete_condition=None, delete_domain=None, delete_encryptionkey=None, delete_site=None, delete_snapshot=None, domain=None, domain_priority=None, encryptionkey=None, list_conditions=None, list_condition_children=None, list_credentials=None, list_domains=None, list_policies=None, list_encryptionkeys=None, list_sites=None, list_snapshots=None, next=None, prev=None, search_conditions=None, restore_snapshot=None, site=None, site_priority=None, update_condition=None, snapshot=None, update_domain=None, update_domain_priority=None, update_site=None, update_site_priority=None):  # noqa: E501
        """Links - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._analysis_host = None
        self._condition = None
        self._create_condition = None
        self._create_domain = None
        self._create_preflight = None
        self._create_site = None
        self._create_policy = None
        self._create_publish = None
        self._preflight = None
        self._publish = None
        self._policy = None
        self._delete_policy = None
        self._update_policy = None
        self._credential = None
        self._default_encryption_key = None
        self._delete_condition = None
        self._delete_domain = None
        self._delete_encryptionkey = None
        self._delete_site = None
        self._delete_snapshot = None
        self._domain = None
        self._domain_priority = None
        self._encryptionkey = None
        self._list_conditions = None
        self._list_condition_children = None
        self._list_credentials = None
        self._list_domains = None
        self._list_policies = None
        self._list_encryptionkeys = None
        self._list_sites = None
        self._list_snapshots = None
        self._next = None
        self._prev = None
        self._search_conditions = None
        self._restore_snapshot = None
        self._site = None
        self._site_priority = None
        self._update_condition = None
        self._snapshot = None
        self._update_domain = None
        self._update_domain_priority = None
        self._update_site = None
        self._update_site_priority = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if analysis_host is not None:
            self.analysis_host = analysis_host
        if condition is not None:
            self.condition = condition
        if create_condition is not None:
            self.create_condition = create_condition
        if create_domain is not None:
            self.create_domain = create_domain
        if create_preflight is not None:
            self.create_preflight = create_preflight
        if create_site is not None:
            self.create_site = create_site
        if create_policy is not None:
            self.create_policy = create_policy
        if create_publish is not None:
            self.create_publish = create_publish
        if preflight is not None:
            self.preflight = preflight
        if publish is not None:
            self.publish = publish
        if policy is not None:
            self.policy = policy
        if delete_policy is not None:
            self.delete_policy = delete_policy
        if update_policy is not None:
            self.update_policy = update_policy
        if credential is not None:
            self.credential = credential
        if default_encryption_key is not None:
            self.default_encryption_key = default_encryption_key
        if delete_condition is not None:
            self.delete_condition = delete_condition
        if delete_domain is not None:
            self.delete_domain = delete_domain
        if delete_encryptionkey is not None:
            self.delete_encryptionkey = delete_encryptionkey
        if delete_site is not None:
            self.delete_site = delete_site
        if delete_snapshot is not None:
            self.delete_snapshot = delete_snapshot
        if domain is not None:
            self.domain = domain
        if domain_priority is not None:
            self.domain_priority = domain_priority
        if encryptionkey is not None:
            self.encryptionkey = encryptionkey
        if list_conditions is not None:
            self.list_conditions = list_conditions
        if list_condition_children is not None:
            self.list_condition_children = list_condition_children
        if list_credentials is not None:
            self.list_credentials = list_credentials
        if list_domains is not None:
            self.list_domains = list_domains
        if list_policies is not None:
            self.list_policies = list_policies
        if list_encryptionkeys is not None:
            self.list_encryptionkeys = list_encryptionkeys
        if list_sites is not None:
            self.list_sites = list_sites
        if list_snapshots is not None:
            self.list_snapshots = list_snapshots
        if next is not None:
            self.next = next
        if prev is not None:
            self.prev = prev
        if search_conditions is not None:
            self.search_conditions = search_conditions
        if restore_snapshot is not None:
            self.restore_snapshot = restore_snapshot
        if site is not None:
            self.site = site
        if site_priority is not None:
            self.site_priority = site_priority
        if update_condition is not None:
            self.update_condition = update_condition
        if snapshot is not None:
            self.snapshot = snapshot
        if update_domain is not None:
            self.update_domain = update_domain
        if update_domain_priority is not None:
            self.update_domain_priority = update_domain_priority
        if update_site is not None:
            self.update_site = update_site
        if update_site_priority is not None:
            self.update_site_priority = update_site_priority

    @property
    def account(self):
        """Gets the account of this Links.  # noqa: E501

        A related Account resource  # noqa: E501

        :return: The account of this Links.  # noqa: E501
        :rtype: OneOfLinksAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Links.

        A related Account resource  # noqa: E501

        :param account: The account of this Links.  # noqa: E501
        :type: OneOfLinksAccount
        """

        self._account = account

    @property
    def analysis_host(self):
        """Gets the analysis_host of this Links.  # noqa: E501

        The Analysis Host  # noqa: E501

        :return: The analysis_host of this Links.  # noqa: E501
        :rtype: OneOfLinksAnalysisHost
        """
        return self._analysis_host

    @analysis_host.setter
    def analysis_host(self, analysis_host):
        """Sets the analysis_host of this Links.

        The Analysis Host  # noqa: E501

        :param analysis_host: The analysis_host of this Links.  # noqa: E501
        :type: OneOfLinksAnalysisHost
        """

        self._analysis_host = analysis_host

    @property
    def condition(self):
        """Gets the condition of this Links.  # noqa: E501

        A Condition resource  # noqa: E501

        :return: The condition of this Links.  # noqa: E501
        :rtype: OneOfLinksCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Links.

        A Condition resource  # noqa: E501

        :param condition: The condition of this Links.  # noqa: E501
        :type: OneOfLinksCondition
        """

        self._condition = condition

    @property
    def create_condition(self):
        """Gets the create_condition of this Links.  # noqa: E501

        A relation for creating a new Condition resource. The relation will only be included if the user has permission to create a new Condition.   # noqa: E501

        :return: The create_condition of this Links.  # noqa: E501
        :rtype: OneOfLinksCreateCondition
        """
        return self._create_condition

    @create_condition.setter
    def create_condition(self, create_condition):
        """Sets the create_condition of this Links.

        A relation for creating a new Condition resource. The relation will only be included if the user has permission to create a new Condition.   # noqa: E501

        :param create_condition: The create_condition of this Links.  # noqa: E501
        :type: OneOfLinksCreateCondition
        """

        self._create_condition = create_condition

    @property
    def create_domain(self):
        """Gets the create_domain of this Links.  # noqa: E501

        A relation for creating a new Domain resource. The relation will only be included if the user has permission to create a new Domain.   # noqa: E501

        :return: The create_domain of this Links.  # noqa: E501
        :rtype: OneOfLinksCreateDomain
        """
        return self._create_domain

    @create_domain.setter
    def create_domain(self, create_domain):
        """Sets the create_domain of this Links.

        A relation for creating a new Domain resource. The relation will only be included if the user has permission to create a new Domain.   # noqa: E501

        :param create_domain: The create_domain of this Links.  # noqa: E501
        :type: OneOfLinksCreateDomain
        """

        self._create_domain = create_domain

    @property
    def create_preflight(self):
        """Gets the create_preflight of this Links.  # noqa: E501

        A relation for creating a new preflight resource. The relation will only be included if the user has permission to create a new preflight.   # noqa: E501

        :return: The create_preflight of this Links.  # noqa: E501
        :rtype: OneOfLinksCreatePreflight
        """
        return self._create_preflight

    @create_preflight.setter
    def create_preflight(self, create_preflight):
        """Sets the create_preflight of this Links.

        A relation for creating a new preflight resource. The relation will only be included if the user has permission to create a new preflight.   # noqa: E501

        :param create_preflight: The create_preflight of this Links.  # noqa: E501
        :type: OneOfLinksCreatePreflight
        """

        self._create_preflight = create_preflight

    @property
    def create_site(self):
        """Gets the create_site of this Links.  # noqa: E501

        A relation for creating a new Site resource. The relation will only be included if the user has permission to create a new Site.   # noqa: E501

        :return: The create_site of this Links.  # noqa: E501
        :rtype: OneOfLinksCreateSite
        """
        return self._create_site

    @create_site.setter
    def create_site(self, create_site):
        """Sets the create_site of this Links.

        A relation for creating a new Site resource. The relation will only be included if the user has permission to create a new Site.   # noqa: E501

        :param create_site: The create_site of this Links.  # noqa: E501
        :type: OneOfLinksCreateSite
        """

        self._create_site = create_site

    @property
    def create_policy(self):
        """Gets the create_policy of this Links.  # noqa: E501

        A relation for creating a new Policy resource. The relation will only be included if the user has permission to create a new Policy.   # noqa: E501

        :return: The create_policy of this Links.  # noqa: E501
        :rtype: OneOfLinksCreatePolicy
        """
        return self._create_policy

    @create_policy.setter
    def create_policy(self, create_policy):
        """Sets the create_policy of this Links.

        A relation for creating a new Policy resource. The relation will only be included if the user has permission to create a new Policy.   # noqa: E501

        :param create_policy: The create_policy of this Links.  # noqa: E501
        :type: OneOfLinksCreatePolicy
        """

        self._create_policy = create_policy

    @property
    def create_publish(self):
        """Gets the create_publish of this Links.  # noqa: E501

        A relation for creating a new Publish resource. The relation will only be included if the user has permission to create a new Policy.   # noqa: E501

        :return: The create_publish of this Links.  # noqa: E501
        :rtype: OneOfLinksCreatePublish
        """
        return self._create_publish

    @create_publish.setter
    def create_publish(self, create_publish):
        """Sets the create_publish of this Links.

        A relation for creating a new Publish resource. The relation will only be included if the user has permission to create a new Policy.   # noqa: E501

        :param create_publish: The create_publish of this Links.  # noqa: E501
        :type: OneOfLinksCreatePublish
        """

        self._create_publish = create_publish

    @property
    def preflight(self):
        """Gets the preflight of this Links.  # noqa: E501

        A related Preflight resource.   # noqa: E501

        :return: The preflight of this Links.  # noqa: E501
        :rtype: OneOfLinksPreflight
        """
        return self._preflight

    @preflight.setter
    def preflight(self, preflight):
        """Sets the preflight of this Links.

        A related Preflight resource.   # noqa: E501

        :param preflight: The preflight of this Links.  # noqa: E501
        :type: OneOfLinksPreflight
        """

        self._preflight = preflight

    @property
    def publish(self):
        """Gets the publish of this Links.  # noqa: E501

        A related Publish resource.   # noqa: E501

        :return: The publish of this Links.  # noqa: E501
        :rtype: OneOfLinksPublish
        """
        return self._publish

    @publish.setter
    def publish(self, publish):
        """Sets the publish of this Links.

        A related Publish resource.   # noqa: E501

        :param publish: The publish of this Links.  # noqa: E501
        :type: OneOfLinksPublish
        """

        self._publish = publish

    @property
    def policy(self):
        """Gets the policy of this Links.  # noqa: E501

        A related Policy resource.   # noqa: E501

        :return: The policy of this Links.  # noqa: E501
        :rtype: OneOfLinksPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Links.

        A related Policy resource.   # noqa: E501

        :param policy: The policy of this Links.  # noqa: E501
        :type: OneOfLinksPolicy
        """

        self._policy = policy

    @property
    def delete_policy(self):
        """Gets the delete_policy of this Links.  # noqa: E501

        A relation for deleting a Policy resource. The relation will only be included if the user has permission to delete a Policy.   # noqa: E501

        :return: The delete_policy of this Links.  # noqa: E501
        :rtype: OneOfLinksDeletePolicy
        """
        return self._delete_policy

    @delete_policy.setter
    def delete_policy(self, delete_policy):
        """Sets the delete_policy of this Links.

        A relation for deleting a Policy resource. The relation will only be included if the user has permission to delete a Policy.   # noqa: E501

        :param delete_policy: The delete_policy of this Links.  # noqa: E501
        :type: OneOfLinksDeletePolicy
        """

        self._delete_policy = delete_policy

    @property
    def update_policy(self):
        """Gets the update_policy of this Links.  # noqa: E501

        A relation for updating a Policy resource. The relation will only be included if the user has permission to update a Policy.   # noqa: E501

        :return: The update_policy of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdatePolicy
        """
        return self._update_policy

    @update_policy.setter
    def update_policy(self, update_policy):
        """Sets the update_policy of this Links.

        A relation for updating a Policy resource. The relation will only be included if the user has permission to update a Policy.   # noqa: E501

        :param update_policy: The update_policy of this Links.  # noqa: E501
        :type: OneOfLinksUpdatePolicy
        """

        self._update_policy = update_policy

    @property
    def credential(self):
        """Gets the credential of this Links.  # noqa: E501

        A related credential resource.  # noqa: E501

        :return: The credential of this Links.  # noqa: E501
        :rtype: OneOfLinksCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this Links.

        A related credential resource.  # noqa: E501

        :param credential: The credential of this Links.  # noqa: E501
        :type: OneOfLinksCredential
        """

        self._credential = credential

    @property
    def default_encryption_key(self):
        """Gets the default_encryption_key of this Links.  # noqa: E501

        A relation for retrieving the default encryption key of an Account.   # noqa: E501

        :return: The default_encryption_key of this Links.  # noqa: E501
        :rtype: OneOfLinksDefaultEncryptionKey
        """
        return self._default_encryption_key

    @default_encryption_key.setter
    def default_encryption_key(self, default_encryption_key):
        """Sets the default_encryption_key of this Links.

        A relation for retrieving the default encryption key of an Account.   # noqa: E501

        :param default_encryption_key: The default_encryption_key of this Links.  # noqa: E501
        :type: OneOfLinksDefaultEncryptionKey
        """

        self._default_encryption_key = default_encryption_key

    @property
    def delete_condition(self):
        """Gets the delete_condition of this Links.  # noqa: E501

        A relation for deleting a Condition resource. The relation will only be included if the user has permission to delete a Condition.   # noqa: E501

        :return: The delete_condition of this Links.  # noqa: E501
        :rtype: OneOfLinksDeleteCondition
        """
        return self._delete_condition

    @delete_condition.setter
    def delete_condition(self, delete_condition):
        """Sets the delete_condition of this Links.

        A relation for deleting a Condition resource. The relation will only be included if the user has permission to delete a Condition.   # noqa: E501

        :param delete_condition: The delete_condition of this Links.  # noqa: E501
        :type: OneOfLinksDeleteCondition
        """

        self._delete_condition = delete_condition

    @property
    def delete_domain(self):
        """Gets the delete_domain of this Links.  # noqa: E501

        A relation for deleting a Domain resource. The relation will only be included if the user has permission to delete a Domain.   # noqa: E501

        :return: The delete_domain of this Links.  # noqa: E501
        :rtype: OneOfLinksDeleteDomain
        """
        return self._delete_domain

    @delete_domain.setter
    def delete_domain(self, delete_domain):
        """Sets the delete_domain of this Links.

        A relation for deleting a Domain resource. The relation will only be included if the user has permission to delete a Domain.   # noqa: E501

        :param delete_domain: The delete_domain of this Links.  # noqa: E501
        :type: OneOfLinksDeleteDomain
        """

        self._delete_domain = delete_domain

    @property
    def delete_encryptionkey(self):
        """Gets the delete_encryptionkey of this Links.  # noqa: E501

        A relation for deleting an encryption key resource. The relation will only be included if the user has permission to delete an encryption key.   # noqa: E501

        :return: The delete_encryptionkey of this Links.  # noqa: E501
        :rtype: OneOfLinksDeleteEncryptionkey
        """
        return self._delete_encryptionkey

    @delete_encryptionkey.setter
    def delete_encryptionkey(self, delete_encryptionkey):
        """Sets the delete_encryptionkey of this Links.

        A relation for deleting an encryption key resource. The relation will only be included if the user has permission to delete an encryption key.   # noqa: E501

        :param delete_encryptionkey: The delete_encryptionkey of this Links.  # noqa: E501
        :type: OneOfLinksDeleteEncryptionkey
        """

        self._delete_encryptionkey = delete_encryptionkey

    @property
    def delete_site(self):
        """Gets the delete_site of this Links.  # noqa: E501

        A relation for deleting a Site resource. The relation will only be included if the user has permission to delete a Site.   # noqa: E501

        :return: The delete_site of this Links.  # noqa: E501
        :rtype: OneOfLinksDeleteSite
        """
        return self._delete_site

    @delete_site.setter
    def delete_site(self, delete_site):
        """Sets the delete_site of this Links.

        A relation for deleting a Site resource. The relation will only be included if the user has permission to delete a Site.   # noqa: E501

        :param delete_site: The delete_site of this Links.  # noqa: E501
        :type: OneOfLinksDeleteSite
        """

        self._delete_site = delete_site

    @property
    def delete_snapshot(self):
        """Gets the delete_snapshot of this Links.  # noqa: E501

        A relation for deleting a snapshot.  The relation will only be included if the user has permissions to delete a snapshot.   # noqa: E501

        :return: The delete_snapshot of this Links.  # noqa: E501
        :rtype: OneOfLinksDeleteSnapshot
        """
        return self._delete_snapshot

    @delete_snapshot.setter
    def delete_snapshot(self, delete_snapshot):
        """Sets the delete_snapshot of this Links.

        A relation for deleting a snapshot.  The relation will only be included if the user has permissions to delete a snapshot.   # noqa: E501

        :param delete_snapshot: The delete_snapshot of this Links.  # noqa: E501
        :type: OneOfLinksDeleteSnapshot
        """

        self._delete_snapshot = delete_snapshot

    @property
    def domain(self):
        """Gets the domain of this Links.  # noqa: E501

        A related Domain resource  # noqa: E501

        :return: The domain of this Links.  # noqa: E501
        :rtype: OneOfLinksDomain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Links.

        A related Domain resource  # noqa: E501

        :param domain: The domain of this Links.  # noqa: E501
        :type: OneOfLinksDomain
        """

        self._domain = domain

    @property
    def domain_priority(self):
        """Gets the domain_priority of this Links.  # noqa: E501

        Domain priorities for this site  # noqa: E501

        :return: The domain_priority of this Links.  # noqa: E501
        :rtype: OneOfLinksDomainPriority
        """
        return self._domain_priority

    @domain_priority.setter
    def domain_priority(self, domain_priority):
        """Sets the domain_priority of this Links.

        Domain priorities for this site  # noqa: E501

        :param domain_priority: The domain_priority of this Links.  # noqa: E501
        :type: OneOfLinksDomainPriority
        """

        self._domain_priority = domain_priority

    @property
    def encryptionkey(self):
        """Gets the encryptionkey of this Links.  # noqa: E501

        A related encryption key resource  # noqa: E501

        :return: The encryptionkey of this Links.  # noqa: E501
        :rtype: OneOfLinksEncryptionkey
        """
        return self._encryptionkey

    @encryptionkey.setter
    def encryptionkey(self, encryptionkey):
        """Sets the encryptionkey of this Links.

        A related encryption key resource  # noqa: E501

        :param encryptionkey: The encryptionkey of this Links.  # noqa: E501
        :type: OneOfLinksEncryptionkey
        """

        self._encryptionkey = encryptionkey

    @property
    def list_conditions(self):
        """Gets the list_conditions of this Links.  # noqa: E501

        List all related conditions  # noqa: E501

        :return: The list_conditions of this Links.  # noqa: E501
        :rtype: OneOfLinksListConditions
        """
        return self._list_conditions

    @list_conditions.setter
    def list_conditions(self, list_conditions):
        """Sets the list_conditions of this Links.

        List all related conditions  # noqa: E501

        :param list_conditions: The list_conditions of this Links.  # noqa: E501
        :type: OneOfLinksListConditions
        """

        self._list_conditions = list_conditions

    @property
    def list_condition_children(self):
        """Gets the list_condition_children of this Links.  # noqa: E501

        List all children of a condition  # noqa: E501

        :return: The list_condition_children of this Links.  # noqa: E501
        :rtype: OneOfLinksListConditionChildren
        """
        return self._list_condition_children

    @list_condition_children.setter
    def list_condition_children(self, list_condition_children):
        """Sets the list_condition_children of this Links.

        List all children of a condition  # noqa: E501

        :param list_condition_children: The list_condition_children of this Links.  # noqa: E501
        :type: OneOfLinksListConditionChildren
        """

        self._list_condition_children = list_condition_children

    @property
    def list_credentials(self):
        """Gets the list_credentials of this Links.  # noqa: E501

        List all related credentials  # noqa: E501

        :return: The list_credentials of this Links.  # noqa: E501
        :rtype: OneOfLinksListCredentials
        """
        return self._list_credentials

    @list_credentials.setter
    def list_credentials(self, list_credentials):
        """Sets the list_credentials of this Links.

        List all related credentials  # noqa: E501

        :param list_credentials: The list_credentials of this Links.  # noqa: E501
        :type: OneOfLinksListCredentials
        """

        self._list_credentials = list_credentials

    @property
    def list_domains(self):
        """Gets the list_domains of this Links.  # noqa: E501

        List all related Domains  # noqa: E501

        :return: The list_domains of this Links.  # noqa: E501
        :rtype: OneOfLinksListDomains
        """
        return self._list_domains

    @list_domains.setter
    def list_domains(self, list_domains):
        """Sets the list_domains of this Links.

        List all related Domains  # noqa: E501

        :param list_domains: The list_domains of this Links.  # noqa: E501
        :type: OneOfLinksListDomains
        """

        self._list_domains = list_domains

    @property
    def list_policies(self):
        """Gets the list_policies of this Links.  # noqa: E501

        List all related Policies  # noqa: E501

        :return: The list_policies of this Links.  # noqa: E501
        :rtype: OneOfLinksListPolicies
        """
        return self._list_policies

    @list_policies.setter
    def list_policies(self, list_policies):
        """Sets the list_policies of this Links.

        List all related Policies  # noqa: E501

        :param list_policies: The list_policies of this Links.  # noqa: E501
        :type: OneOfLinksListPolicies
        """

        self._list_policies = list_policies

    @property
    def list_encryptionkeys(self):
        """Gets the list_encryptionkeys of this Links.  # noqa: E501

        List all related encryption keys  # noqa: E501

        :return: The list_encryptionkeys of this Links.  # noqa: E501
        :rtype: OneOfLinksListEncryptionkeys
        """
        return self._list_encryptionkeys

    @list_encryptionkeys.setter
    def list_encryptionkeys(self, list_encryptionkeys):
        """Sets the list_encryptionkeys of this Links.

        List all related encryption keys  # noqa: E501

        :param list_encryptionkeys: The list_encryptionkeys of this Links.  # noqa: E501
        :type: OneOfLinksListEncryptionkeys
        """

        self._list_encryptionkeys = list_encryptionkeys

    @property
    def list_sites(self):
        """Gets the list_sites of this Links.  # noqa: E501

        List all related Sites  # noqa: E501

        :return: The list_sites of this Links.  # noqa: E501
        :rtype: OneOfLinksListSites
        """
        return self._list_sites

    @list_sites.setter
    def list_sites(self, list_sites):
        """Sets the list_sites of this Links.

        List all related Sites  # noqa: E501

        :param list_sites: The list_sites of this Links.  # noqa: E501
        :type: OneOfLinksListSites
        """

        self._list_sites = list_sites

    @property
    def list_snapshots(self):
        """Gets the list_snapshots of this Links.  # noqa: E501

        List all related Snapshots  # noqa: E501

        :return: The list_snapshots of this Links.  # noqa: E501
        :rtype: OneOfLinksListSnapshots
        """
        return self._list_snapshots

    @list_snapshots.setter
    def list_snapshots(self, list_snapshots):
        """Sets the list_snapshots of this Links.

        List all related Snapshots  # noqa: E501

        :param list_snapshots: The list_snapshots of this Links.  # noqa: E501
        :type: OneOfLinksListSnapshots
        """

        self._list_snapshots = list_snapshots

    @property
    def next(self):
        """Gets the next of this Links.  # noqa: E501

        The resource is paginated, and following the href in the 'next' relation will lead to the next page.   # noqa: E501

        :return: The next of this Links.  # noqa: E501
        :rtype: OneOfLinksNext
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this Links.

        The resource is paginated, and following the href in the 'next' relation will lead to the next page.   # noqa: E501

        :param next: The next of this Links.  # noqa: E501
        :type: OneOfLinksNext
        """

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this Links.  # noqa: E501

        The resource is paginated, and following the href in the 'prev' relation will lead to the previous page.   # noqa: E501

        :return: The prev of this Links.  # noqa: E501
        :rtype: OneOfLinksPrev
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this Links.

        The resource is paginated, and following the href in the 'prev' relation will lead to the previous page.   # noqa: E501

        :param prev: The prev of this Links.  # noqa: E501
        :type: OneOfLinksPrev
        """

        self._prev = prev

    @property
    def search_conditions(self):
        """Gets the search_conditions of this Links.  # noqa: E501

        Search for conditions  # noqa: E501

        :return: The search_conditions of this Links.  # noqa: E501
        :rtype: OneOfLinksSearchConditions
        """
        return self._search_conditions

    @search_conditions.setter
    def search_conditions(self, search_conditions):
        """Sets the search_conditions of this Links.

        Search for conditions  # noqa: E501

        :param search_conditions: The search_conditions of this Links.  # noqa: E501
        :type: OneOfLinksSearchConditions
        """

        self._search_conditions = search_conditions

    @property
    def restore_snapshot(self):
        """Gets the restore_snapshot of this Links.  # noqa: E501

        A relation for restoring a snapshot.  The relation will only be included if the user has permissions to change everything in the account.   # noqa: E501

        :return: The restore_snapshot of this Links.  # noqa: E501
        :rtype: OneOfLinksRestoreSnapshot
        """
        return self._restore_snapshot

    @restore_snapshot.setter
    def restore_snapshot(self, restore_snapshot):
        """Sets the restore_snapshot of this Links.

        A relation for restoring a snapshot.  The relation will only be included if the user has permissions to change everything in the account.   # noqa: E501

        :param restore_snapshot: The restore_snapshot of this Links.  # noqa: E501
        :type: OneOfLinksRestoreSnapshot
        """

        self._restore_snapshot = restore_snapshot

    @property
    def site(self):
        """Gets the site of this Links.  # noqa: E501

        The related Site resource  # noqa: E501

        :return: The site of this Links.  # noqa: E501
        :rtype: OneOfLinksSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Links.

        The related Site resource  # noqa: E501

        :param site: The site of this Links.  # noqa: E501
        :type: OneOfLinksSite
        """

        self._site = site

    @property
    def site_priority(self):
        """Gets the site_priority of this Links.  # noqa: E501

        Site priorities for this account  # noqa: E501

        :return: The site_priority of this Links.  # noqa: E501
        :rtype: OneOfLinksSitePriority
        """
        return self._site_priority

    @site_priority.setter
    def site_priority(self, site_priority):
        """Sets the site_priority of this Links.

        Site priorities for this account  # noqa: E501

        :param site_priority: The site_priority of this Links.  # noqa: E501
        :type: OneOfLinksSitePriority
        """

        self._site_priority = site_priority

    @property
    def update_condition(self):
        """Gets the update_condition of this Links.  # noqa: E501

        A relation for updating a Condition resource. The relation will only be included if the user has permission to update a Condition.   # noqa: E501

        :return: The update_condition of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdateCondition
        """
        return self._update_condition

    @update_condition.setter
    def update_condition(self, update_condition):
        """Sets the update_condition of this Links.

        A relation for updating a Condition resource. The relation will only be included if the user has permission to update a Condition.   # noqa: E501

        :param update_condition: The update_condition of this Links.  # noqa: E501
        :type: OneOfLinksUpdateCondition
        """

        self._update_condition = update_condition

    @property
    def snapshot(self):
        """Gets the snapshot of this Links.  # noqa: E501

        A related snapshot  # noqa: E501

        :return: The snapshot of this Links.  # noqa: E501
        :rtype: OneOfLinksSnapshot
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """Sets the snapshot of this Links.

        A related snapshot  # noqa: E501

        :param snapshot: The snapshot of this Links.  # noqa: E501
        :type: OneOfLinksSnapshot
        """

        self._snapshot = snapshot

    @property
    def update_domain(self):
        """Gets the update_domain of this Links.  # noqa: E501

        A relation for updating a Domain resource. The relation will only be included if the user has permission to update a Domain.   # noqa: E501

        :return: The update_domain of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdateDomain
        """
        return self._update_domain

    @update_domain.setter
    def update_domain(self, update_domain):
        """Sets the update_domain of this Links.

        A relation for updating a Domain resource. The relation will only be included if the user has permission to update a Domain.   # noqa: E501

        :param update_domain: The update_domain of this Links.  # noqa: E501
        :type: OneOfLinksUpdateDomain
        """

        self._update_domain = update_domain

    @property
    def update_domain_priority(self):
        """Gets the update_domain_priority of this Links.  # noqa: E501

        A relation for updating Domain priorities for this site. The relation will only be included if the user has permission to update this Site.   # noqa: E501

        :return: The update_domain_priority of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdateDomainPriority
        """
        return self._update_domain_priority

    @update_domain_priority.setter
    def update_domain_priority(self, update_domain_priority):
        """Sets the update_domain_priority of this Links.

        A relation for updating Domain priorities for this site. The relation will only be included if the user has permission to update this Site.   # noqa: E501

        :param update_domain_priority: The update_domain_priority of this Links.  # noqa: E501
        :type: OneOfLinksUpdateDomainPriority
        """

        self._update_domain_priority = update_domain_priority

    @property
    def update_site(self):
        """Gets the update_site of this Links.  # noqa: E501

        A relation for updating a Site resource. The relation will only be included if the user has permission to update a Site.   # noqa: E501

        :return: The update_site of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdateSite
        """
        return self._update_site

    @update_site.setter
    def update_site(self, update_site):
        """Sets the update_site of this Links.

        A relation for updating a Site resource. The relation will only be included if the user has permission to update a Site.   # noqa: E501

        :param update_site: The update_site of this Links.  # noqa: E501
        :type: OneOfLinksUpdateSite
        """

        self._update_site = update_site

    @property
    def update_site_priority(self):
        """Gets the update_site_priority of this Links.  # noqa: E501

        A relation for updating Site priorities for this account. The relation will only be included if the user has permission to update this account.   # noqa: E501

        :return: The update_site_priority of this Links.  # noqa: E501
        :rtype: OneOfLinksUpdateSitePriority
        """
        return self._update_site_priority

    @update_site_priority.setter
    def update_site_priority(self, update_site_priority):
        """Sets the update_site_priority of this Links.

        A relation for updating Site priorities for this account. The relation will only be included if the user has permission to update this account.   # noqa: E501

        :param update_site_priority: The update_site_priority of this Links.  # noqa: E501
        :type: OneOfLinksUpdateSitePriority
        """

        self._update_site_priority = update_site_priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Links, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Links):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
