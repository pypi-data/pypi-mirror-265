# coding: utf-8

"""
    Advanced Bot Protection API

    This is the API for onboarding websites into Advanced Bot Protection. For full feature documentation, see [Advanced Bot Protection](https://docs.imperva.com/bundle/advanced-bot-protection/page/74791.htm)  ## Terminology differences  The API term *Domain* corresponds to, and is interchangeable with, a *Website* as used in the UI and web based documentation.  The API term *Site* corresponds to and is interchangeable with a *Website Group* as used in the UI and web based documentation.  The API term *Selector* corresponds to and is interchangeable with a *per-Path* *Policy* as used in the UI and web based documentation.  Besides the Imperva *account*, there is also an Advanced Bot Protection *account*. The are connected but have their own identifiers that cannot be mixed. In the API, *account* always refers to an ABP account unless otherwise specified.  ## Updates  When using PUT to update a resource, the entire resource will be replaced and any omitted fields may be deleted. To prevent data loss when performing an update you must GET the resource, update the returned response, and then send the result as the PUT request body.  ## API compatibility  Previous versions of the API are deprecated when a new version is released. Previous versions will be supported until further notice.  For a client to stay compatible with non breaking changes they need to take the following into account:  * New optional properties and properties with default values may   be added to JSON objects used as API request bodies.  * New properties may be added to JSON objects in API response bodies.  * Certain sum types (e.g. `enum` and `oneOf`) are documented as *open*   which means new alternatives can be added. The new values will only   be present if configured using the API or UI.  ## Authentication  See [API Key Management](https://docs.imperva.com/bundle/cloud-application-security/page/settings/api-keys.htm) for instructions on how to authenticate to this API.  ## Pagination  Resources may be paginated. This is indicated by the inclusion of the 'next' and/or the 'prev' relations in the '_links' property. See the Links schema documentation.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'PolicyId',
        'account_id': 'AccountId',
        'name': 'Name',
        'description': 'str',
        'directives': 'list[DirectiveV1]',
        'created_at': 'OneOfPolicyV1CreatedAt',
        'modified_at': 'OneOfPolicyV1ModifiedAt'
    }

    attribute_map = {
        'id': 'id',
        'account_id': 'account_id',
        'name': 'name',
        'description': 'description',
        'directives': 'directives',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, id=None, account_id=None, name=None, description=None, directives=None, created_at=None, modified_at=None):  # noqa: E501
        """PolicyV1 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._account_id = None
        self._name = None
        self._description = None
        self._directives = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None
        self.id = id
        self.account_id = account_id
        self.name = name
        if description is not None:
            self.description = description
        self.directives = directives
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this PolicyV1.  # noqa: E501


        :return: The id of this PolicyV1.  # noqa: E501
        :rtype: PolicyId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyV1.


        :param id: The id of this PolicyV1.  # noqa: E501
        :type: PolicyId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def account_id(self):
        """Gets the account_id of this PolicyV1.  # noqa: E501


        :return: The account_id of this PolicyV1.  # noqa: E501
        :rtype: AccountId
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PolicyV1.


        :param account_id: The account_id of this PolicyV1.  # noqa: E501
        :type: AccountId
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def name(self):
        """Gets the name of this PolicyV1.  # noqa: E501


        :return: The name of this PolicyV1.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyV1.


        :param name: The name of this PolicyV1.  # noqa: E501
        :type: Name
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this PolicyV1.  # noqa: E501

        An optional user-defined description for this policy.  # noqa: E501

        :return: The description of this PolicyV1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyV1.

        An optional user-defined description for this policy.  # noqa: E501

        :param description: The description of this PolicyV1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def directives(self):
        """Gets the directives of this PolicyV1.  # noqa: E501


        :return: The directives of this PolicyV1.  # noqa: E501
        :rtype: list[DirectiveV1]
        """
        return self._directives

    @directives.setter
    def directives(self, directives):
        """Sets the directives of this PolicyV1.


        :param directives: The directives of this PolicyV1.  # noqa: E501
        :type: list[DirectiveV1]
        """
        if directives is None:
            raise ValueError("Invalid value for `directives`, must not be `None`")  # noqa: E501

        self._directives = directives

    @property
    def created_at(self):
        """Gets the created_at of this PolicyV1.  # noqa: E501


        :return: The created_at of this PolicyV1.  # noqa: E501
        :rtype: OneOfPolicyV1CreatedAt
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PolicyV1.


        :param created_at: The created_at of this PolicyV1.  # noqa: E501
        :type: OneOfPolicyV1CreatedAt
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this PolicyV1.  # noqa: E501


        :return: The modified_at of this PolicyV1.  # noqa: E501
        :rtype: OneOfPolicyV1ModifiedAt
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this PolicyV1.


        :param modified_at: The modified_at of this PolicyV1.  # noqa: E501
        :type: OneOfPolicyV1ModifiedAt
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
