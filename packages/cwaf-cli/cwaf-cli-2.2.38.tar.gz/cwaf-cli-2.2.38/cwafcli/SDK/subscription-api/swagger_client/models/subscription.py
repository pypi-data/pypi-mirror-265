# coding: utf-8

"""
    Imperva Subscription Management API

    Access the subscription data for your account using the API. For the full feature documentation, see [Subscription status](https://docs.imperva.com/bundle/cloud-application-security/page/settings/subscription.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Subscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'base_plan_sku_display_names': 'list[str]',
        'subscription_status': 'str',
        'usage_cycle_day': 'int',
        'let_expire': 'date',
        'creation_date': 'date',
        'payment_gateway': 'str'
    }

    attribute_map = {
        'id': 'id',
        'base_plan_sku_display_names': 'base_plan_sku_display_names',
        'subscription_status': 'subscription_status',
        'usage_cycle_day': 'usage_cycle_day',
        'let_expire': 'let_expire',
        'creation_date': 'creation_date',
        'payment_gateway': 'payment_gateway'
    }

    def __init__(self, id=None, base_plan_sku_display_names=None, subscription_status=None, usage_cycle_day=None, let_expire=None, creation_date=None, payment_gateway=None):  # noqa: E501
        """Subscription - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._base_plan_sku_display_names = None
        self._subscription_status = None
        self._usage_cycle_day = None
        self._let_expire = None
        self._creation_date = None
        self._payment_gateway = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if base_plan_sku_display_names is not None:
            self.base_plan_sku_display_names = base_plan_sku_display_names
        if subscription_status is not None:
            self.subscription_status = subscription_status
        if usage_cycle_day is not None:
            self.usage_cycle_day = usage_cycle_day
        if let_expire is not None:
            self.let_expire = let_expire
        if creation_date is not None:
            self.creation_date = creation_date
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway

    @property
    def id(self):
        """Gets the id of this Subscription.  # noqa: E501

        Subscription ID.  # noqa: E501

        :return: The id of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        Subscription ID.  # noqa: E501

        :param id: The id of this Subscription.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def base_plan_sku_display_names(self):
        """Gets the base_plan_sku_display_names of this Subscription.  # noqa: E501

        The name of the subscription plan as displayed in the management console.  # noqa: E501

        :return: The base_plan_sku_display_names of this Subscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_plan_sku_display_names

    @base_plan_sku_display_names.setter
    def base_plan_sku_display_names(self, base_plan_sku_display_names):
        """Sets the base_plan_sku_display_names of this Subscription.

        The name of the subscription plan as displayed in the management console.  # noqa: E501

        :param base_plan_sku_display_names: The base_plan_sku_display_names of this Subscription.  # noqa: E501
        :type: list[str]
        """

        self._base_plan_sku_display_names = base_plan_sku_display_names

    @property
    def subscription_status(self):
        """Gets the subscription_status of this Subscription.  # noqa: E501

        Indicates the status of the subscription.  # noqa: E501

        :return: The subscription_status of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """Sets the subscription_status of this Subscription.

        Indicates the status of the subscription.  # noqa: E501

        :param subscription_status: The subscription_status of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "EXPIRED", "CANCELLED", "MIGRATION_INITIATED"]  # noqa: E501
        if subscription_status not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_status` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_status, allowed_values)
            )

        self._subscription_status = subscription_status

    @property
    def usage_cycle_day(self):
        """Gets the usage_cycle_day of this Subscription.  # noqa: E501

        The start of the period used for calculating usage. For example, the value 10 indicates that the usage period starts on the 10th of the month and ends on the 9th of the following month.  # noqa: E501

        :return: The usage_cycle_day of this Subscription.  # noqa: E501
        :rtype: int
        """
        return self._usage_cycle_day

    @usage_cycle_day.setter
    def usage_cycle_day(self, usage_cycle_day):
        """Sets the usage_cycle_day of this Subscription.

        The start of the period used for calculating usage. For example, the value 10 indicates that the usage period starts on the 10th of the month and ends on the 9th of the following month.  # noqa: E501

        :param usage_cycle_day: The usage_cycle_day of this Subscription.  # noqa: E501
        :type: int
        """

        self._usage_cycle_day = usage_cycle_day

    @property
    def let_expire(self):
        """Gets the let_expire of this Subscription.  # noqa: E501

        The date the subscription or trial period is set to end.  # noqa: E501

        :return: The let_expire of this Subscription.  # noqa: E501
        :rtype: date
        """
        return self._let_expire

    @let_expire.setter
    def let_expire(self, let_expire):
        """Sets the let_expire of this Subscription.

        The date the subscription or trial period is set to end.  # noqa: E501

        :param let_expire: The let_expire of this Subscription.  # noqa: E501
        :type: date
        """

        self._let_expire = let_expire

    @property
    def creation_date(self):
        """Gets the creation_date of this Subscription.  # noqa: E501

        Creation date of the subscription.  # noqa: E501

        :return: The creation_date of this Subscription.  # noqa: E501
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Subscription.

        Creation date of the subscription.  # noqa: E501

        :param creation_date: The creation_date of this Subscription.  # noqa: E501
        :type: date
        """

        self._creation_date = creation_date

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this Subscription.  # noqa: E501

        Indicates a subscription paid for by credit card.  # noqa: E501

        :return: The payment_gateway of this Subscription.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this Subscription.

        Indicates a subscription paid for by credit card.  # noqa: E501

        :param payment_gateway: The payment_gateway of this Subscription.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXTERNAL", "NONE"]  # noqa: E501
        if payment_gateway not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_gateway` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_gateway, allowed_values)
            )

        self._payment_gateway = payment_gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Subscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
