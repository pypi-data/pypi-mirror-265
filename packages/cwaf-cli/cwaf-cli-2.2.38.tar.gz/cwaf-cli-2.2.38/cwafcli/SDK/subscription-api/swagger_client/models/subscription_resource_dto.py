# coding: utf-8

"""
    Imperva Subscription Management API

    Access the subscription data for your account using the API. For the full feature documentation, see [Subscription status](https://docs.imperva.com/bundle/cloud-application-security/page/settings/subscription.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionResourceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'subscription_id': 'str',
        'resource_template_id': 'str',
        'account_id': 'int',
        'resource_display_name': 'str',
        'trial_end_date': 'date',
        'subscription_resource_value': 'OneOfSubscriptionResourceDtoSubscriptionResourceValue',
        'metering_model': 'str',
        'resource_status': 'str',
        'resource_template_version': 'int'
    }

    attribute_map = {
        'id': 'id',
        'subscription_id': 'subscription_id',
        'resource_template_id': 'resource_template_id',
        'account_id': 'account_id',
        'resource_display_name': 'resource_display_name',
        'trial_end_date': 'trial_end_date',
        'subscription_resource_value': 'subscription_resource_value',
        'metering_model': 'metering_model',
        'resource_status': 'resource_status',
        'resource_template_version': 'resource_template_version'
    }

    def __init__(self, id=None, subscription_id=None, resource_template_id=None, account_id=None, resource_display_name=None, trial_end_date=None, subscription_resource_value=None, metering_model=None, resource_status=None, resource_template_version=None):  # noqa: E501
        """SubscriptionResourceDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._subscription_id = None
        self._resource_template_id = None
        self._account_id = None
        self._resource_display_name = None
        self._trial_end_date = None
        self._subscription_resource_value = None
        self._metering_model = None
        self._resource_status = None
        self._resource_template_version = None
        self.discriminator = None
        self.id = id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        self.resource_template_id = resource_template_id
        if account_id is not None:
            self.account_id = account_id
        if resource_display_name is not None:
            self.resource_display_name = resource_display_name
        if trial_end_date is not None:
            self.trial_end_date = trial_end_date
        self.subscription_resource_value = subscription_resource_value
        self.metering_model = metering_model
        if resource_status is not None:
            self.resource_status = resource_status
        self.resource_template_version = resource_template_version

    @property
    def id(self):
        """Gets the id of this SubscriptionResourceDto.  # noqa: E501

        Subscription Resource ID.  # noqa: E501

        :return: The id of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionResourceDto.

        Subscription Resource ID.  # noqa: E501

        :param id: The id of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionResourceDto.  # noqa: E501

        Subscription ID.  # noqa: E501

        :return: The subscription_id of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionResourceDto.

        Subscription ID.  # noqa: E501

        :param subscription_id: The subscription_id of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def resource_template_id(self):
        """Gets the resource_template_id of this SubscriptionResourceDto.  # noqa: E501

        ID of resource template metadata for this subscription resource.  # noqa: E501

        :return: The resource_template_id of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_template_id

    @resource_template_id.setter
    def resource_template_id(self, resource_template_id):
        """Sets the resource_template_id of this SubscriptionResourceDto.

        ID of resource template metadata for this subscription resource.  # noqa: E501

        :param resource_template_id: The resource_template_id of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """
        if resource_template_id is None:
            raise ValueError("Invalid value for `resource_template_id`, must not be `None`")  # noqa: E501

        self._resource_template_id = resource_template_id

    @property
    def account_id(self):
        """Gets the account_id of this SubscriptionResourceDto.  # noqa: E501

        Account ID.  # noqa: E501

        :return: The account_id of this SubscriptionResourceDto.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SubscriptionResourceDto.

        Account ID.  # noqa: E501

        :param account_id: The account_id of this SubscriptionResourceDto.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def resource_display_name(self):
        """Gets the resource_display_name of this SubscriptionResourceDto.  # noqa: E501

        Display name of this subscription resource.  # noqa: E501

        :return: The resource_display_name of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_display_name

    @resource_display_name.setter
    def resource_display_name(self, resource_display_name):
        """Sets the resource_display_name of this SubscriptionResourceDto.

        Display name of this subscription resource.  # noqa: E501

        :param resource_display_name: The resource_display_name of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """

        self._resource_display_name = resource_display_name

    @property
    def trial_end_date(self):
        """Gets the trial_end_date of this SubscriptionResourceDto.  # noqa: E501

        Trial expiration date of this subscription resource, specified as an ISO Date Format yyyy-MM-dd.  # noqa: E501

        :return: The trial_end_date of this SubscriptionResourceDto.  # noqa: E501
        :rtype: date
        """
        return self._trial_end_date

    @trial_end_date.setter
    def trial_end_date(self, trial_end_date):
        """Sets the trial_end_date of this SubscriptionResourceDto.

        Trial expiration date of this subscription resource, specified as an ISO Date Format yyyy-MM-dd.  # noqa: E501

        :param trial_end_date: The trial_end_date of this SubscriptionResourceDto.  # noqa: E501
        :type: date
        """

        self._trial_end_date = trial_end_date

    @property
    def subscription_resource_value(self):
        """Gets the subscription_resource_value of this SubscriptionResourceDto.  # noqa: E501


        :return: The subscription_resource_value of this SubscriptionResourceDto.  # noqa: E501
        :rtype: OneOfSubscriptionResourceDtoSubscriptionResourceValue
        """
        return self._subscription_resource_value

    @subscription_resource_value.setter
    def subscription_resource_value(self, subscription_resource_value):
        """Sets the subscription_resource_value of this SubscriptionResourceDto.


        :param subscription_resource_value: The subscription_resource_value of this SubscriptionResourceDto.  # noqa: E501
        :type: OneOfSubscriptionResourceDtoSubscriptionResourceValue
        """
        if subscription_resource_value is None:
            raise ValueError("Invalid value for `subscription_resource_value`, must not be `None`")  # noqa: E501

        self._subscription_resource_value = subscription_resource_value

    @property
    def metering_model(self):
        """Gets the metering_model of this SubscriptionResourceDto.  # noqa: E501

        Metering model for this subscription resource.  # noqa: E501

        :return: The metering_model of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._metering_model

    @metering_model.setter
    def metering_model(self, metering_model):
        """Sets the metering_model of this SubscriptionResourceDto.

        Metering model for this subscription resource.  # noqa: E501

        :param metering_model: The metering_model of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """
        if metering_model is None:
            raise ValueError("Invalid value for `metering_model`, must not be `None`")  # noqa: E501
        allowed_values = ["PERCENTILE", "PERCENTILE_ON_DEMAND", "CONSUMPTION", "UNIT_BASED", "NONE", "LIMIT_BASED"]  # noqa: E501
        if metering_model not in allowed_values:
            raise ValueError(
                "Invalid value for `metering_model` ({0}), must be one of {1}"  # noqa: E501
                .format(metering_model, allowed_values)
            )

        self._metering_model = metering_model

    @property
    def resource_status(self):
        """Gets the resource_status of this SubscriptionResourceDto.  # noqa: E501

        Status for this subscription resource.  # noqa: E501

        :return: The resource_status of this SubscriptionResourceDto.  # noqa: E501
        :rtype: str
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this SubscriptionResourceDto.

        Status for this subscription resource.  # noqa: E501

        :param resource_status: The resource_status of this SubscriptionResourceDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "EXPIRED", "PENDING", "CANCELLED"]  # noqa: E501
        if resource_status not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_status` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_status, allowed_values)
            )

        self._resource_status = resource_status

    @property
    def resource_template_version(self):
        """Gets the resource_template_version of this SubscriptionResourceDto.  # noqa: E501

        The version of the resource template metadata for this resource.  # noqa: E501

        :return: The resource_template_version of this SubscriptionResourceDto.  # noqa: E501
        :rtype: int
        """
        return self._resource_template_version

    @resource_template_version.setter
    def resource_template_version(self, resource_template_version):
        """Sets the resource_template_version of this SubscriptionResourceDto.

        The version of the resource template metadata for this resource.  # noqa: E501

        :param resource_template_version: The resource_template_version of this SubscriptionResourceDto.  # noqa: E501
        :type: int
        """
        if resource_template_version is None:
            raise ValueError("Invalid value for `resource_template_version`, must not be `None`")  # noqa: E501

        self._resource_template_version = resource_template_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionResourceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionResourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
