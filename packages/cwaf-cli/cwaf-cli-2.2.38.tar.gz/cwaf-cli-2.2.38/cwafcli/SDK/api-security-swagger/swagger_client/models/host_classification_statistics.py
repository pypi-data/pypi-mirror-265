# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HostClassificationStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_details': 'HostDetails',
        'labels': 'list[Label]',
        'hosts_resource_stat_trend': 'ResourceStatTrend',
        'is_first_time_seen_in_current_time_period': 'bool'
    }

    attribute_map = {
        'host_details': 'hostDetails',
        'labels': 'labels',
        'hosts_resource_stat_trend': 'hostsResourceStatTrend',
        'is_first_time_seen_in_current_time_period': 'isFirstTimeSeenInCurrentTimePeriod'
    }

    def __init__(self, host_details=None, labels=None, hosts_resource_stat_trend=None, is_first_time_seen_in_current_time_period=None):  # noqa: E501
        """HostClassificationStatistics - a model defined in Swagger"""  # noqa: E501
        self._host_details = None
        self._labels = None
        self._hosts_resource_stat_trend = None
        self._is_first_time_seen_in_current_time_period = None
        self.discriminator = None
        if host_details is not None:
            self.host_details = host_details
        if labels is not None:
            self.labels = labels
        if hosts_resource_stat_trend is not None:
            self.hosts_resource_stat_trend = hosts_resource_stat_trend
        if is_first_time_seen_in_current_time_period is not None:
            self.is_first_time_seen_in_current_time_period = is_first_time_seen_in_current_time_period

    @property
    def host_details(self):
        """Gets the host_details of this HostClassificationStatistics.  # noqa: E501


        :return: The host_details of this HostClassificationStatistics.  # noqa: E501
        :rtype: HostDetails
        """
        return self._host_details

    @host_details.setter
    def host_details(self, host_details):
        """Sets the host_details of this HostClassificationStatistics.


        :param host_details: The host_details of this HostClassificationStatistics.  # noqa: E501
        :type: HostDetails
        """

        self._host_details = host_details

    @property
    def labels(self):
        """Gets the labels of this HostClassificationStatistics.  # noqa: E501


        :return: The labels of this HostClassificationStatistics.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this HostClassificationStatistics.


        :param labels: The labels of this HostClassificationStatistics.  # noqa: E501
        :type: list[Label]
        """

        self._labels = labels

    @property
    def hosts_resource_stat_trend(self):
        """Gets the hosts_resource_stat_trend of this HostClassificationStatistics.  # noqa: E501


        :return: The hosts_resource_stat_trend of this HostClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._hosts_resource_stat_trend

    @hosts_resource_stat_trend.setter
    def hosts_resource_stat_trend(self, hosts_resource_stat_trend):
        """Sets the hosts_resource_stat_trend of this HostClassificationStatistics.


        :param hosts_resource_stat_trend: The hosts_resource_stat_trend of this HostClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._hosts_resource_stat_trend = hosts_resource_stat_trend

    @property
    def is_first_time_seen_in_current_time_period(self):
        """Gets the is_first_time_seen_in_current_time_period of this HostClassificationStatistics.  # noqa: E501


        :return: The is_first_time_seen_in_current_time_period of this HostClassificationStatistics.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_time_seen_in_current_time_period

    @is_first_time_seen_in_current_time_period.setter
    def is_first_time_seen_in_current_time_period(self, is_first_time_seen_in_current_time_period):
        """Sets the is_first_time_seen_in_current_time_period of this HostClassificationStatistics.


        :param is_first_time_seen_in_current_time_period: The is_first_time_seen_in_current_time_period of this HostClassificationStatistics.  # noqa: E501
        :type: bool
        """

        self._is_first_time_seen_in_current_time_period = is_first_time_seen_in_current_time_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostClassificationStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostClassificationStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
