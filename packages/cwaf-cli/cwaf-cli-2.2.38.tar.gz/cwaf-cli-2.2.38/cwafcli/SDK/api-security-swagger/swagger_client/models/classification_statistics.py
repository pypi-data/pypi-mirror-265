# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClassificationStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'labels_identified': 'ResourceStatTrend',
        'labeled_hosts': 'ResourceStatTrend',
        'labeled_resources': 'ResourceStatTrend',
        'labeled_endpoints': 'ResourceStatTrend',
        'risky_endpoints': 'ResourceStatTrend',
        'endpoints_owasp_top10_risks': 'ResourceStatTrend',
        'endpoints_other_risks': 'ResourceStatTrend',
        'hosts_classification_statistics': 'list[HostClassificationStatistics]',
        'resources_classification_statistics': 'list[ResourceClassificationStatistics]',
        'endpoints_classification_statistics': 'list[EndpointClassificationStatistics]',
        'sensitive_classification_volume_statistics': 'list[ClassificationVolumeStatistics]',
        'non_sensitive_classification_volume_statistics': 'list[ClassificationVolumeStatistics]',
        'all_classification_volume_statistics': 'list[ClassificationVolumeStatistics]',
        'top_risks_volume_statistics': 'list[ClassificationRiskVolumeStatistics]',
        'risks_identified': 'ResourceStatTrend'
    }

    attribute_map = {
        'labels_identified': 'labelsIdentified',
        'labeled_hosts': 'labeledHosts',
        'labeled_resources': 'labeledResources',
        'labeled_endpoints': 'labeledEndpoints',
        'risky_endpoints': 'riskyEndpoints',
        'endpoints_owasp_top10_risks': 'endpointsOWASPTop10Risks',
        'endpoints_other_risks': 'endpointsOtherRisks',
        'hosts_classification_statistics': 'hostsClassificationStatistics',
        'resources_classification_statistics': 'resourcesClassificationStatistics',
        'endpoints_classification_statistics': 'endpointsClassificationStatistics',
        'sensitive_classification_volume_statistics': 'sensitiveClassificationVolumeStatistics',
        'non_sensitive_classification_volume_statistics': 'nonSensitiveClassificationVolumeStatistics',
        'all_classification_volume_statistics': 'allClassificationVolumeStatistics',
        'top_risks_volume_statistics': 'topRisksVolumeStatistics',
        'risks_identified': 'risksIdentified'
    }

    def __init__(self, labels_identified=None, labeled_hosts=None, labeled_resources=None, labeled_endpoints=None, risky_endpoints=None, endpoints_owasp_top10_risks=None, endpoints_other_risks=None, hosts_classification_statistics=None, resources_classification_statistics=None, endpoints_classification_statistics=None, sensitive_classification_volume_statistics=None, non_sensitive_classification_volume_statistics=None, all_classification_volume_statistics=None, top_risks_volume_statistics=None, risks_identified=None):  # noqa: E501
        """ClassificationStatistics - a model defined in Swagger"""  # noqa: E501
        self._labels_identified = None
        self._labeled_hosts = None
        self._labeled_resources = None
        self._labeled_endpoints = None
        self._risky_endpoints = None
        self._endpoints_owasp_top10_risks = None
        self._endpoints_other_risks = None
        self._hosts_classification_statistics = None
        self._resources_classification_statistics = None
        self._endpoints_classification_statistics = None
        self._sensitive_classification_volume_statistics = None
        self._non_sensitive_classification_volume_statistics = None
        self._all_classification_volume_statistics = None
        self._top_risks_volume_statistics = None
        self._risks_identified = None
        self.discriminator = None
        if labels_identified is not None:
            self.labels_identified = labels_identified
        if labeled_hosts is not None:
            self.labeled_hosts = labeled_hosts
        if labeled_resources is not None:
            self.labeled_resources = labeled_resources
        if labeled_endpoints is not None:
            self.labeled_endpoints = labeled_endpoints
        if risky_endpoints is not None:
            self.risky_endpoints = risky_endpoints
        if endpoints_owasp_top10_risks is not None:
            self.endpoints_owasp_top10_risks = endpoints_owasp_top10_risks
        if endpoints_other_risks is not None:
            self.endpoints_other_risks = endpoints_other_risks
        if hosts_classification_statistics is not None:
            self.hosts_classification_statistics = hosts_classification_statistics
        if resources_classification_statistics is not None:
            self.resources_classification_statistics = resources_classification_statistics
        if endpoints_classification_statistics is not None:
            self.endpoints_classification_statistics = endpoints_classification_statistics
        if sensitive_classification_volume_statistics is not None:
            self.sensitive_classification_volume_statistics = sensitive_classification_volume_statistics
        if non_sensitive_classification_volume_statistics is not None:
            self.non_sensitive_classification_volume_statistics = non_sensitive_classification_volume_statistics
        if all_classification_volume_statistics is not None:
            self.all_classification_volume_statistics = all_classification_volume_statistics
        if top_risks_volume_statistics is not None:
            self.top_risks_volume_statistics = top_risks_volume_statistics
        if risks_identified is not None:
            self.risks_identified = risks_identified

    @property
    def labels_identified(self):
        """Gets the labels_identified of this ClassificationStatistics.  # noqa: E501


        :return: The labels_identified of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._labels_identified

    @labels_identified.setter
    def labels_identified(self, labels_identified):
        """Sets the labels_identified of this ClassificationStatistics.


        :param labels_identified: The labels_identified of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._labels_identified = labels_identified

    @property
    def labeled_hosts(self):
        """Gets the labeled_hosts of this ClassificationStatistics.  # noqa: E501


        :return: The labeled_hosts of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._labeled_hosts

    @labeled_hosts.setter
    def labeled_hosts(self, labeled_hosts):
        """Sets the labeled_hosts of this ClassificationStatistics.


        :param labeled_hosts: The labeled_hosts of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._labeled_hosts = labeled_hosts

    @property
    def labeled_resources(self):
        """Gets the labeled_resources of this ClassificationStatistics.  # noqa: E501


        :return: The labeled_resources of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._labeled_resources

    @labeled_resources.setter
    def labeled_resources(self, labeled_resources):
        """Sets the labeled_resources of this ClassificationStatistics.


        :param labeled_resources: The labeled_resources of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._labeled_resources = labeled_resources

    @property
    def labeled_endpoints(self):
        """Gets the labeled_endpoints of this ClassificationStatistics.  # noqa: E501


        :return: The labeled_endpoints of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._labeled_endpoints

    @labeled_endpoints.setter
    def labeled_endpoints(self, labeled_endpoints):
        """Sets the labeled_endpoints of this ClassificationStatistics.


        :param labeled_endpoints: The labeled_endpoints of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._labeled_endpoints = labeled_endpoints

    @property
    def risky_endpoints(self):
        """Gets the risky_endpoints of this ClassificationStatistics.  # noqa: E501


        :return: The risky_endpoints of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._risky_endpoints

    @risky_endpoints.setter
    def risky_endpoints(self, risky_endpoints):
        """Sets the risky_endpoints of this ClassificationStatistics.


        :param risky_endpoints: The risky_endpoints of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._risky_endpoints = risky_endpoints

    @property
    def endpoints_owasp_top10_risks(self):
        """Gets the endpoints_owasp_top10_risks of this ClassificationStatistics.  # noqa: E501


        :return: The endpoints_owasp_top10_risks of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._endpoints_owasp_top10_risks

    @endpoints_owasp_top10_risks.setter
    def endpoints_owasp_top10_risks(self, endpoints_owasp_top10_risks):
        """Sets the endpoints_owasp_top10_risks of this ClassificationStatistics.


        :param endpoints_owasp_top10_risks: The endpoints_owasp_top10_risks of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._endpoints_owasp_top10_risks = endpoints_owasp_top10_risks

    @property
    def endpoints_other_risks(self):
        """Gets the endpoints_other_risks of this ClassificationStatistics.  # noqa: E501


        :return: The endpoints_other_risks of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._endpoints_other_risks

    @endpoints_other_risks.setter
    def endpoints_other_risks(self, endpoints_other_risks):
        """Sets the endpoints_other_risks of this ClassificationStatistics.


        :param endpoints_other_risks: The endpoints_other_risks of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._endpoints_other_risks = endpoints_other_risks

    @property
    def hosts_classification_statistics(self):
        """Gets the hosts_classification_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of hosts which had any label in the time window  # noqa: E501

        :return: The hosts_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[HostClassificationStatistics]
        """
        return self._hosts_classification_statistics

    @hosts_classification_statistics.setter
    def hosts_classification_statistics(self, hosts_classification_statistics):
        """Sets the hosts_classification_statistics of this ClassificationStatistics.

        The collection of hosts which had any label in the time window  # noqa: E501

        :param hosts_classification_statistics: The hosts_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[HostClassificationStatistics]
        """

        self._hosts_classification_statistics = hosts_classification_statistics

    @property
    def resources_classification_statistics(self):
        """Gets the resources_classification_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of resources which had any label in the time window  # noqa: E501

        :return: The resources_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[ResourceClassificationStatistics]
        """
        return self._resources_classification_statistics

    @resources_classification_statistics.setter
    def resources_classification_statistics(self, resources_classification_statistics):
        """Sets the resources_classification_statistics of this ClassificationStatistics.

        The collection of resources which had any label in the time window  # noqa: E501

        :param resources_classification_statistics: The resources_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[ResourceClassificationStatistics]
        """

        self._resources_classification_statistics = resources_classification_statistics

    @property
    def endpoints_classification_statistics(self):
        """Gets the endpoints_classification_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of endpoints which had a label in the time window  # noqa: E501

        :return: The endpoints_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[EndpointClassificationStatistics]
        """
        return self._endpoints_classification_statistics

    @endpoints_classification_statistics.setter
    def endpoints_classification_statistics(self, endpoints_classification_statistics):
        """Sets the endpoints_classification_statistics of this ClassificationStatistics.

        The collection of endpoints which had a label in the time window  # noqa: E501

        :param endpoints_classification_statistics: The endpoints_classification_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[EndpointClassificationStatistics]
        """

        self._endpoints_classification_statistics = endpoints_classification_statistics

    @property
    def sensitive_classification_volume_statistics(self):
        """Gets the sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of endpoints which had sensitive label in the time window  # noqa: E501

        :return: The sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[ClassificationVolumeStatistics]
        """
        return self._sensitive_classification_volume_statistics

    @sensitive_classification_volume_statistics.setter
    def sensitive_classification_volume_statistics(self, sensitive_classification_volume_statistics):
        """Sets the sensitive_classification_volume_statistics of this ClassificationStatistics.

        The collection of endpoints which had sensitive label in the time window  # noqa: E501

        :param sensitive_classification_volume_statistics: The sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[ClassificationVolumeStatistics]
        """

        self._sensitive_classification_volume_statistics = sensitive_classification_volume_statistics

    @property
    def non_sensitive_classification_volume_statistics(self):
        """Gets the non_sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of endpoints which had non sensitive label in the time window  # noqa: E501

        :return: The non_sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[ClassificationVolumeStatistics]
        """
        return self._non_sensitive_classification_volume_statistics

    @non_sensitive_classification_volume_statistics.setter
    def non_sensitive_classification_volume_statistics(self, non_sensitive_classification_volume_statistics):
        """Sets the non_sensitive_classification_volume_statistics of this ClassificationStatistics.

        The collection of endpoints which had non sensitive label in the time window  # noqa: E501

        :param non_sensitive_classification_volume_statistics: The non_sensitive_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[ClassificationVolumeStatistics]
        """

        self._non_sensitive_classification_volume_statistics = non_sensitive_classification_volume_statistics

    @property
    def all_classification_volume_statistics(self):
        """Gets the all_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of endpoints which had both sensitive and non sensitive label in the time window  # noqa: E501

        :return: The all_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[ClassificationVolumeStatistics]
        """
        return self._all_classification_volume_statistics

    @all_classification_volume_statistics.setter
    def all_classification_volume_statistics(self, all_classification_volume_statistics):
        """Sets the all_classification_volume_statistics of this ClassificationStatistics.

        The collection of endpoints which had both sensitive and non sensitive label in the time window  # noqa: E501

        :param all_classification_volume_statistics: The all_classification_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[ClassificationVolumeStatistics]
        """

        self._all_classification_volume_statistics = all_classification_volume_statistics

    @property
    def top_risks_volume_statistics(self):
        """Gets the top_risks_volume_statistics of this ClassificationStatistics.  # noqa: E501

        The collection of endpoints that had top risks in the time window  # noqa: E501

        :return: The top_risks_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :rtype: list[ClassificationRiskVolumeStatistics]
        """
        return self._top_risks_volume_statistics

    @top_risks_volume_statistics.setter
    def top_risks_volume_statistics(self, top_risks_volume_statistics):
        """Sets the top_risks_volume_statistics of this ClassificationStatistics.

        The collection of endpoints that had top risks in the time window  # noqa: E501

        :param top_risks_volume_statistics: The top_risks_volume_statistics of this ClassificationStatistics.  # noqa: E501
        :type: list[ClassificationRiskVolumeStatistics]
        """

        self._top_risks_volume_statistics = top_risks_volume_statistics

    @property
    def risks_identified(self):
        """Gets the risks_identified of this ClassificationStatistics.  # noqa: E501


        :return: The risks_identified of this ClassificationStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._risks_identified

    @risks_identified.setter
    def risks_identified(self, risks_identified):
        """Sets the risks_identified of this ClassificationStatistics.


        :param risks_identified: The risks_identified of this ClassificationStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._risks_identified = risks_identified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassificationStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassificationStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
