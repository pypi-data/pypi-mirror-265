# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiIdEndpointIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specification_violation_action': 'str',
        'violation_actions': 'str'
    }

    attribute_map = {
        'specification_violation_action': 'specificationViolationAction',
        'violation_actions': 'violationActions'
    }

    def __init__(self, specification_violation_action=None, violation_actions=None):  # noqa: E501
        """ApiIdEndpointIdBody - a model defined in Swagger"""  # noqa: E501
        self._specification_violation_action = None
        self._violation_actions = None
        self.discriminator = None
        if specification_violation_action is not None:
            self.specification_violation_action = specification_violation_action
        if violation_actions is not None:
            self.violation_actions = violation_actions

    @property
    def specification_violation_action(self):
        """Gets the specification_violation_action of this ApiIdEndpointIdBody.  # noqa: E501

        The action taken when an API Specification Violation occurs  # noqa: E501

        :return: The specification_violation_action of this ApiIdEndpointIdBody.  # noqa: E501
        :rtype: str
        """
        return self._specification_violation_action

    @specification_violation_action.setter
    def specification_violation_action(self, specification_violation_action):
        """Sets the specification_violation_action of this ApiIdEndpointIdBody.

        The action taken when an API Specification Violation occurs  # noqa: E501

        :param specification_violation_action: The specification_violation_action of this ApiIdEndpointIdBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if specification_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `specification_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(specification_violation_action, allowed_values)
            )

        self._specification_violation_action = specification_violation_action

    @property
    def violation_actions(self):
        """Gets the violation_actions of this ApiIdEndpointIdBody.  # noqa: E501

        Json payload described by ViolationActions Object. This object defines different actions taken when each violation occurs  # noqa: E501

        :return: The violation_actions of this ApiIdEndpointIdBody.  # noqa: E501
        :rtype: str
        """
        return self._violation_actions

    @violation_actions.setter
    def violation_actions(self, violation_actions):
        """Sets the violation_actions of this ApiIdEndpointIdBody.

        Json payload described by ViolationActions Object. This object defines different actions taken when each violation occurs  # noqa: E501

        :param violation_actions: The violation_actions of this ApiIdEndpointIdBody.  # noqa: E501
        :type: str
        """

        self._violation_actions = violation_actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiIdEndpointIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiIdEndpointIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
