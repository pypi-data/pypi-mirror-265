# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_id': 'int',
        'endpoint_url': 'str',
        'hostname': 'str',
        'method': 'str',
        'authentication_enabled': 'bool',
        'excessive_data_exposure_settings': 'ExcessiveDataExposureSettings',
        'deprecated_api_settings': 'DeprecatedApiSettings'
    }

    attribute_map = {
        'endpoint_id': 'endpointId',
        'endpoint_url': 'endpointUrl',
        'hostname': 'hostname',
        'method': 'method',
        'authentication_enabled': 'authenticationEnabled',
        'excessive_data_exposure_settings': 'excessiveDataExposureSettings',
        'deprecated_api_settings': 'deprecatedApiSettings'
    }

    def __init__(self, endpoint_id=None, endpoint_url=None, hostname=None, method=None, authentication_enabled=None, excessive_data_exposure_settings=None, deprecated_api_settings=None):  # noqa: E501
        """EndpointSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._endpoint_id = None
        self._endpoint_url = None
        self._hostname = None
        self._method = None
        self._authentication_enabled = None
        self._excessive_data_exposure_settings = None
        self._deprecated_api_settings = None
        self.discriminator = None
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if hostname is not None:
            self.hostname = hostname
        if method is not None:
            self.method = method
        if authentication_enabled is not None:
            self.authentication_enabled = authentication_enabled
        if excessive_data_exposure_settings is not None:
            self.excessive_data_exposure_settings = excessive_data_exposure_settings
        if deprecated_api_settings is not None:
            self.deprecated_api_settings = deprecated_api_settings

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this EndpointSettingsDto.  # noqa: E501

        The endpoint ID  # noqa: E501

        :return: The endpoint_id of this EndpointSettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this EndpointSettingsDto.

        The endpoint ID  # noqa: E501

        :param endpoint_id: The endpoint_id of this EndpointSettingsDto.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this EndpointSettingsDto.  # noqa: E501

        The endpoint url  # noqa: E501

        :return: The endpoint_url of this EndpointSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this EndpointSettingsDto.

        The endpoint url  # noqa: E501

        :param endpoint_url: The endpoint_url of this EndpointSettingsDto.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    @property
    def hostname(self):
        """Gets the hostname of this EndpointSettingsDto.  # noqa: E501

        The host’s name  # noqa: E501

        :return: The hostname of this EndpointSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this EndpointSettingsDto.

        The host’s name  # noqa: E501

        :param hostname: The hostname of this EndpointSettingsDto.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def method(self):
        """Gets the method of this EndpointSettingsDto.  # noqa: E501


        :return: The method of this EndpointSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EndpointSettingsDto.


        :param method: The method of this EndpointSettingsDto.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def authentication_enabled(self):
        """Gets the authentication_enabled of this EndpointSettingsDto.  # noqa: E501


        :return: The authentication_enabled of this EndpointSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_enabled

    @authentication_enabled.setter
    def authentication_enabled(self, authentication_enabled):
        """Sets the authentication_enabled of this EndpointSettingsDto.


        :param authentication_enabled: The authentication_enabled of this EndpointSettingsDto.  # noqa: E501
        :type: bool
        """

        self._authentication_enabled = authentication_enabled

    @property
    def excessive_data_exposure_settings(self):
        """Gets the excessive_data_exposure_settings of this EndpointSettingsDto.  # noqa: E501


        :return: The excessive_data_exposure_settings of this EndpointSettingsDto.  # noqa: E501
        :rtype: ExcessiveDataExposureSettings
        """
        return self._excessive_data_exposure_settings

    @excessive_data_exposure_settings.setter
    def excessive_data_exposure_settings(self, excessive_data_exposure_settings):
        """Sets the excessive_data_exposure_settings of this EndpointSettingsDto.


        :param excessive_data_exposure_settings: The excessive_data_exposure_settings of this EndpointSettingsDto.  # noqa: E501
        :type: ExcessiveDataExposureSettings
        """

        self._excessive_data_exposure_settings = excessive_data_exposure_settings

    @property
    def deprecated_api_settings(self):
        """Gets the deprecated_api_settings of this EndpointSettingsDto.  # noqa: E501


        :return: The deprecated_api_settings of this EndpointSettingsDto.  # noqa: E501
        :rtype: DeprecatedApiSettings
        """
        return self._deprecated_api_settings

    @deprecated_api_settings.setter
    def deprecated_api_settings(self, deprecated_api_settings):
        """Sets the deprecated_api_settings of this EndpointSettingsDto.


        :param deprecated_api_settings: The deprecated_api_settings of this EndpointSettingsDto.  # noqa: E501
        :type: DeprecatedApiSettings
        """

        self._deprecated_api_settings = deprecated_api_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
