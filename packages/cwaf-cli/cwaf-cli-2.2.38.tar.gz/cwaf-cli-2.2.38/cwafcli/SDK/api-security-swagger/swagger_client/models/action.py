# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_bundle_name': 'str',
        'source': 'str',
        'last_modified_user': 'str',
        'last_modified': 'datetime',
        'action_id': 'int',
        'action_types': 'list[ActionTypeMap]'
    }

    attribute_map = {
        'api_bundle_name': 'apiBundleName',
        'source': 'source',
        'last_modified_user': 'lastModifiedUser',
        'last_modified': 'lastModified',
        'action_id': 'actionId',
        'action_types': 'actionTypes'
    }

    def __init__(self, api_bundle_name=None, source=None, last_modified_user=None, last_modified=None, action_id=None, action_types=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        self._api_bundle_name = None
        self._source = None
        self._last_modified_user = None
        self._last_modified = None
        self._action_id = None
        self._action_types = None
        self.discriminator = None
        if api_bundle_name is not None:
            self.api_bundle_name = api_bundle_name
        if source is not None:
            self.source = source
        self.last_modified_user = last_modified_user
        self.last_modified = last_modified
        if action_id is not None:
            self.action_id = action_id
        if action_types is not None:
            self.action_types = action_types

    @property
    def api_bundle_name(self):
        """Gets the api_bundle_name of this Action.  # noqa: E501

        API Bundle Name  # noqa: E501

        :return: The api_bundle_name of this Action.  # noqa: E501
        :rtype: str
        """
        return self._api_bundle_name

    @api_bundle_name.setter
    def api_bundle_name(self, api_bundle_name):
        """Sets the api_bundle_name of this Action.

        API Bundle Name  # noqa: E501

        :param api_bundle_name: The api_bundle_name of this Action.  # noqa: E501
        :type: str
        """

        self._api_bundle_name = api_bundle_name

    @property
    def source(self):
        """Gets the source of this Action.  # noqa: E501

        Source Name  # noqa: E501

        :return: The source of this Action.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Action.

        Source Name  # noqa: E501

        :param source: The source of this Action.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this Action.  # noqa: E501


        :return: The last_modified_user of this Action.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this Action.


        :param last_modified_user: The last_modified_user of this Action.  # noqa: E501
        :type: str
        """
        if last_modified_user is None:
            raise ValueError("Invalid value for `last_modified_user`, must not be `None`")  # noqa: E501

        self._last_modified_user = last_modified_user

    @property
    def last_modified(self):
        """Gets the last_modified of this Action.  # noqa: E501


        :return: The last_modified of this Action.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Action.


        :param last_modified: The last_modified of this Action.  # noqa: E501
        :type: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def action_id(self):
        """Gets the action_id of this Action.  # noqa: E501

        Action Id  # noqa: E501

        :return: The action_id of this Action.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this Action.

        Action Id  # noqa: E501

        :param action_id: The action_id of this Action.  # noqa: E501
        :type: int
        """

        self._action_id = action_id

    @property
    def action_types(self):
        """Gets the action_types of this Action.  # noqa: E501

        Action Types  # noqa: E501

        :return: The action_types of this Action.  # noqa: E501
        :rtype: list[ActionTypeMap]
        """
        return self._action_types

    @action_types.setter
    def action_types(self, action_types):
        """Sets the action_types of this Action.

        Action Types  # noqa: E501

        :param action_types: The action_types of this Action.  # noqa: E501
        :type: list[ActionTypeMap]
        """

        self._action_types = action_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
