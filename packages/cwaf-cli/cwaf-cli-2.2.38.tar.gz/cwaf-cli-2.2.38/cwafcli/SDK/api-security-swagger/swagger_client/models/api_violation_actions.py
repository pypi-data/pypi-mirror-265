# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiViolationActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'missing_param_violation_action': 'str',
        'invalid_param_value_violation_action': 'str',
        'invalid_param_name_violation_action': 'str',
        'invalid_url_violation_action': 'str',
        'invalid_method_violation_action': 'str',
        'other_traffic_violation_action': 'str'
    }

    attribute_map = {
        'missing_param_violation_action': 'missingParamViolationAction',
        'invalid_param_value_violation_action': 'invalidParamValueViolationAction',
        'invalid_param_name_violation_action': 'invalidParamNameViolationAction',
        'invalid_url_violation_action': 'invalidUrlViolationAction',
        'invalid_method_violation_action': 'invalidMethodViolationAction',
        'other_traffic_violation_action': 'otherTrafficViolationAction'
    }

    def __init__(self, missing_param_violation_action=None, invalid_param_value_violation_action=None, invalid_param_name_violation_action=None, invalid_url_violation_action=None, invalid_method_violation_action=None, other_traffic_violation_action=None):  # noqa: E501
        """ApiViolationActions - a model defined in Swagger"""  # noqa: E501
        self._missing_param_violation_action = None
        self._invalid_param_value_violation_action = None
        self._invalid_param_name_violation_action = None
        self._invalid_url_violation_action = None
        self._invalid_method_violation_action = None
        self._other_traffic_violation_action = None
        self.discriminator = None
        if missing_param_violation_action is not None:
            self.missing_param_violation_action = missing_param_violation_action
        if invalid_param_value_violation_action is not None:
            self.invalid_param_value_violation_action = invalid_param_value_violation_action
        if invalid_param_name_violation_action is not None:
            self.invalid_param_name_violation_action = invalid_param_name_violation_action
        if invalid_url_violation_action is not None:
            self.invalid_url_violation_action = invalid_url_violation_action
        if invalid_method_violation_action is not None:
            self.invalid_method_violation_action = invalid_method_violation_action
        if other_traffic_violation_action is not None:
            self.other_traffic_violation_action = other_traffic_violation_action

    @property
    def missing_param_violation_action(self):
        """Gets the missing_param_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when a missing parameter Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :return: The missing_param_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._missing_param_violation_action

    @missing_param_violation_action.setter
    def missing_param_violation_action(self, missing_param_violation_action):
        """Sets the missing_param_violation_action of this ApiViolationActions.

        The action taken when a missing parameter Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :param missing_param_violation_action: The missing_param_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if missing_param_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `missing_param_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(missing_param_violation_action, allowed_values)
            )

        self._missing_param_violation_action = missing_param_violation_action

    @property
    def invalid_param_value_violation_action(self):
        """Gets the invalid_param_value_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when an invalid parameter value Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :return: The invalid_param_value_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._invalid_param_value_violation_action

    @invalid_param_value_violation_action.setter
    def invalid_param_value_violation_action(self, invalid_param_value_violation_action):
        """Sets the invalid_param_value_violation_action of this ApiViolationActions.

        The action taken when an invalid parameter value Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :param invalid_param_value_violation_action: The invalid_param_value_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if invalid_param_value_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_param_value_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(invalid_param_value_violation_action, allowed_values)
            )

        self._invalid_param_value_violation_action = invalid_param_value_violation_action

    @property
    def invalid_param_name_violation_action(self):
        """Gets the invalid_param_name_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when an invalid parameter name Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :return: The invalid_param_name_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._invalid_param_name_violation_action

    @invalid_param_name_violation_action.setter
    def invalid_param_name_violation_action(self, invalid_param_name_violation_action):
        """Sets the invalid_param_name_violation_action of this ApiViolationActions.

        The action taken when an invalid parameter name Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :param invalid_param_name_violation_action: The invalid_param_name_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if invalid_param_name_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_param_name_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(invalid_param_name_violation_action, allowed_values)
            )

        self._invalid_param_name_violation_action = invalid_param_name_violation_action

    @property
    def invalid_url_violation_action(self):
        """Gets the invalid_url_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when an invalid URL Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :return: The invalid_url_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._invalid_url_violation_action

    @invalid_url_violation_action.setter
    def invalid_url_violation_action(self, invalid_url_violation_action):
        """Sets the invalid_url_violation_action of this ApiViolationActions.

        The action taken when an invalid URL Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :param invalid_url_violation_action: The invalid_url_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if invalid_url_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_url_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(invalid_url_violation_action, allowed_values)
            )

        self._invalid_url_violation_action = invalid_url_violation_action

    @property
    def invalid_method_violation_action(self):
        """Gets the invalid_method_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when an invalid method Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :return: The invalid_method_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._invalid_method_violation_action

    @invalid_method_violation_action.setter
    def invalid_method_violation_action(self, invalid_method_violation_action):
        """Sets the invalid_method_violation_action of this ApiViolationActions.

        The action taken when an invalid method Violation occurs. Assigning DEFAULT will inherit the action from parent object, DEFAULT is not applicable for site-level configuration APIs  # noqa: E501

        :param invalid_method_violation_action: The invalid_method_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if invalid_method_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_method_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(invalid_method_violation_action, allowed_values)
            )

        self._invalid_method_violation_action = invalid_method_violation_action

    @property
    def other_traffic_violation_action(self):
        """Gets the other_traffic_violation_action of this ApiViolationActions.  # noqa: E501

        The action taken when traffic that does not belong to the APIs defined in the OAS files or integrated from API Discovery is identified.  # noqa: E501

        :return: The other_traffic_violation_action of this ApiViolationActions.  # noqa: E501
        :rtype: str
        """
        return self._other_traffic_violation_action

    @other_traffic_violation_action.setter
    def other_traffic_violation_action(self, other_traffic_violation_action):
        """Sets the other_traffic_violation_action of this ApiViolationActions.

        The action taken when traffic that does not belong to the APIs defined in the OAS files or integrated from API Discovery is identified.  # noqa: E501

        :param other_traffic_violation_action: The other_traffic_violation_action of this ApiViolationActions.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if other_traffic_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `other_traffic_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(other_traffic_violation_action, allowed_values)
            )

        self._other_traffic_violation_action = other_traffic_violation_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiViolationActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiViolationActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
