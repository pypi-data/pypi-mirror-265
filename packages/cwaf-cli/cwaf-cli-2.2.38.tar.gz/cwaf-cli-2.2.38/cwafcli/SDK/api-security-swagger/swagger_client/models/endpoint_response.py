# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specification_violation_action': 'str',
        'violation_actions': 'EndpointViolationActions',
        'id': 'int',
        'path': 'str',
        'method': 'str',
        'duplicate_of_endpoint_id': 'int',
        'sensitive_data_classification_list': 'list[SensitiveDataClassification]'
    }

    attribute_map = {
        'specification_violation_action': 'specificationViolationAction',
        'violation_actions': 'violationActions',
        'id': 'id',
        'path': 'path',
        'method': 'method',
        'duplicate_of_endpoint_id': 'duplicateOfEndpointId',
        'sensitive_data_classification_list': 'sensitiveDataClassificationList'
    }

    def __init__(self, specification_violation_action=None, violation_actions=None, id=None, path=None, method=None, duplicate_of_endpoint_id=None, sensitive_data_classification_list=None):  # noqa: E501
        """EndpointResponse - a model defined in Swagger"""  # noqa: E501
        self._specification_violation_action = None
        self._violation_actions = None
        self._id = None
        self._path = None
        self._method = None
        self._duplicate_of_endpoint_id = None
        self._sensitive_data_classification_list = None
        self.discriminator = None
        if specification_violation_action is not None:
            self.specification_violation_action = specification_violation_action
        if violation_actions is not None:
            self.violation_actions = violation_actions
        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if method is not None:
            self.method = method
        if duplicate_of_endpoint_id is not None:
            self.duplicate_of_endpoint_id = duplicate_of_endpoint_id
        if sensitive_data_classification_list is not None:
            self.sensitive_data_classification_list = sensitive_data_classification_list

    @property
    def specification_violation_action(self):
        """Gets the specification_violation_action of this EndpointResponse.  # noqa: E501

        The action taken when an API Specification Violation occurs  # noqa: E501

        :return: The specification_violation_action of this EndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._specification_violation_action

    @specification_violation_action.setter
    def specification_violation_action(self, specification_violation_action):
        """Sets the specification_violation_action of this EndpointResponse.

        The action taken when an API Specification Violation occurs  # noqa: E501

        :param specification_violation_action: The specification_violation_action of this EndpointResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if specification_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `specification_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(specification_violation_action, allowed_values)
            )

        self._specification_violation_action = specification_violation_action

    @property
    def violation_actions(self):
        """Gets the violation_actions of this EndpointResponse.  # noqa: E501


        :return: The violation_actions of this EndpointResponse.  # noqa: E501
        :rtype: EndpointViolationActions
        """
        return self._violation_actions

    @violation_actions.setter
    def violation_actions(self, violation_actions):
        """Sets the violation_actions of this EndpointResponse.


        :param violation_actions: The violation_actions of this EndpointResponse.  # noqa: E501
        :type: EndpointViolationActions
        """

        self._violation_actions = violation_actions

    @property
    def id(self):
        """Gets the id of this EndpointResponse.  # noqa: E501

        The endpoint ID  # noqa: E501

        :return: The id of this EndpointResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndpointResponse.

        The endpoint ID  # noqa: E501

        :param id: The id of this EndpointResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this EndpointResponse.  # noqa: E501

        The endpoint path  # noqa: E501

        :return: The path of this EndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this EndpointResponse.

        The endpoint path  # noqa: E501

        :param path: The path of this EndpointResponse.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def method(self):
        """Gets the method of this EndpointResponse.  # noqa: E501

        The endpoint HTTP method  # noqa: E501

        :return: The method of this EndpointResponse.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EndpointResponse.

        The endpoint HTTP method  # noqa: E501

        :param method: The method of this EndpointResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["POST", "GET", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def duplicate_of_endpoint_id(self):
        """Gets the duplicate_of_endpoint_id of this EndpointResponse.  # noqa: E501

        The ID of the endpoint that this endpoint is the duplicate of  # noqa: E501

        :return: The duplicate_of_endpoint_id of this EndpointResponse.  # noqa: E501
        :rtype: int
        """
        return self._duplicate_of_endpoint_id

    @duplicate_of_endpoint_id.setter
    def duplicate_of_endpoint_id(self, duplicate_of_endpoint_id):
        """Sets the duplicate_of_endpoint_id of this EndpointResponse.

        The ID of the endpoint that this endpoint is the duplicate of  # noqa: E501

        :param duplicate_of_endpoint_id: The duplicate_of_endpoint_id of this EndpointResponse.  # noqa: E501
        :type: int
        """

        self._duplicate_of_endpoint_id = duplicate_of_endpoint_id

    @property
    def sensitive_data_classification_list(self):
        """Gets the sensitive_data_classification_list of this EndpointResponse.  # noqa: E501

        Sensitive data classification list for this endpoint  # noqa: E501

        :return: The sensitive_data_classification_list of this EndpointResponse.  # noqa: E501
        :rtype: list[SensitiveDataClassification]
        """
        return self._sensitive_data_classification_list

    @sensitive_data_classification_list.setter
    def sensitive_data_classification_list(self, sensitive_data_classification_list):
        """Sets the sensitive_data_classification_list of this EndpointResponse.

        Sensitive data classification list for this endpoint  # noqa: E501

        :param sensitive_data_classification_list: The sensitive_data_classification_list of this EndpointResponse.  # noqa: E501
        :type: list[SensitiveDataClassification]
        """

        self._sensitive_data_classification_list = sensitive_data_classification_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
