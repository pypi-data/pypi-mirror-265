# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthParameterLocationDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_parameter_location': 'str',
        'site_ids': 'list[int]',
        'use_for_future_web_sites': 'bool',
        'last_modified': 'int',
        'last_modified_user': 'str'
    }

    attribute_map = {
        'auth_parameter_location': 'authParameterLocation',
        'site_ids': 'siteIds',
        'use_for_future_web_sites': 'useForFutureWebSites',
        'last_modified': 'lastModified',
        'last_modified_user': 'lastModifiedUser'
    }

    def __init__(self, auth_parameter_location=None, site_ids=None, use_for_future_web_sites=None, last_modified=None, last_modified_user=None):  # noqa: E501
        """AuthParameterLocationDto - a model defined in Swagger"""  # noqa: E501
        self._auth_parameter_location = None
        self._site_ids = None
        self._use_for_future_web_sites = None
        self._last_modified = None
        self._last_modified_user = None
        self.discriminator = None
        if auth_parameter_location is not None:
            self.auth_parameter_location = auth_parameter_location
        if site_ids is not None:
            self.site_ids = site_ids
        if use_for_future_web_sites is not None:
            self.use_for_future_web_sites = use_for_future_web_sites
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user

    @property
    def auth_parameter_location(self):
        """Gets the auth_parameter_location of this AuthParameterLocationDto.  # noqa: E501

        Authentication location name  # noqa: E501

        :return: The auth_parameter_location of this AuthParameterLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._auth_parameter_location

    @auth_parameter_location.setter
    def auth_parameter_location(self, auth_parameter_location):
        """Sets the auth_parameter_location of this AuthParameterLocationDto.

        Authentication location name  # noqa: E501

        :param auth_parameter_location: The auth_parameter_location of this AuthParameterLocationDto.  # noqa: E501
        :type: str
        """

        self._auth_parameter_location = auth_parameter_location

    @property
    def site_ids(self):
        """Gets the site_ids of this AuthParameterLocationDto.  # noqa: E501

        SiteIds  # noqa: E501

        :return: The site_ids of this AuthParameterLocationDto.  # noqa: E501
        :rtype: list[int]
        """
        return self._site_ids

    @site_ids.setter
    def site_ids(self, site_ids):
        """Sets the site_ids of this AuthParameterLocationDto.

        SiteIds  # noqa: E501

        :param site_ids: The site_ids of this AuthParameterLocationDto.  # noqa: E501
        :type: list[int]
        """

        self._site_ids = site_ids

    @property
    def use_for_future_web_sites(self):
        """Gets the use_for_future_web_sites of this AuthParameterLocationDto.  # noqa: E501

        Enable same configuration for future website on-boarding  # noqa: E501

        :return: The use_for_future_web_sites of this AuthParameterLocationDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_future_web_sites

    @use_for_future_web_sites.setter
    def use_for_future_web_sites(self, use_for_future_web_sites):
        """Sets the use_for_future_web_sites of this AuthParameterLocationDto.

        Enable same configuration for future website on-boarding  # noqa: E501

        :param use_for_future_web_sites: The use_for_future_web_sites of this AuthParameterLocationDto.  # noqa: E501
        :type: bool
        """

        self._use_for_future_web_sites = use_for_future_web_sites

    @property
    def last_modified(self):
        """Gets the last_modified of this AuthParameterLocationDto.  # noqa: E501

        The last modified timestamp  # noqa: E501

        :return: The last_modified of this AuthParameterLocationDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AuthParameterLocationDto.

        The last modified timestamp  # noqa: E501

        :param last_modified: The last_modified of this AuthParameterLocationDto.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this AuthParameterLocationDto.  # noqa: E501

        The last modified user  # noqa: E501

        :return: The last_modified_user of this AuthParameterLocationDto.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this AuthParameterLocationDto.

        The last modified user  # noqa: E501

        :param last_modified_user: The last_modified_user of this AuthParameterLocationDto.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthParameterLocationDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthParameterLocationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
