# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SensitiveDataClassification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classification': 'str',
        'last_seen': 'int',
        'location_path': 'str',
        'location': 'str'
    }

    attribute_map = {
        'classification': 'classification',
        'last_seen': 'lastSeen',
        'location_path': 'locationPath',
        'location': 'location'
    }

    def __init__(self, classification=None, last_seen=None, location_path=None, location=None):  # noqa: E501
        """SensitiveDataClassification - a model defined in Swagger"""  # noqa: E501
        self._classification = None
        self._last_seen = None
        self._location_path = None
        self._location = None
        self.discriminator = None
        if classification is not None:
            self.classification = classification
        if last_seen is not None:
            self.last_seen = last_seen
        if location_path is not None:
            self.location_path = location_path
        if location is not None:
            self.location = location

    @property
    def classification(self):
        """Gets the classification of this SensitiveDataClassification.  # noqa: E501

        The classification of the sensitive value  # noqa: E501

        :return: The classification of this SensitiveDataClassification.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this SensitiveDataClassification.

        The classification of the sensitive value  # noqa: E501

        :param classification: The classification of this SensitiveDataClassification.  # noqa: E501
        :type: str
        """

        self._classification = classification

    @property
    def last_seen(self):
        """Gets the last_seen of this SensitiveDataClassification.  # noqa: E501

        The time this sensitive value was seen last  # noqa: E501

        :return: The last_seen of this SensitiveDataClassification.  # noqa: E501
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this SensitiveDataClassification.

        The time this sensitive value was seen last  # noqa: E501

        :param last_seen: The last_seen of this SensitiveDataClassification.  # noqa: E501
        :type: int
        """

        self._last_seen = last_seen

    @property
    def location_path(self):
        """Gets the location_path of this SensitiveDataClassification.  # noqa: E501

        The detailed location of the sensitive value in the location (response body) including any parent objects  # noqa: E501

        :return: The location_path of this SensitiveDataClassification.  # noqa: E501
        :rtype: str
        """
        return self._location_path

    @location_path.setter
    def location_path(self, location_path):
        """Sets the location_path of this SensitiveDataClassification.

        The detailed location of the sensitive value in the location (response body) including any parent objects  # noqa: E501

        :param location_path: The location_path of this SensitiveDataClassification.  # noqa: E501
        :type: str
        """

        self._location_path = location_path

    @property
    def location(self):
        """Gets the location of this SensitiveDataClassification.  # noqa: E501

        The location of the sensitive value  # noqa: E501

        :return: The location of this SensitiveDataClassification.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SensitiveDataClassification.

        The location of the sensitive value  # noqa: E501

        :param location: The location of this SensitiveDataClassification.  # noqa: E501
        :type: str
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensitiveDataClassification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensitiveDataClassification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
