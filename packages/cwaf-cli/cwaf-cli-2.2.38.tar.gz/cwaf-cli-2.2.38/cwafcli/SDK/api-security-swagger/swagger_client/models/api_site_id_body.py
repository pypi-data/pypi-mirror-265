# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiSiteIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_specification': 'str',
        'base_path': 'str',
        'description': 'str',
        'oas_file_name': 'str',
        'specification_violation_action': 'str',
        'validate_host': 'bool',
        'violation_actions': 'str'
    }

    attribute_map = {
        'api_specification': 'apiSpecification',
        'base_path': 'basePath',
        'description': 'description',
        'oas_file_name': 'oasFileName',
        'specification_violation_action': 'specificationViolationAction',
        'validate_host': 'validateHost',
        'violation_actions': 'violationActions'
    }

    def __init__(self, api_specification=None, base_path=None, description=None, oas_file_name=None, specification_violation_action='ALERT_ONLY', validate_host=True, violation_actions=None):  # noqa: E501
        """ApiSiteIdBody - a model defined in Swagger"""  # noqa: E501
        self._api_specification = None
        self._base_path = None
        self._description = None
        self._oas_file_name = None
        self._specification_violation_action = None
        self._validate_host = None
        self._violation_actions = None
        self.discriminator = None
        self.api_specification = api_specification
        if base_path is not None:
            self.base_path = base_path
        if description is not None:
            self.description = description
        if oas_file_name is not None:
            self.oas_file_name = oas_file_name
        if specification_violation_action is not None:
            self.specification_violation_action = specification_violation_action
        if validate_host is not None:
            self.validate_host = validate_host
        if violation_actions is not None:
            self.violation_actions = violation_actions

    @property
    def api_specification(self):
        """Gets the api_specification of this ApiSiteIdBody.  # noqa: E501

        The API specification document. The supported format is OAS2 or OAS3 (JSON or YAML)  # noqa: E501

        :return: The api_specification of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._api_specification

    @api_specification.setter
    def api_specification(self, api_specification):
        """Sets the api_specification of this ApiSiteIdBody.

        The API specification document. The supported format is OAS2 or OAS3 (JSON or YAML)  # noqa: E501

        :param api_specification: The api_specification of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """
        if api_specification is None:
            raise ValueError("Invalid value for `api_specification`, must not be `None`")  # noqa: E501

        self._api_specification = api_specification

    @property
    def base_path(self):
        """Gets the base_path of this ApiSiteIdBody.  # noqa: E501

        Override the spec basePath / server base path with this value  # noqa: E501

        :return: The base_path of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this ApiSiteIdBody.

        Override the spec basePath / server base path with this value  # noqa: E501

        :param base_path: The base_path of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """

        self._base_path = base_path

    @property
    def description(self):
        """Gets the description of this ApiSiteIdBody.  # noqa: E501

        A description that will help recognize the API in the dashboard  # noqa: E501

        :return: The description of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiSiteIdBody.

        A description that will help recognize the API in the dashboard  # noqa: E501

        :param description: The description of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def oas_file_name(self):
        """Gets the oas_file_name of this ApiSiteIdBody.  # noqa: E501

        Uploaded OAS file name  # noqa: E501

        :return: The oas_file_name of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._oas_file_name

    @oas_file_name.setter
    def oas_file_name(self, oas_file_name):
        """Sets the oas_file_name of this ApiSiteIdBody.

        Uploaded OAS file name  # noqa: E501

        :param oas_file_name: The oas_file_name of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """

        self._oas_file_name = oas_file_name

    @property
    def specification_violation_action(self):
        """Gets the specification_violation_action of this ApiSiteIdBody.  # noqa: E501

        The action taken when an API Specification Violation occurs  # noqa: E501

        :return: The specification_violation_action of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._specification_violation_action

    @specification_violation_action.setter
    def specification_violation_action(self, specification_violation_action):
        """Sets the specification_violation_action of this ApiSiteIdBody.

        The action taken when an API Specification Violation occurs  # noqa: E501

        :param specification_violation_action: The specification_violation_action of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALERT_ONLY", "BLOCK_REQUEST", "BLOCK_USER", "BLOCK_IP", "IGNORE", "DEFAULT"]  # noqa: E501
        if specification_violation_action not in allowed_values:
            raise ValueError(
                "Invalid value for `specification_violation_action` ({0}), must be one of {1}"  # noqa: E501
                .format(specification_violation_action, allowed_values)
            )

        self._specification_violation_action = specification_violation_action

    @property
    def validate_host(self):
        """Gets the validate_host of this ApiSiteIdBody.  # noqa: E501

        When set to true, verifies that the host name and site name match. Set to false in cases such as CNAME reuse or API management integrations where the host name and site name do not match.  # noqa: E501

        :return: The validate_host of this ApiSiteIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._validate_host

    @validate_host.setter
    def validate_host(self, validate_host):
        """Sets the validate_host of this ApiSiteIdBody.

        When set to true, verifies that the host name and site name match. Set to false in cases such as CNAME reuse or API management integrations where the host name and site name do not match.  # noqa: E501

        :param validate_host: The validate_host of this ApiSiteIdBody.  # noqa: E501
        :type: bool
        """

        self._validate_host = validate_host

    @property
    def violation_actions(self):
        """Gets the violation_actions of this ApiSiteIdBody.  # noqa: E501

        Json payload described by ViolationActions Object. This object defines different actions taken when each violation occurs  # noqa: E501

        :return: The violation_actions of this ApiSiteIdBody.  # noqa: E501
        :rtype: str
        """
        return self._violation_actions

    @violation_actions.setter
    def violation_actions(self, violation_actions):
        """Sets the violation_actions of this ApiSiteIdBody.

        Json payload described by ViolationActions Object. This object defines different actions taken when each violation occurs  # noqa: E501

        :param violation_actions: The violation_actions of this ApiSiteIdBody.  # noqa: E501
        :type: str
        """

        self._violation_actions = violation_actions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiSiteIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiSiteIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
