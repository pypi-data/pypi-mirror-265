# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthParameterSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_parameter_location': 'str',
        'account_id': 'int',
        'enabled': 'bool',
        'last_modified': 'int',
        'last_modified_user': 'str',
        'audit_string': 'str'
    }

    attribute_map = {
        'auth_parameter_location': 'authParameterLocation',
        'account_id': 'accountId',
        'enabled': 'enabled',
        'last_modified': 'lastModified',
        'last_modified_user': 'lastModifiedUser',
        'audit_string': 'auditString'
    }

    def __init__(self, auth_parameter_location=None, account_id=None, enabled=None, last_modified=None, last_modified_user=None, audit_string=None):  # noqa: E501
        """AuthParameterSettings - a model defined in Swagger"""  # noqa: E501
        self._auth_parameter_location = None
        self._account_id = None
        self._enabled = None
        self._last_modified = None
        self._last_modified_user = None
        self._audit_string = None
        self.discriminator = None
        if auth_parameter_location is not None:
            self.auth_parameter_location = auth_parameter_location
        if account_id is not None:
            self.account_id = account_id
        if enabled is not None:
            self.enabled = enabled
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        self.audit_string = audit_string

    @property
    def auth_parameter_location(self):
        """Gets the auth_parameter_location of this AuthParameterSettings.  # noqa: E501

        Authentication location name  # noqa: E501

        :return: The auth_parameter_location of this AuthParameterSettings.  # noqa: E501
        :rtype: str
        """
        return self._auth_parameter_location

    @auth_parameter_location.setter
    def auth_parameter_location(self, auth_parameter_location):
        """Sets the auth_parameter_location of this AuthParameterSettings.

        Authentication location name  # noqa: E501

        :param auth_parameter_location: The auth_parameter_location of this AuthParameterSettings.  # noqa: E501
        :type: str
        """

        self._auth_parameter_location = auth_parameter_location

    @property
    def account_id(self):
        """Gets the account_id of this AuthParameterSettings.  # noqa: E501

        The account ID  # noqa: E501

        :return: The account_id of this AuthParameterSettings.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuthParameterSettings.

        The account ID  # noqa: E501

        :param account_id: The account_id of this AuthParameterSettings.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def enabled(self):
        """Gets the enabled of this AuthParameterSettings.  # noqa: E501

        Enable or disable the authentication location  # noqa: E501

        :return: The enabled of this AuthParameterSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AuthParameterSettings.

        Enable or disable the authentication location  # noqa: E501

        :param enabled: The enabled of this AuthParameterSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def last_modified(self):
        """Gets the last_modified of this AuthParameterSettings.  # noqa: E501

        The last modified timestamp  # noqa: E501

        :return: The last_modified of this AuthParameterSettings.  # noqa: E501
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AuthParameterSettings.

        The last modified timestamp  # noqa: E501

        :param last_modified: The last_modified of this AuthParameterSettings.  # noqa: E501
        :type: int
        """

        self._last_modified = last_modified

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this AuthParameterSettings.  # noqa: E501

        The last modified user  # noqa: E501

        :return: The last_modified_user of this AuthParameterSettings.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this AuthParameterSettings.

        The last modified user  # noqa: E501

        :param last_modified_user: The last_modified_user of this AuthParameterSettings.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def audit_string(self):
        """Gets the audit_string of this AuthParameterSettings.  # noqa: E501


        :return: The audit_string of this AuthParameterSettings.  # noqa: E501
        :rtype: str
        """
        return self._audit_string

    @audit_string.setter
    def audit_string(self, audit_string):
        """Sets the audit_string of this AuthParameterSettings.


        :param audit_string: The audit_string of this AuthParameterSettings.  # noqa: E501
        :type: str
        """
        if audit_string is None:
            raise ValueError("Invalid value for `audit_string`, must not be `None`")  # noqa: E501

        self._audit_string = audit_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthParameterSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthParameterSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
