# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveredEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'labels': 'list[Label]',
        'method': 'str',
        'risks': 'list[str]',
        'risks_info': 'list[RiskInfo]',
        'authentication_info': 'AuthenticationInfo',
        'data_exposure_info': 'DataExposureInfo',
        'host_id': 'int',
        'site_id': 'int',
        'host_name': 'str',
        'resource': 'str',
        'status': 'str',
        'discovery_date': 'int',
        'risk_types': 'list[str]',
        'counter': 'int',
        'baselined_date': 'int'
    }

    attribute_map = {
        'id': 'id',
        'labels': 'labels',
        'method': 'method',
        'risks': 'risks',
        'risks_info': 'risksInfo',
        'authentication_info': 'authenticationInfo',
        'data_exposure_info': 'dataExposureInfo',
        'host_id': 'hostId',
        'site_id': 'siteId',
        'host_name': 'hostName',
        'resource': 'resource',
        'status': 'status',
        'discovery_date': 'discoveryDate',
        'risk_types': 'riskTypes',
        'counter': 'counter',
        'baselined_date': 'baselinedDate'
    }

    def __init__(self, id=None, labels=None, method=None, risks=None, risks_info=None, authentication_info=None, data_exposure_info=None, host_id=None, site_id=None, host_name=None, resource=None, status=None, discovery_date=None, risk_types=None, counter=None, baselined_date=None):  # noqa: E501
        """DiscoveredEndpoint - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._labels = None
        self._method = None
        self._risks = None
        self._risks_info = None
        self._authentication_info = None
        self._data_exposure_info = None
        self._host_id = None
        self._site_id = None
        self._host_name = None
        self._resource = None
        self._status = None
        self._discovery_date = None
        self._risk_types = None
        self._counter = None
        self._baselined_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.labels = labels
        if method is not None:
            self.method = method
        if risks is not None:
            self.risks = risks
        if risks_info is not None:
            self.risks_info = risks_info
        if authentication_info is not None:
            self.authentication_info = authentication_info
        if data_exposure_info is not None:
            self.data_exposure_info = data_exposure_info
        if host_id is not None:
            self.host_id = host_id
        if site_id is not None:
            self.site_id = site_id
        if host_name is not None:
            self.host_name = host_name
        if resource is not None:
            self.resource = resource
        if status is not None:
            self.status = status
        if discovery_date is not None:
            self.discovery_date = discovery_date
        self.risk_types = risk_types
        if counter is not None:
            self.counter = counter
        if baselined_date is not None:
            self.baselined_date = baselined_date

    @property
    def id(self):
        """Gets the id of this DiscoveredEndpoint.  # noqa: E501

        The endpoint ID  # noqa: E501

        :return: The id of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscoveredEndpoint.

        The endpoint ID  # noqa: E501

        :param id: The id of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this DiscoveredEndpoint.  # noqa: E501


        :return: The labels of this DiscoveredEndpoint.  # noqa: E501
        :rtype: list[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DiscoveredEndpoint.


        :param labels: The labels of this DiscoveredEndpoint.  # noqa: E501
        :type: list[Label]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def method(self):
        """Gets the method of this DiscoveredEndpoint.  # noqa: E501

        The endpoint HTTP method  # noqa: E501

        :return: The method of this DiscoveredEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DiscoveredEndpoint.

        The endpoint HTTP method  # noqa: E501

        :param method: The method of this DiscoveredEndpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["POST", "GET", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def risks(self):
        """Gets the risks of this DiscoveredEndpoint.  # noqa: E501

        The discovered API risks  # noqa: E501

        :return: The risks of this DiscoveredEndpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._risks

    @risks.setter
    def risks(self, risks):
        """Sets the risks of this DiscoveredEndpoint.

        The discovered API risks  # noqa: E501

        :param risks: The risks of this DiscoveredEndpoint.  # noqa: E501
        :type: list[str]
        """

        self._risks = risks

    @property
    def risks_info(self):
        """Gets the risks_info of this DiscoveredEndpoint.  # noqa: E501

        The discovered API risks' information  # noqa: E501

        :return: The risks_info of this DiscoveredEndpoint.  # noqa: E501
        :rtype: list[RiskInfo]
        """
        return self._risks_info

    @risks_info.setter
    def risks_info(self, risks_info):
        """Sets the risks_info of this DiscoveredEndpoint.

        The discovered API risks' information  # noqa: E501

        :param risks_info: The risks_info of this DiscoveredEndpoint.  # noqa: E501
        :type: list[RiskInfo]
        """

        self._risks_info = risks_info

    @property
    def authentication_info(self):
        """Gets the authentication_info of this DiscoveredEndpoint.  # noqa: E501


        :return: The authentication_info of this DiscoveredEndpoint.  # noqa: E501
        :rtype: AuthenticationInfo
        """
        return self._authentication_info

    @authentication_info.setter
    def authentication_info(self, authentication_info):
        """Sets the authentication_info of this DiscoveredEndpoint.


        :param authentication_info: The authentication_info of this DiscoveredEndpoint.  # noqa: E501
        :type: AuthenticationInfo
        """

        self._authentication_info = authentication_info

    @property
    def data_exposure_info(self):
        """Gets the data_exposure_info of this DiscoveredEndpoint.  # noqa: E501


        :return: The data_exposure_info of this DiscoveredEndpoint.  # noqa: E501
        :rtype: DataExposureInfo
        """
        return self._data_exposure_info

    @data_exposure_info.setter
    def data_exposure_info(self, data_exposure_info):
        """Sets the data_exposure_info of this DiscoveredEndpoint.


        :param data_exposure_info: The data_exposure_info of this DiscoveredEndpoint.  # noqa: E501
        :type: DataExposureInfo
        """

        self._data_exposure_info = data_exposure_info

    @property
    def host_id(self):
        """Gets the host_id of this DiscoveredEndpoint.  # noqa: E501

        The ID of the host to which endpoint belongs  # noqa: E501

        :return: The host_id of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this DiscoveredEndpoint.

        The ID of the host to which endpoint belongs  # noqa: E501

        :param host_id: The host_id of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._host_id = host_id

    @property
    def site_id(self):
        """Gets the site_id of this DiscoveredEndpoint.  # noqa: E501

        The ID of the site to which host belongs  # noqa: E501

        :return: The site_id of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this DiscoveredEndpoint.

        The ID of the site to which host belongs  # noqa: E501

        :param site_id: The site_id of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def host_name(self):
        """Gets the host_name of this DiscoveredEndpoint.  # noqa: E501

        The name of the host to which endpoint belongs  # noqa: E501

        :return: The host_name of this DiscoveredEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DiscoveredEndpoint.

        The name of the host to which endpoint belongs  # noqa: E501

        :param host_name: The host_name of this DiscoveredEndpoint.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def resource(self):
        """Gets the resource of this DiscoveredEndpoint.  # noqa: E501

        The resource (url) to which endpoint belongs  # noqa: E501

        :return: The resource of this DiscoveredEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this DiscoveredEndpoint.

        The resource (url) to which endpoint belongs  # noqa: E501

        :param resource: The resource of this DiscoveredEndpoint.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def status(self):
        """Gets the status of this DiscoveredEndpoint.  # noqa: E501

        The discovery status for the endpoint  # noqa: E501

        :return: The status of this DiscoveredEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DiscoveredEndpoint.

        The discovery status for the endpoint  # noqa: E501

        :param status: The status of this DiscoveredEndpoint.  # noqa: E501
        :type: str
        """
        allowed_values = ["BASELINED", "IN_PROGRESS", "UNDER_INVESTIGATION", "DESIGN_ISSUE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def discovery_date(self):
        """Gets the discovery_date of this DiscoveredEndpoint.  # noqa: E501

        The time when endpoint discovery started  # noqa: E501

        :return: The discovery_date of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._discovery_date

    @discovery_date.setter
    def discovery_date(self, discovery_date):
        """Sets the discovery_date of this DiscoveredEndpoint.

        The time when endpoint discovery started  # noqa: E501

        :param discovery_date: The discovery_date of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._discovery_date = discovery_date

    @property
    def risk_types(self):
        """Gets the risk_types of this DiscoveredEndpoint.  # noqa: E501


        :return: The risk_types of this DiscoveredEndpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._risk_types

    @risk_types.setter
    def risk_types(self, risk_types):
        """Sets the risk_types of this DiscoveredEndpoint.


        :param risk_types: The risk_types of this DiscoveredEndpoint.  # noqa: E501
        :type: list[str]
        """
        if risk_types is None:
            raise ValueError("Invalid value for `risk_types`, must not be `None`")  # noqa: E501
        allowed_values = ["OWASP", "OTHER"]  # noqa: E501
        if not set(risk_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `risk_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(risk_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._risk_types = risk_types

    @property
    def counter(self):
        """Gets the counter of this DiscoveredEndpoint.  # noqa: E501

        Counter for endpoint in case of duplicate/multiple endpoints with same path  # noqa: E501

        :return: The counter of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this DiscoveredEndpoint.

        Counter for endpoint in case of duplicate/multiple endpoints with same path  # noqa: E501

        :param counter: The counter of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._counter = counter

    @property
    def baselined_date(self):
        """Gets the baselined_date of this DiscoveredEndpoint.  # noqa: E501

        The time when endpoint got baselined  # noqa: E501

        :return: The baselined_date of this DiscoveredEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._baselined_date

    @baselined_date.setter
    def baselined_date(self, baselined_date):
        """Sets the baselined_date of this DiscoveredEndpoint.

        The time when endpoint got baselined  # noqa: E501

        :param baselined_date: The baselined_date of this DiscoveredEndpoint.  # noqa: E501
        :type: int
        """

        self._baselined_date = baselined_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
