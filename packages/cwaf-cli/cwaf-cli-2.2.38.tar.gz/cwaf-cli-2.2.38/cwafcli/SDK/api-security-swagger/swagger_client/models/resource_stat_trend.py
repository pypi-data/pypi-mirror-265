# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceStatTrend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_count': 'int',
        'previous_count': 'int',
        'trend_percent': 'int',
        'trend_direction': 'str'
    }

    attribute_map = {
        'current_count': 'currentCount',
        'previous_count': 'previousCount',
        'trend_percent': 'trendPercent',
        'trend_direction': 'trendDirection'
    }

    def __init__(self, current_count=None, previous_count=None, trend_percent=None, trend_direction=None):  # noqa: E501
        """ResourceStatTrend - a model defined in Swagger"""  # noqa: E501
        self._current_count = None
        self._previous_count = None
        self._trend_percent = None
        self._trend_direction = None
        self.discriminator = None
        if current_count is not None:
            self.current_count = current_count
        if previous_count is not None:
            self.previous_count = previous_count
        if trend_percent is not None:
            self.trend_percent = trend_percent
        if trend_direction is not None:
            self.trend_direction = trend_direction

    @property
    def current_count(self):
        """Gets the current_count of this ResourceStatTrend.  # noqa: E501


        :return: The current_count of this ResourceStatTrend.  # noqa: E501
        :rtype: int
        """
        return self._current_count

    @current_count.setter
    def current_count(self, current_count):
        """Sets the current_count of this ResourceStatTrend.


        :param current_count: The current_count of this ResourceStatTrend.  # noqa: E501
        :type: int
        """

        self._current_count = current_count

    @property
    def previous_count(self):
        """Gets the previous_count of this ResourceStatTrend.  # noqa: E501


        :return: The previous_count of this ResourceStatTrend.  # noqa: E501
        :rtype: int
        """
        return self._previous_count

    @previous_count.setter
    def previous_count(self, previous_count):
        """Sets the previous_count of this ResourceStatTrend.


        :param previous_count: The previous_count of this ResourceStatTrend.  # noqa: E501
        :type: int
        """

        self._previous_count = previous_count

    @property
    def trend_percent(self):
        """Gets the trend_percent of this ResourceStatTrend.  # noqa: E501


        :return: The trend_percent of this ResourceStatTrend.  # noqa: E501
        :rtype: int
        """
        return self._trend_percent

    @trend_percent.setter
    def trend_percent(self, trend_percent):
        """Sets the trend_percent of this ResourceStatTrend.


        :param trend_percent: The trend_percent of this ResourceStatTrend.  # noqa: E501
        :type: int
        """

        self._trend_percent = trend_percent

    @property
    def trend_direction(self):
        """Gets the trend_direction of this ResourceStatTrend.  # noqa: E501


        :return: The trend_direction of this ResourceStatTrend.  # noqa: E501
        :rtype: str
        """
        return self._trend_direction

    @trend_direction.setter
    def trend_direction(self, trend_direction):
        """Sets the trend_direction of this ResourceStatTrend.


        :param trend_direction: The trend_direction of this ResourceStatTrend.  # noqa: E501
        :type: str
        """
        allowed_values = ["UP", "DOWN", "NEUTRAL"]  # noqa: E501
        if trend_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `trend_direction` ({0}), must be one of {1}"  # noqa: E501
                .format(trend_direction, allowed_values)
            )

        self._trend_direction = trend_direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceStatTrend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceStatTrend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
