# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VolumeStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hosts_volume_statistics': 'list[HostVolumeStatistics]',
        'resources_volume_statistics': 'list[ResourceVolumeStatistics]',
        'endpoints_volume_statistics': 'list[EndpointVolumeStatistics]',
        'hosts_resource_stat_trend': 'ResourceStatTrend',
        'resources_resource_stat_trend': 'ResourceStatTrend',
        'endpoints_resource_stat_trend': 'ResourceStatTrend',
        'new_hosts_resource_stat_trend': 'ResourceStatTrend',
        'new_resources_resource_stat_trend': 'ResourceStatTrend',
        'new_endpoints_resource_stat_trend': 'ResourceStatTrend'
    }

    attribute_map = {
        'hosts_volume_statistics': 'hostsVolumeStatistics',
        'resources_volume_statistics': 'resourcesVolumeStatistics',
        'endpoints_volume_statistics': 'endpointsVolumeStatistics',
        'hosts_resource_stat_trend': 'hostsResourceStatTrend',
        'resources_resource_stat_trend': 'resourcesResourceStatTrend',
        'endpoints_resource_stat_trend': 'endpointsResourceStatTrend',
        'new_hosts_resource_stat_trend': 'newHostsResourceStatTrend',
        'new_resources_resource_stat_trend': 'newResourcesResourceStatTrend',
        'new_endpoints_resource_stat_trend': 'newEndpointsResourceStatTrend'
    }

    def __init__(self, hosts_volume_statistics=None, resources_volume_statistics=None, endpoints_volume_statistics=None, hosts_resource_stat_trend=None, resources_resource_stat_trend=None, endpoints_resource_stat_trend=None, new_hosts_resource_stat_trend=None, new_resources_resource_stat_trend=None, new_endpoints_resource_stat_trend=None):  # noqa: E501
        """VolumeStatistics - a model defined in Swagger"""  # noqa: E501
        self._hosts_volume_statistics = None
        self._resources_volume_statistics = None
        self._endpoints_volume_statistics = None
        self._hosts_resource_stat_trend = None
        self._resources_resource_stat_trend = None
        self._endpoints_resource_stat_trend = None
        self._new_hosts_resource_stat_trend = None
        self._new_resources_resource_stat_trend = None
        self._new_endpoints_resource_stat_trend = None
        self.discriminator = None
        if hosts_volume_statistics is not None:
            self.hosts_volume_statistics = hosts_volume_statistics
        if resources_volume_statistics is not None:
            self.resources_volume_statistics = resources_volume_statistics
        if endpoints_volume_statistics is not None:
            self.endpoints_volume_statistics = endpoints_volume_statistics
        if hosts_resource_stat_trend is not None:
            self.hosts_resource_stat_trend = hosts_resource_stat_trend
        if resources_resource_stat_trend is not None:
            self.resources_resource_stat_trend = resources_resource_stat_trend
        if endpoints_resource_stat_trend is not None:
            self.endpoints_resource_stat_trend = endpoints_resource_stat_trend
        if new_hosts_resource_stat_trend is not None:
            self.new_hosts_resource_stat_trend = new_hosts_resource_stat_trend
        if new_resources_resource_stat_trend is not None:
            self.new_resources_resource_stat_trend = new_resources_resource_stat_trend
        if new_endpoints_resource_stat_trend is not None:
            self.new_endpoints_resource_stat_trend = new_endpoints_resource_stat_trend

    @property
    def hosts_volume_statistics(self):
        """Gets the hosts_volume_statistics of this VolumeStatistics.  # noqa: E501


        :return: The hosts_volume_statistics of this VolumeStatistics.  # noqa: E501
        :rtype: list[HostVolumeStatistics]
        """
        return self._hosts_volume_statistics

    @hosts_volume_statistics.setter
    def hosts_volume_statistics(self, hosts_volume_statistics):
        """Sets the hosts_volume_statistics of this VolumeStatistics.


        :param hosts_volume_statistics: The hosts_volume_statistics of this VolumeStatistics.  # noqa: E501
        :type: list[HostVolumeStatistics]
        """

        self._hosts_volume_statistics = hosts_volume_statistics

    @property
    def resources_volume_statistics(self):
        """Gets the resources_volume_statistics of this VolumeStatistics.  # noqa: E501


        :return: The resources_volume_statistics of this VolumeStatistics.  # noqa: E501
        :rtype: list[ResourceVolumeStatistics]
        """
        return self._resources_volume_statistics

    @resources_volume_statistics.setter
    def resources_volume_statistics(self, resources_volume_statistics):
        """Sets the resources_volume_statistics of this VolumeStatistics.


        :param resources_volume_statistics: The resources_volume_statistics of this VolumeStatistics.  # noqa: E501
        :type: list[ResourceVolumeStatistics]
        """

        self._resources_volume_statistics = resources_volume_statistics

    @property
    def endpoints_volume_statistics(self):
        """Gets the endpoints_volume_statistics of this VolumeStatistics.  # noqa: E501


        :return: The endpoints_volume_statistics of this VolumeStatistics.  # noqa: E501
        :rtype: list[EndpointVolumeStatistics]
        """
        return self._endpoints_volume_statistics

    @endpoints_volume_statistics.setter
    def endpoints_volume_statistics(self, endpoints_volume_statistics):
        """Sets the endpoints_volume_statistics of this VolumeStatistics.


        :param endpoints_volume_statistics: The endpoints_volume_statistics of this VolumeStatistics.  # noqa: E501
        :type: list[EndpointVolumeStatistics]
        """

        self._endpoints_volume_statistics = endpoints_volume_statistics

    @property
    def hosts_resource_stat_trend(self):
        """Gets the hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._hosts_resource_stat_trend

    @hosts_resource_stat_trend.setter
    def hosts_resource_stat_trend(self, hosts_resource_stat_trend):
        """Sets the hosts_resource_stat_trend of this VolumeStatistics.


        :param hosts_resource_stat_trend: The hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._hosts_resource_stat_trend = hosts_resource_stat_trend

    @property
    def resources_resource_stat_trend(self):
        """Gets the resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._resources_resource_stat_trend

    @resources_resource_stat_trend.setter
    def resources_resource_stat_trend(self, resources_resource_stat_trend):
        """Sets the resources_resource_stat_trend of this VolumeStatistics.


        :param resources_resource_stat_trend: The resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._resources_resource_stat_trend = resources_resource_stat_trend

    @property
    def endpoints_resource_stat_trend(self):
        """Gets the endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._endpoints_resource_stat_trend

    @endpoints_resource_stat_trend.setter
    def endpoints_resource_stat_trend(self, endpoints_resource_stat_trend):
        """Sets the endpoints_resource_stat_trend of this VolumeStatistics.


        :param endpoints_resource_stat_trend: The endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._endpoints_resource_stat_trend = endpoints_resource_stat_trend

    @property
    def new_hosts_resource_stat_trend(self):
        """Gets the new_hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The new_hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._new_hosts_resource_stat_trend

    @new_hosts_resource_stat_trend.setter
    def new_hosts_resource_stat_trend(self, new_hosts_resource_stat_trend):
        """Sets the new_hosts_resource_stat_trend of this VolumeStatistics.


        :param new_hosts_resource_stat_trend: The new_hosts_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._new_hosts_resource_stat_trend = new_hosts_resource_stat_trend

    @property
    def new_resources_resource_stat_trend(self):
        """Gets the new_resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The new_resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._new_resources_resource_stat_trend

    @new_resources_resource_stat_trend.setter
    def new_resources_resource_stat_trend(self, new_resources_resource_stat_trend):
        """Sets the new_resources_resource_stat_trend of this VolumeStatistics.


        :param new_resources_resource_stat_trend: The new_resources_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._new_resources_resource_stat_trend = new_resources_resource_stat_trend

    @property
    def new_endpoints_resource_stat_trend(self):
        """Gets the new_endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501


        :return: The new_endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :rtype: ResourceStatTrend
        """
        return self._new_endpoints_resource_stat_trend

    @new_endpoints_resource_stat_trend.setter
    def new_endpoints_resource_stat_trend(self, new_endpoints_resource_stat_trend):
        """Sets the new_endpoints_resource_stat_trend of this VolumeStatistics.


        :param new_endpoints_resource_stat_trend: The new_endpoints_resource_stat_trend of this VolumeStatistics.  # noqa: E501
        :type: ResourceStatTrend
        """

        self._new_endpoints_resource_stat_trend = new_endpoints_resource_stat_trend

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
