# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointDrillDown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_name': 'str',
        'method': 'str',
        'resource': 'str',
        'authentication_info': 'AuthenticationInfo',
        'request': 'RequestDrillDown',
        'responses': 'dict(str, ResponseDrillDown)',
        'endpoint_statistics_summary': 'EndpointStatisticsSummary',
        'status': 'EndpointStatusDrillDownDto',
        'path_param_segments': 'list[PathParamSegments]'
    }

    attribute_map = {
        'host_name': 'hostName',
        'method': 'method',
        'resource': 'resource',
        'authentication_info': 'authenticationInfo',
        'request': 'request',
        'responses': 'responses',
        'endpoint_statistics_summary': 'endpointStatisticsSummary',
        'status': 'status',
        'path_param_segments': 'pathParamSegments'
    }

    def __init__(self, host_name=None, method=None, resource=None, authentication_info=None, request=None, responses=None, endpoint_statistics_summary=None, status=None, path_param_segments=None):  # noqa: E501
        """EndpointDrillDown - a model defined in Swagger"""  # noqa: E501
        self._host_name = None
        self._method = None
        self._resource = None
        self._authentication_info = None
        self._request = None
        self._responses = None
        self._endpoint_statistics_summary = None
        self._status = None
        self._path_param_segments = None
        self.discriminator = None
        if host_name is not None:
            self.host_name = host_name
        if method is not None:
            self.method = method
        if resource is not None:
            self.resource = resource
        if authentication_info is not None:
            self.authentication_info = authentication_info
        if request is not None:
            self.request = request
        if responses is not None:
            self.responses = responses
        if endpoint_statistics_summary is not None:
            self.endpoint_statistics_summary = endpoint_statistics_summary
        if status is not None:
            self.status = status
        if path_param_segments is not None:
            self.path_param_segments = path_param_segments

    @property
    def host_name(self):
        """Gets the host_name of this EndpointDrillDown.  # noqa: E501

        The name of the host to which endpoint belongs  # noqa: E501

        :return: The host_name of this EndpointDrillDown.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this EndpointDrillDown.

        The name of the host to which endpoint belongs  # noqa: E501

        :param host_name: The host_name of this EndpointDrillDown.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def method(self):
        """Gets the method of this EndpointDrillDown.  # noqa: E501

        The method of the endpoint  # noqa: E501

        :return: The method of this EndpointDrillDown.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EndpointDrillDown.

        The method of the endpoint  # noqa: E501

        :param method: The method of this EndpointDrillDown.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def resource(self):
        """Gets the resource of this EndpointDrillDown.  # noqa: E501

        The resource (url) to which endpoint belongs  # noqa: E501

        :return: The resource of this EndpointDrillDown.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this EndpointDrillDown.

        The resource (url) to which endpoint belongs  # noqa: E501

        :param resource: The resource of this EndpointDrillDown.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def authentication_info(self):
        """Gets the authentication_info of this EndpointDrillDown.  # noqa: E501


        :return: The authentication_info of this EndpointDrillDown.  # noqa: E501
        :rtype: AuthenticationInfo
        """
        return self._authentication_info

    @authentication_info.setter
    def authentication_info(self, authentication_info):
        """Sets the authentication_info of this EndpointDrillDown.


        :param authentication_info: The authentication_info of this EndpointDrillDown.  # noqa: E501
        :type: AuthenticationInfo
        """

        self._authentication_info = authentication_info

    @property
    def request(self):
        """Gets the request of this EndpointDrillDown.  # noqa: E501


        :return: The request of this EndpointDrillDown.  # noqa: E501
        :rtype: RequestDrillDown
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this EndpointDrillDown.


        :param request: The request of this EndpointDrillDown.  # noqa: E501
        :type: RequestDrillDown
        """

        self._request = request

    @property
    def responses(self):
        """Gets the responses of this EndpointDrillDown.  # noqa: E501


        :return: The responses of this EndpointDrillDown.  # noqa: E501
        :rtype: dict(str, ResponseDrillDown)
        """
        return self._responses

    @responses.setter
    def responses(self, responses):
        """Sets the responses of this EndpointDrillDown.


        :param responses: The responses of this EndpointDrillDown.  # noqa: E501
        :type: dict(str, ResponseDrillDown)
        """

        self._responses = responses

    @property
    def endpoint_statistics_summary(self):
        """Gets the endpoint_statistics_summary of this EndpointDrillDown.  # noqa: E501


        :return: The endpoint_statistics_summary of this EndpointDrillDown.  # noqa: E501
        :rtype: EndpointStatisticsSummary
        """
        return self._endpoint_statistics_summary

    @endpoint_statistics_summary.setter
    def endpoint_statistics_summary(self, endpoint_statistics_summary):
        """Sets the endpoint_statistics_summary of this EndpointDrillDown.


        :param endpoint_statistics_summary: The endpoint_statistics_summary of this EndpointDrillDown.  # noqa: E501
        :type: EndpointStatisticsSummary
        """

        self._endpoint_statistics_summary = endpoint_statistics_summary

    @property
    def status(self):
        """Gets the status of this EndpointDrillDown.  # noqa: E501


        :return: The status of this EndpointDrillDown.  # noqa: E501
        :rtype: EndpointStatusDrillDownDto
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EndpointDrillDown.


        :param status: The status of this EndpointDrillDown.  # noqa: E501
        :type: EndpointStatusDrillDownDto
        """

        self._status = status

    @property
    def path_param_segments(self):
        """Gets the path_param_segments of this EndpointDrillDown.  # noqa: E501

        Description of path param segments  # noqa: E501

        :return: The path_param_segments of this EndpointDrillDown.  # noqa: E501
        :rtype: list[PathParamSegments]
        """
        return self._path_param_segments

    @path_param_segments.setter
    def path_param_segments(self, path_param_segments):
        """Sets the path_param_segments of this EndpointDrillDown.

        Description of path param segments  # noqa: E501

        :param path_param_segments: The path_param_segments of this EndpointDrillDown.  # noqa: E501
        :type: list[PathParamSegments]
        """

        self._path_param_segments = path_param_segments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointDrillDown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointDrillDown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
