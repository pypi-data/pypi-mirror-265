# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveryAccountSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_label_settings': 'list[DataLabelSettings]',
        'authentication_enabled': 'bool',
        'auth_parameter_settings': 'list[AuthParameterSettings]',
        'excessive_data_exposure_settings': 'ExcessiveDataExposureSettings',
        'deprecated_api_settings': 'DeprecatedApiSettings'
    }

    attribute_map = {
        'data_label_settings': 'dataLabelSettings',
        'authentication_enabled': 'authenticationEnabled',
        'auth_parameter_settings': 'authParameterSettings',
        'excessive_data_exposure_settings': 'excessiveDataExposureSettings',
        'deprecated_api_settings': 'deprecatedApiSettings'
    }

    def __init__(self, data_label_settings=None, authentication_enabled=None, auth_parameter_settings=None, excessive_data_exposure_settings=None, deprecated_api_settings=None):  # noqa: E501
        """DiscoveryAccountSettings - a model defined in Swagger"""  # noqa: E501
        self._data_label_settings = None
        self._authentication_enabled = None
        self._auth_parameter_settings = None
        self._excessive_data_exposure_settings = None
        self._deprecated_api_settings = None
        self.discriminator = None
        if data_label_settings is not None:
            self.data_label_settings = data_label_settings
        if authentication_enabled is not None:
            self.authentication_enabled = authentication_enabled
        if auth_parameter_settings is not None:
            self.auth_parameter_settings = auth_parameter_settings
        if excessive_data_exposure_settings is not None:
            self.excessive_data_exposure_settings = excessive_data_exposure_settings
        if deprecated_api_settings is not None:
            self.deprecated_api_settings = deprecated_api_settings

    @property
    def data_label_settings(self):
        """Gets the data_label_settings of this DiscoveryAccountSettings.  # noqa: E501

        Data label settings  # noqa: E501

        :return: The data_label_settings of this DiscoveryAccountSettings.  # noqa: E501
        :rtype: list[DataLabelSettings]
        """
        return self._data_label_settings

    @data_label_settings.setter
    def data_label_settings(self, data_label_settings):
        """Sets the data_label_settings of this DiscoveryAccountSettings.

        Data label settings  # noqa: E501

        :param data_label_settings: The data_label_settings of this DiscoveryAccountSettings.  # noqa: E501
        :type: list[DataLabelSettings]
        """

        self._data_label_settings = data_label_settings

    @property
    def authentication_enabled(self):
        """Gets the authentication_enabled of this DiscoveryAccountSettings.  # noqa: E501


        :return: The authentication_enabled of this DiscoveryAccountSettings.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_enabled

    @authentication_enabled.setter
    def authentication_enabled(self, authentication_enabled):
        """Sets the authentication_enabled of this DiscoveryAccountSettings.


        :param authentication_enabled: The authentication_enabled of this DiscoveryAccountSettings.  # noqa: E501
        :type: bool
        """

        self._authentication_enabled = authentication_enabled

    @property
    def auth_parameter_settings(self):
        """Gets the auth_parameter_settings of this DiscoveryAccountSettings.  # noqa: E501

        Authentication location settings  # noqa: E501

        :return: The auth_parameter_settings of this DiscoveryAccountSettings.  # noqa: E501
        :rtype: list[AuthParameterSettings]
        """
        return self._auth_parameter_settings

    @auth_parameter_settings.setter
    def auth_parameter_settings(self, auth_parameter_settings):
        """Sets the auth_parameter_settings of this DiscoveryAccountSettings.

        Authentication location settings  # noqa: E501

        :param auth_parameter_settings: The auth_parameter_settings of this DiscoveryAccountSettings.  # noqa: E501
        :type: list[AuthParameterSettings]
        """

        self._auth_parameter_settings = auth_parameter_settings

    @property
    def excessive_data_exposure_settings(self):
        """Gets the excessive_data_exposure_settings of this DiscoveryAccountSettings.  # noqa: E501


        :return: The excessive_data_exposure_settings of this DiscoveryAccountSettings.  # noqa: E501
        :rtype: ExcessiveDataExposureSettings
        """
        return self._excessive_data_exposure_settings

    @excessive_data_exposure_settings.setter
    def excessive_data_exposure_settings(self, excessive_data_exposure_settings):
        """Sets the excessive_data_exposure_settings of this DiscoveryAccountSettings.


        :param excessive_data_exposure_settings: The excessive_data_exposure_settings of this DiscoveryAccountSettings.  # noqa: E501
        :type: ExcessiveDataExposureSettings
        """

        self._excessive_data_exposure_settings = excessive_data_exposure_settings

    @property
    def deprecated_api_settings(self):
        """Gets the deprecated_api_settings of this DiscoveryAccountSettings.  # noqa: E501


        :return: The deprecated_api_settings of this DiscoveryAccountSettings.  # noqa: E501
        :rtype: DeprecatedApiSettings
        """
        return self._deprecated_api_settings

    @deprecated_api_settings.setter
    def deprecated_api_settings(self, deprecated_api_settings):
        """Sets the deprecated_api_settings of this DiscoveryAccountSettings.


        :param deprecated_api_settings: The deprecated_api_settings of this DiscoveryAccountSettings.  # noqa: E501
        :type: DeprecatedApiSettings
        """

        self._deprecated_api_settings = deprecated_api_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveryAccountSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryAccountSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
