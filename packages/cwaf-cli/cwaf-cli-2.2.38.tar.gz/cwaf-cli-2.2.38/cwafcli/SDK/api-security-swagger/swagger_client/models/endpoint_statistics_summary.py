# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointStatisticsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_parameters_with_data_labels': 'dict(str, int)',
        'number_of_parameters_by_data_label': 'dict(str, int)'
    }

    attribute_map = {
        'number_of_parameters_with_data_labels': 'numberOfParametersWithDataLabels',
        'number_of_parameters_by_data_label': 'numberOfParametersByDataLabel'
    }

    def __init__(self, number_of_parameters_with_data_labels=None, number_of_parameters_by_data_label=None):  # noqa: E501
        """EndpointStatisticsSummary - a model defined in Swagger"""  # noqa: E501
        self._number_of_parameters_with_data_labels = None
        self._number_of_parameters_by_data_label = None
        self.discriminator = None
        if number_of_parameters_with_data_labels is not None:
            self.number_of_parameters_with_data_labels = number_of_parameters_with_data_labels
        if number_of_parameters_by_data_label is not None:
            self.number_of_parameters_by_data_label = number_of_parameters_by_data_label

    @property
    def number_of_parameters_with_data_labels(self):
        """Gets the number_of_parameters_with_data_labels of this EndpointStatisticsSummary.  # noqa: E501

        Number of total, sensitive and non-sensitive data labels for all parameters  # noqa: E501

        :return: The number_of_parameters_with_data_labels of this EndpointStatisticsSummary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._number_of_parameters_with_data_labels

    @number_of_parameters_with_data_labels.setter
    def number_of_parameters_with_data_labels(self, number_of_parameters_with_data_labels):
        """Sets the number_of_parameters_with_data_labels of this EndpointStatisticsSummary.

        Number of total, sensitive and non-sensitive data labels for all parameters  # noqa: E501

        :param number_of_parameters_with_data_labels: The number_of_parameters_with_data_labels of this EndpointStatisticsSummary.  # noqa: E501
        :type: dict(str, int)
        """

        self._number_of_parameters_with_data_labels = number_of_parameters_with_data_labels

    @property
    def number_of_parameters_by_data_label(self):
        """Gets the number_of_parameters_by_data_label of this EndpointStatisticsSummary.  # noqa: E501

        Number of parameters for a specific label  # noqa: E501

        :return: The number_of_parameters_by_data_label of this EndpointStatisticsSummary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._number_of_parameters_by_data_label

    @number_of_parameters_by_data_label.setter
    def number_of_parameters_by_data_label(self, number_of_parameters_by_data_label):
        """Sets the number_of_parameters_by_data_label of this EndpointStatisticsSummary.

        Number of parameters for a specific label  # noqa: E501

        :param number_of_parameters_by_data_label: The number_of_parameters_by_data_label of this EndpointStatisticsSummary.  # noqa: E501
        :type: dict(str, int)
        """

        self._number_of_parameters_by_data_label = number_of_parameters_by_data_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointStatisticsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointStatisticsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
