# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InventoryDiscoveryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoints': 'list[DiscoveredEndpoint]',
        'endpoints_number_by_host': 'list[EndpointsPerHost]',
        'endpoints_number_by_label': 'list[EndpointsPerLabel]',
        'endpoints_number_by_risk': 'list[NumberOfEndpointsByRisks]',
        'summary': 'DiscoveredApisSummary'
    }

    attribute_map = {
        'endpoints': 'endpoints',
        'endpoints_number_by_host': 'endpointsNumberByHost',
        'endpoints_number_by_label': 'endpointsNumberByLabel',
        'endpoints_number_by_risk': 'endpointsNumberByRisk',
        'summary': 'summary'
    }

    def __init__(self, endpoints=None, endpoints_number_by_host=None, endpoints_number_by_label=None, endpoints_number_by_risk=None, summary=None):  # noqa: E501
        """InventoryDiscoveryData - a model defined in Swagger"""  # noqa: E501
        self._endpoints = None
        self._endpoints_number_by_host = None
        self._endpoints_number_by_label = None
        self._endpoints_number_by_risk = None
        self._summary = None
        self.discriminator = None
        if endpoints is not None:
            self.endpoints = endpoints
        if endpoints_number_by_host is not None:
            self.endpoints_number_by_host = endpoints_number_by_host
        if endpoints_number_by_label is not None:
            self.endpoints_number_by_label = endpoints_number_by_label
        if endpoints_number_by_risk is not None:
            self.endpoints_number_by_risk = endpoints_number_by_risk
        if summary is not None:
            self.summary = summary

    @property
    def endpoints(self):
        """Gets the endpoints of this InventoryDiscoveryData.  # noqa: E501


        :return: The endpoints of this InventoryDiscoveryData.  # noqa: E501
        :rtype: list[DiscoveredEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this InventoryDiscoveryData.


        :param endpoints: The endpoints of this InventoryDiscoveryData.  # noqa: E501
        :type: list[DiscoveredEndpoint]
        """

        self._endpoints = endpoints

    @property
    def endpoints_number_by_host(self):
        """Gets the endpoints_number_by_host of this InventoryDiscoveryData.  # noqa: E501


        :return: The endpoints_number_by_host of this InventoryDiscoveryData.  # noqa: E501
        :rtype: list[EndpointsPerHost]
        """
        return self._endpoints_number_by_host

    @endpoints_number_by_host.setter
    def endpoints_number_by_host(self, endpoints_number_by_host):
        """Sets the endpoints_number_by_host of this InventoryDiscoveryData.


        :param endpoints_number_by_host: The endpoints_number_by_host of this InventoryDiscoveryData.  # noqa: E501
        :type: list[EndpointsPerHost]
        """

        self._endpoints_number_by_host = endpoints_number_by_host

    @property
    def endpoints_number_by_label(self):
        """Gets the endpoints_number_by_label of this InventoryDiscoveryData.  # noqa: E501


        :return: The endpoints_number_by_label of this InventoryDiscoveryData.  # noqa: E501
        :rtype: list[EndpointsPerLabel]
        """
        return self._endpoints_number_by_label

    @endpoints_number_by_label.setter
    def endpoints_number_by_label(self, endpoints_number_by_label):
        """Sets the endpoints_number_by_label of this InventoryDiscoveryData.


        :param endpoints_number_by_label: The endpoints_number_by_label of this InventoryDiscoveryData.  # noqa: E501
        :type: list[EndpointsPerLabel]
        """

        self._endpoints_number_by_label = endpoints_number_by_label

    @property
    def endpoints_number_by_risk(self):
        """Gets the endpoints_number_by_risk of this InventoryDiscoveryData.  # noqa: E501


        :return: The endpoints_number_by_risk of this InventoryDiscoveryData.  # noqa: E501
        :rtype: list[NumberOfEndpointsByRisks]
        """
        return self._endpoints_number_by_risk

    @endpoints_number_by_risk.setter
    def endpoints_number_by_risk(self, endpoints_number_by_risk):
        """Sets the endpoints_number_by_risk of this InventoryDiscoveryData.


        :param endpoints_number_by_risk: The endpoints_number_by_risk of this InventoryDiscoveryData.  # noqa: E501
        :type: list[NumberOfEndpointsByRisks]
        """

        self._endpoints_number_by_risk = endpoints_number_by_risk

    @property
    def summary(self):
        """Gets the summary of this InventoryDiscoveryData.  # noqa: E501


        :return: The summary of this InventoryDiscoveryData.  # noqa: E501
        :rtype: DiscoveredApisSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this InventoryDiscoveryData.


        :param summary: The summary of this InventoryDiscoveryData.  # noqa: E501
        :type: DiscoveredApisSummary
        """

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryDiscoveryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryDiscoveryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
