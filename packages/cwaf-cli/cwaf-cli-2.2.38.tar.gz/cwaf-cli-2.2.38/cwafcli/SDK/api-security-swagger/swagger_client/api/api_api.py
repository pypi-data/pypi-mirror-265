# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class APIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_api(self, api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, **kwargs):  # noqa: E501
        """Add an API  # noqa: E501

        Adds an API specification to a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_api(api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_specification: (required)
        :param str base_path: (required)
        :param str description: (required)
        :param str oas_file_name: (required)
        :param str specification_violation_action: (required)
        :param bool validate_host: (required)
        :param str violation_actions: (required)
        :param int site_id: The site ID (required)
        :return: AddApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_api_with_http_info(api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_api_with_http_info(api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, **kwargs)  # noqa: E501
            return data

    def add_api_with_http_info(self, api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, **kwargs):  # noqa: E501
        """Add an API  # noqa: E501

        Adds an API specification to a site  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_api_with_http_info(api_specification, base_path, description, oas_file_name, specification_violation_action, validate_host, violation_actions, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_specification: (required)
        :param str base_path: (required)
        :param str description: (required)
        :param str oas_file_name: (required)
        :param str specification_violation_action: (required)
        :param bool validate_host: (required)
        :param str violation_actions: (required)
        :param int site_id: The site ID (required)
        :return: AddApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_specification', 'base_path', 'description', 'oas_file_name', 'specification_violation_action', 'validate_host', 'violation_actions', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_specification' is set
        if ('api_specification' not in params or
                params['api_specification'] is None):
            raise ValueError("Missing the required parameter `api_specification` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'base_path' is set
        if ('base_path' not in params or
                params['base_path'] is None):
            raise ValueError("Missing the required parameter `base_path` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'oas_file_name' is set
        if ('oas_file_name' not in params or
                params['oas_file_name'] is None):
            raise ValueError("Missing the required parameter `oas_file_name` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'specification_violation_action' is set
        if ('specification_violation_action' not in params or
                params['specification_violation_action'] is None):
            raise ValueError("Missing the required parameter `specification_violation_action` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'validate_host' is set
        if ('validate_host' not in params or
                params['validate_host'] is None):
            raise ValueError("Missing the required parameter `validate_host` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'violation_actions' is set
        if ('violation_actions' not in params or
                params['violation_actions'] is None):
            raise ValueError("Missing the required parameter `violation_actions` when calling `add_api`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'api_specification' in params:
            local_var_files['apiSpecification'] = params['api_specification']  # noqa: E501
        if 'base_path' in params:
            form_params.append(('basePath', params['base_path']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'oas_file_name' in params:
            form_params.append(('oasFileName', params['oas_file_name']))  # noqa: E501
        if 'specification_violation_action' in params:
            form_params.append(('specificationViolationAction', params['specification_violation_action']))  # noqa: E501
        if 'validate_host' in params:
            form_params.append(('validateHost', params['validate_host']))  # noqa: E501
        if 'violation_actions' in params:
            form_params.append(('violationActions', params['violation_actions']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_api(self, api_id, site_id, **kwargs):  # noqa: E501
        """Delete an API  # noqa: E501

        Deletes an API from a site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: SimpleTextSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
            return data

    def delete_api_with_http_info(self, api_id, site_id, **kwargs):  # noqa: E501
        """Delete an API  # noqa: E501

        Deletes an API from a site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_with_http_info(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: SimpleTextSuccessResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params or
                params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `delete_api`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}/{apiId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimpleTextSuccessResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_apis(self, **kwargs):  # noqa: E501
        """Retrieve all APIs for the account  # noqa: E501

        Retrieves details of all protected APIs for all sites in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_apis(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetApisResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_apis_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_apis_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_apis_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all APIs for the account  # noqa: E501

        Retrieves details of all protected APIs for all sites in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_apis_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: GetApisResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_apis" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApisResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_site_apis(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all APIs for a site  # noqa: E501

        Retrieves details of all protected APIs for a specific site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_apis(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The site ID (required)
        :return: GetApisResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_site_apis_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_site_apis_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_all_site_apis_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all APIs for a site  # noqa: E501

        Retrieves details of all protected APIs for a specific site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_apis_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The site ID (required)
        :return: GetApisResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_site_apis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_all_site_apis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApisResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_site_apis_with_endpoints(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all APIs and endpoints for a site  # noqa: E501

        Retrieves details of all protected APIs and their endpoints for a specific site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_apis_with_endpoints(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The site ID (required)
        :return: GetApisWithEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_site_apis_with_endpoints_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_site_apis_with_endpoints_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_all_site_apis_with_endpoints_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve all APIs and endpoints for a site  # noqa: E501

        Retrieves details of all protected APIs and their endpoints for a specific site in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_apis_with_endpoints_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The site ID (required)
        :return: GetApisWithEndpointsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_site_apis_with_endpoints" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_all_site_apis_with_endpoints`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApisWithEndpointsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api(self, api_id, site_id, **kwargs):  # noqa: E501
        """Retrieve an API  # noqa: E501

        Retrieves details of a specific API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: GetApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
            return data

    def get_api_with_http_info(self, api_id, site_id, **kwargs):  # noqa: E501
        """Retrieve an API  # noqa: E501

        Retrieves details of a specific API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_with_http_info(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: GetApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params or
                params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `get_api`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}/{apiId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_file(self, api_id, site_id, **kwargs):  # noqa: E501
        """Download the API OAS file  # noqa: E501

        Download the manually uploaded or automatically discovered OAS file for a specific API. If the API source is mixed, the result is the manually uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_file(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: DownloadApiSpecificationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_file_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_file_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
            return data

    def get_api_file_with_http_info(self, api_id, site_id, **kwargs):  # noqa: E501
        """Download the API OAS file  # noqa: E501

        Download the manually uploaded or automatically discovered OAS file for a specific API. If the API source is mixed, the result is the manually uploaded file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_file_with_http_info(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :return: DownloadApiSpecificationDtoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params or
                params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `get_api_file`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_api_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/file/{siteId}/{apiId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DownloadApiSpecificationDtoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_api(self, api_id, site_id, **kwargs):  # noqa: E501
        """Update an API  # noqa: E501

        Updates any or all of the optional parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_api(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :param str api_specification:
        :param str description:
        :param str oas_file_name:
        :param str specification_violation_action:
        :param bool validate_host:
        :param str violation_actions:
        :return: AddApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_api_with_http_info(api_id, site_id, **kwargs)  # noqa: E501
            return data

    def update_api_with_http_info(self, api_id, site_id, **kwargs):  # noqa: E501
        """Update an API  # noqa: E501

        Updates any or all of the optional parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_api_with_http_info(api_id, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int api_id: The API ID (required)
        :param int site_id: The site ID (required)
        :param str api_specification:
        :param str description:
        :param str oas_file_name:
        :param str specification_violation_action:
        :param bool validate_host:
        :param str violation_actions:
        :return: AddApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_id', 'site_id', 'api_specification', 'description', 'oas_file_name', 'specification_violation_action', 'validate_host', 'violation_actions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_id' is set
        if ('api_id' not in params or
                params['api_id'] is None):
            raise ValueError("Missing the required parameter `api_id` when calling `update_api`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'api_id' in params:
            path_params['apiId'] = params['api_id']  # noqa: E501
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'api_specification' in params:
            local_var_files['apiSpecification'] = params['api_specification']  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'oas_file_name' in params:
            form_params.append(('oasFileName', params['oas_file_name']))  # noqa: E501
        if 'specification_violation_action' in params:
            form_params.append(('specificationViolationAction', params['specification_violation_action']))  # noqa: E501
        if 'validate_host' in params:
            form_params.append(('validateHost', params['validate_host']))  # noqa: E501
        if 'violation_actions' in params:
            form_params.append(('violationActions', params['violation_actions']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/{siteId}/{apiId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
