# coding: utf-8

"""
    Imperva Advanced API Security

    This topic describes the API for Imperva Advanced API Security. For full feature documentation, see [Imperva API Security](https://docs.imperva.com/bundle/api-security/page/72248.htm).  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndpointVolumeStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'endpoint_details': 'EndpointDetails',
        'current_call_volume': 'int',
        'current_call_percent': 'int',
        'is_first_time_seen_in_current_time_period': 'bool'
    }

    attribute_map = {
        'endpoint_details': 'endpointDetails',
        'current_call_volume': 'currentCallVolume',
        'current_call_percent': 'currentCallPercent',
        'is_first_time_seen_in_current_time_period': 'isFirstTimeSeenInCurrentTimePeriod'
    }

    def __init__(self, endpoint_details=None, current_call_volume=None, current_call_percent=None, is_first_time_seen_in_current_time_period=None):  # noqa: E501
        """EndpointVolumeStatistics - a model defined in Swagger"""  # noqa: E501
        self._endpoint_details = None
        self._current_call_volume = None
        self._current_call_percent = None
        self._is_first_time_seen_in_current_time_period = None
        self.discriminator = None
        if endpoint_details is not None:
            self.endpoint_details = endpoint_details
        if current_call_volume is not None:
            self.current_call_volume = current_call_volume
        if current_call_percent is not None:
            self.current_call_percent = current_call_percent
        if is_first_time_seen_in_current_time_period is not None:
            self.is_first_time_seen_in_current_time_period = is_first_time_seen_in_current_time_period

    @property
    def endpoint_details(self):
        """Gets the endpoint_details of this EndpointVolumeStatistics.  # noqa: E501


        :return: The endpoint_details of this EndpointVolumeStatistics.  # noqa: E501
        :rtype: EndpointDetails
        """
        return self._endpoint_details

    @endpoint_details.setter
    def endpoint_details(self, endpoint_details):
        """Sets the endpoint_details of this EndpointVolumeStatistics.


        :param endpoint_details: The endpoint_details of this EndpointVolumeStatistics.  # noqa: E501
        :type: EndpointDetails
        """

        self._endpoint_details = endpoint_details

    @property
    def current_call_volume(self):
        """Gets the current_call_volume of this EndpointVolumeStatistics.  # noqa: E501


        :return: The current_call_volume of this EndpointVolumeStatistics.  # noqa: E501
        :rtype: int
        """
        return self._current_call_volume

    @current_call_volume.setter
    def current_call_volume(self, current_call_volume):
        """Sets the current_call_volume of this EndpointVolumeStatistics.


        :param current_call_volume: The current_call_volume of this EndpointVolumeStatistics.  # noqa: E501
        :type: int
        """

        self._current_call_volume = current_call_volume

    @property
    def current_call_percent(self):
        """Gets the current_call_percent of this EndpointVolumeStatistics.  # noqa: E501


        :return: The current_call_percent of this EndpointVolumeStatistics.  # noqa: E501
        :rtype: int
        """
        return self._current_call_percent

    @current_call_percent.setter
    def current_call_percent(self, current_call_percent):
        """Sets the current_call_percent of this EndpointVolumeStatistics.


        :param current_call_percent: The current_call_percent of this EndpointVolumeStatistics.  # noqa: E501
        :type: int
        """

        self._current_call_percent = current_call_percent

    @property
    def is_first_time_seen_in_current_time_period(self):
        """Gets the is_first_time_seen_in_current_time_period of this EndpointVolumeStatistics.  # noqa: E501


        :return: The is_first_time_seen_in_current_time_period of this EndpointVolumeStatistics.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_time_seen_in_current_time_period

    @is_first_time_seen_in_current_time_period.setter
    def is_first_time_seen_in_current_time_period(self, is_first_time_seen_in_current_time_period):
        """Sets the is_first_time_seen_in_current_time_period of this EndpointVolumeStatistics.


        :param is_first_time_seen_in_current_time_period: The is_first_time_seen_in_current_time_period of this EndpointVolumeStatistics.  # noqa: E501
        :type: bool
        """

        self._is_first_time_seen_in_current_time_period = is_first_time_seen_in_current_time_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointVolumeStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointVolumeStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
