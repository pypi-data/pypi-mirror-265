# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'id': 'str',
        'code': 'str',
        'source': 'dict(str, object)',
        'title': 'str',
        'detail': 'str'
    }

    attribute_map = {
        'status': 'status',
        'id': 'id',
        'code': 'code',
        'source': 'source',
        'title': 'title',
        'detail': 'detail'
    }

    def __init__(self, status=None, id=None, code=None, source=None, title=None, detail=None):  # noqa: E501
        """APIError - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._id = None
        self._code = None
        self._source = None
        self._title = None
        self._detail = None
        self.discriminator = None
        self.status = status
        self.id = id
        self.code = code
        self.source = source
        self.title = title
        self.detail = detail

    @property
    def status(self):
        """Gets the status of this APIError.  # noqa: E501


        :return: The status of this APIError.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this APIError.


        :param status: The status of this APIError.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def id(self):
        """Gets the id of this APIError.  # noqa: E501


        :return: The id of this APIError.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this APIError.


        :param id: The id of this APIError.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self):
        """Gets the code of this APIError.  # noqa: E501


        :return: The code of this APIError.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this APIError.


        :param code: The code of this APIError.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def source(self):
        """Gets the source of this APIError.  # noqa: E501


        :return: The source of this APIError.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this APIError.


        :param source: The source of this APIError.  # noqa: E501
        :type: dict(str, object)
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def title(self):
        """Gets the title of this APIError.  # noqa: E501


        :return: The title of this APIError.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this APIError.


        :param title: The title of this APIError.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this APIError.  # noqa: E501


        :return: The detail of this APIError.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this APIError.


        :param detail: The detail of this APIError.  # noqa: E501
        :type: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
