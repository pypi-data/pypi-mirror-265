# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePolicyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'enabled': 'bool',
        'account_id': 'int',
        'policy_type': 'str',
        'policy_settings': 'list[PolicySettingsDto]',
        'default_policy_config': 'list[DefaultPolicyConfigDto]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'enabled': 'enabled',
        'account_id': 'accountId',
        'policy_type': 'policyType',
        'policy_settings': 'policySettings',
        'default_policy_config': 'defaultPolicyConfig'
    }

    def __init__(self, name=None, description=None, enabled=None, account_id=None, policy_type=None, policy_settings=None, default_policy_config=None):  # noqa: E501
        """UpdatePolicyDto - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._enabled = None
        self._account_id = None
        self._policy_type = None
        self._policy_settings = None
        self._default_policy_config = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if account_id is not None:
            self.account_id = account_id
        if policy_type is not None:
            self.policy_type = policy_type
        if policy_settings is not None:
            self.policy_settings = policy_settings
        if default_policy_config is not None:
            self.default_policy_config = default_policy_config

    @property
    def name(self):
        """Gets the name of this UpdatePolicyDto.  # noqa: E501

        The Policy name  # noqa: E501

        :return: The name of this UpdatePolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdatePolicyDto.

        The Policy name  # noqa: E501

        :param name: The name of this UpdatePolicyDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UpdatePolicyDto.  # noqa: E501

        The Policy description  # noqa: E501

        :return: The description of this UpdatePolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdatePolicyDto.

        The Policy description  # noqa: E501

        :param description: The description of this UpdatePolicyDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this UpdatePolicyDto.  # noqa: E501

        Enable or disable the policy. A WAF Rules policy is always created in the enabled state, and cannot be disabled.  # noqa: E501

        :return: The enabled of this UpdatePolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdatePolicyDto.

        Enable or disable the policy. A WAF Rules policy is always created in the enabled state, and cannot be disabled.  # noqa: E501

        :param enabled: The enabled of this UpdatePolicyDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def account_id(self):
        """Gets the account_id of this UpdatePolicyDto.  # noqa: E501

        The Account Id Of the Policy  # noqa: E501

        :return: The account_id of this UpdatePolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdatePolicyDto.

        The Account Id Of the Policy  # noqa: E501

        :param account_id: The account_id of this UpdatePolicyDto.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def policy_type(self):
        """Gets the policy_type of this UpdatePolicyDto.  # noqa: E501

        The Policy type  # noqa: E501

        :return: The policy_type of this UpdatePolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this UpdatePolicyDto.

        The Policy type  # noqa: E501

        :param policy_type: The policy_type of this UpdatePolicyDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACL", "WHITELIST", "WAF_RULES"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type

    @property
    def policy_settings(self):
        """Gets the policy_settings of this UpdatePolicyDto.  # noqa: E501

        The Policy settings configuration  # noqa: E501

        :return: The policy_settings of this UpdatePolicyDto.  # noqa: E501
        :rtype: list[PolicySettingsDto]
        """
        return self._policy_settings

    @policy_settings.setter
    def policy_settings(self, policy_settings):
        """Sets the policy_settings of this UpdatePolicyDto.

        The Policy settings configuration  # noqa: E501

        :param policy_settings: The policy_settings of this UpdatePolicyDto.  # noqa: E501
        :type: list[PolicySettingsDto]
        """

        self._policy_settings = policy_settings

    @property
    def default_policy_config(self):
        """Gets the default_policy_config of this UpdatePolicyDto.  # noqa: E501

        Sets the specified policy as default for the account, or indicates that the policy is set as default. A default policy is used by any new website added to the account.  # noqa: E501

        :return: The default_policy_config of this UpdatePolicyDto.  # noqa: E501
        :rtype: list[DefaultPolicyConfigDto]
        """
        return self._default_policy_config

    @default_policy_config.setter
    def default_policy_config(self, default_policy_config):
        """Sets the default_policy_config of this UpdatePolicyDto.

        Sets the specified policy as default for the account, or indicates that the policy is set as default. A default policy is used by any new website added to the account.  # noqa: E501

        :param default_policy_config: The default_policy_config of this UpdatePolicyDto.  # noqa: E501
        :type: list[DefaultPolicyConfigDto]
        """

        self._default_policy_config = default_policy_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePolicyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
