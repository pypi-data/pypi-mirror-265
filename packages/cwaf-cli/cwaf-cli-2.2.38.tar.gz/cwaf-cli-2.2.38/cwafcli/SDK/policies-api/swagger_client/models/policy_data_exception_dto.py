# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicyDataExceptionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'policy_settings_id': 'int',
        'data': 'list[ExceptionsDataDto]',
        'comment': 'str',
        'summary': 'str'
    }

    attribute_map = {
        'id': 'id',
        'policy_settings_id': 'policySettingsId',
        'data': 'data',
        'comment': 'comment',
        'summary': 'summary'
    }

    def __init__(self, id=None, policy_settings_id=None, data=None, comment=None, summary=None):  # noqa: E501
        """PolicyDataExceptionDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._policy_settings_id = None
        self._data = None
        self._comment = None
        self._summary = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if policy_settings_id is not None:
            self.policy_settings_id = policy_settings_id
        if data is not None:
            self.data = data
        if comment is not None:
            self.comment = comment
        self.summary = summary

    @property
    def id(self):
        """Gets the id of this PolicyDataExceptionDto.  # noqa: E501

        The PolicyDataExceptions ID  # noqa: E501

        :return: The id of this PolicyDataExceptionDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicyDataExceptionDto.

        The PolicyDataExceptions ID  # noqa: E501

        :param id: The id of this PolicyDataExceptionDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def policy_settings_id(self):
        """Gets the policy_settings_id of this PolicyDataExceptionDto.  # noqa: E501

        The PolicySettings ID  # noqa: E501

        :return: The policy_settings_id of this PolicyDataExceptionDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_settings_id

    @policy_settings_id.setter
    def policy_settings_id(self, policy_settings_id):
        """Sets the policy_settings_id of this PolicyDataExceptionDto.

        The PolicySettings ID  # noqa: E501

        :param policy_settings_id: The policy_settings_id of this PolicyDataExceptionDto.  # noqa: E501
        :type: int
        """

        self._policy_settings_id = policy_settings_id

    @property
    def data(self):
        """Gets the data of this PolicyDataExceptionDto.  # noqa: E501

        The Filter/s of the exception  # noqa: E501

        :return: The data of this PolicyDataExceptionDto.  # noqa: E501
        :rtype: list[ExceptionsDataDto]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PolicyDataExceptionDto.

        The Filter/s of the exception  # noqa: E501

        :param data: The data of this PolicyDataExceptionDto.  # noqa: E501
        :type: list[ExceptionsDataDto]
        """

        self._data = data

    @property
    def comment(self):
        """Gets the comment of this PolicyDataExceptionDto.  # noqa: E501

        Comment describing the exception and its reason  # noqa: E501

        :return: The comment of this PolicyDataExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this PolicyDataExceptionDto.

        Comment describing the exception and its reason  # noqa: E501

        :param comment: The comment of this PolicyDataExceptionDto.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def summary(self):
        """Gets the summary of this PolicyDataExceptionDto.  # noqa: E501


        :return: The summary of this PolicyDataExceptionDto.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PolicyDataExceptionDto.


        :param summary: The summary of this PolicyDataExceptionDto.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicyDataExceptionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicyDataExceptionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
