# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeanPolicyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'policy_type': 'str',
        'name': 'str',
        'description': 'str',
        'last_modified': 'datetime',
        'last_modified_by': 'int',
        'last_user_modified': 'str',
        'number_of_assets': 'int',
        'is_marked_as_default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'policy_type': 'policyType',
        'name': 'name',
        'description': 'description',
        'last_modified': 'lastModified',
        'last_modified_by': 'lastModifiedBy',
        'last_user_modified': 'lastUserModified',
        'number_of_assets': 'numberOfAssets',
        'is_marked_as_default': 'isMarkedAsDefault'
    }

    def __init__(self, id=None, policy_type=None, name=None, description=None, last_modified=None, last_modified_by=None, last_user_modified=None, number_of_assets=None, is_marked_as_default=None):  # noqa: E501
        """LeanPolicyDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._policy_type = None
        self._name = None
        self._description = None
        self._last_modified = None
        self._last_modified_by = None
        self._last_user_modified = None
        self._number_of_assets = None
        self._is_marked_as_default = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if policy_type is not None:
            self.policy_type = policy_type
        if name is not None:
            self.name = name
        self.description = description
        self.last_modified = last_modified
        self.last_modified_by = last_modified_by
        self.last_user_modified = last_user_modified
        if number_of_assets is not None:
            self.number_of_assets = number_of_assets
        self.is_marked_as_default = is_marked_as_default

    @property
    def id(self):
        """Gets the id of this LeanPolicyDto.  # noqa: E501

        The Policy ID  # noqa: E501

        :return: The id of this LeanPolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeanPolicyDto.

        The Policy ID  # noqa: E501

        :param id: The id of this LeanPolicyDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def policy_type(self):
        """Gets the policy_type of this LeanPolicyDto.  # noqa: E501

        The Policy type  # noqa: E501

        :return: The policy_type of this LeanPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this LeanPolicyDto.

        The Policy type  # noqa: E501

        :param policy_type: The policy_type of this LeanPolicyDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACL", "WHITELIST", "WAF_RULES"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type

    @property
    def name(self):
        """Gets the name of this LeanPolicyDto.  # noqa: E501

        The Policy name  # noqa: E501

        :return: The name of this LeanPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeanPolicyDto.

        The Policy name  # noqa: E501

        :param name: The name of this LeanPolicyDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this LeanPolicyDto.  # noqa: E501


        :return: The description of this LeanPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LeanPolicyDto.


        :param description: The description of this LeanPolicyDto.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def last_modified(self):
        """Gets the last_modified of this LeanPolicyDto.  # noqa: E501


        :return: The last_modified of this LeanPolicyDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LeanPolicyDto.


        :param last_modified: The last_modified of this LeanPolicyDto.  # noqa: E501
        :type: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this LeanPolicyDto.  # noqa: E501


        :return: The last_modified_by of this LeanPolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this LeanPolicyDto.


        :param last_modified_by: The last_modified_by of this LeanPolicyDto.  # noqa: E501
        :type: int
        """
        if last_modified_by is None:
            raise ValueError("Invalid value for `last_modified_by`, must not be `None`")  # noqa: E501

        self._last_modified_by = last_modified_by

    @property
    def last_user_modified(self):
        """Gets the last_user_modified of this LeanPolicyDto.  # noqa: E501


        :return: The last_user_modified of this LeanPolicyDto.  # noqa: E501
        :rtype: str
        """
        return self._last_user_modified

    @last_user_modified.setter
    def last_user_modified(self, last_user_modified):
        """Sets the last_user_modified of this LeanPolicyDto.


        :param last_user_modified: The last_user_modified of this LeanPolicyDto.  # noqa: E501
        :type: str
        """
        if last_user_modified is None:
            raise ValueError("Invalid value for `last_user_modified`, must not be `None`")  # noqa: E501

        self._last_user_modified = last_user_modified

    @property
    def number_of_assets(self):
        """Gets the number_of_assets of this LeanPolicyDto.  # noqa: E501

        The number of assets to which the policy is applied  # noqa: E501

        :return: The number_of_assets of this LeanPolicyDto.  # noqa: E501
        :rtype: int
        """
        return self._number_of_assets

    @number_of_assets.setter
    def number_of_assets(self, number_of_assets):
        """Sets the number_of_assets of this LeanPolicyDto.

        The number of assets to which the policy is applied  # noqa: E501

        :param number_of_assets: The number_of_assets of this LeanPolicyDto.  # noqa: E501
        :type: int
        """

        self._number_of_assets = number_of_assets

    @property
    def is_marked_as_default(self):
        """Gets the is_marked_as_default of this LeanPolicyDto.  # noqa: E501


        :return: The is_marked_as_default of this LeanPolicyDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_marked_as_default

    @is_marked_as_default.setter
    def is_marked_as_default(self, is_marked_as_default):
        """Sets the is_marked_as_default of this LeanPolicyDto.


        :param is_marked_as_default: The is_marked_as_default of this LeanPolicyDto.  # noqa: E501
        :type: bool
        """
        if is_marked_as_default is None:
            raise ValueError("Invalid value for `is_marked_as_default`, must not be `None`")  # noqa: E501

        self._is_marked_as_default = is_marked_as_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeanPolicyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeanPolicyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
