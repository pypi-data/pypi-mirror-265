# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PolicyManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def check_if_policy_is_applied_on_asset(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Check whether the policy is applied on the asset  # noqa: E501

        True if the policy is applied on the asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_if_policy_is_applied_on_asset(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the check is performed for an asset that belongs to the account (A) associated with the API credentials used for authentication. To check for an asset that belongs to a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_if_policy_is_applied_on_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.check_if_policy_is_applied_on_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
            return data

    def check_if_policy_is_applied_on_asset_with_http_info(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Check whether the policy is applied on the asset  # noqa: E501

        True if the policy is applied on the asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_if_policy_is_applied_on_asset_with_http_info(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the check is performed for an asset that belongs to the account (A) associated with the API credentials used for authentication. To check for an asset that belongs to a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyAssetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_if_policy_is_applied_on_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `check_if_policy_is_applied_on_asset`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `check_if_policy_is_applied_on_asset`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `check_if_policy_is_applied_on_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}/assets/{assetType}/{assetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPolicyAssetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_policy(self, body, **kwargs):  # noqa: E501
        """Add a new policy or copy an existing policy  # noqa: E501

        When copying an existing policy the body is ignored but nevertheless needs to be sent. A good approach is to send an empty JSON as the request body, e.g {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_policy(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyDto body: Policy to save. The supported format JSON (required)
        :param int caid: By default, the policy is created for the account (A) associated with the API credentials used for authentication. To create the policy for a different account (an account under the account (A)), specify the account ID.
        :param int source_policy_id: Optional to clone full policy data
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_policy_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_policy_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_new_policy_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a new policy or copy an existing policy  # noqa: E501

        When copying an existing policy the body is ignored but nevertheless needs to be sent. A good approach is to send an empty JSON as the request body, e.g {}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_policy_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyDto body: Policy to save. The supported format JSON (required)
        :param int caid: By default, the policy is created for the account (A) associated with the API credentials used for authentication. To create the policy for a different account (an account under the account (A)), specify the account ID.
        :param int source_policy_id: Optional to clone full policy data
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'caid', 'source_policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_new_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'source_policy_id' in params:
            query_params.append(('sourcePolicyId', params['source_policy_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_policy(self, policy_id, **kwargs):  # noqa: E501
        """Delete an existing policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is deleted for the account (A) associated with the API credentials used for authentication. To delete the policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def delete_policy_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Delete an existing policy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is deleted for the account (A) associated with the API credentials used for authentication. To delete the policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `delete_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_policies_by_account(self, **kwargs):  # noqa: E501
        """Retrieve all policies in account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies_by_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: By default, the policies are retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policies for a different account (an account under the account (A)), specify the account ID.
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_policies_by_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_policies_by_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_policies_by_account_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all policies in account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies_by_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: By default, the policies are retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policies for a different account (an account under the account (A)), specify the account ID.
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', 'extended']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_policies_by_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'extended' in params:
            query_params.append(('extended', params['extended']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLeanPoliciesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_policy_by_id(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve policy details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_by_id(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policy for a different account (an account under the account (A)), specify the account ID.
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_policy_by_id_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_policy_by_id_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def get_policy_by_id_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve policy details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_policy_by_id_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policy for a different account (an account under the account (A)), specify the account ID.
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'caid', 'extended']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_policy_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_policy_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'extended' in params:
            query_params.append(('extended', params['extended']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLeanPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_policy(self, body, policy_id, **kwargs):  # noqa: E501
        """Modify an existing policy (partial update)  # noqa: E501

        When sending the content in the \"data\" attribute, it will be appended and not overwritten. When updating an existing policy settings or exceptions, the relevant id (policy settings or exception id) must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_policy(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePolicyDto body: Policy to save. The supported format JSON (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is updated for the account (A) associated with the API credentials used for authentication. To update the policy for a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
            return data

    def modify_policy_with_http_info(self, body, policy_id, **kwargs):  # noqa: E501
        """Modify an existing policy (partial update)  # noqa: E501

        When sending the content in the \"data\" attribute, it will be appended and not overwritten. When updating an existing policy settings or exceptions, the relevant id (policy settings or exception id) must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_policy_with_http_info(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePolicyDto body: Policy to save. The supported format JSON (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is updated for the account (A) associated with the API credentials used for authentication. To update the policy for a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `modify_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy(self, body, policy_id, **kwargs):  # noqa: E501
        """Overwrite an existing policy (full update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyDto body: Policy to save. The supported format JSON (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is saved for the account (A) associated with the API credentials used for authentication. To save the policy for a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
            return data

    def update_policy_with_http_info(self, body, policy_id, **kwargs):  # noqa: E501
        """Overwrite an existing policy (full update)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_with_http_info(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PolicyDto body: Policy to save. The supported format JSON (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is saved for the account (A) associated with the API credentials used for authentication. To save the policy for a different account (an account under the account (A)), specify the account ID.
        :return: GetPolicyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetPolicyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy_to_single_asset(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Overwrite applied assets in a policy  # noqa: E501

        Applies a single policy to a single asset and removes the previously applied assets from the policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_to_single_asset(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is applied for an asset that belongs to the account (A) associated with the API credentials used for authentication. To apply the policy for an asset that belongs to a different account (an account under the account (A)), specify the account ID.
        :return: AssetResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_policy_to_single_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_to_single_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
            return data

    def update_policy_to_single_asset_with_http_info(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Overwrite applied assets in a policy  # noqa: E501

        Applies a single policy to a single asset and removes the previously applied assets from the policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_to_single_asset_with_http_info(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy is applied for an asset that belongs to the account (A) associated with the API credentials used for authentication. To apply the policy for an asset that belongs to a different account (an account under the account (A)), specify the account ID.
        :return: AssetResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy_to_single_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_policy_to_single_asset`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `update_policy_to_single_asset`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_policy_to_single_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/policies/{policyId}/{assetType}/{assetId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
