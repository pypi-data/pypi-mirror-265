# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PolicyManagementAccountApplicationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_available_account_to_policy(self, policy_id, sub_account_id, **kwargs):  # noqa: E501
        """Enables an account to access a policy  # noqa: E501

        Adds an account to the list of accounts that can view and manage a given policy.  If the policy is currently defined as available to all sub accounts, running this API overwrites the setting. The policy will be available to the parent account and the specified sub account only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_available_account_to_policy(policy_id, sub_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int sub_account_id: Sub Account Id to add to the policy (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_available_account_to_policy_with_http_info(policy_id, sub_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_available_account_to_policy_with_http_info(policy_id, sub_account_id, **kwargs)  # noqa: E501
            return data

    def add_available_account_to_policy_with_http_info(self, policy_id, sub_account_id, **kwargs):  # noqa: E501
        """Enables an account to access a policy  # noqa: E501

        Adds an account to the list of accounts that can view and manage a given policy.  If the policy is currently defined as available to all sub accounts, running this API overwrites the setting. The policy will be available to the parent account and the specified sub account only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_available_account_to_policy_with_http_info(policy_id, sub_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int sub_account_id: Sub Account Id to add to the policy (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'sub_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_available_account_to_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `add_available_account_to_policy`")  # noqa: E501
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params or
                params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `add_available_account_to_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'sub_account_id' in params:
            path_params['subAccountId'] = params['sub_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{subAccountId}/policies/{policyId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyAccountsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_policy_association(self, **kwargs):  # noqa: E501
        """Retrieve the list of default and available policies of the account  # noqa: E501

        Retrieves the account’s default polices, and all the policies that are available to the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_policy_association(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: By default, the policies association is retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_policy_association_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_account_policy_association_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_account_policy_association_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the list of default and available policies of the account  # noqa: E501

        Retrieves the account’s default polices, and all the policies that are available to the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_policy_association_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: By default, the policies association is retrieved for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_policy_association" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/accounts/associated-policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountPolicyAssociationV3RequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_available_accounts_of_policy(self, policy_id, **kwargs):  # noqa: E501
        """Retrieves the list of accounts that can access a policy  # noqa: E501

        Retrieves the IDs of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_available_accounts_of_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_available_accounts_of_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_available_accounts_of_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def get_all_available_accounts_of_policy_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Retrieves the list of accounts that can access a policy  # noqa: E501

        Retrieves the IDs of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_available_accounts_of_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_available_accounts_of_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_all_available_accounts_of_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyAccountsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_account_policy_association(self, body, **kwargs):  # noqa: E501
        """Update the list of default and available policies of the account  # noqa: E501

        Updates the account’s default polices and updates the list of policies that are available to the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_account_policy_association(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPolicyAssociationV3RequestResponse body: Account policy association. Only JSON format is supported. (required)
        :param int caid: By default, the policies association is set for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_account_policy_association_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_account_policy_association_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_account_policy_association_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the list of default and available policies of the account  # noqa: E501

        Updates the account’s default polices and updates the list of policies that are available to the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_account_policy_association_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPolicyAssociationV3RequestResponse body: Account policy association. Only JSON format is supported. (required)
        :param int caid: By default, the policies association is set for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_account_policy_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_account_policy_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/accounts/associated-policies', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountPolicyAssociationV3RequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_account_policy_association(self, body, **kwargs):  # noqa: E501
        """Set the list of default and available policies of the account (full overwrite)  # noqa: E501

        Sets the account’s default polices, and sets the list of policies that are available to the account (full overwrite).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_account_policy_association(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPolicyAssociationV3RequestResponse body: Account policy association. Only JSON format is supported. (required)
        :param int caid: By default, the policies association is set for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_account_policy_association_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_account_policy_association_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_account_policy_association_with_http_info(self, body, **kwargs):  # noqa: E501
        """Set the list of default and available policies of the account (full overwrite)  # noqa: E501

        Sets the account’s default polices, and sets the list of policies that are available to the account (full overwrite).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_account_policy_association_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountPolicyAssociationV3RequestResponse body: Account policy association. Only JSON format is supported. (required)
        :param int caid: By default, the policies association is set for the account (A) associated with the API credentials used for authentication. To retrieve the policies associated with a different account (an account under the account (A)), specify the account ID.
        :return: AccountPolicyAssociationV3RequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_account_policy_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_account_policy_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/accounts/associated-policies', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountPolicyAssociationV3RequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_available_account_from_policy(self, policy_id, sub_account_id, **kwargs):  # noqa: E501
        """Removes access to a policy by an account  # noqa: E501

        Removes an account from the list of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_available_account_from_policy(policy_id, sub_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int sub_account_id: Sub Account Id to remove from the policy (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_available_account_from_policy_with_http_info(policy_id, sub_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_available_account_from_policy_with_http_info(policy_id, sub_account_id, **kwargs)  # noqa: E501
            return data

    def remove_available_account_from_policy_with_http_info(self, policy_id, sub_account_id, **kwargs):  # noqa: E501
        """Removes access to a policy by an account  # noqa: E501

        Removes an account from the list of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_available_account_from_policy_with_http_info(policy_id, sub_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int sub_account_id: Sub Account Id to remove from the policy (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'sub_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_available_account_from_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `remove_available_account_from_policy`")  # noqa: E501
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params or
                params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `remove_available_account_from_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501
        if 'sub_account_id' in params:
            path_params['subAccountId'] = params['sub_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/{subAccountId}/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyAccountsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_available_account_to_policy(self, body, policy_id, **kwargs):  # noqa: E501
        """Defines the list of accounts that can access a policy  # noqa: E501

        Configures the list of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_available_account_to_policy(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The list of account IDs that can access the policy, e.g. [123,234] (required)
        :param int policy_id: The Policy ID (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_available_account_to_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_available_account_to_policy_with_http_info(body, policy_id, **kwargs)  # noqa: E501
            return data

    def set_available_account_to_policy_with_http_info(self, body, policy_id, **kwargs):  # noqa: E501
        """Defines the list of accounts that can access a policy  # noqa: E501

        Configures the list of accounts that can view and manage a policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_available_account_to_policy_with_http_info(body, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: The list of account IDs that can access the policy, e.g. [123,234] (required)
        :param int policy_id: The Policy ID (required)
        :return: PolicyAccountsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'policy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_available_account_to_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_available_account_to_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `set_available_account_to_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/accounts/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyAccountsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
