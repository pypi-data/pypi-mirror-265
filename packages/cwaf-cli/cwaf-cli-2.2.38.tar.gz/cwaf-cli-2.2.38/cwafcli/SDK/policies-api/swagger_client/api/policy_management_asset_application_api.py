# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PolicyManagementAssetApplicationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def apply_asset_to_policy(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Apply a single policy to a single asset  # noqa: E501

        Applies a policy to an asset. Policies already assigned to the asset are not modified. A website must have exactly one WAF Rules policy applied to it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_asset_to_policy(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID to add to policy (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the Asset should belong to the account (A) associated with the API credentials used for authentication. To assign an asset of a different account (an account under the account (A)), specify the account ID.
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.apply_asset_to_policy_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.apply_asset_to_policy_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
            return data

    def apply_asset_to_policy_with_http_info(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Apply a single policy to a single asset  # noqa: E501

        Applies a policy to an asset. Policies already assigned to the asset are not modified. A website must have exactly one WAF Rules policy applied to it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.apply_asset_to_policy_with_http_info(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID to add to policy (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the Asset should belong to the account (A) associated with the API credentials used for authentication. To assign an asset of a different account (an account under the account (A)), specify the account ID.
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apply_asset_to_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `apply_asset_to_policy`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `apply_asset_to_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `apply_asset_to_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assets/{assetType}/{assetId}/policies/{policyId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAssetsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_asset_of_policy(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve assets to which policy is applied  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_asset_of_policy(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To get the assets for a policy of a different account (an account under the account (A)), specify the account ID.
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_asset_of_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_asset_of_policy_with_http_info(policy_id, **kwargs)  # noqa: E501
            return data

    def get_all_asset_of_policy_with_http_info(self, policy_id, **kwargs):  # noqa: E501
        """Retrieve assets to which policy is applied  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_asset_of_policy_with_http_info(policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To get the assets for a policy of a different account (an account under the account (A)), specify the account ID.
        :return: GetAssetsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_asset_of_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `get_all_asset_of_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assets/policies/{policyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAssetsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_policies_of_asset(self, asset_id, asset_type, **kwargs):  # noqa: E501
        """Retrieve all policies applied to an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies_of_asset(asset_id, asset_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: The Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_policies_of_asset_with_http_info(asset_id, asset_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_policies_of_asset_with_http_info(asset_id, asset_type, **kwargs)  # noqa: E501
            return data

    def get_all_policies_of_asset_with_http_info(self, asset_id, asset_type, **kwargs):  # noqa: E501
        """Retrieve all policies applied to an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_policies_of_asset_with_http_info(asset_id, asset_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: The Asset ID (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param bool extended: Optional to get full policy data. Default is false. When set to false, the response returns basic policy details such as name, ID, and policy type, according to GetLeanPoliciesResponse. This is the default value. If set to true, the response returns full policy details, including current configuration and settings, according to GetPoliciesResponse.
        :return: GetLeanPoliciesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'extended']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_policies_of_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `get_all_policies_of_asset`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `get_all_policies_of_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501

        query_params = []
        if 'extended' in params:
            query_params.append(('extended', params['extended']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assets/{assetType}/{assetId}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetLeanPoliciesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_apply_policy_on_asset(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Remove policy from asset  # noqa: E501

        If you remove a WAF Rules policy from a website, the account’s default policy is automatically re-applied to the website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_apply_policy_on_asset(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID to remove (required)
        :param str asset_type: Asset type to remove (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To unapply a policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyAssetMappingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.un_apply_policy_on_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.un_apply_policy_on_asset_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
            return data

    def un_apply_policy_on_asset_with_http_info(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Remove policy from asset  # noqa: E501

        If you remove a WAF Rules policy from a website, the account’s default policy is automatically re-applied to the website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_apply_policy_on_asset_with_http_info(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset ID to remove (required)
        :param str asset_type: Asset type to remove (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To unapply a policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyAssetMappingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_apply_policy_on_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `un_apply_policy_on_asset`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `un_apply_policy_on_asset`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `un_apply_policy_on_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assets/{assetType}/{assetId}/policies/{policyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyAssetMappingResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_asset_with_single_policy(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Overwrite policies assigned to a single asset  # noqa: E501

        Applies a single policy to a single asset and removes previously assigned policies. If you apply a WAF Rules policy to a website, it replaces the policy that is currently applied. Since this API is removing all other policies but the one provided, it can be only applied to WAF Rules policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_with_single_policy(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset Id (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To update a policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyDtoResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_asset_with_single_policy_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_asset_with_single_policy_with_http_info(asset_id, asset_type, policy_id, **kwargs)  # noqa: E501
            return data

    def update_asset_with_single_policy_with_http_info(self, asset_id, asset_type, policy_id, **kwargs):  # noqa: E501
        """Overwrite policies assigned to a single asset  # noqa: E501

        Applies a single policy to a single asset and removes previously assigned policies. If you apply a WAF Rules policy to a website, it replaces the policy that is currently applied. Since this API is removing all other policies but the one provided, it can be only applied to WAF Rules policies  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_with_single_policy_with_http_info(asset_id, asset_type, policy_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: Asset Id (required)
        :param str asset_type: The type of asset on which the policy is applied (required)
        :param int policy_id: The Policy ID (required)
        :param int caid: By default, the policy should belong to the account (A) associated with the API credentials used for authentication. To update a policy for a different account (an account under the account (A)), specify the account ID.
        :return: PolicyDtoResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'asset_type', 'policy_id', 'caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_with_single_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `update_asset_with_single_policy`")  # noqa: E501
        # verify the required parameter 'asset_type' is set
        if ('asset_type' not in params or
                params['asset_type'] is None):
            raise ValueError("Missing the required parameter `asset_type` when calling `update_asset_with_single_policy`")  # noqa: E501
        # verify the required parameter 'policy_id' is set
        if ('policy_id' not in params or
                params['policy_id'] is None):
            raise ValueError("Missing the required parameter `policy_id` when calling `update_asset_with_single_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501
        if 'asset_type' in params:
            path_params['assetType'] = params['asset_type']  # noqa: E501
        if 'policy_id' in params:
            path_params['policyId'] = params['policy_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v2/assets/{assetType}/{assetId}/policies/{policyId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PolicyDtoResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
