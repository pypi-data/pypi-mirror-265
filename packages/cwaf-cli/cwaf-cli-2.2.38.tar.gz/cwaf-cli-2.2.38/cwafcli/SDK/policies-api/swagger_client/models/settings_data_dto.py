# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingsDataDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geo': 'GeoDto',
        'ips': 'list[str]',
        'urls': 'list[UrlsDto]'
    }

    attribute_map = {
        'geo': 'geo',
        'ips': 'ips',
        'urls': 'urls'
    }

    def __init__(self, geo=None, ips=None, urls=None):  # noqa: E501
        """SettingsDataDto - a model defined in Swagger"""  # noqa: E501
        self._geo = None
        self._ips = None
        self._urls = None
        self.discriminator = None
        if geo is not None:
            self.geo = geo
        if ips is not None:
            self.ips = ips
        if urls is not None:
            self.urls = urls

    @property
    def geo(self):
        """Gets the geo of this SettingsDataDto.  # noqa: E501


        :return: The geo of this SettingsDataDto.  # noqa: E501
        :rtype: GeoDto
        """
        return self._geo

    @geo.setter
    def geo(self, geo):
        """Sets the geo of this SettingsDataDto.


        :param geo: The geo of this SettingsDataDto.  # noqa: E501
        :type: GeoDto
        """

        self._geo = geo

    @property
    def ips(self):
        """Gets the ips of this SettingsDataDto.  # noqa: E501


        :return: The ips of this SettingsDataDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this SettingsDataDto.


        :param ips: The ips of this SettingsDataDto.  # noqa: E501
        :type: list[str]
        """

        self._ips = ips

    @property
    def urls(self):
        """Gets the urls of this SettingsDataDto.  # noqa: E501


        :return: The urls of this SettingsDataDto.  # noqa: E501
        :rtype: list[UrlsDto]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this SettingsDataDto.


        :param urls: The urls of this SettingsDataDto.  # noqa: E501
        :type: list[UrlsDto]
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsDataDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsDataDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
