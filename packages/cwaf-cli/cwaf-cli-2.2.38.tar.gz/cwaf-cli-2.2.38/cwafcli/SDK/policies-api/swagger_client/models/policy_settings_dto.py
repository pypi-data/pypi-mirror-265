# coding: utf-8

"""
    Imperva Policy Management

    Create policies to centrally configure settings and apply them to multiple websites in your account. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=policies\">Create and Manage Policies</a>.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PolicySettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'policy_id': 'int',
        'settings_action': 'str',
        'policy_setting_type': 'str',
        'data': 'SettingsDataDto',
        'policy_data_exceptions': 'list[PolicyDataExceptionDto]'
    }

    attribute_map = {
        'id': 'id',
        'policy_id': 'policyId',
        'settings_action': 'settingsAction',
        'policy_setting_type': 'policySettingType',
        'data': 'data',
        'policy_data_exceptions': 'policyDataExceptions'
    }

    def __init__(self, id=None, policy_id=None, settings_action=None, policy_setting_type=None, data=None, policy_data_exceptions=None):  # noqa: E501
        """PolicySettingsDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._policy_id = None
        self._settings_action = None
        self._policy_setting_type = None
        self._data = None
        self._policy_data_exceptions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if policy_id is not None:
            self.policy_id = policy_id
        if settings_action is not None:
            self.settings_action = settings_action
        if policy_setting_type is not None:
            self.policy_setting_type = policy_setting_type
        if data is not None:
            self.data = data
        if policy_data_exceptions is not None:
            self.policy_data_exceptions = policy_data_exceptions

    @property
    def id(self):
        """Gets the id of this PolicySettingsDto.  # noqa: E501

        The Policy Settings ID  # noqa: E501

        :return: The id of this PolicySettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PolicySettingsDto.

        The Policy Settings ID  # noqa: E501

        :param id: The id of this PolicySettingsDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def policy_id(self):
        """Gets the policy_id of this PolicySettingsDto.  # noqa: E501

        The Policy ID of this setting  # noqa: E501

        :return: The policy_id of this PolicySettingsDto.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this PolicySettingsDto.

        The Policy ID of this setting  # noqa: E501

        :param policy_id: The policy_id of this PolicySettingsDto.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def settings_action(self):
        """Gets the settings_action of this PolicySettingsDto.  # noqa: E501

        The action taken by Imperva when a policy rule is triggered  # noqa: E501

        :return: The settings_action of this PolicySettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._settings_action

    @settings_action.setter
    def settings_action(self, settings_action):
        """Sets the settings_action of this PolicySettingsDto.

        The action taken by Imperva when a policy rule is triggered  # noqa: E501

        :param settings_action: The settings_action of this PolicySettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["BLOCK", "ALLOW", "ALERT", "BLOCK_USER", "BLOCK_IP", "IGNORE", "HIDDEN_ALERT", "MASK"]  # noqa: E501
        if settings_action not in allowed_values:
            raise ValueError(
                "Invalid value for `settings_action` ({0}), must be one of {1}"  # noqa: E501
                .format(settings_action, allowed_values)
            )

        self._settings_action = settings_action

    @property
    def policy_setting_type(self):
        """Gets the policy_setting_type of this PolicySettingsDto.  # noqa: E501

        The PolicySettings type  # noqa: E501

        :return: The policy_setting_type of this PolicySettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._policy_setting_type

    @policy_setting_type.setter
    def policy_setting_type(self, policy_setting_type):
        """Sets the policy_setting_type of this PolicySettingsDto.

        The PolicySettings type  # noqa: E501

        :param policy_setting_type: The policy_setting_type of this PolicySettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["IP", "GEO", "URL", "CROSS_SITE_SCRIPTING", "ILLEGAL_RESOURCE_ACCESS", "REMOTE_FILE_INCLUSION", "SQL_INJECTION", "RESP_DATA_LEAK"]  # noqa: E501
        if policy_setting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_setting_type` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_setting_type, allowed_values)
            )

        self._policy_setting_type = policy_setting_type

    @property
    def data(self):
        """Gets the data of this PolicySettingsDto.  # noqa: E501


        :return: The data of this PolicySettingsDto.  # noqa: E501
        :rtype: SettingsDataDto
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PolicySettingsDto.


        :param data: The data of this PolicySettingsDto.  # noqa: E501
        :type: SettingsDataDto
        """

        self._data = data

    @property
    def policy_data_exceptions(self):
        """Gets the policy_data_exceptions of this PolicySettingsDto.  # noqa: E501

        The exception configuration on a given settings  # noqa: E501

        :return: The policy_data_exceptions of this PolicySettingsDto.  # noqa: E501
        :rtype: list[PolicyDataExceptionDto]
        """
        return self._policy_data_exceptions

    @policy_data_exceptions.setter
    def policy_data_exceptions(self, policy_data_exceptions):
        """Sets the policy_data_exceptions of this PolicySettingsDto.

        The exception configuration on a given settings  # noqa: E501

        :param policy_data_exceptions: The policy_data_exceptions of this PolicySettingsDto.  # noqa: E501
        :type: list[PolicyDataExceptionDto]
        """

        self._policy_data_exceptions = policy_data_exceptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PolicySettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PolicySettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
