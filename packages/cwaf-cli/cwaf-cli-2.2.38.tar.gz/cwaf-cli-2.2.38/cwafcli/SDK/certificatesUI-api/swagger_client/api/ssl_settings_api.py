# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SSLSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_domain_to_ssl_validation_delegation_settings(self, domain, **kwargs):  # noqa: E501
        """Add domain to the SSL validation delegation settings  # noqa: E501

        Add domain to the SSL validation delegation settings of your account. Delegating a domain enables Imperva to perform domain ownership validation on your behalf during website onboarding and certificate renewal.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_to_ssl_validation_delegation_settings(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_domain_to_ssl_validation_delegation_settings_with_http_info(domain, **kwargs)  # noqa: E501
        else:
            (data) = self.add_domain_to_ssl_validation_delegation_settings_with_http_info(domain, **kwargs)  # noqa: E501
            return data

    def add_domain_to_ssl_validation_delegation_settings_with_http_info(self, domain, **kwargs):  # noqa: E501
        """Add domain to the SSL validation delegation settings  # noqa: E501

        Add domain to the SSL validation delegation settings of your account. Delegating a domain enables Imperva to perform domain ownership validation on your behalf during website onboarding and certificate renewal.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_to_ssl_validation_delegation_settings_with_http_info(domain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str domain: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_domain_to_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain' is set
        if ('domain' not in params or
                params['domain'] is None):
            raise ValueError("Missing the required parameter `domain` when calling `add_domain_to_ssl_validation_delegation_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain' in params:
            path_params['domain'] = params['domain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings/delegation/domain/{domain}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ssl_validation_delegation_settings(self, **kwargs):  # noqa: E501
        """Reset SSL settings to default  # noqa: E501

        Resets SSL settings for your account to the default values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ssl_validation_delegation_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ssl_validation_delegation_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_ssl_validation_delegation_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_ssl_validation_delegation_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Reset SSL settings to default  # noqa: E501

        Resets SSL settings for your account to the default values.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ssl_validation_delegation_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ssl_validation_delegation_settings(self, **kwargs):  # noqa: E501
        """Get account SSL settings  # noqa: E501

        Get SSL settings for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ssl_validation_delegation_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ssl_validation_delegation_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ssl_validation_delegation_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ssl_validation_delegation_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get account SSL settings  # noqa: E501

        Get SSL settings for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ssl_validation_delegation_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_ssl_validation_delegation_settings(self, body, **kwargs):  # noqa: E501
        """Modify SSL settings (partial update)  # noqa: E501

        Updates the SSL settings that you send in the request. Other settings remain as is.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_ssl_validation_delegation_settings(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountSettingsDto body: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_ssl_validation_delegation_settings_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_ssl_validation_delegation_settings_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def patch_ssl_validation_delegation_settings_with_http_info(self, body, **kwargs):  # noqa: E501
        """Modify SSL settings (partial update)  # noqa: E501

        Updates the SSL settings that you send in the request. Other settings remain as is.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_ssl_validation_delegation_settings_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountSettingsDto body: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `patch_ssl_validation_delegation_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def removed_domain_to_ssl_validation_delegation_settings(self, domain_id, **kwargs):  # noqa: E501
        """Remove domain from the SSL validation delegation settings  # noqa: E501

        Remove domain from the SSL validation delegation settings of your account. Certificate renewal may require you to revalidate domain ownership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removed_domain_to_ssl_validation_delegation_settings(domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int domain_id: domainId can be getting from this api (GET /v3/account/ssl-settings) (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.removed_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.removed_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, **kwargs)  # noqa: E501
            return data

    def removed_domain_to_ssl_validation_delegation_settings_with_http_info(self, domain_id, **kwargs):  # noqa: E501
        """Remove domain from the SSL validation delegation settings  # noqa: E501

        Remove domain from the SSL validation delegation settings of your account. Certificate renewal may require you to revalidate domain ownership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.removed_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int domain_id: domainId can be getting from this api (GET /v3/account/ssl-settings) (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method removed_domain_to_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `removed_domain_to_ssl_validation_delegation_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings/delegation/domain/{domainId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ssl_validation_delegation_settings(self, body, **kwargs):  # noqa: E501
        """Overwrite SSL settings (full update)  # noqa: E501

        Update SSL settings for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ssl_validation_delegation_settings(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountSettingsDto body: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ssl_validation_delegation_settings_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ssl_validation_delegation_settings_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_ssl_validation_delegation_settings_with_http_info(self, body, **kwargs):  # noqa: E501
        """Overwrite SSL settings (full update)  # noqa: E501

        Update SSL settings for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ssl_validation_delegation_settings_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountSettingsDto body: (required)
        :return: AccountSSLSettingsResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ssl_validation_delegation_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountSSLSettingsResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_domain_to_ssl_validation_delegation_settings(self, domain_id, **kwargs):  # noqa: E501
        """Check the configuration status of a domain that appears in the domain delegation list  # noqa: E501

        Check if the CNAME record has been added to the domain's DNS zone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_domain_to_ssl_validation_delegation_settings(domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int domain_id: domainId can be getting from this api (GET /v3/account/ssl-settings) (required)
        :return: AllowDelegationDomainWithInheritanceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, **kwargs)  # noqa: E501
            return data

    def verify_domain_to_ssl_validation_delegation_settings_with_http_info(self, domain_id, **kwargs):  # noqa: E501
        """Check the configuration status of a domain that appears in the domain delegation list  # noqa: E501

        Check if the CNAME record has been added to the domain's DNS zone.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_domain_to_ssl_validation_delegation_settings_with_http_info(domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int domain_id: domainId can be getting from this api (GET /v3/account/ssl-settings) (required)
        :return: AllowDelegationDomainWithInheritanceResponseDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_domain_to_ssl_validation_delegation_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `verify_domain_to_ssl_validation_delegation_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/account/ssl-settings/delegation/domain/{domainId}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllowDelegationDomainWithInheritanceResponseDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
