# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SanInstructionsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'expiration_date': 'int',
        'validation_email': 'str',
        'validation_method': 'str',
        'record_type': 'str',
        'verification_code': 'str',
        'verification_code_expiration_date': 'int',
        'last_notification_date': 'int',
        'related_sans_details': 'list[RelatedSansDetails]'
    }

    attribute_map = {
        'domain': 'domain',
        'expiration_date': 'expirationDate',
        'validation_email': 'validationEmail',
        'validation_method': 'validationMethod',
        'record_type': 'recordType',
        'verification_code': 'verificationCode',
        'verification_code_expiration_date': 'verificationCodeExpirationDate',
        'last_notification_date': 'lastNotificationDate',
        'related_sans_details': 'relatedSansDetails'
    }

    def __init__(self, domain=None, expiration_date=None, validation_email=None, validation_method=None, record_type=None, verification_code=None, verification_code_expiration_date=None, last_notification_date=None, related_sans_details=None):  # noqa: E501
        """SanInstructionsDto - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._expiration_date = None
        self._validation_email = None
        self._validation_method = None
        self._record_type = None
        self._verification_code = None
        self._verification_code_expiration_date = None
        self._last_notification_date = None
        self._related_sans_details = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if validation_email is not None:
            self.validation_email = validation_email
        if validation_method is not None:
            self.validation_method = validation_method
        if record_type is not None:
            self.record_type = record_type
        if verification_code is not None:
            self.verification_code = verification_code
        if verification_code_expiration_date is not None:
            self.verification_code_expiration_date = verification_code_expiration_date
        if last_notification_date is not None:
            self.last_notification_date = last_notification_date
        if related_sans_details is not None:
            self.related_sans_details = related_sans_details

    @property
    def domain(self):
        """Gets the domain of this SanInstructionsDto.  # noqa: E501

        Domain to validate  # noqa: E501

        :return: The domain of this SanInstructionsDto.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SanInstructionsDto.

        Domain to validate  # noqa: E501

        :param domain: The domain of this SanInstructionsDto.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SanInstructionsDto.  # noqa: E501

        SAN expiration date  # noqa: E501

        :return: The expiration_date of this SanInstructionsDto.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SanInstructionsDto.

        SAN expiration date  # noqa: E501

        :param expiration_date: The expiration_date of this SanInstructionsDto.  # noqa: E501
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def validation_email(self):
        """Gets the validation_email of this SanInstructionsDto.  # noqa: E501

        Validation email  # noqa: E501

        :return: The validation_email of this SanInstructionsDto.  # noqa: E501
        :rtype: str
        """
        return self._validation_email

    @validation_email.setter
    def validation_email(self, validation_email):
        """Sets the validation_email of this SanInstructionsDto.

        Validation email  # noqa: E501

        :param validation_email: The validation_email of this SanInstructionsDto.  # noqa: E501
        :type: str
        """

        self._validation_email = validation_email

    @property
    def validation_method(self):
        """Gets the validation_method of this SanInstructionsDto.  # noqa: E501

        Validation method of the SAN  # noqa: E501

        :return: The validation_method of this SanInstructionsDto.  # noqa: E501
        :rtype: str
        """
        return self._validation_method

    @validation_method.setter
    def validation_method(self, validation_method):
        """Sets the validation_method of this SanInstructionsDto.

        Validation method of the SAN  # noqa: E501

        :param validation_method: The validation_method of this SanInstructionsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["EMAIL", "DNS", "CNAME", "METATAG", "URL", "HTTP", "NONE"]  # noqa: E501
        if validation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_method` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_method, allowed_values)
            )

        self._validation_method = validation_method

    @property
    def record_type(self):
        """Gets the record_type of this SanInstructionsDto.  # noqa: E501

        Record type for the validation  # noqa: E501

        :return: The record_type of this SanInstructionsDto.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this SanInstructionsDto.

        Record type for the validation  # noqa: E501

        :param record_type: The record_type of this SanInstructionsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TXT", "CNAME", "A", "NONE"]  # noqa: E501
        if record_type not in allowed_values:
            raise ValueError(
                "Invalid value for `record_type` ({0}), must be one of {1}"  # noqa: E501
                .format(record_type, allowed_values)
            )

        self._record_type = record_type

    @property
    def verification_code(self):
        """Gets the verification_code of this SanInstructionsDto.  # noqa: E501

        Verification code of the SAN  # noqa: E501

        :return: The verification_code of this SanInstructionsDto.  # noqa: E501
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this SanInstructionsDto.

        Verification code of the SAN  # noqa: E501

        :param verification_code: The verification_code of this SanInstructionsDto.  # noqa: E501
        :type: str
        """

        self._verification_code = verification_code

    @property
    def verification_code_expiration_date(self):
        """Gets the verification_code_expiration_date of this SanInstructionsDto.  # noqa: E501

        Verification code expiration date  # noqa: E501

        :return: The verification_code_expiration_date of this SanInstructionsDto.  # noqa: E501
        :rtype: int
        """
        return self._verification_code_expiration_date

    @verification_code_expiration_date.setter
    def verification_code_expiration_date(self, verification_code_expiration_date):
        """Sets the verification_code_expiration_date of this SanInstructionsDto.

        Verification code expiration date  # noqa: E501

        :param verification_code_expiration_date: The verification_code_expiration_date of this SanInstructionsDto.  # noqa: E501
        :type: int
        """

        self._verification_code_expiration_date = verification_code_expiration_date

    @property
    def last_notification_date(self):
        """Gets the last_notification_date of this SanInstructionsDto.  # noqa: E501

        Last date an email was sent  # noqa: E501

        :return: The last_notification_date of this SanInstructionsDto.  # noqa: E501
        :rtype: int
        """
        return self._last_notification_date

    @last_notification_date.setter
    def last_notification_date(self, last_notification_date):
        """Sets the last_notification_date of this SanInstructionsDto.

        Last date an email was sent  # noqa: E501

        :param last_notification_date: The last_notification_date of this SanInstructionsDto.  # noqa: E501
        :type: int
        """

        self._last_notification_date = last_notification_date

    @property
    def related_sans_details(self):
        """Gets the related_sans_details of this SanInstructionsDto.  # noqa: E501

        List of related SANs using the same domain for validation  # noqa: E501

        :return: The related_sans_details of this SanInstructionsDto.  # noqa: E501
        :rtype: list[RelatedSansDetails]
        """
        return self._related_sans_details

    @related_sans_details.setter
    def related_sans_details(self, related_sans_details):
        """Sets the related_sans_details of this SanInstructionsDto.

        List of related SANs using the same domain for validation  # noqa: E501

        :param related_sans_details: The related_sans_details of this SanInstructionsDto.  # noqa: E501
        :type: list[RelatedSansDetails]
        """

        self._related_sans_details = related_sans_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SanInstructionsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SanInstructionsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
