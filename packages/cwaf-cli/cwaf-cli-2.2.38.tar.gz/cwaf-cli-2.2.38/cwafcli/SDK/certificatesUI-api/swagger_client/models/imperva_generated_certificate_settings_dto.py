# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImpervaGeneratedCertificateSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delegation': 'AccountDtoSSLDelegationSettingsDto',
        'use_wild_card_san_instead_of_fqdn': 'bool',
        'add_naked_domain_san_for_www_sites': 'bool'
    }

    attribute_map = {
        'delegation': 'delegation',
        'use_wild_card_san_instead_of_fqdn': 'useWildCardSanInsteadOfFQDN',
        'add_naked_domain_san_for_www_sites': 'addNakedDomainSanForWWWSites'
    }

    def __init__(self, delegation=None, use_wild_card_san_instead_of_fqdn=True, add_naked_domain_san_for_www_sites=True):  # noqa: E501
        """ImpervaGeneratedCertificateSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._delegation = None
        self._use_wild_card_san_instead_of_fqdn = None
        self._add_naked_domain_san_for_www_sites = None
        self.discriminator = None
        if delegation is not None:
            self.delegation = delegation
        if use_wild_card_san_instead_of_fqdn is not None:
            self.use_wild_card_san_instead_of_fqdn = use_wild_card_san_instead_of_fqdn
        if add_naked_domain_san_for_www_sites is not None:
            self.add_naked_domain_san_for_www_sites = add_naked_domain_san_for_www_sites

    @property
    def delegation(self):
        """Gets the delegation of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501


        :return: The delegation of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :rtype: AccountDtoSSLDelegationSettingsDto
        """
        return self._delegation

    @delegation.setter
    def delegation(self, delegation):
        """Sets the delegation of this ImpervaGeneratedCertificateSettingsDto.


        :param delegation: The delegation of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :type: AccountDtoSSLDelegationSettingsDto
        """

        self._delegation = delegation

    @property
    def use_wild_card_san_instead_of_fqdn(self):
        """Gets the use_wild_card_san_instead_of_fqdn of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501

        Adds the wildcard SAN to the Imperva SSL certificate instead of the full domain SAN. The value you assign is used as the default option when onboarding new websites.  # noqa: E501

        :return: The use_wild_card_san_instead_of_fqdn of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_wild_card_san_instead_of_fqdn

    @use_wild_card_san_instead_of_fqdn.setter
    def use_wild_card_san_instead_of_fqdn(self, use_wild_card_san_instead_of_fqdn):
        """Sets the use_wild_card_san_instead_of_fqdn of this ImpervaGeneratedCertificateSettingsDto.

        Adds the wildcard SAN to the Imperva SSL certificate instead of the full domain SAN. The value you assign is used as the default option when onboarding new websites.  # noqa: E501

        :param use_wild_card_san_instead_of_fqdn: The use_wild_card_san_instead_of_fqdn of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._use_wild_card_san_instead_of_fqdn = use_wild_card_san_instead_of_fqdn

    @property
    def add_naked_domain_san_for_www_sites(self):
        """Gets the add_naked_domain_san_for_www_sites of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501

        For sites with the www prefix, adds the naked domain SAN to the Imperva SSL certificate. The value you assign is used as the default option when onboarding new websites.  # noqa: E501

        :return: The add_naked_domain_san_for_www_sites of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._add_naked_domain_san_for_www_sites

    @add_naked_domain_san_for_www_sites.setter
    def add_naked_domain_san_for_www_sites(self, add_naked_domain_san_for_www_sites):
        """Sets the add_naked_domain_san_for_www_sites of this ImpervaGeneratedCertificateSettingsDto.

        For sites with the www prefix, adds the naked domain SAN to the Imperva SSL certificate. The value you assign is used as the default option when onboarding new websites.  # noqa: E501

        :param add_naked_domain_san_for_www_sites: The add_naked_domain_san_for_www_sites of this ImpervaGeneratedCertificateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._add_naked_domain_san_for_www_sites = add_naked_domain_san_for_www_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImpervaGeneratedCertificateSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImpervaGeneratedCertificateSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
