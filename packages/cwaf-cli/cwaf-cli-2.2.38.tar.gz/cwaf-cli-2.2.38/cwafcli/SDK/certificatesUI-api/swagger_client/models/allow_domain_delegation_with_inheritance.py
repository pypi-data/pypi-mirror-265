# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AllowDomainDelegationWithInheritance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'creation_date': 'int',
        'status': 'str',
        'status_since': 'int',
        'last_status_check': 'int',
        'inherited': 'bool',
        'cname_record_value': 'str',
        'cname_record_host': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'creation_date': 'creationDate',
        'status': 'status',
        'status_since': 'statusSince',
        'last_status_check': 'lastStatusCheck',
        'inherited': 'inherited',
        'cname_record_value': 'cnameRecordValue',
        'cname_record_host': 'cnameRecordHost'
    }

    def __init__(self, id=None, name=None, creation_date=None, status=None, status_since=None, last_status_check=None, inherited=None, cname_record_value=None, cname_record_host=None):  # noqa: E501
        """AllowDomainDelegationWithInheritance - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._creation_date = None
        self._status = None
        self._status_since = None
        self._last_status_check = None
        self._inherited = None
        self._cname_record_value = None
        self._cname_record_host = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if creation_date is not None:
            self.creation_date = creation_date
        if status is not None:
            self.status = status
        if status_since is not None:
            self.status_since = status_since
        if last_status_check is not None:
            self.last_status_check = last_status_check
        if inherited is not None:
            self.inherited = inherited
        if cname_record_value is not None:
            self.cname_record_value = cname_record_value
        if cname_record_host is not None:
            self.cname_record_host = cname_record_host

    @property
    def id(self):
        """Gets the id of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The domain id.  # noqa: E501

        :return: The id of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllowDomainDelegationWithInheritance.

        The domain id.  # noqa: E501

        :param id: The id of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The domain name.  # noqa: E501

        :return: The name of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllowDomainDelegationWithInheritance.

        The domain name.  # noqa: E501

        :param name: The name of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def creation_date(self):
        """Gets the creation_date of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The domain creation date.  # noqa: E501

        :return: The creation_date of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AllowDomainDelegationWithInheritance.

        The domain creation date.  # noqa: E501

        :param creation_date: The creation_date of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def status(self):
        """Gets the status of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The domain status. Possible values: CONFIGURED, NOT_CONFIGURED  # noqa: E501

        :return: The status of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AllowDomainDelegationWithInheritance.

        The domain status. Possible values: CONFIGURED, NOT_CONFIGURED  # noqa: E501

        :param status: The status of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_since(self):
        """Gets the status_since of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The date the domain status was last modified.  # noqa: E501

        :return: The status_since of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: int
        """
        return self._status_since

    @status_since.setter
    def status_since(self, status_since):
        """Sets the status_since of this AllowDomainDelegationWithInheritance.

        The date the domain status was last modified.  # noqa: E501

        :param status_since: The status_since of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: int
        """

        self._status_since = status_since

    @property
    def last_status_check(self):
        """Gets the last_status_check of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The date the domain status was last verified.  # noqa: E501

        :return: The last_status_check of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: int
        """
        return self._last_status_check

    @last_status_check.setter
    def last_status_check(self, last_status_check):
        """Sets the last_status_check of this AllowDomainDelegationWithInheritance.

        The date the domain status was last verified.  # noqa: E501

        :param last_status_check: The last_status_check of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: int
        """

        self._last_status_check = last_status_check

    @property
    def inherited(self):
        """Gets the inherited of this AllowDomainDelegationWithInheritance.  # noqa: E501

        CNAME validation is automatically inherited from a parent domain that is delegated to Imperva. When domain delegation configured (true) for a specific subdomain, its CNAME value overrides the current setting of the parent domain.  # noqa: E501

        :return: The inherited of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this AllowDomainDelegationWithInheritance.

        CNAME validation is automatically inherited from a parent domain that is delegated to Imperva. When domain delegation configured (true) for a specific subdomain, its CNAME value overrides the current setting of the parent domain.  # noqa: E501

        :param inherited: The inherited of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def cname_record_value(self):
        """Gets the cname_record_value of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The CNAME record value to use to configure this domain for delegation.  # noqa: E501

        :return: The cname_record_value of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: str
        """
        return self._cname_record_value

    @cname_record_value.setter
    def cname_record_value(self, cname_record_value):
        """Sets the cname_record_value of this AllowDomainDelegationWithInheritance.

        The CNAME record value to use to configure this domain for delegation.  # noqa: E501

        :param cname_record_value: The cname_record_value of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: str
        """

        self._cname_record_value = cname_record_value

    @property
    def cname_record_host(self):
        """Gets the cname_record_host of this AllowDomainDelegationWithInheritance.  # noqa: E501

        The CNAME record host to use.  # noqa: E501

        :return: The cname_record_host of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :rtype: str
        """
        return self._cname_record_host

    @cname_record_host.setter
    def cname_record_host(self, cname_record_host):
        """Sets the cname_record_host of this AllowDomainDelegationWithInheritance.

        The CNAME record host to use.  # noqa: E501

        :param cname_record_host: The cname_record_host of this AllowDomainDelegationWithInheritance.  # noqa: E501
        :type: str
        """

        self._cname_record_host = cname_record_host

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowDomainDelegationWithInheritance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllowDomainDelegationWithInheritance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
