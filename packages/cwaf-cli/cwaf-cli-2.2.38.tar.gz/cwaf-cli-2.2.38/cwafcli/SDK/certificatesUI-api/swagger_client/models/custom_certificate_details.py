# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomCertificateDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hsm_type': 'str',
        'has_mismatch_site': 'bool',
        'input_hash': 'str',
        'fingerprint': 'str',
        'serial_number': 'str',
        'hsm': 'bool'
    }

    attribute_map = {
        'hsm_type': 'hsmType',
        'has_mismatch_site': 'hasMismatchSite',
        'input_hash': 'inputHash',
        'fingerprint': 'fingerprint',
        'serial_number': 'serialNumber',
        'hsm': 'hsm'
    }

    def __init__(self, hsm_type=None, has_mismatch_site=None, input_hash=None, fingerprint=None, serial_number=None, hsm=None):  # noqa: E501
        """CustomCertificateDetails - a model defined in Swagger"""  # noqa: E501
        self._hsm_type = None
        self._has_mismatch_site = None
        self._input_hash = None
        self._fingerprint = None
        self._serial_number = None
        self._hsm = None
        self.discriminator = None
        if hsm_type is not None:
            self.hsm_type = hsm_type
        if has_mismatch_site is not None:
            self.has_mismatch_site = has_mismatch_site
        if input_hash is not None:
            self.input_hash = input_hash
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if serial_number is not None:
            self.serial_number = serial_number
        if hsm is not None:
            self.hsm = hsm

    @property
    def hsm_type(self):
        """Gets the hsm_type of this CustomCertificateDetails.  # noqa: E501

        The name of the HSM provider  # noqa: E501

        :return: The hsm_type of this CustomCertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._hsm_type

    @hsm_type.setter
    def hsm_type(self, hsm_type):
        """Sets the hsm_type of this CustomCertificateDetails.

        The name of the HSM provider  # noqa: E501

        :param hsm_type: The hsm_type of this CustomCertificateDetails.  # noqa: E501
        :type: str
        """

        self._hsm_type = hsm_type

    @property
    def has_mismatch_site(self):
        """Gets the has_mismatch_site of this CustomCertificateDetails.  # noqa: E501

        Return true if domain is covered by the certificate  # noqa: E501

        :return: The has_mismatch_site of this CustomCertificateDetails.  # noqa: E501
        :rtype: bool
        """
        return self._has_mismatch_site

    @has_mismatch_site.setter
    def has_mismatch_site(self, has_mismatch_site):
        """Sets the has_mismatch_site of this CustomCertificateDetails.

        Return true if domain is covered by the certificate  # noqa: E501

        :param has_mismatch_site: The has_mismatch_site of this CustomCertificateDetails.  # noqa: E501
        :type: bool
        """

        self._has_mismatch_site = has_mismatch_site

    @property
    def input_hash(self):
        """Gets the input_hash of this CustomCertificateDetails.  # noqa: E501

        Internal use for terraform  # noqa: E501

        :return: The input_hash of this CustomCertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._input_hash

    @input_hash.setter
    def input_hash(self, input_hash):
        """Sets the input_hash of this CustomCertificateDetails.

        Internal use for terraform  # noqa: E501

        :param input_hash: The input_hash of this CustomCertificateDetails.  # noqa: E501
        :type: str
        """

        self._input_hash = input_hash

    @property
    def fingerprint(self):
        """Gets the fingerprint of this CustomCertificateDetails.  # noqa: E501

        The certificate fingerprint  # noqa: E501

        :return: The fingerprint of this CustomCertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this CustomCertificateDetails.

        The certificate fingerprint  # noqa: E501

        :param fingerprint: The fingerprint of this CustomCertificateDetails.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def serial_number(self):
        """Gets the serial_number of this CustomCertificateDetails.  # noqa: E501

        The certificate serialNumber  # noqa: E501

        :return: The serial_number of this CustomCertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this CustomCertificateDetails.

        The certificate serialNumber  # noqa: E501

        :param serial_number: The serial_number of this CustomCertificateDetails.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def hsm(self):
        """Gets the hsm of this CustomCertificateDetails.  # noqa: E501


        :return: The hsm of this CustomCertificateDetails.  # noqa: E501
        :rtype: bool
        """
        return self._hsm

    @hsm.setter
    def hsm(self, hsm):
        """Sets the hsm of this CustomCertificateDetails.


        :param hsm: The hsm of this CustomCertificateDetails.  # noqa: E501
        :type: bool
        """

        self._hsm = hsm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomCertificateDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomCertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
