# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Certificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'status': 'str',
        'type': 'str',
        'expiration_date': 'int',
        'in_renewal': 'bool',
        'renewal_cert_order_id': 'str',
        'origin_cert_order_id': 'str',
        'sans': 'list[CertificateSanDetails]',
        'ext_site_id': 'int',
        'site_name': 'str',
        'auth_type': 'str',
        'level': 'str',
        'custom_certificate_details': 'CustomCertificateDetails'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'expiration_date': 'expirationDate',
        'in_renewal': 'inRenewal',
        'renewal_cert_order_id': 'renewalCertOrderId',
        'origin_cert_order_id': 'originCertOrderId',
        'sans': 'sans',
        'ext_site_id': 'extSiteId',
        'site_name': 'siteName',
        'auth_type': 'authType',
        'level': 'level',
        'custom_certificate_details': 'customCertificateDetails'
    }

    def __init__(self, id=None, name=None, status=None, type=None, expiration_date=None, in_renewal=None, renewal_cert_order_id=None, origin_cert_order_id=None, sans=None, ext_site_id=None, site_name=None, auth_type=None, level=None, custom_certificate_details=None):  # noqa: E501
        """Certificate - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._status = None
        self._type = None
        self._expiration_date = None
        self._in_renewal = None
        self._renewal_cert_order_id = None
        self._origin_cert_order_id = None
        self._sans = None
        self._ext_site_id = None
        self._site_name = None
        self._auth_type = None
        self._level = None
        self._custom_certificate_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if in_renewal is not None:
            self.in_renewal = in_renewal
        if renewal_cert_order_id is not None:
            self.renewal_cert_order_id = renewal_cert_order_id
        if origin_cert_order_id is not None:
            self.origin_cert_order_id = origin_cert_order_id
        if sans is not None:
            self.sans = sans
        if ext_site_id is not None:
            self.ext_site_id = ext_site_id
        if site_name is not None:
            self.site_name = site_name
        if auth_type is not None:
            self.auth_type = auth_type
        if level is not None:
            self.level = level
        if custom_certificate_details is not None:
            self.custom_certificate_details = custom_certificate_details

    @property
    def id(self):
        """Gets the id of this Certificate.  # noqa: E501

        The Imperva ID of the certificate.  # noqa: E501

        :return: The id of this Certificate.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Certificate.

        The Imperva ID of the certificate.  # noqa: E501

        :param id: The id of this Certificate.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Certificate.  # noqa: E501

        For an Imperva-generated certificate, indicates the certificate name and the ID of the Imperva request to the CA.  # noqa: E501

        :return: The name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Certificate.

        For an Imperva-generated certificate, indicates the certificate name and the ID of the Imperva request to the CA.  # noqa: E501

        :param name: The name of this Certificate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Certificate.  # noqa: E501

        Certificate status  # noqa: E501

        :return: The status of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Certificate.

        Certificate status  # noqa: E501

        :param status: The status of this Certificate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this Certificate.  # noqa: E501

        Certificate type  # noqa: E501

        :return: The type of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Certificate.

        Certificate type  # noqa: E501

        :param type: The type of this Certificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["ATLAS", "CUSTOM_CERT", "MANUAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Certificate.  # noqa: E501

        Certificate expiration date  # noqa: E501

        :return: The expiration_date of this Certificate.  # noqa: E501
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Certificate.

        Certificate expiration date  # noqa: E501

        :param expiration_date: The expiration_date of this Certificate.  # noqa: E501
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def in_renewal(self):
        """Gets the in_renewal of this Certificate.  # noqa: E501

        Is certificate under renewal process  # noqa: E501

        :return: The in_renewal of this Certificate.  # noqa: E501
        :rtype: bool
        """
        return self._in_renewal

    @in_renewal.setter
    def in_renewal(self, in_renewal):
        """Sets the in_renewal of this Certificate.

        Is certificate under renewal process  # noqa: E501

        :param in_renewal: The in_renewal of this Certificate.  # noqa: E501
        :type: bool
        """

        self._in_renewal = in_renewal

    @property
    def renewal_cert_order_id(self):
        """Gets the renewal_cert_order_id of this Certificate.  # noqa: E501

        The order ID of the Imperva request to the CA for a new certificate that will replace an expiring certificate. This certificate will replace the certificate specified by originCertOrderId.  # noqa: E501

        :return: The renewal_cert_order_id of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._renewal_cert_order_id

    @renewal_cert_order_id.setter
    def renewal_cert_order_id(self, renewal_cert_order_id):
        """Sets the renewal_cert_order_id of this Certificate.

        The order ID of the Imperva request to the CA for a new certificate that will replace an expiring certificate. This certificate will replace the certificate specified by originCertOrderId.  # noqa: E501

        :param renewal_cert_order_id: The renewal_cert_order_id of this Certificate.  # noqa: E501
        :type: str
        """

        self._renewal_cert_order_id = renewal_cert_order_id

    @property
    def origin_cert_order_id(self):
        """Gets the origin_cert_order_id of this Certificate.  # noqa: E501

        The order ID of the Imperva request to the CA for a certificate that is set to expire in the near future and must be renewed. This certificate will be replaced by the certificate specified by renewalCertOrderId.  # noqa: E501

        :return: The origin_cert_order_id of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._origin_cert_order_id

    @origin_cert_order_id.setter
    def origin_cert_order_id(self, origin_cert_order_id):
        """Sets the origin_cert_order_id of this Certificate.

        The order ID of the Imperva request to the CA for a certificate that is set to expire in the near future and must be renewed. This certificate will be replaced by the certificate specified by renewalCertOrderId.  # noqa: E501

        :param origin_cert_order_id: The origin_cert_order_id of this Certificate.  # noqa: E501
        :type: str
        """

        self._origin_cert_order_id = origin_cert_order_id

    @property
    def sans(self):
        """Gets the sans of this Certificate.  # noqa: E501

        List of Subject Alternative Names found on the certificate  # noqa: E501

        :return: The sans of this Certificate.  # noqa: E501
        :rtype: list[CertificateSanDetails]
        """
        return self._sans

    @sans.setter
    def sans(self, sans):
        """Sets the sans of this Certificate.

        List of Subject Alternative Names found on the certificate  # noqa: E501

        :param sans: The sans of this Certificate.  # noqa: E501
        :type: list[CertificateSanDetails]
        """

        self._sans = sans

    @property
    def ext_site_id(self):
        """Gets the ext_site_id of this Certificate.  # noqa: E501

        The Imperva ID of the onboarded website covered by the certificate  # noqa: E501

        :return: The ext_site_id of this Certificate.  # noqa: E501
        :rtype: int
        """
        return self._ext_site_id

    @ext_site_id.setter
    def ext_site_id(self, ext_site_id):
        """Sets the ext_site_id of this Certificate.

        The Imperva ID of the onboarded website covered by the certificate  # noqa: E501

        :param ext_site_id: The ext_site_id of this Certificate.  # noqa: E501
        :type: int
        """

        self._ext_site_id = ext_site_id

    @property
    def site_name(self):
        """Gets the site_name of this Certificate.  # noqa: E501

        The name of the onboarded website covered by the certificate  # noqa: E501

        :return: The site_name of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this Certificate.

        The name of the onboarded website covered by the certificate  # noqa: E501

        :param site_name: The site_name of this Certificate.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def auth_type(self):
        """Gets the auth_type of this Certificate.  # noqa: E501

        The authentication type of the certificate  # noqa: E501

        :return: The auth_type of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Certificate.

        The authentication type of the certificate  # noqa: E501

        :param auth_type: The auth_type of this Certificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["RSA", "ECC"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def level(self):
        """Gets the level of this Certificate.  # noqa: E501

        The level of the certificate (SITE or ACCOUNT)  # noqa: E501

        :return: The level of this Certificate.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Certificate.

        The level of the certificate (SITE or ACCOUNT)  # noqa: E501

        :param level: The level of this Certificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["SITE", "ACCOUNT"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def custom_certificate_details(self):
        """Gets the custom_certificate_details of this Certificate.  # noqa: E501


        :return: The custom_certificate_details of this Certificate.  # noqa: E501
        :rtype: CustomCertificateDetails
        """
        return self._custom_certificate_details

    @custom_certificate_details.setter
    def custom_certificate_details(self, custom_certificate_details):
        """Sets the custom_certificate_details of this Certificate.


        :param custom_certificate_details: The custom_certificate_details of this Certificate.  # noqa: E501
        :type: CustomCertificateDetails
        """

        self._custom_certificate_details = custom_certificate_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Certificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Certificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
