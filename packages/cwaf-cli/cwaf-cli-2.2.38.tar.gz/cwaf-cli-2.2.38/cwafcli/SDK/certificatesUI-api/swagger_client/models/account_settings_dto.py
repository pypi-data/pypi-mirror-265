# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imperva_certificate': 'ImpervaGeneratedCertificateSettingsDto',
        'allow_support_old_tls_versions': 'bool',
        'enable_hsts_for_new_sites': 'bool'
    }

    attribute_map = {
        'imperva_certificate': 'impervaCertificate',
        'allow_support_old_tls_versions': 'allowSupportOldTLSVersions',
        'enable_hsts_for_new_sites': 'enableHSTSForNewSites'
    }

    def __init__(self, imperva_certificate=None, allow_support_old_tls_versions=False, enable_hsts_for_new_sites=False):  # noqa: E501
        """AccountSettingsDto - a model defined in Swagger"""  # noqa: E501
        self._imperva_certificate = None
        self._allow_support_old_tls_versions = None
        self._enable_hsts_for_new_sites = None
        self.discriminator = None
        if imperva_certificate is not None:
            self.imperva_certificate = imperva_certificate
        if allow_support_old_tls_versions is not None:
            self.allow_support_old_tls_versions = allow_support_old_tls_versions
        if enable_hsts_for_new_sites is not None:
            self.enable_hsts_for_new_sites = enable_hsts_for_new_sites

    @property
    def imperva_certificate(self):
        """Gets the imperva_certificate of this AccountSettingsDto.  # noqa: E501


        :return: The imperva_certificate of this AccountSettingsDto.  # noqa: E501
        :rtype: ImpervaGeneratedCertificateSettingsDto
        """
        return self._imperva_certificate

    @imperva_certificate.setter
    def imperva_certificate(self, imperva_certificate):
        """Sets the imperva_certificate of this AccountSettingsDto.


        :param imperva_certificate: The imperva_certificate of this AccountSettingsDto.  # noqa: E501
        :type: ImpervaGeneratedCertificateSettingsDto
        """

        self._imperva_certificate = imperva_certificate

    @property
    def allow_support_old_tls_versions(self):
        """Gets the allow_support_old_tls_versions of this AccountSettingsDto.  # noqa: E501

        When true, sites under the account or sub-accounts can allow support of old TLS versions traffic. This can be configured only on the parent account level.  # noqa: E501

        :return: The allow_support_old_tls_versions of this AccountSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._allow_support_old_tls_versions

    @allow_support_old_tls_versions.setter
    def allow_support_old_tls_versions(self, allow_support_old_tls_versions):
        """Sets the allow_support_old_tls_versions of this AccountSettingsDto.

        When true, sites under the account or sub-accounts can allow support of old TLS versions traffic. This can be configured only on the parent account level.  # noqa: E501

        :param allow_support_old_tls_versions: The allow_support_old_tls_versions of this AccountSettingsDto.  # noqa: E501
        :type: bool
        """

        self._allow_support_old_tls_versions = allow_support_old_tls_versions

    @property
    def enable_hsts_for_new_sites(self):
        """Gets the enable_hsts_for_new_sites of this AccountSettingsDto.  # noqa: E501

        When true, enables HSTS support for newly created websites.  # noqa: E501

        :return: The enable_hsts_for_new_sites of this AccountSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._enable_hsts_for_new_sites

    @enable_hsts_for_new_sites.setter
    def enable_hsts_for_new_sites(self, enable_hsts_for_new_sites):
        """Sets the enable_hsts_for_new_sites of this AccountSettingsDto.

        When true, enables HSTS support for newly created websites.  # noqa: E501

        :param enable_hsts_for_new_sites: The enable_hsts_for_new_sites of this AccountSettingsDto.  # noqa: E501
        :type: bool
        """

        self._enable_hsts_for_new_sites = enable_hsts_for_new_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
