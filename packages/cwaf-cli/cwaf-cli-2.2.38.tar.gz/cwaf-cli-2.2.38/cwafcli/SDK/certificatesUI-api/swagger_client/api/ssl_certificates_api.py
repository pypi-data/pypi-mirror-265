# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SSLCertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_san_validation_method(self, body, certificate_id, san_id, **kwargs):  # noqa: E501
        """Change SAN validation method  # noqa: E501

        Changes the SAN validation method and value used for certificate revalidation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_san_validation_method(body, certificate_id, san_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeValidationMethodRequest body: (required)
        :param int certificate_id: The Imperva ID assigned to the certificate. Use the GET /v3/certificates API call to retrieve the IDs of certificates in your account. (required)
        :param int san_id: The Imperva ID assigned to the SAN. Use the GET /v3/certificates API call to retrieve the SAN IDs of certificates in your account. (required)
        :return: ChangeValidationMethodExternalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_san_validation_method_with_http_info(body, certificate_id, san_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_san_validation_method_with_http_info(body, certificate_id, san_id, **kwargs)  # noqa: E501
            return data

    def change_san_validation_method_with_http_info(self, body, certificate_id, san_id, **kwargs):  # noqa: E501
        """Change SAN validation method  # noqa: E501

        Changes the SAN validation method and value used for certificate revalidation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_san_validation_method_with_http_info(body, certificate_id, san_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ChangeValidationMethodRequest body: (required)
        :param int certificate_id: The Imperva ID assigned to the certificate. Use the GET /v3/certificates API call to retrieve the IDs of certificates in your account. (required)
        :param int san_id: The Imperva ID assigned to the SAN. Use the GET /v3/certificates API call to retrieve the SAN IDs of certificates in your account. (required)
        :return: ChangeValidationMethodExternalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'certificate_id', 'san_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_san_validation_method" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `change_san_validation_method`")  # noqa: E501
        # verify the required parameter 'certificate_id' is set
        if ('certificate_id' not in params or
                params['certificate_id'] is None):
            raise ValueError("Missing the required parameter `certificate_id` when calling `change_san_validation_method`")  # noqa: E501
        # verify the required parameter 'san_id' is set
        if ('san_id' not in params or
                params['san_id'] is None):
            raise ValueError("Missing the required parameter `san_id` when calling `change_san_validation_method`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'certificate_id' in params:
            path_params['certificateId'] = params['certificate_id']  # noqa: E501
        if 'san_id' in params:
            path_params['sanId'] = params['san_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificates/{certificateId}/sans/{sanId}/validationMethod', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChangeValidationMethodExternalResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_certificates1(self, **kwargs):  # noqa: E501
        """Get certificate details  # noqa: E501

        Get details for certificates in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_certificates1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of the onboarded website. Retrieves certificate details for a specific website. If not specified, this API retrieves details of all certificates in the account.
        :param str cert_type: The type of certificate to provide details for
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_certificates1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_certificates1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_certificates1_with_http_info(self, **kwargs):  # noqa: E501
        """Get certificate details  # noqa: E501

        Get details for certificates in your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_certificates1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of the onboarded website. Retrieves certificate details for a specific website. If not specified, this API retrieves details of all certificates in the account.
        :param str cert_type: The type of certificate to provide details for
        :return: Certificate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id', 'cert_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_certificates1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ext_site_id' in params:
            query_params.append(('extSiteId', params['ext_site_id']))  # noqa: E501
        if 'cert_type' in params:
            query_params.append(('certType', params['cert_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Certificate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def san_instructions_for_account(self, **kwargs):  # noqa: E501
        """Get domain validation instructions  # noqa: E501

        Get validation instructions for all pending SANs in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.san_instructions_for_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of the onboarded website.
        :param str validation_method: The methods that can be used to validate ownership of the domain.
        :param str certificate_type: The type that can be used to get san instructions.
        :return: SanInstructionsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.san_instructions_for_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.san_instructions_for_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def san_instructions_for_account_with_http_info(self, **kwargs):  # noqa: E501
        """Get domain validation instructions  # noqa: E501

        Get validation instructions for all pending SANs in the account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.san_instructions_for_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ext_site_id: The Imperva ID of the onboarded website.
        :param str validation_method: The methods that can be used to validate ownership of the domain.
        :param str certificate_type: The type that can be used to get san instructions.
        :return: SanInstructionsDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ext_site_id', 'validation_method', 'certificate_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method san_instructions_for_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ext_site_id' in params:
            query_params.append(('extSiteId', params['ext_site_id']))  # noqa: E501
        if 'validation_method' in params:
            query_params.append(('validationMethod', params['validation_method']))  # noqa: E501
        if 'certificate_type' in params:
            query_params.append(('certificateType', params['certificate_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/instructions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SanInstructionsDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
