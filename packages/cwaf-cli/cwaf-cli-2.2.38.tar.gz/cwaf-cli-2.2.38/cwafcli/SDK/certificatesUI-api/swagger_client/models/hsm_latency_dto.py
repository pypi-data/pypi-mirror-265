# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HsmLatencyDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_time': 'int',
        'latency': 'int',
        'hsm_host_name': 'str'
    }

    attribute_map = {
        'request_time': 'requestTime',
        'latency': 'latency',
        'hsm_host_name': 'hsmHostName'
    }

    def __init__(self, request_time=None, latency=None, hsm_host_name=None):  # noqa: E501
        """HsmLatencyDto - a model defined in Swagger"""  # noqa: E501
        self._request_time = None
        self._latency = None
        self._hsm_host_name = None
        self.discriminator = None
        if request_time is not None:
            self.request_time = request_time
        if latency is not None:
            self.latency = latency
        if hsm_host_name is not None:
            self.hsm_host_name = hsm_host_name

    @property
    def request_time(self):
        """Gets the request_time of this HsmLatencyDto.  # noqa: E501

        The time the latency request was recorded.<br/> Unix epoch time, in milliseconds.  # noqa: E501

        :return: The request_time of this HsmLatencyDto.  # noqa: E501
        :rtype: int
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this HsmLatencyDto.

        The time the latency request was recorded.<br/> Unix epoch time, in milliseconds.  # noqa: E501

        :param request_time: The request_time of this HsmLatencyDto.  # noqa: E501
        :type: int
        """

        self._request_time = request_time

    @property
    def latency(self):
        """Gets the latency of this HsmLatencyDto.  # noqa: E501

        The last latency in the pop  # noqa: E501

        :return: The latency of this HsmLatencyDto.  # noqa: E501
        :rtype: int
        """
        return self._latency

    @latency.setter
    def latency(self, latency):
        """Sets the latency of this HsmLatencyDto.

        The last latency in the pop  # noqa: E501

        :param latency: The latency of this HsmLatencyDto.  # noqa: E501
        :type: int
        """

        self._latency = latency

    @property
    def hsm_host_name(self):
        """Gets the hsm_host_name of this HsmLatencyDto.  # noqa: E501

        The URI (host name) of the Fortanix region.<br/>Possible values: amer, uk, eu, apac, au in the required format, e.g. api.amer.smartkey.io  # noqa: E501

        :return: The hsm_host_name of this HsmLatencyDto.  # noqa: E501
        :rtype: str
        """
        return self._hsm_host_name

    @hsm_host_name.setter
    def hsm_host_name(self, hsm_host_name):
        """Sets the hsm_host_name of this HsmLatencyDto.

        The URI (host name) of the Fortanix region.<br/>Possible values: amer, uk, eu, apac, au in the required format, e.g. api.amer.smartkey.io  # noqa: E501

        :param hsm_host_name: The hsm_host_name of this HsmLatencyDto.  # noqa: E501
        :type: str
        """

        self._hsm_host_name = hsm_host_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HsmLatencyDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HsmLatencyDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
