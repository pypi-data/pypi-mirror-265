# coding: utf-8

"""
    SSL Certificate Management

    View and manage certificates for all websites in your account.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class HSMCertificatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_latency(self, pop, hsm_host_name, **kwargs):  # noqa: E501
        """Get HSM latency  # noqa: E501

        Get the latest HSM latency between a given Imperva data center (PoP) and a specific Fortanix region.<br/>This operation returns the time it takes for Imperva to get the private key from Fortanix.It does not include the session creation time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latency(pop, hsm_host_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pop: The code of the Imperva data center (PoP) to check latency for.<br/>For the full list of PoPs and codes, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/more/pops.htm'>Imperva Data Centers</a>. (required)
        :param str hsm_host_name: The URI (host name) of the Fortanix region.<br/>Possible values: amer, uk, eu, apac, au in the required format, e.g. api.amer.smartkey.io (required)
        :return: HsmLatencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_latency_with_http_info(pop, hsm_host_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_latency_with_http_info(pop, hsm_host_name, **kwargs)  # noqa: E501
            return data

    def get_latency_with_http_info(self, pop, hsm_host_name, **kwargs):  # noqa: E501
        """Get HSM latency  # noqa: E501

        Get the latest HSM latency between a given Imperva data center (PoP) and a specific Fortanix region.<br/>This operation returns the time it takes for Imperva to get the private key from Fortanix.It does not include the session creation time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_latency_with_http_info(pop, hsm_host_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pop: The code of the Imperva data center (PoP) to check latency for.<br/>For the full list of PoPs and codes, see <a href='https://docs.imperva.com/bundle/cloud-application-security/page/more/pops.htm'>Imperva Data Centers</a>. (required)
        :param str hsm_host_name: The URI (host name) of the Fortanix region.<br/>Possible values: amer, uk, eu, apac, au in the required format, e.g. api.amer.smartkey.io (required)
        :return: HsmLatencyDetailsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pop', 'hsm_host_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latency" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pop' is set
        if ('pop' not in params or
                params['pop'] is None):
            raise ValueError("Missing the required parameter `pop` when calling `get_latency`")  # noqa: E501
        # verify the required parameter 'hsm_host_name' is set
        if ('hsm_host_name' not in params or
                params['hsm_host_name'] is None):
            raise ValueError("Missing the required parameter `hsm_host_name` when calling `get_latency`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pop' in params:
            query_params.append(('pop', params['pop']))  # noqa: E501
        if 'hsm_host_name' in params:
            query_params.append(('hsmHostName', params['hsm_host_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v3/certificates/hsm/latency', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HsmLatencyDetailsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
