# coding: utf-8

"""
    Imperva Troubleshooting Page API

    Gain more visibility into connectivity issues that occur when Imperva data centers cannot reach your origin web servers. For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/troubleshoot.htm\">Troubleshoot Website Errors.</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectivityTest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connectivity_test_id': 'str',
        'site_id': 'int',
        'account_id': 'int',
        'origin_ip': 'str',
        'origin_cname': 'str',
        'time_stamp': 'int',
        'pop': 'Pop',
        'error_code': 'str',
        'tcp_port': 'int',
        'connectivity_tests_list': 'list[Check]'
    }

    attribute_map = {
        'connectivity_test_id': 'connectivityTestId',
        'site_id': 'siteId',
        'account_id': 'accountId',
        'origin_ip': 'originIP',
        'origin_cname': 'originCNAME',
        'time_stamp': 'timeStamp',
        'pop': 'pop',
        'error_code': 'errorCode',
        'tcp_port': 'tcpPort',
        'connectivity_tests_list': 'connectivityTestsList'
    }

    def __init__(self, connectivity_test_id=None, site_id=None, account_id=None, origin_ip=None, origin_cname=None, time_stamp=None, pop=None, error_code=None, tcp_port=None, connectivity_tests_list=None):  # noqa: E501
        """ConnectivityTest - a model defined in Swagger"""  # noqa: E501
        self._connectivity_test_id = None
        self._site_id = None
        self._account_id = None
        self._origin_ip = None
        self._origin_cname = None
        self._time_stamp = None
        self._pop = None
        self._error_code = None
        self._tcp_port = None
        self._connectivity_tests_list = None
        self.discriminator = None
        if connectivity_test_id is not None:
            self.connectivity_test_id = connectivity_test_id
        if site_id is not None:
            self.site_id = site_id
        if account_id is not None:
            self.account_id = account_id
        if origin_ip is not None:
            self.origin_ip = origin_ip
        if origin_cname is not None:
            self.origin_cname = origin_cname
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if pop is not None:
            self.pop = pop
        if error_code is not None:
            self.error_code = error_code
        if tcp_port is not None:
            self.tcp_port = tcp_port
        if connectivity_tests_list is not None:
            self.connectivity_tests_list = connectivity_tests_list

    @property
    def connectivity_test_id(self):
        """Gets the connectivity_test_id of this ConnectivityTest.  # noqa: E501

        Numeric identifier of the connectivity test that was performed against the origin server.  # noqa: E501

        :return: The connectivity_test_id of this ConnectivityTest.  # noqa: E501
        :rtype: str
        """
        return self._connectivity_test_id

    @connectivity_test_id.setter
    def connectivity_test_id(self, connectivity_test_id):
        """Sets the connectivity_test_id of this ConnectivityTest.

        Numeric identifier of the connectivity test that was performed against the origin server.  # noqa: E501

        :param connectivity_test_id: The connectivity_test_id of this ConnectivityTest.  # noqa: E501
        :type: str
        """

        self._connectivity_test_id = connectivity_test_id

    @property
    def site_id(self):
        """Gets the site_id of this ConnectivityTest.  # noqa: E501

        Numeric identifier of the site the test was performed on.  # noqa: E501

        :return: The site_id of this ConnectivityTest.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ConnectivityTest.

        Numeric identifier of the site the test was performed on.  # noqa: E501

        :param site_id: The site_id of this ConnectivityTest.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def account_id(self):
        """Gets the account_id of this ConnectivityTest.  # noqa: E501

        Numeric identifier of the account the site belongs to.  # noqa: E501

        :return: The account_id of this ConnectivityTest.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConnectivityTest.

        Numeric identifier of the account the site belongs to.  # noqa: E501

        :param account_id: The account_id of this ConnectivityTest.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def origin_ip(self):
        """Gets the origin_ip of this ConnectivityTest.  # noqa: E501

        The IP of the origin server (that was resolved when the test was performed).  # noqa: E501

        :return: The origin_ip of this ConnectivityTest.  # noqa: E501
        :rtype: str
        """
        return self._origin_ip

    @origin_ip.setter
    def origin_ip(self, origin_ip):
        """Sets the origin_ip of this ConnectivityTest.

        The IP of the origin server (that was resolved when the test was performed).  # noqa: E501

        :param origin_ip: The origin_ip of this ConnectivityTest.  # noqa: E501
        :type: str
        """

        self._origin_ip = origin_ip

    @property
    def origin_cname(self):
        """Gets the origin_cname of this ConnectivityTest.  # noqa: E501

        The CNAME of the origin server.  # noqa: E501

        :return: The origin_cname of this ConnectivityTest.  # noqa: E501
        :rtype: str
        """
        return self._origin_cname

    @origin_cname.setter
    def origin_cname(self, origin_cname):
        """Sets the origin_cname of this ConnectivityTest.

        The CNAME of the origin server.  # noqa: E501

        :param origin_cname: The origin_cname of this ConnectivityTest.  # noqa: E501
        :type: str
        """

        self._origin_cname = origin_cname

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ConnectivityTest.  # noqa: E501

        The timestamp in which the connectivity test was performed.  # noqa: E501

        :return: The time_stamp of this ConnectivityTest.  # noqa: E501
        :rtype: int
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ConnectivityTest.

        The timestamp in which the connectivity test was performed.  # noqa: E501

        :param time_stamp: The time_stamp of this ConnectivityTest.  # noqa: E501
        :type: int
        """

        self._time_stamp = time_stamp

    @property
    def pop(self):
        """Gets the pop of this ConnectivityTest.  # noqa: E501


        :return: The pop of this ConnectivityTest.  # noqa: E501
        :rtype: Pop
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this ConnectivityTest.


        :param pop: The pop of this ConnectivityTest.  # noqa: E501
        :type: Pop
        """

        self._pop = pop

    @property
    def error_code(self):
        """Gets the error_code of this ConnectivityTest.  # noqa: E501

        The error code that triggered the connectivity test.  # noqa: E501

        :return: The error_code of this ConnectivityTest.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ConnectivityTest.

        The error code that triggered the connectivity test.  # noqa: E501

        :param error_code: The error_code of this ConnectivityTest.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def tcp_port(self):
        """Gets the tcp_port of this ConnectivityTest.  # noqa: E501

        The port the MTR over TCP test is performed against.  # noqa: E501

        :return: The tcp_port of this ConnectivityTest.  # noqa: E501
        :rtype: int
        """
        return self._tcp_port

    @tcp_port.setter
    def tcp_port(self, tcp_port):
        """Sets the tcp_port of this ConnectivityTest.

        The port the MTR over TCP test is performed against.  # noqa: E501

        :param tcp_port: The tcp_port of this ConnectivityTest.  # noqa: E501
        :type: int
        """

        self._tcp_port = tcp_port

    @property
    def connectivity_tests_list(self):
        """Gets the connectivity_tests_list of this ConnectivityTest.  # noqa: E501

        Output of connectivity test performed against origin server  # noqa: E501

        :return: The connectivity_tests_list of this ConnectivityTest.  # noqa: E501
        :rtype: list[Check]
        """
        return self._connectivity_tests_list

    @connectivity_tests_list.setter
    def connectivity_tests_list(self, connectivity_tests_list):
        """Sets the connectivity_tests_list of this ConnectivityTest.

        Output of connectivity test performed against origin server  # noqa: E501

        :param connectivity_tests_list: The connectivity_tests_list of this ConnectivityTest.  # noqa: E501
        :type: list[Check]
        """

        self._connectivity_tests_list = connectivity_tests_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectivityTest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectivityTest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
