# coding: utf-8

"""
    Imperva Troubleshooting Page API

    Gain more visibility into connectivity issues that occur when Imperva data centers cannot reach your origin web servers. For full feature documentation, see <a href=\"https://docs.imperva.com/bundle/cloud-application-security/page/troubleshoot.htm\">Troubleshoot Website Errors.</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectivityTestSearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'int',
        'end': 'int',
        'limit': 'int',
        'page': 'int',
        'connectivity_test_ids': 'list[int]',
        'error_codes_list': 'list[int]',
        'pops_ids_list': 'list[str]',
        'origin_ips_list': 'list[str]',
        'origin_cnames_list': 'list[str]'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'limit': 'limit',
        'page': 'page',
        'connectivity_test_ids': 'connectivityTestIds',
        'error_codes_list': 'errorCodesList',
        'pops_ids_list': 'popsIdsList',
        'origin_ips_list': 'originIPsList',
        'origin_cnames_list': 'originCNAMEsList'
    }

    def __init__(self, start=None, end=None, limit=None, page=None, connectivity_test_ids=None, error_codes_list=None, pops_ids_list=None, origin_ips_list=None, origin_cnames_list=None):  # noqa: E501
        """ConnectivityTestSearch - a model defined in Swagger"""  # noqa: E501
        self._start = None
        self._end = None
        self._limit = None
        self._page = None
        self._connectivity_test_ids = None
        self._error_codes_list = None
        self._pops_ids_list = None
        self._origin_ips_list = None
        self._origin_cnames_list = None
        self.discriminator = None
        self.start = start
        if end is not None:
            self.end = end
        if limit is not None:
            self.limit = limit
        if page is not None:
            self.page = page
        if connectivity_test_ids is not None:
            self.connectivity_test_ids = connectivity_test_ids
        if error_codes_list is not None:
            self.error_codes_list = error_codes_list
        if pops_ids_list is not None:
            self.pops_ids_list = pops_ids_list
        if origin_ips_list is not None:
            self.origin_ips_list = origin_ips_list
        if origin_cnames_list is not None:
            self.origin_cnames_list = origin_cnames_list

    @property
    def start(self):
        """Gets the start of this ConnectivityTestSearch.  # noqa: E501

        Start of search time range (in milliseconds)  # noqa: E501

        :return: The start of this ConnectivityTestSearch.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ConnectivityTestSearch.

        Start of search time range (in milliseconds)  # noqa: E501

        :param start: The start of this ConnectivityTestSearch.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this ConnectivityTestSearch.  # noqa: E501

        End of search time range (in milliseconds)  # noqa: E501

        :return: The end of this ConnectivityTestSearch.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ConnectivityTestSearch.

        End of search time range (in milliseconds)  # noqa: E501

        :param end: The end of this ConnectivityTestSearch.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def limit(self):
        """Gets the limit of this ConnectivityTestSearch.  # noqa: E501

        The number of objects to return in the response.<br/>Default: 100<br/>Possible values: 10, 25, 50, 100  # noqa: E501

        :return: The limit of this ConnectivityTestSearch.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ConnectivityTestSearch.

        The number of objects to return in the response.<br/>Default: 100<br/>Possible values: 10, 25, 50, 100  # noqa: E501

        :param limit: The limit of this ConnectivityTestSearch.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def page(self):
        """Gets the page of this ConnectivityTestSearch.  # noqa: E501

        The page to return starting from 1.  # noqa: E501

        :return: The page of this ConnectivityTestSearch.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ConnectivityTestSearch.

        The page to return starting from 1.  # noqa: E501

        :param page: The page of this ConnectivityTestSearch.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def connectivity_test_ids(self):
        """Gets the connectivity_test_ids of this ConnectivityTestSearch.  # noqa: E501


        :return: The connectivity_test_ids of this ConnectivityTestSearch.  # noqa: E501
        :rtype: list[int]
        """
        return self._connectivity_test_ids

    @connectivity_test_ids.setter
    def connectivity_test_ids(self, connectivity_test_ids):
        """Sets the connectivity_test_ids of this ConnectivityTestSearch.


        :param connectivity_test_ids: The connectivity_test_ids of this ConnectivityTestSearch.  # noqa: E501
        :type: list[int]
        """

        self._connectivity_test_ids = connectivity_test_ids

    @property
    def error_codes_list(self):
        """Gets the error_codes_list of this ConnectivityTestSearch.  # noqa: E501


        :return: The error_codes_list of this ConnectivityTestSearch.  # noqa: E501
        :rtype: list[int]
        """
        return self._error_codes_list

    @error_codes_list.setter
    def error_codes_list(self, error_codes_list):
        """Sets the error_codes_list of this ConnectivityTestSearch.


        :param error_codes_list: The error_codes_list of this ConnectivityTestSearch.  # noqa: E501
        :type: list[int]
        """

        self._error_codes_list = error_codes_list

    @property
    def pops_ids_list(self):
        """Gets the pops_ids_list of this ConnectivityTestSearch.  # noqa: E501


        :return: The pops_ids_list of this ConnectivityTestSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._pops_ids_list

    @pops_ids_list.setter
    def pops_ids_list(self, pops_ids_list):
        """Sets the pops_ids_list of this ConnectivityTestSearch.


        :param pops_ids_list: The pops_ids_list of this ConnectivityTestSearch.  # noqa: E501
        :type: list[str]
        """

        self._pops_ids_list = pops_ids_list

    @property
    def origin_ips_list(self):
        """Gets the origin_ips_list of this ConnectivityTestSearch.  # noqa: E501


        :return: The origin_ips_list of this ConnectivityTestSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin_ips_list

    @origin_ips_list.setter
    def origin_ips_list(self, origin_ips_list):
        """Sets the origin_ips_list of this ConnectivityTestSearch.


        :param origin_ips_list: The origin_ips_list of this ConnectivityTestSearch.  # noqa: E501
        :type: list[str]
        """

        self._origin_ips_list = origin_ips_list

    @property
    def origin_cnames_list(self):
        """Gets the origin_cnames_list of this ConnectivityTestSearch.  # noqa: E501


        :return: The origin_cnames_list of this ConnectivityTestSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin_cnames_list

    @origin_cnames_list.setter
    def origin_cnames_list(self, origin_cnames_list):
        """Sets the origin_cnames_list of this ConnectivityTestSearch.


        :param origin_cnames_list: The origin_cnames_list of this ConnectivityTestSearch.  # noqa: E501
        :type: list[str]
        """

        self._origin_cnames_list = origin_cnames_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectivityTestSearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectivityTestSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
