# coding: utf-8

"""
    Reputation Intelligence API

    This is an API for Imperva Reputation Intelligence. Gain visibility into the reputation of the IPs attacking your sites to make more informed, data-driven decisions. Leverage reputation data from across the Imperva customer base and 3rd party providers to help in incident response. Reputation Intelligence is for informational purposes only and does not perform any actions. Limit: 10 requests per minute. For full feature documentation, see [Reputation Intelligence](https://docs.imperva.com/bundle/ip-reputation/page/reputation-intelligence.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiskData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'risk_score': 'str',
        'risk_description': 'str',
        'risk_score_number': 'str'
    }

    attribute_map = {
        'risk_score': 'risk_score',
        'risk_description': 'risk_description',
        'risk_score_number': 'risk_score_number'
    }

    def __init__(self, risk_score=None, risk_description=None, risk_score_number=None):  # noqa: E501
        """RiskData - a model defined in Swagger"""  # noqa: E501
        self._risk_score = None
        self._risk_description = None
        self._risk_score_number = None
        self.discriminator = None
        if risk_score is not None:
            self.risk_score = risk_score
        if risk_description is not None:
            self.risk_description = risk_description
        if risk_score_number is not None:
            self.risk_score_number = risk_score_number

    @property
    def risk_score(self):
        """Gets the risk_score of this RiskData.  # noqa: E501

        An assessment of the risk level posed by this IP, based on activity of this IP across the Imperva customer base over the past week (clean and malicious traffic).The calculation takes into account the number of attacks, the number of Imperva customer accounts that were attacked, and the severity of attacks by this IP. Possible values: CRITICAL, HIGH, MEDIUM, LOW. (CRITICAL: Risk score number of 75 or above. HIGH: Risk score number of 50-74. MEDIUM: Risk score number of 25-49. LOW: Risk score number below 25.)  # noqa: E501

        :return: The risk_score of this RiskData.  # noqa: E501
        :rtype: str
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this RiskData.

        An assessment of the risk level posed by this IP, based on activity of this IP across the Imperva customer base over the past week (clean and malicious traffic).The calculation takes into account the number of attacks, the number of Imperva customer accounts that were attacked, and the severity of attacks by this IP. Possible values: CRITICAL, HIGH, MEDIUM, LOW. (CRITICAL: Risk score number of 75 or above. HIGH: Risk score number of 50-74. MEDIUM: Risk score number of 25-49. LOW: Risk score number below 25.)  # noqa: E501

        :param risk_score: The risk_score of this RiskData.  # noqa: E501
        :type: str
        """

        self._risk_score = risk_score

    @property
    def risk_description(self):
        """Gets the risk_description of this RiskData.  # noqa: E501

        Additional details on the risk assessment.  # noqa: E501

        :return: The risk_description of this RiskData.  # noqa: E501
        :rtype: str
        """
        return self._risk_description

    @risk_description.setter
    def risk_description(self, risk_description):
        """Sets the risk_description of this RiskData.

        Additional details on the risk assessment.  # noqa: E501

        :param risk_description: The risk_description of this RiskData.  # noqa: E501
        :type: str
        """

        self._risk_description = risk_description

    @property
    def risk_score_number(self):
        """Gets the risk_score_number of this RiskData.  # noqa: E501

        risk score number between 0 and 100  # noqa: E501

        :return: The risk_score_number of this RiskData.  # noqa: E501
        :rtype: str
        """
        return self._risk_score_number

    @risk_score_number.setter
    def risk_score_number(self, risk_score_number):
        """Sets the risk_score_number of this RiskData.

        risk score number between 0 and 100  # noqa: E501

        :param risk_score_number: The risk_score_number of this RiskData.  # noqa: E501
        :type: str
        """

        self._risk_score_number = risk_score_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
