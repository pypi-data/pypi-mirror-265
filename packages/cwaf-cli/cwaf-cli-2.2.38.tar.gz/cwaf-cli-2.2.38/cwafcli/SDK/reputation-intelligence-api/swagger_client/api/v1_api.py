# coding: utf-8

"""
    Reputation Intelligence API

    This is an API for Imperva Reputation Intelligence. Gain visibility into the reputation of the IPs attacking your sites to make more informed, data-driven decisions. Leverage reputation data from across the Imperva customer base and 3rd party providers to help in incident response. Reputation Intelligence is for informational purposes only and does not perform any actions. Limit: 10 requests per minute. For full feature documentation, see [Reputation Intelligence](https://docs.imperva.com/bundle/ip-reputation/page/reputation-intelligence.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class V1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ip_reputation(self, ip, **kwargs):  # noqa: E501
        """Retrieve reputation intelligence data for a specified IP.  # noqa: E501

        Use this operation to get Reputation Intelligence details on a specified IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ip_reputation(ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip: Unique IP address. Only IPv4 addresses are supported. (required)
        :return: IPDataApi
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ip_reputation_with_http_info(ip, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ip_reputation_with_http_info(ip, **kwargs)  # noqa: E501
            return data

    def get_ip_reputation_with_http_info(self, ip, **kwargs):  # noqa: E501
        """Retrieve reputation intelligence data for a specified IP.  # noqa: E501

        Use this operation to get Reputation Intelligence details on a specified IP address.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ip_reputation_with_http_info(ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip: Unique IP address. Only IPv4 addresses are supported. (required)
        :return: IPDataApi
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ip_reputation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip' is set
        if ('ip' not in params or
                params['ip'] is None):
            raise ValueError("Missing the required parameter `ip` when calling `get_ip_reputation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IPDataApi',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
