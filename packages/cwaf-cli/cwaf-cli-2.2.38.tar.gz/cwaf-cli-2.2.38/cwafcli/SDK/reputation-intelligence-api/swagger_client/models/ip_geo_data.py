# coding: utf-8

"""
    Reputation Intelligence API

    This is an API for Imperva Reputation Intelligence. Gain visibility into the reputation of the IPs attacking your sites to make more informed, data-driven decisions. Leverage reputation data from across the Imperva customer base and 3rd party providers to help in incident response. Reputation Intelligence is for informational purposes only and does not perform any actions. Limit: 10 requests per minute. For full feature documentation, see [Reputation Intelligence](https://docs.imperva.com/bundle/ip-reputation/page/reputation-intelligence.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPGeoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'city': 'str'
    }

    attribute_map = {
        'country': 'country',
        'city': 'city'
    }

    def __init__(self, country=None, city=None):  # noqa: E501
        """IPGeoData - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._city = None
        self.discriminator = None
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city

    @property
    def country(self):
        """Gets the country of this IPGeoData.  # noqa: E501

        The country of origin of the attack by this IP address.  # noqa: E501

        :return: The country of this IPGeoData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this IPGeoData.

        The country of origin of the attack by this IP address.  # noqa: E501

        :param country: The country of this IPGeoData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this IPGeoData.  # noqa: E501

        The city of origin of the attack by this IP address.  # noqa: E501

        :return: The city of this IPGeoData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this IPGeoData.

        The city of origin of the attack by this IP address.  # noqa: E501

        :param city: The city of this IPGeoData.  # noqa: E501
        :type: str
        """

        self._city = city

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPGeoData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPGeoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
