# coding: utf-8

"""
    Reputation Intelligence API

    This is an API for Imperva Reputation Intelligence. Gain visibility into the reputation of the IPs attacking your sites to make more informed, data-driven decisions. Leverage reputation data from across the Imperva customer base and 3rd party providers to help in incident response. Reputation Intelligence is for informational purposes only and does not perform any actions. Limit: 10 requests per minute. For full feature documentation, see [Reputation Intelligence](https://docs.imperva.com/bundle/ip-reputation/page/reputation-intelligence.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IPDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip': 'str',
        'origin': 'IPGeoData',
        'asn': 'AsnData',
        'known_to_use': 'str',
        'known_for': 'str',
        'risk_score': 'RiskData',
        'requests': 'str',
        'violations_over_time': 'dict(str, dict(str, str))',
        'violations': 'dict(str, str)',
        'client_application': 'dict(str, str)',
        'client_application_details': 'dict(str, dict(str, str))',
        'attacks_by_industries': 'dict(str, str)'
    }

    attribute_map = {
        'ip': 'ip',
        'origin': 'origin',
        'asn': 'ASN',
        'known_to_use': 'known_to_use',
        'known_for': 'known_for',
        'risk_score': 'risk_score',
        'requests': 'requests',
        'violations_over_time': 'violations_over_time',
        'violations': 'violations',
        'client_application': 'client_application',
        'client_application_details': 'client_application_details',
        'attacks_by_industries': 'attacks_by_industries'
    }

    def __init__(self, ip=None, origin=None, asn=None, known_to_use=None, known_for=None, risk_score=None, requests=None, violations_over_time=None, violations=None, client_application=None, client_application_details=None, attacks_by_industries=None):  # noqa: E501
        """IPDataApi - a model defined in Swagger"""  # noqa: E501
        self._ip = None
        self._origin = None
        self._asn = None
        self._known_to_use = None
        self._known_for = None
        self._risk_score = None
        self._requests = None
        self._violations_over_time = None
        self._violations = None
        self._client_application = None
        self._client_application_details = None
        self._attacks_by_industries = None
        self.discriminator = None
        if ip is not None:
            self.ip = ip
        if origin is not None:
            self.origin = origin
        if asn is not None:
            self.asn = asn
        if known_to_use is not None:
            self.known_to_use = known_to_use
        if known_for is not None:
            self.known_for = known_for
        if risk_score is not None:
            self.risk_score = risk_score
        if requests is not None:
            self.requests = requests
        if violations_over_time is not None:
            self.violations_over_time = violations_over_time
        if violations is not None:
            self.violations = violations
        if client_application is not None:
            self.client_application = client_application
        if client_application_details is not None:
            self.client_application_details = client_application_details
        if attacks_by_industries is not None:
            self.attacks_by_industries = attacks_by_industries

    @property
    def ip(self):
        """Gets the ip of this IPDataApi.  # noqa: E501

        The IP address for which reputation intelligence data is presented.  # noqa: E501

        :return: The ip of this IPDataApi.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IPDataApi.

        The IP address for which reputation intelligence data is presented.  # noqa: E501

        :param ip: The ip of this IPDataApi.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def origin(self):
        """Gets the origin of this IPDataApi.  # noqa: E501


        :return: The origin of this IPDataApi.  # noqa: E501
        :rtype: IPGeoData
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this IPDataApi.


        :param origin: The origin of this IPDataApi.  # noqa: E501
        :type: IPGeoData
        """

        self._origin = origin

    @property
    def asn(self):
        """Gets the asn of this IPDataApi.  # noqa: E501


        :return: The asn of this IPDataApi.  # noqa: E501
        :rtype: AsnData
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this IPDataApi.


        :param asn: The asn of this IPDataApi.  # noqa: E501
        :type: AsnData
        """

        self._asn = asn

    @property
    def known_to_use(self):
        """Gets the known_to_use of this IPDataApi.  # noqa: E501

        The tools or mechanisms used to carry out the attacks, such as Tor, automated browser, or anonymous proxy.  # noqa: E501

        :return: The known_to_use of this IPDataApi.  # noqa: E501
        :rtype: str
        """
        return self._known_to_use

    @known_to_use.setter
    def known_to_use(self, known_to_use):
        """Sets the known_to_use of this IPDataApi.

        The tools or mechanisms used to carry out the attacks, such as Tor, automated browser, or anonymous proxy.  # noqa: E501

        :param known_to_use: The known_to_use of this IPDataApi.  # noqa: E501
        :type: str
        """

        self._known_to_use = known_to_use

    @property
    def known_for(self):
        """Gets the known_for of this IPDataApi.  # noqa: E501

        The attack type, such as DDoS or account takeover.  # noqa: E501

        :return: The known_for of this IPDataApi.  # noqa: E501
        :rtype: str
        """
        return self._known_for

    @known_for.setter
    def known_for(self, known_for):
        """Sets the known_for of this IPDataApi.

        The attack type, such as DDoS or account takeover.  # noqa: E501

        :param known_for: The known_for of this IPDataApi.  # noqa: E501
        :type: str
        """

        self._known_for = known_for

    @property
    def risk_score(self):
        """Gets the risk_score of this IPDataApi.  # noqa: E501


        :return: The risk_score of this IPDataApi.  # noqa: E501
        :rtype: RiskData
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this IPDataApi.


        :param risk_score: The risk_score of this IPDataApi.  # noqa: E501
        :type: RiskData
        """

        self._risk_score = risk_score

    @property
    def requests(self):
        """Gets the requests of this IPDataApi.  # noqa: E501

        The number of requests sent from this IP to Imperva customers during the 2 week time frame covered in this report.  # noqa: E501

        :return: The requests of this IPDataApi.  # noqa: E501
        :rtype: str
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this IPDataApi.

        The number of requests sent from this IP to Imperva customers during the 2 week time frame covered in this report.  # noqa: E501

        :param requests: The requests of this IPDataApi.  # noqa: E501
        :type: str
        """

        self._requests = requests

    @property
    def violations_over_time(self):
        """Gets the violations_over_time of this IPDataApi.  # noqa: E501

        Hits per attack type at the specified time stamp.  # noqa: E501

        :return: The violations_over_time of this IPDataApi.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._violations_over_time

    @violations_over_time.setter
    def violations_over_time(self, violations_over_time):
        """Sets the violations_over_time of this IPDataApi.

        Hits per attack type at the specified time stamp.  # noqa: E501

        :param violations_over_time: The violations_over_time of this IPDataApi.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._violations_over_time = violations_over_time

    @property
    def violations(self):
        """Gets the violations of this IPDataApi.  # noqa: E501

        Attack type distribution.  # noqa: E501

        :return: The violations of this IPDataApi.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this IPDataApi.

        Attack type distribution.  # noqa: E501

        :param violations: The violations of this IPDataApi.  # noqa: E501
        :type: dict(str, str)
        """

        self._violations = violations

    @property
    def client_application(self):
        """Gets the client_application of this IPDataApi.  # noqa: E501

        Client application distribution.  # noqa: E501

        :return: The client_application of this IPDataApi.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._client_application

    @client_application.setter
    def client_application(self, client_application):
        """Sets the client_application of this IPDataApi.

        Client application distribution.  # noqa: E501

        :param client_application: The client_application of this IPDataApi.  # noqa: E501
        :type: dict(str, str)
        """

        self._client_application = client_application

    @property
    def client_application_details(self):
        """Gets the client_application_details of this IPDataApi.  # noqa: E501

        Details of the client applications used to attack.  # noqa: E501

        :return: The client_application_details of this IPDataApi.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._client_application_details

    @client_application_details.setter
    def client_application_details(self, client_application_details):
        """Sets the client_application_details of this IPDataApi.

        Details of the client applications used to attack.  # noqa: E501

        :param client_application_details: The client_application_details of this IPDataApi.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._client_application_details = client_application_details

    @property
    def attacks_by_industries(self):
        """Gets the attacks_by_industries of this IPDataApi.  # noqa: E501

        Distribution of the industries associated with the attacked sites.  # noqa: E501

        :return: The attacks_by_industries of this IPDataApi.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attacks_by_industries

    @attacks_by_industries.setter
    def attacks_by_industries(self, attacks_by_industries):
        """Sets the attacks_by_industries of this IPDataApi.

        Distribution of the industries associated with the attacked sites.  # noqa: E501

        :param attacks_by_industries: The attacks_by_industries of this IPDataApi.  # noqa: E501
        :type: dict(str, str)
        """

        self._attacks_by_industries = attacks_by_industries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPDataApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPDataApi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
