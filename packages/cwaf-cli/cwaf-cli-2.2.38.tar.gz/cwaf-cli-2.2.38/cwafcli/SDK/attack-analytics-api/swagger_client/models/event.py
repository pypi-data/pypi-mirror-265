# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_id': 'int',
        'method': 'str',
        'host': 'str',
        'query_string': 'str',
        'url_path': 'str',
        'response_code': 'str',
        'session_id': 'str',
        'main_client_ip': 'str',
        'country_code': 'list[str]',
        'client_application': 'str',
        'declared_client_application': 'str',
        'destination_ip': 'str',
        'referrer': 'str',
        'is_event_blocked': 'bool',
        'violations': 'list[Violation]',
        'headers': 'list[KeyValueStringString]',
        'cookies': 'list[Cookie]',
        'reporter': 'str',
        'creation_time': 'str'
    }

    attribute_map = {
        'event_id': 'event_id',
        'method': 'method',
        'host': 'host',
        'query_string': 'query_string',
        'url_path': 'url_path',
        'response_code': 'response_code',
        'session_id': 'session_id',
        'main_client_ip': 'main_client_ip',
        'country_code': 'country_code',
        'client_application': 'client_application',
        'declared_client_application': 'declared_client_application',
        'destination_ip': 'destination_ip',
        'referrer': 'referrer',
        'is_event_blocked': 'is_event_blocked',
        'violations': 'violations',
        'headers': 'headers',
        'cookies': 'cookies',
        'reporter': 'reporter',
        'creation_time': 'creation_time'
    }

    def __init__(self, event_id=None, method=None, host=None, query_string=None, url_path=None, response_code=None, session_id=None, main_client_ip=None, country_code=None, client_application=None, declared_client_application=None, destination_ip=None, referrer=None, is_event_blocked=None, violations=None, headers=None, cookies=None, reporter=None, creation_time=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._event_id = None
        self._method = None
        self._host = None
        self._query_string = None
        self._url_path = None
        self._response_code = None
        self._session_id = None
        self._main_client_ip = None
        self._country_code = None
        self._client_application = None
        self._declared_client_application = None
        self._destination_ip = None
        self._referrer = None
        self._is_event_blocked = None
        self._violations = None
        self._headers = None
        self._cookies = None
        self._reporter = None
        self._creation_time = None
        self.discriminator = None
        if event_id is not None:
            self.event_id = event_id
        if method is not None:
            self.method = method
        if host is not None:
            self.host = host
        if query_string is not None:
            self.query_string = query_string
        if url_path is not None:
            self.url_path = url_path
        if response_code is not None:
            self.response_code = response_code
        if session_id is not None:
            self.session_id = session_id
        if main_client_ip is not None:
            self.main_client_ip = main_client_ip
        if country_code is not None:
            self.country_code = country_code
        if client_application is not None:
            self.client_application = client_application
        if declared_client_application is not None:
            self.declared_client_application = declared_client_application
        if destination_ip is not None:
            self.destination_ip = destination_ip
        if referrer is not None:
            self.referrer = referrer
        if is_event_blocked is not None:
            self.is_event_blocked = is_event_blocked
        if violations is not None:
            self.violations = violations
        if headers is not None:
            self.headers = headers
        if cookies is not None:
            self.cookies = cookies
        if reporter is not None:
            self.reporter = reporter
        if creation_time is not None:
            self.creation_time = creation_time

    @property
    def event_id(self):
        """Gets the event_id of this Event.  # noqa: E501

        Id of the event  # noqa: E501

        :return: The event_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Event.

        Id of the event  # noqa: E501

        :param event_id: The event_id of this Event.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def method(self):
        """Gets the method of this Event.  # noqa: E501

        HTTP method that this request was sent with  # noqa: E501

        :return: The method of this Event.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Event.

        HTTP method that this request was sent with  # noqa: E501

        :param method: The method of this Event.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def host(self):
        """Gets the host of this Event.  # noqa: E501

        The host that this request was sent to  # noqa: E501

        :return: The host of this Event.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Event.

        The host that this request was sent to  # noqa: E501

        :param host: The host of this Event.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def query_string(self):
        """Gets the query_string of this Event.  # noqa: E501

        Query string arguments that were sent with this request  # noqa: E501

        :return: The query_string of this Event.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this Event.

        Query string arguments that were sent with this request  # noqa: E501

        :param query_string: The query_string of this Event.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def url_path(self):
        """Gets the url_path of this Event.  # noqa: E501

        Path that this request accessed  # noqa: E501

        :return: The url_path of this Event.  # noqa: E501
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this Event.

        Path that this request accessed  # noqa: E501

        :param url_path: The url_path of this Event.  # noqa: E501
        :type: str
        """

        self._url_path = url_path

    @property
    def response_code(self):
        """Gets the response_code of this Event.  # noqa: E501

        HTTP response code of this request  # noqa: E501

        :return: The response_code of this Event.  # noqa: E501
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this Event.

        HTTP response code of this request  # noqa: E501

        :param response_code: The response_code of this Event.  # noqa: E501
        :type: str
        """

        self._response_code = response_code

    @property
    def session_id(self):
        """Gets the session_id of this Event.  # noqa: E501

        Id of request session  # noqa: E501

        :return: The session_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Event.

        Id of request session  # noqa: E501

        :param session_id: The session_id of this Event.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def main_client_ip(self):
        """Gets the main_client_ip of this Event.  # noqa: E501

        IP address that was identified as request source  # noqa: E501

        :return: The main_client_ip of this Event.  # noqa: E501
        :rtype: str
        """
        return self._main_client_ip

    @main_client_ip.setter
    def main_client_ip(self, main_client_ip):
        """Sets the main_client_ip of this Event.

        IP address that was identified as request source  # noqa: E501

        :param main_client_ip: The main_client_ip of this Event.  # noqa: E501
        :type: str
        """

        self._main_client_ip = main_client_ip

    @property
    def country_code(self):
        """Gets the country_code of this Event.  # noqa: E501

        Two digit country code that this request was sent from  # noqa: E501

        :return: The country_code of this Event.  # noqa: E501
        :rtype: list[str]
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Event.

        Two digit country code that this request was sent from  # noqa: E501

        :param country_code: The country_code of this Event.  # noqa: E501
        :type: list[str]
        """

        self._country_code = country_code

    @property
    def client_application(self):
        """Gets the client_application of this Event.  # noqa: E501

        Application that was identified by Imperva as the sender  # noqa: E501

        :return: The client_application of this Event.  # noqa: E501
        :rtype: str
        """
        return self._client_application

    @client_application.setter
    def client_application(self, client_application):
        """Sets the client_application of this Event.

        Application that was identified by Imperva as the sender  # noqa: E501

        :param client_application: The client_application of this Event.  # noqa: E501
        :type: str
        """

        self._client_application = client_application

    @property
    def declared_client_application(self):
        """Gets the declared_client_application of this Event.  # noqa: E501

        Application that was declared as the sender  # noqa: E501

        :return: The declared_client_application of this Event.  # noqa: E501
        :rtype: str
        """
        return self._declared_client_application

    @declared_client_application.setter
    def declared_client_application(self, declared_client_application):
        """Sets the declared_client_application of this Event.

        Application that was declared as the sender  # noqa: E501

        :param declared_client_application: The declared_client_application of this Event.  # noqa: E501
        :type: str
        """

        self._declared_client_application = declared_client_application

    @property
    def destination_ip(self):
        """Gets the destination_ip of this Event.  # noqa: E501

        IP address that event was sent to  # noqa: E501

        :return: The destination_ip of this Event.  # noqa: E501
        :rtype: str
        """
        return self._destination_ip

    @destination_ip.setter
    def destination_ip(self, destination_ip):
        """Sets the destination_ip of this Event.

        IP address that event was sent to  # noqa: E501

        :param destination_ip: The destination_ip of this Event.  # noqa: E501
        :type: str
        """

        self._destination_ip = destination_ip

    @property
    def referrer(self):
        """Gets the referrer of this Event.  # noqa: E501

        The address of the webpage (i.e. the URI or IRI) that linked to the resource being requested  # noqa: E501

        :return: The referrer of this Event.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this Event.

        The address of the webpage (i.e. the URI or IRI) that linked to the resource being requested  # noqa: E501

        :param referrer: The referrer of this Event.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def is_event_blocked(self):
        """Gets the is_event_blocked of this Event.  # noqa: E501

        Whether or not this event was blocked by Imperva WAF  # noqa: E501

        :return: The is_event_blocked of this Event.  # noqa: E501
        :rtype: bool
        """
        return self._is_event_blocked

    @is_event_blocked.setter
    def is_event_blocked(self, is_event_blocked):
        """Sets the is_event_blocked of this Event.

        Whether or not this event was blocked by Imperva WAF  # noqa: E501

        :param is_event_blocked: The is_event_blocked of this Event.  # noqa: E501
        :type: bool
        """

        self._is_event_blocked = is_event_blocked

    @property
    def violations(self):
        """Gets the violations of this Event.  # noqa: E501

        The violations that this request was associated with  # noqa: E501

        :return: The violations of this Event.  # noqa: E501
        :rtype: list[Violation]
        """
        return self._violations

    @violations.setter
    def violations(self, violations):
        """Sets the violations of this Event.

        The violations that this request was associated with  # noqa: E501

        :param violations: The violations of this Event.  # noqa: E501
        :type: list[Violation]
        """

        self._violations = violations

    @property
    def headers(self):
        """Gets the headers of this Event.  # noqa: E501

        List of http headers in this request  # noqa: E501

        :return: The headers of this Event.  # noqa: E501
        :rtype: list[KeyValueStringString]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Event.

        List of http headers in this request  # noqa: E501

        :param headers: The headers of this Event.  # noqa: E501
        :type: list[KeyValueStringString]
        """

        self._headers = headers

    @property
    def cookies(self):
        """Gets the cookies of this Event.  # noqa: E501

        Cookies passed in the request  # noqa: E501

        :return: The cookies of this Event.  # noqa: E501
        :rtype: list[Cookie]
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this Event.

        Cookies passed in the request  # noqa: E501

        :param cookies: The cookies of this Event.  # noqa: E501
        :type: list[Cookie]
        """

        self._cookies = cookies

    @property
    def reporter(self):
        """Gets the reporter of this Event.  # noqa: E501

        Imperva WAF system that reported this request. Can be either 'Cloud WAF' or 'On-Premise WAF'  # noqa: E501

        :return: The reporter of this Event.  # noqa: E501
        :rtype: str
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter):
        """Sets the reporter of this Event.

        Imperva WAF system that reported this request. Can be either 'Cloud WAF' or 'On-Premise WAF'  # noqa: E501

        :param reporter: The reporter of this Event.  # noqa: E501
        :type: str
        """

        self._reporter = reporter

    @property
    def creation_time(self):
        """Gets the creation_time of this Event.  # noqa: E501

        Time when this event occurred, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :return: The creation_time of this Event.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Event.

        Time when this event occurred, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :param creation_time: The creation_time of this Event.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
