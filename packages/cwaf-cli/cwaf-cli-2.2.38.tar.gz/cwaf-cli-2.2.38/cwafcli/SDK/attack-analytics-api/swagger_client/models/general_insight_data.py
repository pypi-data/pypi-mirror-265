# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneralInsightData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attacked_site_info': 'AttackedSiteInfo',
        'status': 'str',
        'snoozed_until': 'int'
    }

    attribute_map = {
        'attacked_site_info': 'attacked_site_info',
        'status': 'status',
        'snoozed_until': 'snoozedUntil'
    }

    def __init__(self, attacked_site_info=None, status=None, snoozed_until=None):  # noqa: E501
        """GeneralInsightData - a model defined in Swagger"""  # noqa: E501
        self._attacked_site_info = None
        self._status = None
        self._snoozed_until = None
        self.discriminator = None
        if attacked_site_info is not None:
            self.attacked_site_info = attacked_site_info
        if status is not None:
            self.status = status
        if snoozed_until is not None:
            self.snoozed_until = snoozed_until

    @property
    def attacked_site_info(self):
        """Gets the attacked_site_info of this GeneralInsightData.  # noqa: E501


        :return: The attacked_site_info of this GeneralInsightData.  # noqa: E501
        :rtype: AttackedSiteInfo
        """
        return self._attacked_site_info

    @attacked_site_info.setter
    def attacked_site_info(self, attacked_site_info):
        """Sets the attacked_site_info of this GeneralInsightData.


        :param attacked_site_info: The attacked_site_info of this GeneralInsightData.  # noqa: E501
        :type: AttackedSiteInfo
        """

        self._attacked_site_info = attacked_site_info

    @property
    def status(self):
        """Gets the status of this GeneralInsightData.  # noqa: E501

        insight status  # noqa: E501

        :return: The status of this GeneralInsightData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GeneralInsightData.

        insight status  # noqa: E501

        :param status: The status of this GeneralInsightData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def snoozed_until(self):
        """Gets the snoozed_until of this GeneralInsightData.  # noqa: E501

        Snooze expiration time, specified as number of milliseconds since midnight 1970 (UNIX time * 1000). 0 means that the insight is active  # noqa: E501

        :return: The snoozed_until of this GeneralInsightData.  # noqa: E501
        :rtype: int
        """
        return self._snoozed_until

    @snoozed_until.setter
    def snoozed_until(self, snoozed_until):
        """Sets the snoozed_until of this GeneralInsightData.

        Snooze expiration time, specified as number of milliseconds since midnight 1970 (UNIX time * 1000). 0 means that the insight is active  # noqa: E501

        :param snoozed_until: The snoozed_until of this GeneralInsightData.  # noqa: E501
        :type: int
        """

        self._snoozed_until = snoozed_until

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralInsightData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralInsightData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
