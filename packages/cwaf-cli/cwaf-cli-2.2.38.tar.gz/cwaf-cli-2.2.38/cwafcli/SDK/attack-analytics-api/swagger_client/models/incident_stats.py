# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IncidentStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'events_count': 'int',
        'blocked_events_timeseries': 'list[KeyValueLongInteger]',
        'alerted_events_timeseries': 'list[KeyValueLongInteger]',
        'attack_ips': 'list[KeyValueIpObjectLong]',
        'attack_agents': 'list[KeyValueStringLong]',
        'attack_tools': 'list[KeyValueStringLong]',
        'attack_tool_types': 'list[KeyValueStringLong]',
        'violations_blocked': 'list[KeyValueStringLong]',
        'violations_alerted': 'list[KeyValueStringLong]',
        'attack_urls': 'list[KeyValueStringLong]',
        'attacked_hosts': 'list[KeyValueStringLong]',
        'attack_class_c': 'list[KeyValueStringLong]',
        'attack_geolocations': 'list[KeyValueStringLong]',
        'waf_origins_of_alerts': 'list[SiteViolation]',
        'waf_origins_of_blocks': 'list[SiteViolation]',
        'waf_origins_entities': 'list[Site]',
        'rules_list': 'list[KeyValueStringLong]',
        'associated_cve': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'events_count': 'events_count',
        'blocked_events_timeseries': 'blocked_events_timeseries',
        'alerted_events_timeseries': 'alerted_events_timeseries',
        'attack_ips': 'attack_ips',
        'attack_agents': 'attack_agents',
        'attack_tools': 'attack_tools',
        'attack_tool_types': 'attack_tool_types',
        'violations_blocked': 'violations_blocked',
        'violations_alerted': 'violations_alerted',
        'attack_urls': 'attack_urls',
        'attacked_hosts': 'attacked_hosts',
        'attack_class_c': 'attack_class_c',
        'attack_geolocations': 'attack_geolocations',
        'waf_origins_of_alerts': 'waf_origins_of_alerts',
        'waf_origins_of_blocks': 'waf_origins_of_blocks',
        'waf_origins_entities': 'waf_origins_entities',
        'rules_list': 'rules_list',
        'associated_cve': 'associated_cve'
    }

    def __init__(self, id=None, events_count=None, blocked_events_timeseries=None, alerted_events_timeseries=None, attack_ips=None, attack_agents=None, attack_tools=None, attack_tool_types=None, violations_blocked=None, violations_alerted=None, attack_urls=None, attacked_hosts=None, attack_class_c=None, attack_geolocations=None, waf_origins_of_alerts=None, waf_origins_of_blocks=None, waf_origins_entities=None, rules_list=None, associated_cve=None):  # noqa: E501
        """IncidentStats - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._events_count = None
        self._blocked_events_timeseries = None
        self._alerted_events_timeseries = None
        self._attack_ips = None
        self._attack_agents = None
        self._attack_tools = None
        self._attack_tool_types = None
        self._violations_blocked = None
        self._violations_alerted = None
        self._attack_urls = None
        self._attacked_hosts = None
        self._attack_class_c = None
        self._attack_geolocations = None
        self._waf_origins_of_alerts = None
        self._waf_origins_of_blocks = None
        self._waf_origins_entities = None
        self._rules_list = None
        self._associated_cve = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if events_count is not None:
            self.events_count = events_count
        if blocked_events_timeseries is not None:
            self.blocked_events_timeseries = blocked_events_timeseries
        if alerted_events_timeseries is not None:
            self.alerted_events_timeseries = alerted_events_timeseries
        if attack_ips is not None:
            self.attack_ips = attack_ips
        if attack_agents is not None:
            self.attack_agents = attack_agents
        if attack_tools is not None:
            self.attack_tools = attack_tools
        if attack_tool_types is not None:
            self.attack_tool_types = attack_tool_types
        if violations_blocked is not None:
            self.violations_blocked = violations_blocked
        if violations_alerted is not None:
            self.violations_alerted = violations_alerted
        if attack_urls is not None:
            self.attack_urls = attack_urls
        if attacked_hosts is not None:
            self.attacked_hosts = attacked_hosts
        if attack_class_c is not None:
            self.attack_class_c = attack_class_c
        if attack_geolocations is not None:
            self.attack_geolocations = attack_geolocations
        if waf_origins_of_alerts is not None:
            self.waf_origins_of_alerts = waf_origins_of_alerts
        if waf_origins_of_blocks is not None:
            self.waf_origins_of_blocks = waf_origins_of_blocks
        if waf_origins_entities is not None:
            self.waf_origins_entities = waf_origins_entities
        if rules_list is not None:
            self.rules_list = rules_list
        if associated_cve is not None:
            self.associated_cve = associated_cve

    @property
    def id(self):
        """Gets the id of this IncidentStats.  # noqa: E501

        Unique incident identifier  # noqa: E501

        :return: The id of this IncidentStats.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IncidentStats.

        Unique incident identifier  # noqa: E501

        :param id: The id of this IncidentStats.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def events_count(self):
        """Gets the events_count of this IncidentStats.  # noqa: E501

        Number of http events participated in the attack  # noqa: E501

        :return: The events_count of this IncidentStats.  # noqa: E501
        :rtype: int
        """
        return self._events_count

    @events_count.setter
    def events_count(self, events_count):
        """Sets the events_count of this IncidentStats.

        Number of http events participated in the attack  # noqa: E501

        :param events_count: The events_count of this IncidentStats.  # noqa: E501
        :type: int
        """

        self._events_count = events_count

    @property
    def blocked_events_timeseries(self):
        """Gets the blocked_events_timeseries of this IncidentStats.  # noqa: E501

        Timeseries of blocked event counts  # noqa: E501

        :return: The blocked_events_timeseries of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueLongInteger]
        """
        return self._blocked_events_timeseries

    @blocked_events_timeseries.setter
    def blocked_events_timeseries(self, blocked_events_timeseries):
        """Sets the blocked_events_timeseries of this IncidentStats.

        Timeseries of blocked event counts  # noqa: E501

        :param blocked_events_timeseries: The blocked_events_timeseries of this IncidentStats.  # noqa: E501
        :type: list[KeyValueLongInteger]
        """

        self._blocked_events_timeseries = blocked_events_timeseries

    @property
    def alerted_events_timeseries(self):
        """Gets the alerted_events_timeseries of this IncidentStats.  # noqa: E501

        Timeseries of alerted event counts  # noqa: E501

        :return: The alerted_events_timeseries of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueLongInteger]
        """
        return self._alerted_events_timeseries

    @alerted_events_timeseries.setter
    def alerted_events_timeseries(self, alerted_events_timeseries):
        """Sets the alerted_events_timeseries of this IncidentStats.

        Timeseries of alerted event counts  # noqa: E501

        :param alerted_events_timeseries: The alerted_events_timeseries of this IncidentStats.  # noqa: E501
        :type: list[KeyValueLongInteger]
        """

        self._alerted_events_timeseries = alerted_events_timeseries

    @property
    def attack_ips(self):
        """Gets the attack_ips of this IncidentStats.  # noqa: E501

        List of IP addresses that participated in the attack  # noqa: E501

        :return: The attack_ips of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueIpObjectLong]
        """
        return self._attack_ips

    @attack_ips.setter
    def attack_ips(self, attack_ips):
        """Sets the attack_ips of this IncidentStats.

        List of IP addresses that participated in the attack  # noqa: E501

        :param attack_ips: The attack_ips of this IncidentStats.  # noqa: E501
        :type: list[KeyValueIpObjectLong]
        """

        self._attack_ips = attack_ips

    @property
    def attack_agents(self):
        """Gets the attack_agents of this IncidentStats.  # noqa: E501

        List of user-agents that participated in the attack  # noqa: E501

        :return: The attack_agents of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_agents

    @attack_agents.setter
    def attack_agents(self, attack_agents):
        """Sets the attack_agents of this IncidentStats.

        List of user-agents that participated in the attack  # noqa: E501

        :param attack_agents: The attack_agents of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_agents = attack_agents

    @property
    def attack_tools(self):
        """Gets the attack_tools of this IncidentStats.  # noqa: E501

        List of tools that were used in the attack  # noqa: E501

        :return: The attack_tools of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_tools

    @attack_tools.setter
    def attack_tools(self, attack_tools):
        """Sets the attack_tools of this IncidentStats.

        List of tools that were used in the attack  # noqa: E501

        :param attack_tools: The attack_tools of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_tools = attack_tools

    @property
    def attack_tool_types(self):
        """Gets the attack_tool_types of this IncidentStats.  # noqa: E501

        List of tool types that were used in the attack  # noqa: E501

        :return: The attack_tool_types of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_tool_types

    @attack_tool_types.setter
    def attack_tool_types(self, attack_tool_types):
        """Sets the attack_tool_types of this IncidentStats.

        List of tool types that were used in the attack  # noqa: E501

        :param attack_tool_types: The attack_tool_types of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_tool_types = attack_tool_types

    @property
    def violations_blocked(self):
        """Gets the violations_blocked of this IncidentStats.  # noqa: E501

        A list of blocked violations that were identified in the incident  # noqa: E501

        :return: The violations_blocked of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._violations_blocked

    @violations_blocked.setter
    def violations_blocked(self, violations_blocked):
        """Sets the violations_blocked of this IncidentStats.

        A list of blocked violations that were identified in the incident  # noqa: E501

        :param violations_blocked: The violations_blocked of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._violations_blocked = violations_blocked

    @property
    def violations_alerted(self):
        """Gets the violations_alerted of this IncidentStats.  # noqa: E501

        A list of alerted violations that were identified in the incident  # noqa: E501

        :return: The violations_alerted of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._violations_alerted

    @violations_alerted.setter
    def violations_alerted(self, violations_alerted):
        """Sets the violations_alerted of this IncidentStats.

        A list of alerted violations that were identified in the incident  # noqa: E501

        :param violations_alerted: The violations_alerted of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._violations_alerted = violations_alerted

    @property
    def attack_urls(self):
        """Gets the attack_urls of this IncidentStats.  # noqa: E501

        List of URLs that were attacked during this incident  # noqa: E501

        :return: The attack_urls of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_urls

    @attack_urls.setter
    def attack_urls(self, attack_urls):
        """Sets the attack_urls of this IncidentStats.

        List of URLs that were attacked during this incident  # noqa: E501

        :param attack_urls: The attack_urls of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_urls = attack_urls

    @property
    def attacked_hosts(self):
        """Gets the attacked_hosts of this IncidentStats.  # noqa: E501

        List of hosts that were attacked during this incident  # noqa: E501

        :return: The attacked_hosts of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attacked_hosts

    @attacked_hosts.setter
    def attacked_hosts(self, attacked_hosts):
        """Sets the attacked_hosts of this IncidentStats.

        List of hosts that were attacked during this incident  # noqa: E501

        :param attacked_hosts: The attacked_hosts of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attacked_hosts = attacked_hosts

    @property
    def attack_class_c(self):
        """Gets the attack_class_c of this IncidentStats.  # noqa: E501

        List of Class C subnets that participated in the attack  # noqa: E501

        :return: The attack_class_c of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_class_c

    @attack_class_c.setter
    def attack_class_c(self, attack_class_c):
        """Sets the attack_class_c of this IncidentStats.

        List of Class C subnets that participated in the attack  # noqa: E501

        :param attack_class_c: The attack_class_c of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_class_c = attack_class_c

    @property
    def attack_geolocations(self):
        """Gets the attack_geolocations of this IncidentStats.  # noqa: E501

        List of geographical areas that events came from  # noqa: E501

        :return: The attack_geolocations of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._attack_geolocations

    @attack_geolocations.setter
    def attack_geolocations(self, attack_geolocations):
        """Sets the attack_geolocations of this IncidentStats.

        List of geographical areas that events came from  # noqa: E501

        :param attack_geolocations: The attack_geolocations of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._attack_geolocations = attack_geolocations

    @property
    def waf_origins_of_alerts(self):
        """Gets the waf_origins_of_alerts of this IncidentStats.  # noqa: E501

        List of WAF servers that alerted events  # noqa: E501

        :return: The waf_origins_of_alerts of this IncidentStats.  # noqa: E501
        :rtype: list[SiteViolation]
        """
        return self._waf_origins_of_alerts

    @waf_origins_of_alerts.setter
    def waf_origins_of_alerts(self, waf_origins_of_alerts):
        """Sets the waf_origins_of_alerts of this IncidentStats.

        List of WAF servers that alerted events  # noqa: E501

        :param waf_origins_of_alerts: The waf_origins_of_alerts of this IncidentStats.  # noqa: E501
        :type: list[SiteViolation]
        """

        self._waf_origins_of_alerts = waf_origins_of_alerts

    @property
    def waf_origins_of_blocks(self):
        """Gets the waf_origins_of_blocks of this IncidentStats.  # noqa: E501

        List of WAF servers that blocked events  # noqa: E501

        :return: The waf_origins_of_blocks of this IncidentStats.  # noqa: E501
        :rtype: list[SiteViolation]
        """
        return self._waf_origins_of_blocks

    @waf_origins_of_blocks.setter
    def waf_origins_of_blocks(self, waf_origins_of_blocks):
        """Sets the waf_origins_of_blocks of this IncidentStats.

        List of WAF servers that blocked events  # noqa: E501

        :param waf_origins_of_blocks: The waf_origins_of_blocks of this IncidentStats.  # noqa: E501
        :type: list[SiteViolation]
        """

        self._waf_origins_of_blocks = waf_origins_of_blocks

    @property
    def waf_origins_entities(self):
        """Gets the waf_origins_entities of this IncidentStats.  # noqa: E501

        List of WAF servers that events came through  # noqa: E501

        :return: The waf_origins_entities of this IncidentStats.  # noqa: E501
        :rtype: list[Site]
        """
        return self._waf_origins_entities

    @waf_origins_entities.setter
    def waf_origins_entities(self, waf_origins_entities):
        """Sets the waf_origins_entities of this IncidentStats.

        List of WAF servers that events came through  # noqa: E501

        :param waf_origins_entities: The waf_origins_entities of this IncidentStats.  # noqa: E501
        :type: list[Site]
        """

        self._waf_origins_entities = waf_origins_entities

    @property
    def rules_list(self):
        """Gets the rules_list of this IncidentStats.  # noqa: E501

        List of rules that triggered this incident  # noqa: E501

        :return: The rules_list of this IncidentStats.  # noqa: E501
        :rtype: list[KeyValueStringLong]
        """
        return self._rules_list

    @rules_list.setter
    def rules_list(self, rules_list):
        """Sets the rules_list of this IncidentStats.

        List of rules that triggered this incident  # noqa: E501

        :param rules_list: The rules_list of this IncidentStats.  # noqa: E501
        :type: list[KeyValueStringLong]
        """

        self._rules_list = rules_list

    @property
    def associated_cve(self):
        """Gets the associated_cve of this IncidentStats.  # noqa: E501

        List of known CVEs associated with this incident  # noqa: E501

        :return: The associated_cve of this IncidentStats.  # noqa: E501
        :rtype: list[str]
        """
        return self._associated_cve

    @associated_cve.setter
    def associated_cve(self, associated_cve):
        """Sets the associated_cve of this IncidentStats.

        List of known CVEs associated with this incident  # noqa: E501

        :param associated_cve: The associated_cve of this IncidentStats.  # noqa: E501
        :type: list[str]
        """

        self._associated_cve = associated_cve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncidentStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncidentStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
