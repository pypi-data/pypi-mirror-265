# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Violation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_description': 'str',
        'action': 'str',
        'violation_context': 'str'
    }

    attribute_map = {
        'rule_description': 'rule_description',
        'action': 'action',
        'violation_context': 'violation_context'
    }

    def __init__(self, rule_description=None, action=None, violation_context=None):  # noqa: E501
        """Violation - a model defined in Swagger"""  # noqa: E501
        self._rule_description = None
        self._action = None
        self._violation_context = None
        self.discriminator = None
        if rule_description is not None:
            self.rule_description = rule_description
        if action is not None:
            self.action = action
        if violation_context is not None:
            self.violation_context = violation_context

    @property
    def rule_description(self):
        """Gets the rule_description of this Violation.  # noqa: E501

        Violation that this rule relates to  # noqa: E501

        :return: The rule_description of this Violation.  # noqa: E501
        :rtype: str
        """
        return self._rule_description

    @rule_description.setter
    def rule_description(self, rule_description):
        """Sets the rule_description of this Violation.

        Violation that this rule relates to  # noqa: E501

        :param rule_description: The rule_description of this Violation.  # noqa: E501
        :type: str
        """

        self._rule_description = rule_description

    @property
    def action(self):
        """Gets the action of this Violation.  # noqa: E501

        The result of this rule action  # noqa: E501

        :return: The action of this Violation.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Violation.

        The result of this rule action  # noqa: E501

        :param action: The action of this Violation.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def violation_context(self):
        """Gets the violation_context of this Violation.  # noqa: E501

        Context on which the violation was applied  # noqa: E501

        :return: The violation_context of this Violation.  # noqa: E501
        :rtype: str
        """
        return self._violation_context

    @violation_context.setter
    def violation_context(self, violation_context):
        """Sets the violation_context of this Violation.

        Context on which the violation was applied  # noqa: E501

        :param violation_context: The violation_context of this Violation.  # noqa: E501
        :type: str
        """

        self._violation_context = violation_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Violation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Violation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
