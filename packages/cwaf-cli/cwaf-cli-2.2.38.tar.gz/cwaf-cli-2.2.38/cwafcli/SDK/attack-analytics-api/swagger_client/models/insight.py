# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Insight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'insight_details': 'GeneralInsightData',
        'additional_details': 'dict(str, object)'
    }

    attribute_map = {
        'type': 'type',
        'insight_details': 'insightDetails',
        'additional_details': 'additionalDetails'
    }

    def __init__(self, type=None, insight_details=None, additional_details=None):  # noqa: E501
        """Insight - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._insight_details = None
        self._additional_details = None
        self.discriminator = None
        self.type = type
        self.insight_details = insight_details
        self.additional_details = additional_details

    @property
    def type(self):
        """Gets the type of this Insight.  # noqa: E501


        :return: The type of this Insight.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Insight.


        :param type: The type of this Insight.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def insight_details(self):
        """Gets the insight_details of this Insight.  # noqa: E501


        :return: The insight_details of this Insight.  # noqa: E501
        :rtype: GeneralInsightData
        """
        return self._insight_details

    @insight_details.setter
    def insight_details(self, insight_details):
        """Sets the insight_details of this Insight.


        :param insight_details: The insight_details of this Insight.  # noqa: E501
        :type: GeneralInsightData
        """
        if insight_details is None:
            raise ValueError("Invalid value for `insight_details`, must not be `None`")  # noqa: E501

        self._insight_details = insight_details

    @property
    def additional_details(self):
        """Gets the additional_details of this Insight.  # noqa: E501


        :return: The additional_details of this Insight.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this Insight.


        :param additional_details: The additional_details of this Insight.  # noqa: E501
        :type: dict(str, object)
        """
        if additional_details is None:
            raise ValueError("Invalid value for `additional_details`, must not be `None`")  # noqa: E501

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Insight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Insight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
