# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Incident(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'main_sentence': 'str',
        'secondary_sentence': 'str',
        'false_positive': 'bool',
        'events_count': 'int',
        'events_blocked_percent': 'int',
        'first_event_time': 'int',
        'last_event_time': 'int',
        'severity': 'str',
        'severity_explanation': 'str',
        'dominant_attack_country': 'CountryDominance',
        'dominant_attack_ip': 'IpDominance',
        'dominant_attacked_host': 'ShinyObject',
        'dominant_attack_tool': 'ToolDominance',
        'dominant_attack_violation': 'str',
        'only_custom_rule_based': 'bool',
        'how_common': 'str',
        'incident_type': 'str',
        'ddos_data': 'DdosData'
    }

    attribute_map = {
        'id': 'id',
        'main_sentence': 'main_sentence',
        'secondary_sentence': 'secondary_sentence',
        'false_positive': 'false_positive',
        'events_count': 'events_count',
        'events_blocked_percent': 'events_blocked_percent',
        'first_event_time': 'first_event_time',
        'last_event_time': 'last_event_time',
        'severity': 'severity',
        'severity_explanation': 'severity_explanation',
        'dominant_attack_country': 'dominant_attack_country',
        'dominant_attack_ip': 'dominant_attack_ip',
        'dominant_attacked_host': 'dominant_attacked_host',
        'dominant_attack_tool': 'dominant_attack_tool',
        'dominant_attack_violation': 'dominant_attack_violation',
        'only_custom_rule_based': 'only_custom_rule_based',
        'how_common': 'how_common',
        'incident_type': 'incident_type',
        'ddos_data': 'ddos_data'
    }

    def __init__(self, id=None, main_sentence=None, secondary_sentence=None, false_positive=None, events_count=None, events_blocked_percent=None, first_event_time=None, last_event_time=None, severity=None, severity_explanation=None, dominant_attack_country=None, dominant_attack_ip=None, dominant_attacked_host=None, dominant_attack_tool=None, dominant_attack_violation=None, only_custom_rule_based=None, how_common=None, incident_type=None, ddos_data=None):  # noqa: E501
        """Incident - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._main_sentence = None
        self._secondary_sentence = None
        self._false_positive = None
        self._events_count = None
        self._events_blocked_percent = None
        self._first_event_time = None
        self._last_event_time = None
        self._severity = None
        self._severity_explanation = None
        self._dominant_attack_country = None
        self._dominant_attack_ip = None
        self._dominant_attacked_host = None
        self._dominant_attack_tool = None
        self._dominant_attack_violation = None
        self._only_custom_rule_based = None
        self._how_common = None
        self._incident_type = None
        self._ddos_data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if main_sentence is not None:
            self.main_sentence = main_sentence
        if secondary_sentence is not None:
            self.secondary_sentence = secondary_sentence
        if false_positive is not None:
            self.false_positive = false_positive
        if events_count is not None:
            self.events_count = events_count
        if events_blocked_percent is not None:
            self.events_blocked_percent = events_blocked_percent
        if first_event_time is not None:
            self.first_event_time = first_event_time
        if last_event_time is not None:
            self.last_event_time = last_event_time
        if severity is not None:
            self.severity = severity
        if severity_explanation is not None:
            self.severity_explanation = severity_explanation
        if dominant_attack_country is not None:
            self.dominant_attack_country = dominant_attack_country
        if dominant_attack_ip is not None:
            self.dominant_attack_ip = dominant_attack_ip
        if dominant_attacked_host is not None:
            self.dominant_attacked_host = dominant_attacked_host
        if dominant_attack_tool is not None:
            self.dominant_attack_tool = dominant_attack_tool
        if dominant_attack_violation is not None:
            self.dominant_attack_violation = dominant_attack_violation
        if only_custom_rule_based is not None:
            self.only_custom_rule_based = only_custom_rule_based
        if how_common is not None:
            self.how_common = how_common
        if incident_type is not None:
            self.incident_type = incident_type
        if ddos_data is not None:
            self.ddos_data = ddos_data

    @property
    def id(self):
        """Gets the id of this Incident.  # noqa: E501

        Unique incident identifier  # noqa: E501

        :return: The id of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Incident.

        Unique incident identifier  # noqa: E501

        :param id: The id of this Incident.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def main_sentence(self):
        """Gets the main_sentence of this Incident.  # noqa: E501

        Short description of the attack  # noqa: E501

        :return: The main_sentence of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._main_sentence

    @main_sentence.setter
    def main_sentence(self, main_sentence):
        """Sets the main_sentence of this Incident.

        Short description of the attack  # noqa: E501

        :param main_sentence: The main_sentence of this Incident.  # noqa: E501
        :type: str
        """

        self._main_sentence = main_sentence

    @property
    def secondary_sentence(self):
        """Gets the secondary_sentence of this Incident.  # noqa: E501

        Secondary sentence with more details  # noqa: E501

        :return: The secondary_sentence of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._secondary_sentence

    @secondary_sentence.setter
    def secondary_sentence(self, secondary_sentence):
        """Sets the secondary_sentence of this Incident.

        Secondary sentence with more details  # noqa: E501

        :param secondary_sentence: The secondary_sentence of this Incident.  # noqa: E501
        :type: str
        """

        self._secondary_sentence = secondary_sentence

    @property
    def false_positive(self):
        """Gets the false_positive of this Incident.  # noqa: E501

        Is incident false positive or not  # noqa: E501

        :return: The false_positive of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._false_positive

    @false_positive.setter
    def false_positive(self, false_positive):
        """Sets the false_positive of this Incident.

        Is incident false positive or not  # noqa: E501

        :param false_positive: The false_positive of this Incident.  # noqa: E501
        :type: bool
        """

        self._false_positive = false_positive

    @property
    def events_count(self):
        """Gets the events_count of this Incident.  # noqa: E501

        The number of HTTP events that participated in the attack  # noqa: E501

        :return: The events_count of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._events_count

    @events_count.setter
    def events_count(self, events_count):
        """Sets the events_count of this Incident.

        The number of HTTP events that participated in the attack  # noqa: E501

        :param events_count: The events_count of this Incident.  # noqa: E501
        :type: int
        """

        self._events_count = events_count

    @property
    def events_blocked_percent(self):
        """Gets the events_blocked_percent of this Incident.  # noqa: E501

        Percentage of http events that were blocked by Imperva  # noqa: E501

        :return: The events_blocked_percent of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._events_blocked_percent

    @events_blocked_percent.setter
    def events_blocked_percent(self, events_blocked_percent):
        """Sets the events_blocked_percent of this Incident.

        Percentage of http events that were blocked by Imperva  # noqa: E501

        :param events_blocked_percent: The events_blocked_percent of this Incident.  # noqa: E501
        :type: int
        """

        self._events_blocked_percent = events_blocked_percent

    @property
    def first_event_time(self):
        """Gets the first_event_time of this Incident.  # noqa: E501

        Timestamp (in milliseconds) of first event in the attack, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :return: The first_event_time of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._first_event_time

    @first_event_time.setter
    def first_event_time(self, first_event_time):
        """Sets the first_event_time of this Incident.

        Timestamp (in milliseconds) of first event in the attack, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :param first_event_time: The first_event_time of this Incident.  # noqa: E501
        :type: int
        """

        self._first_event_time = first_event_time

    @property
    def last_event_time(self):
        """Gets the last_event_time of this Incident.  # noqa: E501

        Timestamp (in milliseconds) of last event in the attack, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :return: The last_event_time of this Incident.  # noqa: E501
        :rtype: int
        """
        return self._last_event_time

    @last_event_time.setter
    def last_event_time(self, last_event_time):
        """Sets the last_event_time of this Incident.

        Timestamp (in milliseconds) of last event in the attack, specified as number of milliseconds since midnight 1970 (UNIX time * 1000)  # noqa: E501

        :param last_event_time: The last_event_time of this Incident.  # noqa: E501
        :type: int
        """

        self._last_event_time = last_event_time

    @property
    def severity(self):
        """Gets the severity of this Incident.  # noqa: E501

        Attack severity as set by the system. Possible values: CRITICAL, MAJOR, MINOR, CUSTOM  # noqa: E501

        :return: The severity of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Incident.

        Attack severity as set by the system. Possible values: CRITICAL, MAJOR, MINOR, CUSTOM  # noqa: E501

        :param severity: The severity of this Incident.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def severity_explanation(self):
        """Gets the severity_explanation of this Incident.  # noqa: E501

        Explanation on why attack receive its severity  # noqa: E501

        :return: The severity_explanation of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._severity_explanation

    @severity_explanation.setter
    def severity_explanation(self, severity_explanation):
        """Sets the severity_explanation of this Incident.

        Explanation on why attack receive its severity  # noqa: E501

        :param severity_explanation: The severity_explanation of this Incident.  # noqa: E501
        :type: str
        """

        self._severity_explanation = severity_explanation

    @property
    def dominant_attack_country(self):
        """Gets the dominant_attack_country of this Incident.  # noqa: E501


        :return: The dominant_attack_country of this Incident.  # noqa: E501
        :rtype: CountryDominance
        """
        return self._dominant_attack_country

    @dominant_attack_country.setter
    def dominant_attack_country(self, dominant_attack_country):
        """Sets the dominant_attack_country of this Incident.


        :param dominant_attack_country: The dominant_attack_country of this Incident.  # noqa: E501
        :type: CountryDominance
        """

        self._dominant_attack_country = dominant_attack_country

    @property
    def dominant_attack_ip(self):
        """Gets the dominant_attack_ip of this Incident.  # noqa: E501


        :return: The dominant_attack_ip of this Incident.  # noqa: E501
        :rtype: IpDominance
        """
        return self._dominant_attack_ip

    @dominant_attack_ip.setter
    def dominant_attack_ip(self, dominant_attack_ip):
        """Sets the dominant_attack_ip of this Incident.


        :param dominant_attack_ip: The dominant_attack_ip of this Incident.  # noqa: E501
        :type: IpDominance
        """

        self._dominant_attack_ip = dominant_attack_ip

    @property
    def dominant_attacked_host(self):
        """Gets the dominant_attacked_host of this Incident.  # noqa: E501


        :return: The dominant_attacked_host of this Incident.  # noqa: E501
        :rtype: ShinyObject
        """
        return self._dominant_attacked_host

    @dominant_attacked_host.setter
    def dominant_attacked_host(self, dominant_attacked_host):
        """Sets the dominant_attacked_host of this Incident.


        :param dominant_attacked_host: The dominant_attacked_host of this Incident.  # noqa: E501
        :type: ShinyObject
        """

        self._dominant_attacked_host = dominant_attacked_host

    @property
    def dominant_attack_tool(self):
        """Gets the dominant_attack_tool of this Incident.  # noqa: E501


        :return: The dominant_attack_tool of this Incident.  # noqa: E501
        :rtype: ToolDominance
        """
        return self._dominant_attack_tool

    @dominant_attack_tool.setter
    def dominant_attack_tool(self, dominant_attack_tool):
        """Sets the dominant_attack_tool of this Incident.


        :param dominant_attack_tool: The dominant_attack_tool of this Incident.  # noqa: E501
        :type: ToolDominance
        """

        self._dominant_attack_tool = dominant_attack_tool

    @property
    def dominant_attack_violation(self):
        """Gets the dominant_attack_violation of this Incident.  # noqa: E501

        Violation in more than 50% of attacks  # noqa: E501

        :return: The dominant_attack_violation of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._dominant_attack_violation

    @dominant_attack_violation.setter
    def dominant_attack_violation(self, dominant_attack_violation):
        """Sets the dominant_attack_violation of this Incident.

        Violation in more than 50% of attacks  # noqa: E501

        :param dominant_attack_violation: The dominant_attack_violation of this Incident.  # noqa: E501
        :type: str
        """

        self._dominant_attack_violation = dominant_attack_violation

    @property
    def only_custom_rule_based(self):
        """Gets the only_custom_rule_based of this Incident.  # noqa: E501

        True if all events of the incident were created due to user defined rules  # noqa: E501

        :return: The only_custom_rule_based of this Incident.  # noqa: E501
        :rtype: bool
        """
        return self._only_custom_rule_based

    @only_custom_rule_based.setter
    def only_custom_rule_based(self, only_custom_rule_based):
        """Sets the only_custom_rule_based of this Incident.

        True if all events of the incident were created due to user defined rules  # noqa: E501

        :param only_custom_rule_based: The only_custom_rule_based of this Incident.  # noqa: E501
        :type: bool
        """

        self._only_custom_rule_based = only_custom_rule_based

    @property
    def how_common(self):
        """Gets the how_common of this Incident.  # noqa: E501

        Describes if this incident was spotted on other Imperva customers  # noqa: E501

        :return: The how_common of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._how_common

    @how_common.setter
    def how_common(self, how_common):
        """Sets the how_common of this Incident.

        Describes if this incident was spotted on other Imperva customers  # noqa: E501

        :param how_common: The how_common of this Incident.  # noqa: E501
        :type: str
        """

        self._how_common = how_common

    @property
    def incident_type(self):
        """Gets the incident_type of this Incident.  # noqa: E501

        The type of the incident - regular or DDoS  # noqa: E501

        :return: The incident_type of this Incident.  # noqa: E501
        :rtype: str
        """
        return self._incident_type

    @incident_type.setter
    def incident_type(self, incident_type):
        """Sets the incident_type of this Incident.

        The type of the incident - regular or DDoS  # noqa: E501

        :param incident_type: The incident_type of this Incident.  # noqa: E501
        :type: str
        """
        allowed_values = ["REGULAR", "DDOS"]  # noqa: E501
        if incident_type not in allowed_values:
            raise ValueError(
                "Invalid value for `incident_type` ({0}), must be one of {1}"  # noqa: E501
                .format(incident_type, allowed_values)
            )

        self._incident_type = incident_type

    @property
    def ddos_data(self):
        """Gets the ddos_data of this Incident.  # noqa: E501


        :return: The ddos_data of this Incident.  # noqa: E501
        :rtype: DdosData
        """
        return self._ddos_data

    @ddos_data.setter
    def ddos_data(self, ddos_data):
        """Sets the ddos_data of this Incident.


        :param ddos_data: The ddos_data of this Incident.  # noqa: E501
        :type: DdosData
        """

        self._ddos_data = ddos_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Incident, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Incident):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
