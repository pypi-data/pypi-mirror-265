# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsightSummaryVOApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'main_sentence': 'str',
        'secondary_sentence': 'str',
        'more_info': 'str',
        'recommendation': 'str',
        'vulnerable_sites': 'list[Insight]',
        'timestamp': 'str',
        'additional_details': 'dict(str, object)'
    }

    attribute_map = {
        'type': 'type',
        'main_sentence': 'mainSentence',
        'secondary_sentence': 'secondarySentence',
        'more_info': 'moreInfo',
        'recommendation': 'recommendation',
        'vulnerable_sites': 'vulnerableSites',
        'timestamp': 'timestamp',
        'additional_details': 'additionalDetails'
    }

    def __init__(self, type=None, main_sentence=None, secondary_sentence=None, more_info=None, recommendation=None, vulnerable_sites=None, timestamp=None, additional_details=None):  # noqa: E501
        """InsightSummaryVOApi - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._main_sentence = None
        self._secondary_sentence = None
        self._more_info = None
        self._recommendation = None
        self._vulnerable_sites = None
        self._timestamp = None
        self._additional_details = None
        self.discriminator = None
        self.type = type
        self.main_sentence = main_sentence
        self.secondary_sentence = secondary_sentence
        self.more_info = more_info
        self.recommendation = recommendation
        self.vulnerable_sites = vulnerable_sites
        self.timestamp = timestamp
        self.additional_details = additional_details

    @property
    def type(self):
        """Gets the type of this InsightSummaryVOApi.  # noqa: E501


        :return: The type of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InsightSummaryVOApi.


        :param type: The type of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def main_sentence(self):
        """Gets the main_sentence of this InsightSummaryVOApi.  # noqa: E501


        :return: The main_sentence of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._main_sentence

    @main_sentence.setter
    def main_sentence(self, main_sentence):
        """Sets the main_sentence of this InsightSummaryVOApi.


        :param main_sentence: The main_sentence of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if main_sentence is None:
            raise ValueError("Invalid value for `main_sentence`, must not be `None`")  # noqa: E501

        self._main_sentence = main_sentence

    @property
    def secondary_sentence(self):
        """Gets the secondary_sentence of this InsightSummaryVOApi.  # noqa: E501


        :return: The secondary_sentence of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._secondary_sentence

    @secondary_sentence.setter
    def secondary_sentence(self, secondary_sentence):
        """Sets the secondary_sentence of this InsightSummaryVOApi.


        :param secondary_sentence: The secondary_sentence of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if secondary_sentence is None:
            raise ValueError("Invalid value for `secondary_sentence`, must not be `None`")  # noqa: E501

        self._secondary_sentence = secondary_sentence

    @property
    def more_info(self):
        """Gets the more_info of this InsightSummaryVOApi.  # noqa: E501


        :return: The more_info of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this InsightSummaryVOApi.


        :param more_info: The more_info of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")  # noqa: E501

        self._more_info = more_info

    @property
    def recommendation(self):
        """Gets the recommendation of this InsightSummaryVOApi.  # noqa: E501


        :return: The recommendation of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this InsightSummaryVOApi.


        :param recommendation: The recommendation of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if recommendation is None:
            raise ValueError("Invalid value for `recommendation`, must not be `None`")  # noqa: E501

        self._recommendation = recommendation

    @property
    def vulnerable_sites(self):
        """Gets the vulnerable_sites of this InsightSummaryVOApi.  # noqa: E501


        :return: The vulnerable_sites of this InsightSummaryVOApi.  # noqa: E501
        :rtype: list[Insight]
        """
        return self._vulnerable_sites

    @vulnerable_sites.setter
    def vulnerable_sites(self, vulnerable_sites):
        """Sets the vulnerable_sites of this InsightSummaryVOApi.


        :param vulnerable_sites: The vulnerable_sites of this InsightSummaryVOApi.  # noqa: E501
        :type: list[Insight]
        """
        if vulnerable_sites is None:
            raise ValueError("Invalid value for `vulnerable_sites`, must not be `None`")  # noqa: E501

        self._vulnerable_sites = vulnerable_sites

    @property
    def timestamp(self):
        """Gets the timestamp of this InsightSummaryVOApi.  # noqa: E501


        :return: The timestamp of this InsightSummaryVOApi.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InsightSummaryVOApi.


        :param timestamp: The timestamp of this InsightSummaryVOApi.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def additional_details(self):
        """Gets the additional_details of this InsightSummaryVOApi.  # noqa: E501


        :return: The additional_details of this InsightSummaryVOApi.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._additional_details

    @additional_details.setter
    def additional_details(self, additional_details):
        """Sets the additional_details of this InsightSummaryVOApi.


        :param additional_details: The additional_details of this InsightSummaryVOApi.  # noqa: E501
        :type: dict(str, object)
        """
        if additional_details is None:
            raise ValueError("Invalid value for `additional_details`, must not be `None`")  # noqa: E501

        self._additional_details = additional_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsightSummaryVOApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsightSummaryVOApi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
