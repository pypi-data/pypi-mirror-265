# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cookie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'domain': 'str',
        'expiration': 'str',
        'path': 'str',
        'persistent': 'bool',
        'secure': 'bool',
        'traceability': 'str'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'domain': 'domain',
        'expiration': 'expiration',
        'path': 'path',
        'persistent': 'persistent',
        'secure': 'secure',
        'traceability': 'traceability'
    }

    def __init__(self, name=None, value=None, domain=None, expiration=None, path=None, persistent=None, secure=None, traceability=None):  # noqa: E501
        """Cookie - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._value = None
        self._domain = None
        self._expiration = None
        self._path = None
        self._persistent = None
        self._secure = None
        self._traceability = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if domain is not None:
            self.domain = domain
        if expiration is not None:
            self.expiration = expiration
        if path is not None:
            self.path = path
        if persistent is not None:
            self.persistent = persistent
        if secure is not None:
            self.secure = secure
        if traceability is not None:
            self.traceability = traceability

    @property
    def name(self):
        """Gets the name of this Cookie.  # noqa: E501

        Cookie name  # noqa: E501

        :return: The name of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Cookie.

        Cookie name  # noqa: E501

        :param name: The name of this Cookie.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this Cookie.  # noqa: E501

        Content of the cookie  # noqa: E501

        :return: The value of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Cookie.

        Content of the cookie  # noqa: E501

        :param value: The value of this Cookie.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def domain(self):
        """Gets the domain of this Cookie.  # noqa: E501

        Cookie source domain  # noqa: E501

        :return: The domain of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Cookie.

        Cookie source domain  # noqa: E501

        :param domain: The domain of this Cookie.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def expiration(self):
        """Gets the expiration of this Cookie.  # noqa: E501

        When the cookie is going to expire  # noqa: E501

        :return: The expiration of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Cookie.

        When the cookie is going to expire  # noqa: E501

        :param expiration: The expiration of this Cookie.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def path(self):
        """Gets the path of this Cookie.  # noqa: E501

        Path under which this cookie is valid  # noqa: E501

        :return: The path of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Cookie.

        Path under which this cookie is valid  # noqa: E501

        :param path: The path of this Cookie.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def persistent(self):
        """Gets the persistent of this Cookie.  # noqa: E501

        True if a cookie is persistent  # noqa: E501

        :return: The persistent of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """Sets the persistent of this Cookie.

        True if a cookie is persistent  # noqa: E501

        :param persistent: The persistent of this Cookie.  # noqa: E501
        :type: bool
        """

        self._persistent = persistent

    @property
    def secure(self):
        """Gets the secure of this Cookie.  # noqa: E501

        True id cookie is secure  # noqa: E501

        :return: The secure of this Cookie.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this Cookie.

        True id cookie is secure  # noqa: E501

        :param secure: The secure of this Cookie.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def traceability(self):
        """Gets the traceability of this Cookie.  # noqa: E501

        Tracability of a cookie  # noqa: E501

        :return: The traceability of this Cookie.  # noqa: E501
        :rtype: str
        """
        return self._traceability

    @traceability.setter
    def traceability(self, traceability):
        """Sets the traceability of this Cookie.

        Tracability of a cookie  # noqa: E501

        :param traceability: The traceability of this Cookie.  # noqa: E501
        :type: str
        """

        self._traceability = traceability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cookie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cookie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
