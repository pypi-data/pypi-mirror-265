# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IpDominance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dominance': 'str',
        'ip': 'str',
        'reputation': 'list[str]'
    }

    attribute_map = {
        'dominance': 'dominance',
        'ip': 'ip',
        'reputation': 'reputation'
    }

    def __init__(self, dominance=None, ip=None, reputation=None):  # noqa: E501
        """IpDominance - a model defined in Swagger"""  # noqa: E501
        self._dominance = None
        self._ip = None
        self._reputation = None
        self.discriminator = None
        if dominance is not None:
            self.dominance = dominance
        if ip is not None:
            self.ip = ip
        if reputation is not None:
            self.reputation = reputation

    @property
    def dominance(self):
        """Gets the dominance of this IpDominance.  # noqa: E501

        How dominant is the value among other values  # noqa: E501

        :return: The dominance of this IpDominance.  # noqa: E501
        :rtype: str
        """
        return self._dominance

    @dominance.setter
    def dominance(self, dominance):
        """Sets the dominance of this IpDominance.

        How dominant is the value among other values  # noqa: E501

        :param dominance: The dominance of this IpDominance.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRONGLY_DOMINANT", "DOMINANT", "DISTRIBUTED", "BLANK"]  # noqa: E501
        if dominance not in allowed_values:
            raise ValueError(
                "Invalid value for `dominance` ({0}), must be one of {1}"  # noqa: E501
                .format(dominance, allowed_values)
            )

        self._dominance = dominance

    @property
    def ip(self):
        """Gets the ip of this IpDominance.  # noqa: E501

        IP address  # noqa: E501

        :return: The ip of this IpDominance.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IpDominance.

        IP address  # noqa: E501

        :param ip: The ip of this IpDominance.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def reputation(self):
        """Gets the reputation of this IpDominance.  # noqa: E501

        IP address  # noqa: E501

        :return: The reputation of this IpDominance.  # noqa: E501
        :rtype: list[str]
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this IpDominance.

        IP address  # noqa: E501

        :param reputation: The reputation of this IpDominance.  # noqa: E501
        :type: list[str]
        """

        self._reputation = reputation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpDominance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpDominance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
