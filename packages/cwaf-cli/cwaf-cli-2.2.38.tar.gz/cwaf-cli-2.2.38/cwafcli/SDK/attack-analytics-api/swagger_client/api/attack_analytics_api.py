# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AttackAnalyticsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_incident_stats_by_account(self, caid, incident_id, **kwargs):  # noqa: E501
        """Retrieve incident details  # noqa: E501

        Retrieves full details of a specified incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_stats_by_account(caid, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param str incident_id: The incident identifier. (required)
        :return: IncidentStats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incident_stats_by_account_with_http_info(caid, incident_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incident_stats_by_account_with_http_info(caid, incident_id, **kwargs)  # noqa: E501
            return data

    def get_incident_stats_by_account_with_http_info(self, caid, incident_id, **kwargs):  # noqa: E501
        """Retrieve incident details  # noqa: E501

        Retrieves full details of a specified incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incident_stats_by_account_with_http_info(caid, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param str incident_id: The incident identifier. (required)
        :return: IncidentStats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', 'incident_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incident_stats_by_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_incident_stats_by_account`")  # noqa: E501
        # verify the required parameter 'incident_id' is set
        if ('incident_id' not in params or
                params['incident_id'] is None):
            raise ValueError("Missing the required parameter `incident_id` when calling `get_incident_stats_by_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'incident_id' in params:
            path_params['incidentId'] = params['incident_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{incidentId}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IncidentStats',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_incidents_by_account(self, caid, **kwargs):  # noqa: E501
        """Retrieve a list of incidents  # noqa: E501

        Retrieves Attack Analytics details for an account during a specified time period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incidents_by_account(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param int from_timestamp: Earliest time boundary, specified as number of milliseconds since midnight 1970 (UNIX time * 1000).
        :param int to_timestamp: Latest time boundary, specified as number of milliseconds since midnight 1970 (UNIX time * 1000).
        :return: list[Incident]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_incidents_by_account_with_http_info(caid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_incidents_by_account_with_http_info(caid, **kwargs)  # noqa: E501
            return data

    def get_incidents_by_account_with_http_info(self, caid, **kwargs):  # noqa: E501
        """Retrieve a list of incidents  # noqa: E501

        Retrieves Attack Analytics details for an account during a specified time period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_incidents_by_account_with_http_info(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Account ID. Unique identifier of the account to operate on. (required)
        :param int from_timestamp: Earliest time boundary, specified as number of milliseconds since midnight 1970 (UNIX time * 1000).
        :param int to_timestamp: Latest time boundary, specified as number of milliseconds since midnight 1970 (UNIX time * 1000).
        :return: list[Incident]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', 'from_timestamp', 'to_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_incidents_by_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_incidents_by_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501
        if 'from_timestamp' in params:
            query_params.append(('from_timestamp', params['from_timestamp']))  # noqa: E501
        if 'to_timestamp' in params:
            query_params.append(('to_timestamp', params['to_timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Incident]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_insights_per_account(self, caid, **kwargs):  # noqa: E501
        """Retrieve insights  # noqa: E501

        Retrieves the list of insights for your account (recommended actions to take based on attacks that have targeted your sites and applications).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_per_account(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Unique account id (required)
        :return: list[InsightsDataApi]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_insights_per_account_with_http_info(caid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_insights_per_account_with_http_info(caid, **kwargs)  # noqa: E501
            return data

    def get_insights_per_account_with_http_info(self, caid, **kwargs):  # noqa: E501
        """Retrieve insights  # noqa: E501

        Retrieves the list of insights for your account (recommended actions to take based on attacks that have targeted your sites and applications).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_insights_per_account_with_http_info(caid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Unique account id (required)
        :return: list[InsightsDataApi]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_insights_per_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_insights_per_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InsightsDataApi]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sample_events_by_incident(self, caid, incident_id, **kwargs):  # noqa: E501
        """Retrieve event sample  # noqa: E501

        Retrieves a sampling of events in a specified incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sample_events_by_incident(caid, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Unique identifier of the account to operate on (required)
        :param str incident_id: The incident identifier (required)
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sample_events_by_incident_with_http_info(caid, incident_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sample_events_by_incident_with_http_info(caid, incident_id, **kwargs)  # noqa: E501
            return data

    def get_sample_events_by_incident_with_http_info(self, caid, incident_id, **kwargs):  # noqa: E501
        """Retrieve event sample  # noqa: E501

        Retrieves a sampling of events in a specified incident.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sample_events_by_incident_with_http_info(caid, incident_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int caid: Unique identifier of the account to operate on (required)
        :param str incident_id: The incident identifier (required)
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['caid', 'incident_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sample_events_by_incident" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'caid' is set
        if ('caid' not in params or
                params['caid'] is None):
            raise ValueError("Missing the required parameter `caid` when calling `get_sample_events_by_incident`")  # noqa: E501
        # verify the required parameter 'incident_id' is set
        if ('incident_id' not in params or
                params['incident_id'] is None):
            raise ValueError("Missing the required parameter `incident_id` when calling `get_sample_events_by_incident`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'incident_id' in params:
            path_params['incidentId'] = params['incident_id']  # noqa: E501

        query_params = []
        if 'caid' in params:
            query_params.append(('caid', params['caid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/incidents/{incidentId}/sample-events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Event',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
