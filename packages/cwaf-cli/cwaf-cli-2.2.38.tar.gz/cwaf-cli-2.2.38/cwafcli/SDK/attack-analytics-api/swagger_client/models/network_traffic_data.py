# coding: utf-8

"""
    Attack Analytics API

    Access the Attack Analytics data for your account using the API. For full feature documentation, see [Imperva Attack Analytics](https://docs.imperva.com/bundle/Attack-Analytics/page/Content/attack_analytics/attack_analytics.htm).  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkTrafficData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'passed': 'float',
        'blocked': 'float'
    }

    attribute_map = {
        'name': 'name',
        'passed': 'passed',
        'blocked': 'blocked'
    }

    def __init__(self, name=None, passed=None, blocked=None):  # noqa: E501
        """NetworkTrafficData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._passed = None
        self._blocked = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if passed is not None:
            self.passed = passed
        if blocked is not None:
            self.blocked = blocked

    @property
    def name(self):
        """Gets the name of this NetworkTrafficData.  # noqa: E501

        protocol name  # noqa: E501

        :return: The name of this NetworkTrafficData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkTrafficData.

        protocol name  # noqa: E501

        :param name: The name of this NetworkTrafficData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def passed(self):
        """Gets the passed of this NetworkTrafficData.  # noqa: E501

        Peak passed traffic values for protocol during the DDoS attack  # noqa: E501

        :return: The passed of this NetworkTrafficData.  # noqa: E501
        :rtype: float
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """Sets the passed of this NetworkTrafficData.

        Peak passed traffic values for protocol during the DDoS attack  # noqa: E501

        :param passed: The passed of this NetworkTrafficData.  # noqa: E501
        :type: float
        """

        self._passed = passed

    @property
    def blocked(self):
        """Gets the blocked of this NetworkTrafficData.  # noqa: E501

        Peak blocked traffic values for protocol during the DDoS attack  # noqa: E501

        :return: The blocked of this NetworkTrafficData.  # noqa: E501
        :rtype: float
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this NetworkTrafficData.

        Peak blocked traffic values for protocol during the DDoS attack  # noqa: E501

        :param blocked: The blocked of this NetworkTrafficData.  # noqa: E501
        :type: float
        """

        self._blocked = blocked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkTrafficData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkTrafficData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
