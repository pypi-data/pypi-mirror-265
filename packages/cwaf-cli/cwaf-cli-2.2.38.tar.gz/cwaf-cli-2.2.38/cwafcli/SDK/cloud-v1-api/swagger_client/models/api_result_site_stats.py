# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiResultSiteStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'res': 'int',
        'res_message': 'str',
        'debug_info': 'list[dict(str, object)]',
        'visits_timeseries': 'list[VisitsItem]',
        'requests_geo_dist_summary': 'RequestsGeo',
        'visits_dist_summary': 'list[VisitsSummary]',
        'caching': 'Caching',
        'caching_timeseries': 'list[TimeSeriesItem]',
        'hits_timeseries': 'list[TimeSeriesItem]',
        'bandwidth_timeseries': 'list[TimeSeriesItem]',
        'threats': 'list[Threat]',
        'incap_rules': 'list[IncapRule]',
        'incap_rules_timeseries': 'list[IncapRuleSeries]',
        'delivery_rules': 'list[ADRule]',
        'delivery_rules_timeseries': 'list[ADRuleSeries]'
    }

    attribute_map = {
        'res': 'res',
        'res_message': 'res_message',
        'debug_info': 'debug_info',
        'visits_timeseries': 'visits_timeseries',
        'requests_geo_dist_summary': 'requests_geo_dist_summary',
        'visits_dist_summary': 'visits_dist_summary',
        'caching': 'caching',
        'caching_timeseries': 'caching_timeseries',
        'hits_timeseries': 'hits_timeseries',
        'bandwidth_timeseries': 'bandwidth_timeseries',
        'threats': 'threats',
        'incap_rules': 'incap_rules',
        'incap_rules_timeseries': 'incap_rules_timeseries',
        'delivery_rules': 'delivery_rules',
        'delivery_rules_timeseries': 'delivery_rules_timeseries'
    }

    def __init__(self, res=None, res_message=None, debug_info=None, visits_timeseries=None, requests_geo_dist_summary=None, visits_dist_summary=None, caching=None, caching_timeseries=None, hits_timeseries=None, bandwidth_timeseries=None, threats=None, incap_rules=None, incap_rules_timeseries=None, delivery_rules=None, delivery_rules_timeseries=None):  # noqa: E501
        """ApiResultSiteStats - a model defined in Swagger"""  # noqa: E501
        self._res = None
        self._res_message = None
        self._debug_info = None
        self._visits_timeseries = None
        self._requests_geo_dist_summary = None
        self._visits_dist_summary = None
        self._caching = None
        self._caching_timeseries = None
        self._hits_timeseries = None
        self._bandwidth_timeseries = None
        self._threats = None
        self._incap_rules = None
        self._incap_rules_timeseries = None
        self._delivery_rules = None
        self._delivery_rules_timeseries = None
        self.discriminator = None
        if res is not None:
            self.res = res
        if res_message is not None:
            self.res_message = res_message
        if debug_info is not None:
            self.debug_info = debug_info
        if visits_timeseries is not None:
            self.visits_timeseries = visits_timeseries
        if requests_geo_dist_summary is not None:
            self.requests_geo_dist_summary = requests_geo_dist_summary
        if visits_dist_summary is not None:
            self.visits_dist_summary = visits_dist_summary
        if caching is not None:
            self.caching = caching
        if caching_timeseries is not None:
            self.caching_timeseries = caching_timeseries
        if hits_timeseries is not None:
            self.hits_timeseries = hits_timeseries
        if bandwidth_timeseries is not None:
            self.bandwidth_timeseries = bandwidth_timeseries
        if threats is not None:
            self.threats = threats
        if incap_rules is not None:
            self.incap_rules = incap_rules
        if incap_rules_timeseries is not None:
            self.incap_rules_timeseries = incap_rules_timeseries
        if delivery_rules is not None:
            self.delivery_rules = delivery_rules
        if delivery_rules_timeseries is not None:
            self.delivery_rules_timeseries = delivery_rules_timeseries

    @property
    def res(self):
        """Gets the res of this ApiResultSiteStats.  # noqa: E501

        res - contains specific error code  # noqa: E501

        :return: The res of this ApiResultSiteStats.  # noqa: E501
        :rtype: int
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this ApiResultSiteStats.

        res - contains specific error code  # noqa: E501

        :param res: The res of this ApiResultSiteStats.  # noqa: E501
        :type: int
        """

        self._res = res

    @property
    def res_message(self):
        """Gets the res_message of this ApiResultSiteStats.  # noqa: E501


        :return: The res_message of this ApiResultSiteStats.  # noqa: E501
        :rtype: str
        """
        return self._res_message

    @res_message.setter
    def res_message(self, res_message):
        """Sets the res_message of this ApiResultSiteStats.


        :param res_message: The res_message of this ApiResultSiteStats.  # noqa: E501
        :type: str
        """

        self._res_message = res_message

    @property
    def debug_info(self):
        """Gets the debug_info of this ApiResultSiteStats.  # noqa: E501


        :return: The debug_info of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this ApiResultSiteStats.


        :param debug_info: The debug_info of this ApiResultSiteStats.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._debug_info = debug_info

    @property
    def visits_timeseries(self):
        """Gets the visits_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The visits_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[VisitsItem]
        """
        return self._visits_timeseries

    @visits_timeseries.setter
    def visits_timeseries(self, visits_timeseries):
        """Sets the visits_timeseries of this ApiResultSiteStats.


        :param visits_timeseries: The visits_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[VisitsItem]
        """

        self._visits_timeseries = visits_timeseries

    @property
    def requests_geo_dist_summary(self):
        """Gets the requests_geo_dist_summary of this ApiResultSiteStats.  # noqa: E501


        :return: The requests_geo_dist_summary of this ApiResultSiteStats.  # noqa: E501
        :rtype: RequestsGeo
        """
        return self._requests_geo_dist_summary

    @requests_geo_dist_summary.setter
    def requests_geo_dist_summary(self, requests_geo_dist_summary):
        """Sets the requests_geo_dist_summary of this ApiResultSiteStats.


        :param requests_geo_dist_summary: The requests_geo_dist_summary of this ApiResultSiteStats.  # noqa: E501
        :type: RequestsGeo
        """

        self._requests_geo_dist_summary = requests_geo_dist_summary

    @property
    def visits_dist_summary(self):
        """Gets the visits_dist_summary of this ApiResultSiteStats.  # noqa: E501


        :return: The visits_dist_summary of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[VisitsSummary]
        """
        return self._visits_dist_summary

    @visits_dist_summary.setter
    def visits_dist_summary(self, visits_dist_summary):
        """Sets the visits_dist_summary of this ApiResultSiteStats.


        :param visits_dist_summary: The visits_dist_summary of this ApiResultSiteStats.  # noqa: E501
        :type: list[VisitsSummary]
        """

        self._visits_dist_summary = visits_dist_summary

    @property
    def caching(self):
        """Gets the caching of this ApiResultSiteStats.  # noqa: E501


        :return: The caching of this ApiResultSiteStats.  # noqa: E501
        :rtype: Caching
        """
        return self._caching

    @caching.setter
    def caching(self, caching):
        """Sets the caching of this ApiResultSiteStats.


        :param caching: The caching of this ApiResultSiteStats.  # noqa: E501
        :type: Caching
        """

        self._caching = caching

    @property
    def caching_timeseries(self):
        """Gets the caching_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The caching_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[TimeSeriesItem]
        """
        return self._caching_timeseries

    @caching_timeseries.setter
    def caching_timeseries(self, caching_timeseries):
        """Sets the caching_timeseries of this ApiResultSiteStats.


        :param caching_timeseries: The caching_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[TimeSeriesItem]
        """

        self._caching_timeseries = caching_timeseries

    @property
    def hits_timeseries(self):
        """Gets the hits_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The hits_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[TimeSeriesItem]
        """
        return self._hits_timeseries

    @hits_timeseries.setter
    def hits_timeseries(self, hits_timeseries):
        """Sets the hits_timeseries of this ApiResultSiteStats.


        :param hits_timeseries: The hits_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[TimeSeriesItem]
        """

        self._hits_timeseries = hits_timeseries

    @property
    def bandwidth_timeseries(self):
        """Gets the bandwidth_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The bandwidth_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[TimeSeriesItem]
        """
        return self._bandwidth_timeseries

    @bandwidth_timeseries.setter
    def bandwidth_timeseries(self, bandwidth_timeseries):
        """Sets the bandwidth_timeseries of this ApiResultSiteStats.


        :param bandwidth_timeseries: The bandwidth_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[TimeSeriesItem]
        """

        self._bandwidth_timeseries = bandwidth_timeseries

    @property
    def threats(self):
        """Gets the threats of this ApiResultSiteStats.  # noqa: E501


        :return: The threats of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[Threat]
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this ApiResultSiteStats.


        :param threats: The threats of this ApiResultSiteStats.  # noqa: E501
        :type: list[Threat]
        """

        self._threats = threats

    @property
    def incap_rules(self):
        """Gets the incap_rules of this ApiResultSiteStats.  # noqa: E501


        :return: The incap_rules of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[IncapRule]
        """
        return self._incap_rules

    @incap_rules.setter
    def incap_rules(self, incap_rules):
        """Sets the incap_rules of this ApiResultSiteStats.


        :param incap_rules: The incap_rules of this ApiResultSiteStats.  # noqa: E501
        :type: list[IncapRule]
        """

        self._incap_rules = incap_rules

    @property
    def incap_rules_timeseries(self):
        """Gets the incap_rules_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The incap_rules_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[IncapRuleSeries]
        """
        return self._incap_rules_timeseries

    @incap_rules_timeseries.setter
    def incap_rules_timeseries(self, incap_rules_timeseries):
        """Sets the incap_rules_timeseries of this ApiResultSiteStats.


        :param incap_rules_timeseries: The incap_rules_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[IncapRuleSeries]
        """

        self._incap_rules_timeseries = incap_rules_timeseries

    @property
    def delivery_rules(self):
        """Gets the delivery_rules of this ApiResultSiteStats.  # noqa: E501


        :return: The delivery_rules of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[ADRule]
        """
        return self._delivery_rules

    @delivery_rules.setter
    def delivery_rules(self, delivery_rules):
        """Sets the delivery_rules of this ApiResultSiteStats.


        :param delivery_rules: The delivery_rules of this ApiResultSiteStats.  # noqa: E501
        :type: list[ADRule]
        """

        self._delivery_rules = delivery_rules

    @property
    def delivery_rules_timeseries(self):
        """Gets the delivery_rules_timeseries of this ApiResultSiteStats.  # noqa: E501


        :return: The delivery_rules_timeseries of this ApiResultSiteStats.  # noqa: E501
        :rtype: list[ADRuleSeries]
        """
        return self._delivery_rules_timeseries

    @delivery_rules_timeseries.setter
    def delivery_rules_timeseries(self, delivery_rules_timeseries):
        """Sets the delivery_rules_timeseries of this ApiResultSiteStats.


        :param delivery_rules_timeseries: The delivery_rules_timeseries of this ApiResultSiteStats.  # noqa: E501
        :type: list[ADRuleSeries]
        """

        self._delivery_rules_timeseries = delivery_rules_timeseries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResultSiteStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResultSiteStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
