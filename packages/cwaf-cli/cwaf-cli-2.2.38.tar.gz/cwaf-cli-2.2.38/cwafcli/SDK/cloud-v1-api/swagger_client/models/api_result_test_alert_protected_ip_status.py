# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiResultTestAlertProtectedIPStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'res': 'int',
        'res_message': 'str',
        'debug_info': 'list[dict(str, object)]',
        'ip_prefix': 'str',
        'status': 'str',
        'ip': 'str'
    }

    attribute_map = {
        'res': 'res',
        'res_message': 'res_message',
        'debug_info': 'debug_info',
        'ip_prefix': 'ip_prefix',
        'status': 'status',
        'ip': 'ip'
    }

    def __init__(self, res=None, res_message=None, debug_info=None, ip_prefix=None, status=None, ip=None):  # noqa: E501
        """ApiResultTestAlertProtectedIPStatus - a model defined in Swagger"""  # noqa: E501
        self._res = None
        self._res_message = None
        self._debug_info = None
        self._ip_prefix = None
        self._status = None
        self._ip = None
        self.discriminator = None
        if res is not None:
            self.res = res
        if res_message is not None:
            self.res_message = res_message
        if debug_info is not None:
            self.debug_info = debug_info
        if ip_prefix is not None:
            self.ip_prefix = ip_prefix
        if status is not None:
            self.status = status
        if ip is not None:
            self.ip = ip

    @property
    def res(self):
        """Gets the res of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501

        res - contains specific error code  # noqa: E501

        :return: The res of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: int
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this ApiResultTestAlertProtectedIPStatus.

        res - contains specific error code  # noqa: E501

        :param res: The res of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: int
        """

        self._res = res

    @property
    def res_message(self):
        """Gets the res_message of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501


        :return: The res_message of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: str
        """
        return self._res_message

    @res_message.setter
    def res_message(self, res_message):
        """Sets the res_message of this ApiResultTestAlertProtectedIPStatus.


        :param res_message: The res_message of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: str
        """

        self._res_message = res_message

    @property
    def debug_info(self):
        """Gets the debug_info of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501


        :return: The debug_info of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this ApiResultTestAlertProtectedIPStatus.


        :param debug_info: The debug_info of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._debug_info = debug_info

    @property
    def ip_prefix(self):
        """Gets the ip_prefix of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501


        :return: The ip_prefix of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip_prefix

    @ip_prefix.setter
    def ip_prefix(self, ip_prefix):
        """Sets the ip_prefix of this ApiResultTestAlertProtectedIPStatus.


        :param ip_prefix: The ip_prefix of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: str
        """

        self._ip_prefix = ip_prefix

    @property
    def status(self):
        """Gets the status of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501


        :return: The status of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiResultTestAlertProtectedIPStatus.


        :param status: The status of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ip(self):
        """Gets the ip of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501


        :return: The ip of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ApiResultTestAlertProtectedIPStatus.


        :param ip: The ip of this ApiResultTestAlertProtectedIPStatus.  # noqa: E501
        :type: str
        """

        self._ip = ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResultTestAlertProtectedIPStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResultTestAlertProtectedIPStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
