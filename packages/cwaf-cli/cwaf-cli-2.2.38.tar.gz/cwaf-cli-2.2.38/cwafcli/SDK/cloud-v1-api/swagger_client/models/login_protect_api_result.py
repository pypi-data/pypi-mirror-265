# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginProtectApiResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'specific_users_list': 'list[SpecificUsersList]',
        'send_lp_notifications': 'bool',
        'allow_all_users': 'bool',
        'authentication_methods': 'list[object]',
        'urls': 'list[object]',
        'url_patterns': 'list[object]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'specific_users_list': 'specific_users_list',
        'send_lp_notifications': 'send_lp_notifications',
        'allow_all_users': 'allow_all_users',
        'authentication_methods': 'authentication_methods',
        'urls': 'urls',
        'url_patterns': 'url_patterns'
    }

    def __init__(self, enabled=None, specific_users_list=None, send_lp_notifications=None, allow_all_users=None, authentication_methods=None, urls=None, url_patterns=None):  # noqa: E501
        """LoginProtectApiResult - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._specific_users_list = None
        self._send_lp_notifications = None
        self._allow_all_users = None
        self._authentication_methods = None
        self._urls = None
        self._url_patterns = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if specific_users_list is not None:
            self.specific_users_list = specific_users_list
        if send_lp_notifications is not None:
            self.send_lp_notifications = send_lp_notifications
        if allow_all_users is not None:
            self.allow_all_users = allow_all_users
        if authentication_methods is not None:
            self.authentication_methods = authentication_methods
        if urls is not None:
            self.urls = urls
        if url_patterns is not None:
            self.url_patterns = url_patterns

    @property
    def enabled(self):
        """Gets the enabled of this LoginProtectApiResult.  # noqa: E501


        :return: The enabled of this LoginProtectApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LoginProtectApiResult.


        :param enabled: The enabled of this LoginProtectApiResult.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def specific_users_list(self):
        """Gets the specific_users_list of this LoginProtectApiResult.  # noqa: E501


        :return: The specific_users_list of this LoginProtectApiResult.  # noqa: E501
        :rtype: list[SpecificUsersList]
        """
        return self._specific_users_list

    @specific_users_list.setter
    def specific_users_list(self, specific_users_list):
        """Sets the specific_users_list of this LoginProtectApiResult.


        :param specific_users_list: The specific_users_list of this LoginProtectApiResult.  # noqa: E501
        :type: list[SpecificUsersList]
        """

        self._specific_users_list = specific_users_list

    @property
    def send_lp_notifications(self):
        """Gets the send_lp_notifications of this LoginProtectApiResult.  # noqa: E501


        :return: The send_lp_notifications of this LoginProtectApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._send_lp_notifications

    @send_lp_notifications.setter
    def send_lp_notifications(self, send_lp_notifications):
        """Sets the send_lp_notifications of this LoginProtectApiResult.


        :param send_lp_notifications: The send_lp_notifications of this LoginProtectApiResult.  # noqa: E501
        :type: bool
        """

        self._send_lp_notifications = send_lp_notifications

    @property
    def allow_all_users(self):
        """Gets the allow_all_users of this LoginProtectApiResult.  # noqa: E501


        :return: The allow_all_users of this LoginProtectApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_users

    @allow_all_users.setter
    def allow_all_users(self, allow_all_users):
        """Sets the allow_all_users of this LoginProtectApiResult.


        :param allow_all_users: The allow_all_users of this LoginProtectApiResult.  # noqa: E501
        :type: bool
        """

        self._allow_all_users = allow_all_users

    @property
    def authentication_methods(self):
        """Gets the authentication_methods of this LoginProtectApiResult.  # noqa: E501


        :return: The authentication_methods of this LoginProtectApiResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._authentication_methods

    @authentication_methods.setter
    def authentication_methods(self, authentication_methods):
        """Sets the authentication_methods of this LoginProtectApiResult.


        :param authentication_methods: The authentication_methods of this LoginProtectApiResult.  # noqa: E501
        :type: list[object]
        """

        self._authentication_methods = authentication_methods

    @property
    def urls(self):
        """Gets the urls of this LoginProtectApiResult.  # noqa: E501


        :return: The urls of this LoginProtectApiResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this LoginProtectApiResult.


        :param urls: The urls of this LoginProtectApiResult.  # noqa: E501
        :type: list[object]
        """

        self._urls = urls

    @property
    def url_patterns(self):
        """Gets the url_patterns of this LoginProtectApiResult.  # noqa: E501


        :return: The url_patterns of this LoginProtectApiResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._url_patterns

    @url_patterns.setter
    def url_patterns(self, url_patterns):
        """Sets the url_patterns of this LoginProtectApiResult.


        :param url_patterns: The url_patterns of this LoginProtectApiResult.  # noqa: E501
        :type: list[object]
        """

        self._url_patterns = url_patterns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginProtectApiResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginProtectApiResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
