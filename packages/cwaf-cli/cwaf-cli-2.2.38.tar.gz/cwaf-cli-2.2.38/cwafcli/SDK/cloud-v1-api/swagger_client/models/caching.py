# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Caching(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'saved_requests': 'int',
        'total_requests': 'int',
        'saved_bytes': 'int',
        'total_bytes': 'int'
    }

    attribute_map = {
        'saved_requests': 'saved_requests',
        'total_requests': 'total_requests',
        'saved_bytes': 'saved_bytes',
        'total_bytes': 'total_bytes'
    }

    def __init__(self, saved_requests=None, total_requests=None, saved_bytes=None, total_bytes=None):  # noqa: E501
        """Caching - a model defined in Swagger"""  # noqa: E501
        self._saved_requests = None
        self._total_requests = None
        self._saved_bytes = None
        self._total_bytes = None
        self.discriminator = None
        if saved_requests is not None:
            self.saved_requests = saved_requests
        if total_requests is not None:
            self.total_requests = total_requests
        if saved_bytes is not None:
            self.saved_bytes = saved_bytes
        if total_bytes is not None:
            self.total_bytes = total_bytes

    @property
    def saved_requests(self):
        """Gets the saved_requests of this Caching.  # noqa: E501


        :return: The saved_requests of this Caching.  # noqa: E501
        :rtype: int
        """
        return self._saved_requests

    @saved_requests.setter
    def saved_requests(self, saved_requests):
        """Sets the saved_requests of this Caching.


        :param saved_requests: The saved_requests of this Caching.  # noqa: E501
        :type: int
        """

        self._saved_requests = saved_requests

    @property
    def total_requests(self):
        """Gets the total_requests of this Caching.  # noqa: E501


        :return: The total_requests of this Caching.  # noqa: E501
        :rtype: int
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests):
        """Sets the total_requests of this Caching.


        :param total_requests: The total_requests of this Caching.  # noqa: E501
        :type: int
        """

        self._total_requests = total_requests

    @property
    def saved_bytes(self):
        """Gets the saved_bytes of this Caching.  # noqa: E501


        :return: The saved_bytes of this Caching.  # noqa: E501
        :rtype: int
        """
        return self._saved_bytes

    @saved_bytes.setter
    def saved_bytes(self, saved_bytes):
        """Sets the saved_bytes of this Caching.


        :param saved_bytes: The saved_bytes of this Caching.  # noqa: E501
        :type: int
        """

        self._saved_bytes = saved_bytes

    @property
    def total_bytes(self):
        """Gets the total_bytes of this Caching.  # noqa: E501


        :return: The total_bytes of this Caching.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this Caching.


        :param total_bytes: The total_bytes of this Caching.  # noqa: E501
        :type: int
        """

        self._total_bytes = total_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Caching, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Caching):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
