# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataCenterConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'int',
        'ip_mode': 'str',
        'web_servers_per_server': 'int',
        'lb_algorithm': 'str',
        'weight': 'int',
        'is_enabled': 'bool',
        'is_active': 'bool',
        'is_content': 'bool',
        'is_rest_of_the_world': 'bool',
        'geo_locations': 'list[str]',
        'origin_pop': 'str',
        'servers': 'list[DataCenterServerConfiguration]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'ip_mode': 'ipMode',
        'web_servers_per_server': 'webServersPerServer',
        'lb_algorithm': 'lbAlgorithm',
        'weight': 'weight',
        'is_enabled': 'isEnabled',
        'is_active': 'isActive',
        'is_content': 'isContent',
        'is_rest_of_the_world': 'isRestOfTheWorld',
        'geo_locations': 'geoLocations',
        'origin_pop': 'originPop',
        'servers': 'servers'
    }

    def __init__(self, name=None, id=None, ip_mode='MULTIPLE_IP', web_servers_per_server=1, lb_algorithm='LB_LEAST_PENDING_REQUESTS', weight=None, is_enabled=True, is_active=True, is_content=False, is_rest_of_the_world=False, geo_locations=None, origin_pop=None, servers=None):  # noqa: E501
        """DataCenterConfiguration - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._id = None
        self._ip_mode = None
        self._web_servers_per_server = None
        self._lb_algorithm = None
        self._weight = None
        self._is_enabled = None
        self._is_active = None
        self._is_content = None
        self._is_rest_of_the_world = None
        self._geo_locations = None
        self._origin_pop = None
        self._servers = None
        self.discriminator = None
        self.name = name
        if id is not None:
            self.id = id
        if ip_mode is not None:
            self.ip_mode = ip_mode
        if web_servers_per_server is not None:
            self.web_servers_per_server = web_servers_per_server
        if lb_algorithm is not None:
            self.lb_algorithm = lb_algorithm
        if weight is not None:
            self.weight = weight
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if is_active is not None:
            self.is_active = is_active
        if is_content is not None:
            self.is_content = is_content
        if is_rest_of_the_world is not None:
            self.is_rest_of_the_world = is_rest_of_the_world
        if geo_locations is not None:
            self.geo_locations = geo_locations
        if origin_pop is not None:
            self.origin_pop = origin_pop
        if servers is not None:
            self.servers = servers

    @property
    def name(self):
        """Gets the name of this DataCenterConfiguration.  # noqa: E501

        Data center name  # noqa: E501

        :return: The name of this DataCenterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataCenterConfiguration.

        Data center name  # noqa: E501

        :param name: The name of this DataCenterConfiguration.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this DataCenterConfiguration.  # noqa: E501

        Data center id  # noqa: E501

        :return: The id of this DataCenterConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataCenterConfiguration.

        Data center id  # noqa: E501

        :param id: The id of this DataCenterConfiguration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ip_mode(self):
        """Gets the ip_mode of this DataCenterConfiguration.  # noqa: E501

        Load-balancing mode.<br/>Possible values:<ul><li><b>SINGLE_IP</b> - Use it only when you need to support multiple ports. Allows a single active server listening on multiple ports, plus the option of a single standby server. Traffic is distributed across the server ports.<br/><b>Note</b>: The server address must be a valid IP address (i.e. not host/domain name).<br/>SINGLE_IP is applicable only for datacenters. It may not be used when dataCenterMode = ‘SINGLE_SERVER’.</li><li><b>MULTIPLE_IP</b> – Allows one or more origin servers having a single webserver and listening port per server. Traffic is distributed across servers.</li></ul>  # noqa: E501

        :return: The ip_mode of this DataCenterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._ip_mode

    @ip_mode.setter
    def ip_mode(self, ip_mode):
        """Sets the ip_mode of this DataCenterConfiguration.

        Load-balancing mode.<br/>Possible values:<ul><li><b>SINGLE_IP</b> - Use it only when you need to support multiple ports. Allows a single active server listening on multiple ports, plus the option of a single standby server. Traffic is distributed across the server ports.<br/><b>Note</b>: The server address must be a valid IP address (i.e. not host/domain name).<br/>SINGLE_IP is applicable only for datacenters. It may not be used when dataCenterMode = ‘SINGLE_SERVER’.</li><li><b>MULTIPLE_IP</b> – Allows one or more origin servers having a single webserver and listening port per server. Traffic is distributed across servers.</li></ul>  # noqa: E501

        :param ip_mode: The ip_mode of this DataCenterConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SINGLE_IP", "MULTIPLE_IP"]  # noqa: E501
        if ip_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_mode, allowed_values)
            )

        self._ip_mode = ip_mode

    @property
    def web_servers_per_server(self):
        """Gets the web_servers_per_server of this DataCenterConfiguration.  # noqa: E501

        When IP mode = SINGLE_IP, number of webservers per server. Each webserver listens to different port. E.g. when webServersPerServer = 5, HTTP traffic will use ports 80-84 while HTTPS traffic will use ports 443-447  # noqa: E501

        :return: The web_servers_per_server of this DataCenterConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._web_servers_per_server

    @web_servers_per_server.setter
    def web_servers_per_server(self, web_servers_per_server):
        """Sets the web_servers_per_server of this DataCenterConfiguration.

        When IP mode = SINGLE_IP, number of webservers per server. Each webserver listens to different port. E.g. when webServersPerServer = 5, HTTP traffic will use ports 80-84 while HTTPS traffic will use ports 443-447  # noqa: E501

        :param web_servers_per_server: The web_servers_per_server of this DataCenterConfiguration.  # noqa: E501
        :type: int
        """

        self._web_servers_per_server = web_servers_per_server

    @property
    def lb_algorithm(self):
        """Gets the lb_algorithm of this DataCenterConfiguration.  # noqa: E501

        Specifies how to load balance between the servers of this data center  # noqa: E501

        :return: The lb_algorithm of this DataCenterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._lb_algorithm

    @lb_algorithm.setter
    def lb_algorithm(self, lb_algorithm):
        """Sets the lb_algorithm of this DataCenterConfiguration.

        Specifies how to load balance between the servers of this data center  # noqa: E501

        :param lb_algorithm: The lb_algorithm of this DataCenterConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["LB_LEAST_PENDING_REQUESTS", "LB_LEAST_OPEN_CONNECTIONS", "LB_SOURCE_IP_HASH", "RANDOM", "WEIGHTED"]  # noqa: E501
        if lb_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `lb_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(lb_algorithm, allowed_values)
            )

        self._lb_algorithm = lb_algorithm

    @property
    def weight(self):
        """Gets the weight of this DataCenterConfiguration.  # noqa: E501

        Weight in pecentage. Mandatory if lbAlgorithm = WEIGHTED_LB. Then, total weights of all data centers must be equal to 100  # noqa: E501

        :return: The weight of this DataCenterConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DataCenterConfiguration.

        Weight in pecentage. Mandatory if lbAlgorithm = WEIGHTED_LB. Then, total weights of all data centers must be equal to 100  # noqa: E501

        :param weight: The weight of this DataCenterConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DataCenterConfiguration.  # noqa: E501

        For each site, at least one data center must be enabled  # noqa: E501

        :return: The is_enabled of this DataCenterConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DataCenterConfiguration.

        For each site, at least one data center must be enabled  # noqa: E501

        :param is_enabled: The is_enabled of this DataCenterConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def is_active(self):
        """Gets the is_active of this DataCenterConfiguration.  # noqa: E501

        Specify false to define a standby datacenter. No more than one data center can be defined as standby. Failover to standby data center is performed only when no other active data center is available  # noqa: E501

        :return: The is_active of this DataCenterConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DataCenterConfiguration.

        Specify false to define a standby datacenter. No more than one data center can be defined as standby. Failover to standby data center is performed only when no other active data center is available  # noqa: E501

        :param is_active: The is_active of this DataCenterConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_content(self):
        """Gets the is_content of this DataCenterConfiguration.  # noqa: E501

        When true, this data center will only handle requests that were routed to it using application delivery forward rules. If true, must be an active data center.  # noqa: E501

        :return: The is_content of this DataCenterConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_content

    @is_content.setter
    def is_content(self, is_content):
        """Sets the is_content of this DataCenterConfiguration.

        When true, this data center will only handle requests that were routed to it using application delivery forward rules. If true, must be an active data center.  # noqa: E501

        :param is_content: The is_content of this DataCenterConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_content = is_content

    @property
    def is_rest_of_the_world(self):
        """Gets the is_rest_of_the_world of this DataCenterConfiguration.  # noqa: E501

        When global lbAlgorithm = GEO_PREFERRED or GEO_REQUIRED, exactly one data center must have isRestOfTheWorld = true. This data center will handle traffic from any region that is not assigned to a specific data center.  # noqa: E501

        :return: The is_rest_of_the_world of this DataCenterConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_rest_of_the_world

    @is_rest_of_the_world.setter
    def is_rest_of_the_world(self, is_rest_of_the_world):
        """Sets the is_rest_of_the_world of this DataCenterConfiguration.

        When global lbAlgorithm = GEO_PREFERRED or GEO_REQUIRED, exactly one data center must have isRestOfTheWorld = true. This data center will handle traffic from any region that is not assigned to a specific data center.  # noqa: E501

        :param is_rest_of_the_world: The is_rest_of_the_world of this DataCenterConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_rest_of_the_world = is_rest_of_the_world

    @property
    def geo_locations(self):
        """Gets the geo_locations of this DataCenterConfiguration.  # noqa: E501


        :return: The geo_locations of this DataCenterConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._geo_locations

    @geo_locations.setter
    def geo_locations(self, geo_locations):
        """Sets the geo_locations of this DataCenterConfiguration.


        :param geo_locations: The geo_locations of this DataCenterConfiguration.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["EUROPE", "AUSTRALIA", "US_EAST", "US_WEST", "AFRICA", "ASIA", "SOUTH_AMERICA", "NORTH_AMERICA"]  # noqa: E501
        if not set(geo_locations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `geo_locations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(geo_locations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._geo_locations = geo_locations

    @property
    def origin_pop(self):
        """Gets the origin_pop of this DataCenterConfiguration.  # noqa: E501

        The ID of the PoP that serves as an access point between Imperva and the customer’s origin server. For example: \"lax\", for Los Angeles. When not specified, all Imperva PoPs can send traffic to this data center. The list of available PoPs is documented at: https://docs.imperva.com/bundle/cloud-application-security/page/more/pops.htm  # noqa: E501

        :return: The origin_pop of this DataCenterConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._origin_pop

    @origin_pop.setter
    def origin_pop(self, origin_pop):
        """Sets the origin_pop of this DataCenterConfiguration.

        The ID of the PoP that serves as an access point between Imperva and the customer’s origin server. For example: \"lax\", for Los Angeles. When not specified, all Imperva PoPs can send traffic to this data center. The list of available PoPs is documented at: https://docs.imperva.com/bundle/cloud-application-security/page/more/pops.htm  # noqa: E501

        :param origin_pop: The origin_pop of this DataCenterConfiguration.  # noqa: E501
        :type: str
        """

        self._origin_pop = origin_pop

    @property
    def servers(self):
        """Gets the servers of this DataCenterConfiguration.  # noqa: E501


        :return: The servers of this DataCenterConfiguration.  # noqa: E501
        :rtype: list[DataCenterServerConfiguration]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this DataCenterConfiguration.


        :param servers: The servers of this DataCenterConfiguration.  # noqa: E501
        :type: list[DataCenterServerConfiguration]
        """

        self._servers = servers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCenterConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCenterConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
