# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TopGraphPayloads(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'str',
        'start_time': 'datetime',
        'data': 'list[object]',
        'metric': 'str',
        'data_type': 'str',
        'item': 'str',
        'traffic': 'str'
    }

    attribute_map = {
        'interval': 'interval',
        'start_time': 'startTime',
        'data': 'data',
        'metric': 'metric',
        'data_type': 'dataType',
        'item': 'item',
        'traffic': 'traffic'
    }

    def __init__(self, interval=None, start_time=None, data=None, metric=None, data_type=None, item=None, traffic=None):  # noqa: E501
        """TopGraphPayloads - a model defined in Swagger"""  # noqa: E501
        self._interval = None
        self._start_time = None
        self._data = None
        self._metric = None
        self._data_type = None
        self._item = None
        self._traffic = None
        self.discriminator = None
        if interval is not None:
            self.interval = interval
        if start_time is not None:
            self.start_time = start_time
        if data is not None:
            self.data = data
        if metric is not None:
            self.metric = metric
        if data_type is not None:
            self.data_type = data_type
        if item is not None:
            self.item = item
        if traffic is not None:
            self.traffic = traffic

    @property
    def interval(self):
        """Gets the interval of this TopGraphPayloads.  # noqa: E501


        :return: The interval of this TopGraphPayloads.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this TopGraphPayloads.


        :param interval: The interval of this TopGraphPayloads.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def start_time(self):
        """Gets the start_time of this TopGraphPayloads.  # noqa: E501


        :return: The start_time of this TopGraphPayloads.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TopGraphPayloads.


        :param start_time: The start_time of this TopGraphPayloads.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def data(self):
        """Gets the data of this TopGraphPayloads.  # noqa: E501


        :return: The data of this TopGraphPayloads.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TopGraphPayloads.


        :param data: The data of this TopGraphPayloads.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    @property
    def metric(self):
        """Gets the metric of this TopGraphPayloads.  # noqa: E501


        :return: The metric of this TopGraphPayloads.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this TopGraphPayloads.


        :param metric: The metric of this TopGraphPayloads.  # noqa: E501
        :type: str
        """

        self._metric = metric

    @property
    def data_type(self):
        """Gets the data_type of this TopGraphPayloads.  # noqa: E501


        :return: The data_type of this TopGraphPayloads.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TopGraphPayloads.


        :param data_type: The data_type of this TopGraphPayloads.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def item(self):
        """Gets the item of this TopGraphPayloads.  # noqa: E501


        :return: The item of this TopGraphPayloads.  # noqa: E501
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this TopGraphPayloads.


        :param item: The item of this TopGraphPayloads.  # noqa: E501
        :type: str
        """

        self._item = item

    @property
    def traffic(self):
        """Gets the traffic of this TopGraphPayloads.  # noqa: E501


        :return: The traffic of this TopGraphPayloads.  # noqa: E501
        :rtype: str
        """
        return self._traffic

    @traffic.setter
    def traffic(self, traffic):
        """Sets the traffic of this TopGraphPayloads.


        :param traffic: The traffic of this TopGraphPayloads.  # noqa: E501
        :type: str
        """

        self._traffic = traffic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TopGraphPayloads, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopGraphPayloads):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
