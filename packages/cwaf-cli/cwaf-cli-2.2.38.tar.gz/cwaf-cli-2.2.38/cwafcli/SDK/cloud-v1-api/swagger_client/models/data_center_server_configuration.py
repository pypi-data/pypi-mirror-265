# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataCenterServerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'id': 'int',
        'is_enabled': 'bool',
        'server_mode': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'address': 'address',
        'id': 'id',
        'is_enabled': 'isEnabled',
        'server_mode': 'serverMode',
        'weight': 'weight'
    }

    def __init__(self, address=None, id=None, is_enabled=True, server_mode='ACTIVE', weight=None):  # noqa: E501
        """DataCenterServerConfiguration - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._id = None
        self._is_enabled = None
        self._server_mode = None
        self._weight = None
        self.discriminator = None
        self.address = address
        if id is not None:
            self.id = id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if server_mode is not None:
            self.server_mode = server_mode
        if weight is not None:
            self.weight = weight

    @property
    def address(self):
        """Gets the address of this DataCenterServerConfiguration.  # noqa: E501

        Server address as: host name, ipv4, or ipv6  # noqa: E501

        :return: The address of this DataCenterServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DataCenterServerConfiguration.

        Server address as: host name, ipv4, or ipv6  # noqa: E501

        :param address: The address of this DataCenterServerConfiguration.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def id(self):
        """Gets the id of this DataCenterServerConfiguration.  # noqa: E501

        Server id  # noqa: E501

        :return: The id of this DataCenterServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataCenterServerConfiguration.

        Server id  # noqa: E501

        :param id: The id of this DataCenterServerConfiguration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DataCenterServerConfiguration.  # noqa: E501

        For each data center, at least one server must be enabled  # noqa: E501

        :return: The is_enabled of this DataCenterServerConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DataCenterServerConfiguration.

        For each data center, at least one server must be enabled  # noqa: E501

        :param is_enabled: The is_enabled of this DataCenterServerConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def server_mode(self):
        """Gets the server_mode of this DataCenterServerConfiguration.  # noqa: E501

        Single IP allows single active server plus optionally single standny server. Each server may have multiple webservers (listening to different port). Multiple IPs allow multiple servers having single webserver and listening port per server.  # noqa: E501

        :return: The server_mode of this DataCenterServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._server_mode

    @server_mode.setter
    def server_mode(self, server_mode):
        """Sets the server_mode of this DataCenterServerConfiguration.

        Single IP allows single active server plus optionally single standny server. Each server may have multiple webservers (listening to different port). Multiple IPs allow multiple servers having single webserver and listening port per server.  # noqa: E501

        :param server_mode: The server_mode of this DataCenterServerConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "STANDBY"]  # noqa: E501
        if server_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `server_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(server_mode, allowed_values)
            )

        self._server_mode = server_mode

    @property
    def weight(self):
        """Gets the weight of this DataCenterServerConfiguration.  # noqa: E501

        Weight in percentage. Mandatory when Data center's lbAlgorithm = WEIGHTED  # noqa: E501

        :return: The weight of this DataCenterServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DataCenterServerConfiguration.

        Weight in percentage. Mandatory when Data center's lbAlgorithm = WEIGHTED  # noqa: E501

        :param weight: The weight of this DataCenterServerConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCenterServerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCenterServerConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
