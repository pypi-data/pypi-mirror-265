# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Threat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'incidents': 'int',
        'status': 'str',
        'status_text_id': 'str',
        'status_text': 'str',
        'followup': 'str',
        'followup_text': 'str',
        'followup_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'incidents': 'incidents',
        'status': 'status',
        'status_text_id': 'status_text_id',
        'status_text': 'status_text',
        'followup': 'followup',
        'followup_text': 'followup_text',
        'followup_url': 'followup_url'
    }

    def __init__(self, id=None, name=None, incidents=None, status=None, status_text_id=None, status_text=None, followup=None, followup_text=None, followup_url=None):  # noqa: E501
        """Threat - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._incidents = None
        self._status = None
        self._status_text_id = None
        self._status_text = None
        self._followup = None
        self._followup_text = None
        self._followup_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if incidents is not None:
            self.incidents = incidents
        if status is not None:
            self.status = status
        if status_text_id is not None:
            self.status_text_id = status_text_id
        if status_text is not None:
            self.status_text = status_text
        if followup is not None:
            self.followup = followup
        if followup_text is not None:
            self.followup_text = followup_text
        if followup_url is not None:
            self.followup_url = followup_url

    @property
    def id(self):
        """Gets the id of this Threat.  # noqa: E501


        :return: The id of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Threat.


        :param id: The id of this Threat.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Threat.  # noqa: E501


        :return: The name of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Threat.


        :param name: The name of this Threat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def incidents(self):
        """Gets the incidents of this Threat.  # noqa: E501


        :return: The incidents of this Threat.  # noqa: E501
        :rtype: int
        """
        return self._incidents

    @incidents.setter
    def incidents(self, incidents):
        """Sets the incidents of this Threat.


        :param incidents: The incidents of this Threat.  # noqa: E501
        :type: int
        """

        self._incidents = incidents

    @property
    def status(self):
        """Gets the status of this Threat.  # noqa: E501


        :return: The status of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Threat.


        :param status: The status of this Threat.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def status_text_id(self):
        """Gets the status_text_id of this Threat.  # noqa: E501


        :return: The status_text_id of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._status_text_id

    @status_text_id.setter
    def status_text_id(self, status_text_id):
        """Sets the status_text_id of this Threat.


        :param status_text_id: The status_text_id of this Threat.  # noqa: E501
        :type: str
        """

        self._status_text_id = status_text_id

    @property
    def status_text(self):
        """Gets the status_text of this Threat.  # noqa: E501


        :return: The status_text of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._status_text

    @status_text.setter
    def status_text(self, status_text):
        """Sets the status_text of this Threat.


        :param status_text: The status_text of this Threat.  # noqa: E501
        :type: str
        """

        self._status_text = status_text

    @property
    def followup(self):
        """Gets the followup of this Threat.  # noqa: E501


        :return: The followup of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._followup

    @followup.setter
    def followup(self, followup):
        """Sets the followup of this Threat.


        :param followup: The followup of this Threat.  # noqa: E501
        :type: str
        """

        self._followup = followup

    @property
    def followup_text(self):
        """Gets the followup_text of this Threat.  # noqa: E501


        :return: The followup_text of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._followup_text

    @followup_text.setter
    def followup_text(self, followup_text):
        """Sets the followup_text of this Threat.


        :param followup_text: The followup_text of this Threat.  # noqa: E501
        :type: str
        """

        self._followup_text = followup_text

    @property
    def followup_url(self):
        """Gets the followup_url of this Threat.  # noqa: E501


        :return: The followup_url of this Threat.  # noqa: E501
        :rtype: str
        """
        return self._followup_url

    @followup_url.setter
    def followup_url(self, followup_url):
        """Sets the followup_url of this Threat.


        :param followup_url: The followup_url of this Threat.  # noqa: E501
        :type: str
        """

        self._followup_url = followup_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Threat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Threat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
