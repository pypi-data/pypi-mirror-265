# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InfraProtectEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_time': 'datetime',
        'event_type': 'str',
        'bw_total': 'int',
        'pps_total': 'int',
        'bw_passed': 'int',
        'pps_passed': 'int',
        'bw_blocked': 'int',
        'pps_blocked': 'int',
        'event_target': 'str',
        'reported_by_pop': 'str'
    }

    attribute_map = {
        'event_time': 'eventTime',
        'event_type': 'eventType',
        'bw_total': 'bwTotal',
        'pps_total': 'ppsTotal',
        'bw_passed': 'bwPassed',
        'pps_passed': 'ppsPassed',
        'bw_blocked': 'bwBlocked',
        'pps_blocked': 'ppsBlocked',
        'event_target': 'eventTarget',
        'reported_by_pop': 'reportedByPop'
    }

    def __init__(self, event_time=None, event_type=None, bw_total=None, pps_total=None, bw_passed=None, pps_passed=None, bw_blocked=None, pps_blocked=None, event_target=None, reported_by_pop=None):  # noqa: E501
        """InfraProtectEvent - a model defined in Swagger"""  # noqa: E501
        self._event_time = None
        self._event_type = None
        self._bw_total = None
        self._pps_total = None
        self._bw_passed = None
        self._pps_passed = None
        self._bw_blocked = None
        self._pps_blocked = None
        self._event_target = None
        self._reported_by_pop = None
        self.discriminator = None
        if event_time is not None:
            self.event_time = event_time
        if event_type is not None:
            self.event_type = event_type
        if bw_total is not None:
            self.bw_total = bw_total
        if pps_total is not None:
            self.pps_total = pps_total
        if bw_passed is not None:
            self.bw_passed = bw_passed
        if pps_passed is not None:
            self.pps_passed = pps_passed
        if bw_blocked is not None:
            self.bw_blocked = bw_blocked
        if pps_blocked is not None:
            self.pps_blocked = pps_blocked
        if event_target is not None:
            self.event_target = event_target
        if reported_by_pop is not None:
            self.reported_by_pop = reported_by_pop

    @property
    def event_time(self):
        """Gets the event_time of this InfraProtectEvent.  # noqa: E501


        :return: The event_time of this InfraProtectEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this InfraProtectEvent.


        :param event_time: The event_time of this InfraProtectEvent.  # noqa: E501
        :type: datetime
        """

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this InfraProtectEvent.  # noqa: E501


        :return: The event_type of this InfraProtectEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this InfraProtectEvent.


        :param event_type: The event_type of this InfraProtectEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRE_TUNNEL_UP", "GRE_TUNNEL_DOWN", "ORIGIN_CONNECTION_GRE_UP", "ORIGIN_CONNECTION_GRE_DOWN", "ORIGIN_CONNECTION_ECX_UP", "ORIGIN_CONNECTION_ECX_DOWN", "ORIGIN_CONNECTION_CROSS_CONNECT_UP", "ORIGIN_CONNECTION_CROSS_CONNECT_DOWN", "IP_RANGE_ATTACK_START", "IP_RANGE_ATTACK_STOP", "DDOS_START_IP_RANGE", "DDOS_STOP_IP_RANGE", "DDOS_QUIET_TIME_IP_RANGE", "EXPORTER_NO_DATA", "EXPORTER_BAD_DATA", "EXPORTER_GOOD_DATA", "MONITORING_ATTACK", "MONITORING_CRITICAL_ATTACK", "PROTECTED_IP_STATUS_UP", "PROTECTED_IP_STATUS_DOWN", "PER_IP_DDOS_START_IP_RANGE", "PER_IP_DDOS_STOP_IP_RANGE", "IIP_ACCOUNT_SERVICE_SUSPENDED", "IIP_ACCOUNT_SERVICE_UNSUSPENDED", "INFRAPROTECT_NULL_ROUTE_STARTED", "INFRAPROTECT_NULL_ROUTE_ESCALATED", "INFRAPROTECT_NULL_ROUTE_ENDED", "INFRAPROTECT_RANGE_DIVERT", "INFRAPROTECT_RANGE_REVERT"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def bw_total(self):
        """Gets the bw_total of this InfraProtectEvent.  # noqa: E501


        :return: The bw_total of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._bw_total

    @bw_total.setter
    def bw_total(self, bw_total):
        """Sets the bw_total of this InfraProtectEvent.


        :param bw_total: The bw_total of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._bw_total = bw_total

    @property
    def pps_total(self):
        """Gets the pps_total of this InfraProtectEvent.  # noqa: E501


        :return: The pps_total of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._pps_total

    @pps_total.setter
    def pps_total(self, pps_total):
        """Sets the pps_total of this InfraProtectEvent.


        :param pps_total: The pps_total of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._pps_total = pps_total

    @property
    def bw_passed(self):
        """Gets the bw_passed of this InfraProtectEvent.  # noqa: E501


        :return: The bw_passed of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._bw_passed

    @bw_passed.setter
    def bw_passed(self, bw_passed):
        """Sets the bw_passed of this InfraProtectEvent.


        :param bw_passed: The bw_passed of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._bw_passed = bw_passed

    @property
    def pps_passed(self):
        """Gets the pps_passed of this InfraProtectEvent.  # noqa: E501


        :return: The pps_passed of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._pps_passed

    @pps_passed.setter
    def pps_passed(self, pps_passed):
        """Sets the pps_passed of this InfraProtectEvent.


        :param pps_passed: The pps_passed of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._pps_passed = pps_passed

    @property
    def bw_blocked(self):
        """Gets the bw_blocked of this InfraProtectEvent.  # noqa: E501


        :return: The bw_blocked of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._bw_blocked

    @bw_blocked.setter
    def bw_blocked(self, bw_blocked):
        """Sets the bw_blocked of this InfraProtectEvent.


        :param bw_blocked: The bw_blocked of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._bw_blocked = bw_blocked

    @property
    def pps_blocked(self):
        """Gets the pps_blocked of this InfraProtectEvent.  # noqa: E501


        :return: The pps_blocked of this InfraProtectEvent.  # noqa: E501
        :rtype: int
        """
        return self._pps_blocked

    @pps_blocked.setter
    def pps_blocked(self, pps_blocked):
        """Sets the pps_blocked of this InfraProtectEvent.


        :param pps_blocked: The pps_blocked of this InfraProtectEvent.  # noqa: E501
        :type: int
        """

        self._pps_blocked = pps_blocked

    @property
    def event_target(self):
        """Gets the event_target of this InfraProtectEvent.  # noqa: E501


        :return: The event_target of this InfraProtectEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_target

    @event_target.setter
    def event_target(self, event_target):
        """Sets the event_target of this InfraProtectEvent.


        :param event_target: The event_target of this InfraProtectEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["GRE_TUNNEL", "IP_RANGE", "EXPORTER", "PROTECTED_IP", "INCAPSULA_IP", "NULL_ROUTE"]  # noqa: E501
        if event_target not in allowed_values:
            raise ValueError(
                "Invalid value for `event_target` ({0}), must be one of {1}"  # noqa: E501
                .format(event_target, allowed_values)
            )

        self._event_target = event_target

    @property
    def reported_by_pop(self):
        """Gets the reported_by_pop of this InfraProtectEvent.  # noqa: E501


        :return: The reported_by_pop of this InfraProtectEvent.  # noqa: E501
        :rtype: str
        """
        return self._reported_by_pop

    @reported_by_pop.setter
    def reported_by_pop(self, reported_by_pop):
        """Sets the reported_by_pop of this InfraProtectEvent.


        :param reported_by_pop: The reported_by_pop of this InfraProtectEvent.  # noqa: E501
        :type: str
        """

        self._reported_by_pop = reported_by_pop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InfraProtectEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InfraProtectEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
