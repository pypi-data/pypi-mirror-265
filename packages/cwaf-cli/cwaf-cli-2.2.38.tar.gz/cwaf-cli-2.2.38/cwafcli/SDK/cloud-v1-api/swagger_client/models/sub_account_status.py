# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubAccountStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub_account_id': 'int',
        'sub_account_name': 'str',
        'ref_id': 'str',
        'logins': 'list[Login]',
        'log_level': 'str',
        'support_level': 'str',
        'parent_id': 'int',
        'logs_account_id': 'int'
    }

    attribute_map = {
        'sub_account_id': 'sub_account_id',
        'sub_account_name': 'sub_account_name',
        'ref_id': 'ref_id',
        'logins': 'logins',
        'log_level': 'log_level',
        'support_level': 'support_level',
        'parent_id': 'parent_id',
        'logs_account_id': 'logs_account_id'
    }

    def __init__(self, sub_account_id=None, sub_account_name=None, ref_id=None, logins=None, log_level=None, support_level=None, parent_id=None, logs_account_id=None):  # noqa: E501
        """SubAccountStatus - a model defined in Swagger"""  # noqa: E501
        self._sub_account_id = None
        self._sub_account_name = None
        self._ref_id = None
        self._logins = None
        self._log_level = None
        self._support_level = None
        self._parent_id = None
        self._logs_account_id = None
        self.discriminator = None
        if sub_account_id is not None:
            self.sub_account_id = sub_account_id
        if sub_account_name is not None:
            self.sub_account_name = sub_account_name
        if ref_id is not None:
            self.ref_id = ref_id
        if logins is not None:
            self.logins = logins
        if log_level is not None:
            self.log_level = log_level
        if support_level is not None:
            self.support_level = support_level
        if parent_id is not None:
            self.parent_id = parent_id
        if logs_account_id is not None:
            self.logs_account_id = logs_account_id

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this SubAccountStatus.  # noqa: E501


        :return: The sub_account_id of this SubAccountStatus.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this SubAccountStatus.


        :param sub_account_id: The sub_account_id of this SubAccountStatus.  # noqa: E501
        :type: int
        """

        self._sub_account_id = sub_account_id

    @property
    def sub_account_name(self):
        """Gets the sub_account_name of this SubAccountStatus.  # noqa: E501


        :return: The sub_account_name of this SubAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._sub_account_name

    @sub_account_name.setter
    def sub_account_name(self, sub_account_name):
        """Sets the sub_account_name of this SubAccountStatus.


        :param sub_account_name: The sub_account_name of this SubAccountStatus.  # noqa: E501
        :type: str
        """

        self._sub_account_name = sub_account_name

    @property
    def ref_id(self):
        """Gets the ref_id of this SubAccountStatus.  # noqa: E501


        :return: The ref_id of this SubAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this SubAccountStatus.


        :param ref_id: The ref_id of this SubAccountStatus.  # noqa: E501
        :type: str
        """

        self._ref_id = ref_id

    @property
    def logins(self):
        """Gets the logins of this SubAccountStatus.  # noqa: E501


        :return: The logins of this SubAccountStatus.  # noqa: E501
        :rtype: list[Login]
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this SubAccountStatus.


        :param logins: The logins of this SubAccountStatus.  # noqa: E501
        :type: list[Login]
        """

        self._logins = logins

    @property
    def log_level(self):
        """Gets the log_level of this SubAccountStatus.  # noqa: E501


        :return: The log_level of this SubAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this SubAccountStatus.


        :param log_level: The log_level of this SubAccountStatus.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def support_level(self):
        """Gets the support_level of this SubAccountStatus.  # noqa: E501


        :return: The support_level of this SubAccountStatus.  # noqa: E501
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this SubAccountStatus.


        :param support_level: The support_level of this SubAccountStatus.  # noqa: E501
        :type: str
        """

        self._support_level = support_level

    @property
    def parent_id(self):
        """Gets the parent_id of this SubAccountStatus.  # noqa: E501


        :return: The parent_id of this SubAccountStatus.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SubAccountStatus.


        :param parent_id: The parent_id of this SubAccountStatus.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def logs_account_id(self):
        """Gets the logs_account_id of this SubAccountStatus.  # noqa: E501


        :return: The logs_account_id of this SubAccountStatus.  # noqa: E501
        :rtype: int
        """
        return self._logs_account_id

    @logs_account_id.setter
    def logs_account_id(self, logs_account_id):
        """Sets the logs_account_id of this SubAccountStatus.


        :param logs_account_id: The logs_account_id of this SubAccountStatus.  # noqa: E501
        :type: int
        """

        self._logs_account_id = logs_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubAccountStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubAccountStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
