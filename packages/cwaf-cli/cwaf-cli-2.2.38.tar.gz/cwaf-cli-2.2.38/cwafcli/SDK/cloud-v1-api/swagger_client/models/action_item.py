# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query_string': 'str',
        'post_data': 'str',
        'request_result': 'str',
        'is_secured': 'bool',
        'url': 'str',
        'http_status': 'int',
        'response_time': 'int',
        'think_time': 'int',
        'incident_id': 'str',
        'threats': 'list[ThreatItem]'
    }

    attribute_map = {
        'query_string': 'queryString',
        'post_data': 'postData',
        'request_result': 'requestResult',
        'is_secured': 'isSecured',
        'url': 'url',
        'http_status': 'httpStatus',
        'response_time': 'responseTime',
        'think_time': 'thinkTime',
        'incident_id': 'incidentId',
        'threats': 'threats'
    }

    def __init__(self, query_string=None, post_data=None, request_result=None, is_secured=None, url=None, http_status=None, response_time=None, think_time=None, incident_id=None, threats=None):  # noqa: E501
        """ActionItem - a model defined in Swagger"""  # noqa: E501
        self._query_string = None
        self._post_data = None
        self._request_result = None
        self._is_secured = None
        self._url = None
        self._http_status = None
        self._response_time = None
        self._think_time = None
        self._incident_id = None
        self._threats = None
        self.discriminator = None
        if query_string is not None:
            self.query_string = query_string
        if post_data is not None:
            self.post_data = post_data
        if request_result is not None:
            self.request_result = request_result
        if is_secured is not None:
            self.is_secured = is_secured
        if url is not None:
            self.url = url
        if http_status is not None:
            self.http_status = http_status
        if response_time is not None:
            self.response_time = response_time
        if think_time is not None:
            self.think_time = think_time
        if incident_id is not None:
            self.incident_id = incident_id
        if threats is not None:
            self.threats = threats

    @property
    def query_string(self):
        """Gets the query_string of this ActionItem.  # noqa: E501


        :return: The query_string of this ActionItem.  # noqa: E501
        :rtype: str
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """Sets the query_string of this ActionItem.


        :param query_string: The query_string of this ActionItem.  # noqa: E501
        :type: str
        """

        self._query_string = query_string

    @property
    def post_data(self):
        """Gets the post_data of this ActionItem.  # noqa: E501


        :return: The post_data of this ActionItem.  # noqa: E501
        :rtype: str
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """Sets the post_data of this ActionItem.


        :param post_data: The post_data of this ActionItem.  # noqa: E501
        :type: str
        """

        self._post_data = post_data

    @property
    def request_result(self):
        """Gets the request_result of this ActionItem.  # noqa: E501

        requestResult  # noqa: E501

        :return: The request_result of this ActionItem.  # noqa: E501
        :rtype: str
        """
        return self._request_result

    @request_result.setter
    def request_result(self, request_result):
        """Sets the request_result of this ActionItem.

        requestResult  # noqa: E501

        :param request_result: The request_result of this ActionItem.  # noqa: E501
        :type: str
        """

        self._request_result = request_result

    @property
    def is_secured(self):
        """Gets the is_secured of this ActionItem.  # noqa: E501


        :return: The is_secured of this ActionItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_secured

    @is_secured.setter
    def is_secured(self, is_secured):
        """Sets the is_secured of this ActionItem.


        :param is_secured: The is_secured of this ActionItem.  # noqa: E501
        :type: bool
        """

        self._is_secured = is_secured

    @property
    def url(self):
        """Gets the url of this ActionItem.  # noqa: E501


        :return: The url of this ActionItem.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActionItem.


        :param url: The url of this ActionItem.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def http_status(self):
        """Gets the http_status of this ActionItem.  # noqa: E501


        :return: The http_status of this ActionItem.  # noqa: E501
        :rtype: int
        """
        return self._http_status

    @http_status.setter
    def http_status(self, http_status):
        """Sets the http_status of this ActionItem.


        :param http_status: The http_status of this ActionItem.  # noqa: E501
        :type: int
        """

        self._http_status = http_status

    @property
    def response_time(self):
        """Gets the response_time of this ActionItem.  # noqa: E501


        :return: The response_time of this ActionItem.  # noqa: E501
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this ActionItem.


        :param response_time: The response_time of this ActionItem.  # noqa: E501
        :type: int
        """

        self._response_time = response_time

    @property
    def think_time(self):
        """Gets the think_time of this ActionItem.  # noqa: E501


        :return: The think_time of this ActionItem.  # noqa: E501
        :rtype: int
        """
        return self._think_time

    @think_time.setter
    def think_time(self, think_time):
        """Sets the think_time of this ActionItem.


        :param think_time: The think_time of this ActionItem.  # noqa: E501
        :type: int
        """

        self._think_time = think_time

    @property
    def incident_id(self):
        """Gets the incident_id of this ActionItem.  # noqa: E501


        :return: The incident_id of this ActionItem.  # noqa: E501
        :rtype: str
        """
        return self._incident_id

    @incident_id.setter
    def incident_id(self, incident_id):
        """Sets the incident_id of this ActionItem.


        :param incident_id: The incident_id of this ActionItem.  # noqa: E501
        :type: str
        """

        self._incident_id = incident_id

    @property
    def threats(self):
        """Gets the threats of this ActionItem.  # noqa: E501


        :return: The threats of this ActionItem.  # noqa: E501
        :rtype: list[ThreatItem]
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this ActionItem.


        :param threats: The threats of this ActionItem.  # noqa: E501
        :type: list[ThreatItem]
        """

        self._threats = threats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
