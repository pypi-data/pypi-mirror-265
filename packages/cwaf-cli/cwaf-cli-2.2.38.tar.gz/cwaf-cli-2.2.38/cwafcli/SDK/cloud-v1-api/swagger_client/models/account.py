# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'plan_id': 'str',
        'plan_name': 'str',
        'trial_end_date': 'datetime',
        'account_id': 'int',
        'parent_id': 'int',
        'john_account': 'str',
        'user_name': 'str',
        'logins': 'list[Login]',
        'log_level': 'str',
        'support_level': 'str',
        'support_all_tls_versions': 'bool',
        'allow_ssl_validation_delegation': 'bool',
        'domains_for_ssl_validation_delegation': 'list[str]',
        'cname_value_for_ssl_validation_delegation': 'str',
        'wildcard_san_for_new_sites': 'str',
        'naked_domain_san_for_new_www_sites': 'bool',
        'enable_http2_for_new_sites': 'bool',
        'enable_http2_to_origin_for_new_sites': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'plan_id': 'plan_id',
        'plan_name': 'plan_name',
        'trial_end_date': 'trial_end_date',
        'account_id': 'account_id',
        'parent_id': 'parent_id',
        'john_account': 'John Account',
        'user_name': 'user_name',
        'logins': 'logins',
        'log_level': 'log_level',
        'support_level': 'support_level',
        'support_all_tls_versions': 'support_all_tls_versions',
        'allow_ssl_validation_delegation': 'allow_ssl_validation_delegation',
        'domains_for_ssl_validation_delegation': 'domains_for_ssl_validation_delegation',
        'cname_value_for_ssl_validation_delegation': 'cname_value_for_ssl_validation_delegation',
        'wildcard_san_for_new_sites': 'wildcard_san_for_new_sites',
        'naked_domain_san_for_new_www_sites': 'naked_domain_san_for_new_www_sites',
        'enable_http2_for_new_sites': 'enable_http2_for_new_sites',
        'enable_http2_to_origin_for_new_sites': 'enable_http2_to_origin_for_new_sites'
    }

    def __init__(self, email=None, plan_id=None, plan_name=None, trial_end_date=None, account_id=None, parent_id=None, john_account=None, user_name=None, logins=None, log_level=None, support_level=None, support_all_tls_versions=None, allow_ssl_validation_delegation=None, domains_for_ssl_validation_delegation=None, cname_value_for_ssl_validation_delegation=None, wildcard_san_for_new_sites=None, naked_domain_san_for_new_www_sites=None, enable_http2_for_new_sites=None, enable_http2_to_origin_for_new_sites=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._plan_id = None
        self._plan_name = None
        self._trial_end_date = None
        self._account_id = None
        self._parent_id = None
        self._john_account = None
        self._user_name = None
        self._logins = None
        self._log_level = None
        self._support_level = None
        self._support_all_tls_versions = None
        self._allow_ssl_validation_delegation = None
        self._domains_for_ssl_validation_delegation = None
        self._cname_value_for_ssl_validation_delegation = None
        self._wildcard_san_for_new_sites = None
        self._naked_domain_san_for_new_www_sites = None
        self._enable_http2_for_new_sites = None
        self._enable_http2_to_origin_for_new_sites = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if plan_id is not None:
            self.plan_id = plan_id
        if plan_name is not None:
            self.plan_name = plan_name
        if trial_end_date is not None:
            self.trial_end_date = trial_end_date
        if account_id is not None:
            self.account_id = account_id
        if parent_id is not None:
            self.parent_id = parent_id
        if john_account is not None:
            self.john_account = john_account
        if user_name is not None:
            self.user_name = user_name
        if logins is not None:
            self.logins = logins
        if log_level is not None:
            self.log_level = log_level
        if support_level is not None:
            self.support_level = support_level
        if support_all_tls_versions is not None:
            self.support_all_tls_versions = support_all_tls_versions
        if allow_ssl_validation_delegation is not None:
            self.allow_ssl_validation_delegation = allow_ssl_validation_delegation
        if domains_for_ssl_validation_delegation is not None:
            self.domains_for_ssl_validation_delegation = domains_for_ssl_validation_delegation
        if cname_value_for_ssl_validation_delegation is not None:
            self.cname_value_for_ssl_validation_delegation = cname_value_for_ssl_validation_delegation
        if wildcard_san_for_new_sites is not None:
            self.wildcard_san_for_new_sites = wildcard_san_for_new_sites
        if naked_domain_san_for_new_www_sites is not None:
            self.naked_domain_san_for_new_www_sites = naked_domain_san_for_new_www_sites
        if enable_http2_for_new_sites is not None:
            self.enable_http2_for_new_sites = enable_http2_for_new_sites
        if enable_http2_to_origin_for_new_sites is not None:
            self.enable_http2_to_origin_for_new_sites = enable_http2_to_origin_for_new_sites

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501


        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.


        :param email: The email of this Account.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def plan_id(self):
        """Gets the plan_id of this Account.  # noqa: E501


        :return: The plan_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Account.


        :param plan_id: The plan_id of this Account.  # noqa: E501
        :type: str
        """

        self._plan_id = plan_id

    @property
    def plan_name(self):
        """Gets the plan_name of this Account.  # noqa: E501


        :return: The plan_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._plan_name

    @plan_name.setter
    def plan_name(self, plan_name):
        """Sets the plan_name of this Account.


        :param plan_name: The plan_name of this Account.  # noqa: E501
        :type: str
        """

        self._plan_name = plan_name

    @property
    def trial_end_date(self):
        """Gets the trial_end_date of this Account.  # noqa: E501


        :return: The trial_end_date of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._trial_end_date

    @trial_end_date.setter
    def trial_end_date(self, trial_end_date):
        """Sets the trial_end_date of this Account.


        :param trial_end_date: The trial_end_date of this Account.  # noqa: E501
        :type: datetime
        """

        self._trial_end_date = trial_end_date

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501


        :return: The account_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def parent_id(self):
        """Gets the parent_id of this Account.  # noqa: E501


        :return: The parent_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Account.


        :param parent_id: The parent_id of this Account.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def john_account(self):
        """Gets the john_account of this Account.  # noqa: E501


        :return: The john_account of this Account.  # noqa: E501
        :rtype: str
        """
        return self._john_account

    @john_account.setter
    def john_account(self, john_account):
        """Sets the john_account of this Account.


        :param john_account: The john_account of this Account.  # noqa: E501
        :type: str
        """

        self._john_account = john_account

    @property
    def user_name(self):
        """Gets the user_name of this Account.  # noqa: E501


        :return: The user_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Account.


        :param user_name: The user_name of this Account.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def logins(self):
        """Gets the logins of this Account.  # noqa: E501


        :return: The logins of this Account.  # noqa: E501
        :rtype: list[Login]
        """
        return self._logins

    @logins.setter
    def logins(self, logins):
        """Sets the logins of this Account.


        :param logins: The logins of this Account.  # noqa: E501
        :type: list[Login]
        """

        self._logins = logins

    @property
    def log_level(self):
        """Gets the log_level of this Account.  # noqa: E501


        :return: The log_level of this Account.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this Account.


        :param log_level: The log_level of this Account.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def support_level(self):
        """Gets the support_level of this Account.  # noqa: E501


        :return: The support_level of this Account.  # noqa: E501
        :rtype: str
        """
        return self._support_level

    @support_level.setter
    def support_level(self, support_level):
        """Sets the support_level of this Account.


        :param support_level: The support_level of this Account.  # noqa: E501
        :type: str
        """

        self._support_level = support_level

    @property
    def support_all_tls_versions(self):
        """Gets the support_all_tls_versions of this Account.  # noqa: E501


        :return: The support_all_tls_versions of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._support_all_tls_versions

    @support_all_tls_versions.setter
    def support_all_tls_versions(self, support_all_tls_versions):
        """Sets the support_all_tls_versions of this Account.


        :param support_all_tls_versions: The support_all_tls_versions of this Account.  # noqa: E501
        :type: bool
        """

        self._support_all_tls_versions = support_all_tls_versions

    @property
    def allow_ssl_validation_delegation(self):
        """Gets the allow_ssl_validation_delegation of this Account.  # noqa: E501


        :return: The allow_ssl_validation_delegation of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ssl_validation_delegation

    @allow_ssl_validation_delegation.setter
    def allow_ssl_validation_delegation(self, allow_ssl_validation_delegation):
        """Sets the allow_ssl_validation_delegation of this Account.


        :param allow_ssl_validation_delegation: The allow_ssl_validation_delegation of this Account.  # noqa: E501
        :type: bool
        """

        self._allow_ssl_validation_delegation = allow_ssl_validation_delegation

    @property
    def domains_for_ssl_validation_delegation(self):
        """Gets the domains_for_ssl_validation_delegation of this Account.  # noqa: E501


        :return: The domains_for_ssl_validation_delegation of this Account.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains_for_ssl_validation_delegation

    @domains_for_ssl_validation_delegation.setter
    def domains_for_ssl_validation_delegation(self, domains_for_ssl_validation_delegation):
        """Sets the domains_for_ssl_validation_delegation of this Account.


        :param domains_for_ssl_validation_delegation: The domains_for_ssl_validation_delegation of this Account.  # noqa: E501
        :type: list[str]
        """

        self._domains_for_ssl_validation_delegation = domains_for_ssl_validation_delegation

    @property
    def cname_value_for_ssl_validation_delegation(self):
        """Gets the cname_value_for_ssl_validation_delegation of this Account.  # noqa: E501


        :return: The cname_value_for_ssl_validation_delegation of this Account.  # noqa: E501
        :rtype: str
        """
        return self._cname_value_for_ssl_validation_delegation

    @cname_value_for_ssl_validation_delegation.setter
    def cname_value_for_ssl_validation_delegation(self, cname_value_for_ssl_validation_delegation):
        """Sets the cname_value_for_ssl_validation_delegation of this Account.


        :param cname_value_for_ssl_validation_delegation: The cname_value_for_ssl_validation_delegation of this Account.  # noqa: E501
        :type: str
        """

        self._cname_value_for_ssl_validation_delegation = cname_value_for_ssl_validation_delegation

    @property
    def wildcard_san_for_new_sites(self):
        """Gets the wildcard_san_for_new_sites of this Account.  # noqa: E501


        :return: The wildcard_san_for_new_sites of this Account.  # noqa: E501
        :rtype: str
        """
        return self._wildcard_san_for_new_sites

    @wildcard_san_for_new_sites.setter
    def wildcard_san_for_new_sites(self, wildcard_san_for_new_sites):
        """Sets the wildcard_san_for_new_sites of this Account.


        :param wildcard_san_for_new_sites: The wildcard_san_for_new_sites of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["True", "False", "Default"]  # noqa: E501
        if wildcard_san_for_new_sites not in allowed_values:
            raise ValueError(
                "Invalid value for `wildcard_san_for_new_sites` ({0}), must be one of {1}"  # noqa: E501
                .format(wildcard_san_for_new_sites, allowed_values)
            )

        self._wildcard_san_for_new_sites = wildcard_san_for_new_sites

    @property
    def naked_domain_san_for_new_www_sites(self):
        """Gets the naked_domain_san_for_new_www_sites of this Account.  # noqa: E501


        :return: The naked_domain_san_for_new_www_sites of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._naked_domain_san_for_new_www_sites

    @naked_domain_san_for_new_www_sites.setter
    def naked_domain_san_for_new_www_sites(self, naked_domain_san_for_new_www_sites):
        """Sets the naked_domain_san_for_new_www_sites of this Account.


        :param naked_domain_san_for_new_www_sites: The naked_domain_san_for_new_www_sites of this Account.  # noqa: E501
        :type: bool
        """

        self._naked_domain_san_for_new_www_sites = naked_domain_san_for_new_www_sites

    @property
    def enable_http2_for_new_sites(self):
        """Gets the enable_http2_for_new_sites of this Account.  # noqa: E501


        :return: The enable_http2_for_new_sites of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._enable_http2_for_new_sites

    @enable_http2_for_new_sites.setter
    def enable_http2_for_new_sites(self, enable_http2_for_new_sites):
        """Sets the enable_http2_for_new_sites of this Account.


        :param enable_http2_for_new_sites: The enable_http2_for_new_sites of this Account.  # noqa: E501
        :type: bool
        """

        self._enable_http2_for_new_sites = enable_http2_for_new_sites

    @property
    def enable_http2_to_origin_for_new_sites(self):
        """Gets the enable_http2_to_origin_for_new_sites of this Account.  # noqa: E501


        :return: The enable_http2_to_origin_for_new_sites of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._enable_http2_to_origin_for_new_sites

    @enable_http2_to_origin_for_new_sites.setter
    def enable_http2_to_origin_for_new_sites(self, enable_http2_to_origin_for_new_sites):
        """Sets the enable_http2_to_origin_for_new_sites of this Account.


        :param enable_http2_to_origin_for_new_sites: The enable_http2_to_origin_for_new_sites of this Account.  # noqa: E501
        :type: bool
        """

        self._enable_http2_to_origin_for_new_sites = enable_http2_to_origin_for_new_sites

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
