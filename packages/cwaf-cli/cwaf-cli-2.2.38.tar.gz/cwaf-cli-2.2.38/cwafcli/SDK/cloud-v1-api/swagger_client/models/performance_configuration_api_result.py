# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PerformanceConfigurationApiResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advanced_caching_rules': 'list[dict(str, object)]',
        'acceleration_level': 'str',
        'acceleration_level_raw': 'str',
        'async_validation': 'bool',
        'minify_javascript': 'bool',
        'minify_css': 'bool',
        'minify_static_html': 'bool',
        'compress_jpeg': 'bool',
        'compress_jepg': 'bool',
        'progressive_image_rendering': 'bool',
        'aggressive_compression': 'bool',
        'compress_png': 'bool',
        'on_the_fly_compression': 'bool',
        'tcp_pre_pooling': 'bool',
        'comply_no_cache': 'bool',
        'comply_vary': 'bool',
        'use_shortest_caching': 'bool',
        'perfer_last_modified': 'bool',
        'prefer_last_modified': 'bool',
        'disable_client_side_caching': 'bool',
        'cache300x': 'bool',
        'cache_headers': 'list[object]'
    }

    attribute_map = {
        'advanced_caching_rules': 'advanced_caching_rules',
        'acceleration_level': 'acceleration_level',
        'acceleration_level_raw': 'acceleration_level_raw',
        'async_validation': 'async_validation',
        'minify_javascript': 'minify_javascript',
        'minify_css': 'minify_css',
        'minify_static_html': 'minify_static_html',
        'compress_jpeg': 'compress_jpeg',
        'compress_jepg': 'compress_jepg',
        'progressive_image_rendering': 'progressive_image_rendering',
        'aggressive_compression': 'aggressive_compression',
        'compress_png': 'compress_png',
        'on_the_fly_compression': 'on_the_fly_compression',
        'tcp_pre_pooling': 'tcp_pre_pooling',
        'comply_no_cache': 'comply_no_cache',
        'comply_vary': 'comply_vary',
        'use_shortest_caching': 'use_shortest_caching',
        'perfer_last_modified': 'perfer_last_modified',
        'prefer_last_modified': 'prefer_last_modified',
        'disable_client_side_caching': 'disable_client_side_caching',
        'cache300x': 'cache300x',
        'cache_headers': 'cache_headers'
    }

    def __init__(self, advanced_caching_rules=None, acceleration_level=None, acceleration_level_raw=None, async_validation=None, minify_javascript=None, minify_css=None, minify_static_html=None, compress_jpeg=None, compress_jepg=None, progressive_image_rendering=None, aggressive_compression=None, compress_png=None, on_the_fly_compression=None, tcp_pre_pooling=None, comply_no_cache=None, comply_vary=None, use_shortest_caching=None, perfer_last_modified=None, prefer_last_modified=None, disable_client_side_caching=None, cache300x=None, cache_headers=None):  # noqa: E501
        """PerformanceConfigurationApiResult - a model defined in Swagger"""  # noqa: E501
        self._advanced_caching_rules = None
        self._acceleration_level = None
        self._acceleration_level_raw = None
        self._async_validation = None
        self._minify_javascript = None
        self._minify_css = None
        self._minify_static_html = None
        self._compress_jpeg = None
        self._compress_jepg = None
        self._progressive_image_rendering = None
        self._aggressive_compression = None
        self._compress_png = None
        self._on_the_fly_compression = None
        self._tcp_pre_pooling = None
        self._comply_no_cache = None
        self._comply_vary = None
        self._use_shortest_caching = None
        self._perfer_last_modified = None
        self._prefer_last_modified = None
        self._disable_client_side_caching = None
        self._cache300x = None
        self._cache_headers = None
        self.discriminator = None
        if advanced_caching_rules is not None:
            self.advanced_caching_rules = advanced_caching_rules
        if acceleration_level is not None:
            self.acceleration_level = acceleration_level
        if acceleration_level_raw is not None:
            self.acceleration_level_raw = acceleration_level_raw
        if async_validation is not None:
            self.async_validation = async_validation
        if minify_javascript is not None:
            self.minify_javascript = minify_javascript
        if minify_css is not None:
            self.minify_css = minify_css
        if minify_static_html is not None:
            self.minify_static_html = minify_static_html
        if compress_jpeg is not None:
            self.compress_jpeg = compress_jpeg
        if compress_jepg is not None:
            self.compress_jepg = compress_jepg
        if progressive_image_rendering is not None:
            self.progressive_image_rendering = progressive_image_rendering
        if aggressive_compression is not None:
            self.aggressive_compression = aggressive_compression
        if compress_png is not None:
            self.compress_png = compress_png
        if on_the_fly_compression is not None:
            self.on_the_fly_compression = on_the_fly_compression
        if tcp_pre_pooling is not None:
            self.tcp_pre_pooling = tcp_pre_pooling
        if comply_no_cache is not None:
            self.comply_no_cache = comply_no_cache
        if comply_vary is not None:
            self.comply_vary = comply_vary
        if use_shortest_caching is not None:
            self.use_shortest_caching = use_shortest_caching
        if perfer_last_modified is not None:
            self.perfer_last_modified = perfer_last_modified
        if prefer_last_modified is not None:
            self.prefer_last_modified = prefer_last_modified
        if disable_client_side_caching is not None:
            self.disable_client_side_caching = disable_client_side_caching
        if cache300x is not None:
            self.cache300x = cache300x
        if cache_headers is not None:
            self.cache_headers = cache_headers

    @property
    def advanced_caching_rules(self):
        """Gets the advanced_caching_rules of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The advanced_caching_rules of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._advanced_caching_rules

    @advanced_caching_rules.setter
    def advanced_caching_rules(self, advanced_caching_rules):
        """Sets the advanced_caching_rules of this PerformanceConfigurationApiResult.


        :param advanced_caching_rules: The advanced_caching_rules of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._advanced_caching_rules = advanced_caching_rules

    @property
    def acceleration_level(self):
        """Gets the acceleration_level of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The acceleration_level of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: str
        """
        return self._acceleration_level

    @acceleration_level.setter
    def acceleration_level(self, acceleration_level):
        """Sets the acceleration_level of this PerformanceConfigurationApiResult.


        :param acceleration_level: The acceleration_level of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: str
        """

        self._acceleration_level = acceleration_level

    @property
    def acceleration_level_raw(self):
        """Gets the acceleration_level_raw of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The acceleration_level_raw of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: str
        """
        return self._acceleration_level_raw

    @acceleration_level_raw.setter
    def acceleration_level_raw(self, acceleration_level_raw):
        """Sets the acceleration_level_raw of this PerformanceConfigurationApiResult.


        :param acceleration_level_raw: The acceleration_level_raw of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: str
        """

        self._acceleration_level_raw = acceleration_level_raw

    @property
    def async_validation(self):
        """Gets the async_validation of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The async_validation of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._async_validation

    @async_validation.setter
    def async_validation(self, async_validation):
        """Sets the async_validation of this PerformanceConfigurationApiResult.


        :param async_validation: The async_validation of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._async_validation = async_validation

    @property
    def minify_javascript(self):
        """Gets the minify_javascript of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The minify_javascript of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._minify_javascript

    @minify_javascript.setter
    def minify_javascript(self, minify_javascript):
        """Sets the minify_javascript of this PerformanceConfigurationApiResult.


        :param minify_javascript: The minify_javascript of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._minify_javascript = minify_javascript

    @property
    def minify_css(self):
        """Gets the minify_css of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The minify_css of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._minify_css

    @minify_css.setter
    def minify_css(self, minify_css):
        """Sets the minify_css of this PerformanceConfigurationApiResult.


        :param minify_css: The minify_css of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._minify_css = minify_css

    @property
    def minify_static_html(self):
        """Gets the minify_static_html of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The minify_static_html of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._minify_static_html

    @minify_static_html.setter
    def minify_static_html(self, minify_static_html):
        """Sets the minify_static_html of this PerformanceConfigurationApiResult.


        :param minify_static_html: The minify_static_html of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._minify_static_html = minify_static_html

    @property
    def compress_jpeg(self):
        """Gets the compress_jpeg of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The compress_jpeg of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._compress_jpeg

    @compress_jpeg.setter
    def compress_jpeg(self, compress_jpeg):
        """Sets the compress_jpeg of this PerformanceConfigurationApiResult.


        :param compress_jpeg: The compress_jpeg of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._compress_jpeg = compress_jpeg

    @property
    def compress_jepg(self):
        """Gets the compress_jepg of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The compress_jepg of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._compress_jepg

    @compress_jepg.setter
    def compress_jepg(self, compress_jepg):
        """Sets the compress_jepg of this PerformanceConfigurationApiResult.


        :param compress_jepg: The compress_jepg of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._compress_jepg = compress_jepg

    @property
    def progressive_image_rendering(self):
        """Gets the progressive_image_rendering of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The progressive_image_rendering of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._progressive_image_rendering

    @progressive_image_rendering.setter
    def progressive_image_rendering(self, progressive_image_rendering):
        """Sets the progressive_image_rendering of this PerformanceConfigurationApiResult.


        :param progressive_image_rendering: The progressive_image_rendering of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._progressive_image_rendering = progressive_image_rendering

    @property
    def aggressive_compression(self):
        """Gets the aggressive_compression of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The aggressive_compression of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._aggressive_compression

    @aggressive_compression.setter
    def aggressive_compression(self, aggressive_compression):
        """Sets the aggressive_compression of this PerformanceConfigurationApiResult.


        :param aggressive_compression: The aggressive_compression of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._aggressive_compression = aggressive_compression

    @property
    def compress_png(self):
        """Gets the compress_png of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The compress_png of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._compress_png

    @compress_png.setter
    def compress_png(self, compress_png):
        """Sets the compress_png of this PerformanceConfigurationApiResult.


        :param compress_png: The compress_png of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._compress_png = compress_png

    @property
    def on_the_fly_compression(self):
        """Gets the on_the_fly_compression of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The on_the_fly_compression of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._on_the_fly_compression

    @on_the_fly_compression.setter
    def on_the_fly_compression(self, on_the_fly_compression):
        """Sets the on_the_fly_compression of this PerformanceConfigurationApiResult.


        :param on_the_fly_compression: The on_the_fly_compression of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._on_the_fly_compression = on_the_fly_compression

    @property
    def tcp_pre_pooling(self):
        """Gets the tcp_pre_pooling of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The tcp_pre_pooling of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._tcp_pre_pooling

    @tcp_pre_pooling.setter
    def tcp_pre_pooling(self, tcp_pre_pooling):
        """Sets the tcp_pre_pooling of this PerformanceConfigurationApiResult.


        :param tcp_pre_pooling: The tcp_pre_pooling of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._tcp_pre_pooling = tcp_pre_pooling

    @property
    def comply_no_cache(self):
        """Gets the comply_no_cache of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The comply_no_cache of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._comply_no_cache

    @comply_no_cache.setter
    def comply_no_cache(self, comply_no_cache):
        """Sets the comply_no_cache of this PerformanceConfigurationApiResult.


        :param comply_no_cache: The comply_no_cache of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._comply_no_cache = comply_no_cache

    @property
    def comply_vary(self):
        """Gets the comply_vary of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The comply_vary of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._comply_vary

    @comply_vary.setter
    def comply_vary(self, comply_vary):
        """Sets the comply_vary of this PerformanceConfigurationApiResult.


        :param comply_vary: The comply_vary of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._comply_vary = comply_vary

    @property
    def use_shortest_caching(self):
        """Gets the use_shortest_caching of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The use_shortest_caching of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._use_shortest_caching

    @use_shortest_caching.setter
    def use_shortest_caching(self, use_shortest_caching):
        """Sets the use_shortest_caching of this PerformanceConfigurationApiResult.


        :param use_shortest_caching: The use_shortest_caching of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._use_shortest_caching = use_shortest_caching

    @property
    def perfer_last_modified(self):
        """Gets the perfer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The perfer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._perfer_last_modified

    @perfer_last_modified.setter
    def perfer_last_modified(self, perfer_last_modified):
        """Sets the perfer_last_modified of this PerformanceConfigurationApiResult.


        :param perfer_last_modified: The perfer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._perfer_last_modified = perfer_last_modified

    @property
    def prefer_last_modified(self):
        """Gets the prefer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The prefer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._prefer_last_modified

    @prefer_last_modified.setter
    def prefer_last_modified(self, prefer_last_modified):
        """Sets the prefer_last_modified of this PerformanceConfigurationApiResult.


        :param prefer_last_modified: The prefer_last_modified of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._prefer_last_modified = prefer_last_modified

    @property
    def disable_client_side_caching(self):
        """Gets the disable_client_side_caching of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The disable_client_side_caching of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._disable_client_side_caching

    @disable_client_side_caching.setter
    def disable_client_side_caching(self, disable_client_side_caching):
        """Sets the disable_client_side_caching of this PerformanceConfigurationApiResult.


        :param disable_client_side_caching: The disable_client_side_caching of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._disable_client_side_caching = disable_client_side_caching

    @property
    def cache300x(self):
        """Gets the cache300x of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The cache300x of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: bool
        """
        return self._cache300x

    @cache300x.setter
    def cache300x(self, cache300x):
        """Sets the cache300x of this PerformanceConfigurationApiResult.


        :param cache300x: The cache300x of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: bool
        """

        self._cache300x = cache300x

    @property
    def cache_headers(self):
        """Gets the cache_headers of this PerformanceConfigurationApiResult.  # noqa: E501


        :return: The cache_headers of this PerformanceConfigurationApiResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._cache_headers

    @cache_headers.setter
    def cache_headers(self, cache_headers):
        """Sets the cache_headers of this PerformanceConfigurationApiResult.


        :param cache_headers: The cache_headers of this PerformanceConfigurationApiResult.  # noqa: E501
        :type: list[object]
        """

        self._cache_headers = cache_headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PerformanceConfigurationApiResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PerformanceConfigurationApiResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
