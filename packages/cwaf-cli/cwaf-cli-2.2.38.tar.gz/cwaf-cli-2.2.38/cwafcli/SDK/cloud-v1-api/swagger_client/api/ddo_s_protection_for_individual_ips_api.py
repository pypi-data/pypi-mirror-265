# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DDoSProtectionForIndividualIPsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_sip_by_cname(self, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by origin IP  # noqa: E501

        Use this operation to onboard a CNAME record to the 'IP Protection over TCP' service. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_cname(cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cname: CNAME record to onboard to service (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: Optional description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE'
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sip_by_cname_with_http_info(cname, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sip_by_cname_with_http_info(cname, **kwargs)  # noqa: E501
            return data

    def add_sip_by_cname_with_http_info(self, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by origin IP  # noqa: E501

        Use this operation to onboard a CNAME record to the 'IP Protection over TCP' service. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_cname_with_http_info(cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cname: CNAME record to onboard to service (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: Optional description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE'
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cname', 'enable_ha_protocol', 'description', 'monitoring_type', 'tcp_monitoring_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sip_by_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cname' is set
        if ('cname' not in params or
                params['cname'] is None):
            raise ValueError("Missing the required parameter `cname` when calling `add_sip_by_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cname' in params:
            query_params.append(('cname', params['cname']))  # noqa: E501
        if 'enable_ha_protocol' in params:
            query_params.append(('enable_ha_protocol', params['enable_ha_protocol']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'monitoring_type' in params:
            query_params.append(('monitoring_type', params['monitoring_type']))  # noqa: E501
        if 'tcp_monitoring_port' in params:
            query_params.append(('tcp_monitoring_port', params['tcp_monitoring_port']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/add/cname', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_sip_by_dns_and_cname(self, dns_name, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by DNS and CNAME  # noqa: E501

        Use this operation to onboard a CNAME record with an associated DNS name to the 'IP Protection over TCP' service. If DNS check is enabled, the response will include the list of resolved CNAME records for the provided domain name, and the operation will only succeed if the provided CNAME will be included in that list. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_dns_and_cname(dns_name, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_name: Domain name to onboard to service (required)
        :param str cname: CNAME record to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sip_by_dns_and_cname_with_http_info(dns_name, cname, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sip_by_dns_and_cname_with_http_info(dns_name, cname, **kwargs)  # noqa: E501
            return data

    def add_sip_by_dns_and_cname_with_http_info(self, dns_name, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by DNS and CNAME  # noqa: E501

        Use this operation to onboard a CNAME record with an associated DNS name to the 'IP Protection over TCP' service. If DNS check is enabled, the response will include the list of resolved CNAME records for the provided domain name, and the operation will only succeed if the provided CNAME will be included in that list. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_dns_and_cname_with_http_info(dns_name, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_name: Domain name to onboard to service (required)
        :param str cname: CNAME record to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_name', 'cname', 'disable_dns_check', 'enable_ha_protocol', 'description', 'monitoring_type', 'tcp_monitoring_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sip_by_dns_and_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_name' is set
        if ('dns_name' not in params or
                params['dns_name'] is None):
            raise ValueError("Missing the required parameter `dns_name` when calling `add_sip_by_dns_and_cname`")  # noqa: E501
        # verify the required parameter 'cname' is set
        if ('cname' not in params or
                params['cname'] is None):
            raise ValueError("Missing the required parameter `cname` when calling `add_sip_by_dns_and_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dns_name' in params:
            query_params.append(('dns_name', params['dns_name']))  # noqa: E501
        if 'cname' in params:
            query_params.append(('cname', params['cname']))  # noqa: E501
        if 'disable_dns_check' in params:
            query_params.append(('disable_dns_check', params['disable_dns_check']))  # noqa: E501
        if 'enable_ha_protocol' in params:
            query_params.append(('enable_ha_protocol', params['enable_ha_protocol']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'monitoring_type' in params:
            query_params.append(('monitoring_type', params['monitoring_type']))  # noqa: E501
        if 'tcp_monitoring_port' in params:
            query_params.append(('tcp_monitoring_port', params['tcp_monitoring_port']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/add/dns-with-cname', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_sip_by_dns_and_ip(self, dns_name, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by DNS and origin IP  # noqa: E501

        Use this operation to onboard a public origin IP with an associated DNS name to the 'IP Protection over TCP' service. If DNS check is enabled, the response will include the list of resolved IPs for the provided domain name, and the operation will only succeed if the provided origin IP will be included in that list. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_dns_and_ip(dns_name, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_name: Domain name to onboard to service (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sip_by_dns_and_ip_with_http_info(dns_name, origin_ip, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sip_by_dns_and_ip_with_http_info(dns_name, origin_ip, **kwargs)  # noqa: E501
            return data

    def add_sip_by_dns_and_ip_with_http_info(self, dns_name, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by DNS and origin IP  # noqa: E501

        Use this operation to onboard a public origin IP with an associated DNS name to the 'IP Protection over TCP' service. If DNS check is enabled, the response will include the list of resolved IPs for the provided domain name, and the operation will only succeed if the provided origin IP will be included in that list. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_dns_and_ip_with_http_info(dns_name, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dns_name: Domain name to onboard to service (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dns_name', 'origin_ip', 'disable_dns_check', 'enable_ha_protocol', 'description', 'monitoring_type', 'tcp_monitoring_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sip_by_dns_and_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dns_name' is set
        if ('dns_name' not in params or
                params['dns_name'] is None):
            raise ValueError("Missing the required parameter `dns_name` when calling `add_sip_by_dns_and_ip`")  # noqa: E501
        # verify the required parameter 'origin_ip' is set
        if ('origin_ip' not in params or
                params['origin_ip'] is None):
            raise ValueError("Missing the required parameter `origin_ip` when calling `add_sip_by_dns_and_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dns_name' in params:
            query_params.append(('dns_name', params['dns_name']))  # noqa: E501
        if 'origin_ip' in params:
            query_params.append(('origin_ip', params['origin_ip']))  # noqa: E501
        if 'disable_dns_check' in params:
            query_params.append(('disable_dns_check', params['disable_dns_check']))  # noqa: E501
        if 'enable_ha_protocol' in params:
            query_params.append(('enable_ha_protocol', params['enable_ha_protocol']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'monitoring_type' in params:
            query_params.append(('monitoring_type', params['monitoring_type']))  # noqa: E501
        if 'tcp_monitoring_port' in params:
            query_params.append(('tcp_monitoring_port', params['tcp_monitoring_port']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/add/dns-with-ip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_sip_by_ip(self, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by CNAME  # noqa: E501

        Use this operation to onboard a public origin IP to the 'IP Protection over TCP' service. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_ip(origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE'
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sip_by_ip_with_http_info(origin_ip, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sip_by_ip_with_http_info(origin_ip, **kwargs)  # noqa: E501
            return data

    def add_sip_by_ip_with_http_info(self, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - add by CNAME  # noqa: E501

        Use this operation to onboard a public origin IP to the 'IP Protection over TCP' service. If successful, the operation will return the generated Edge IP.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sip_by_ip_with_http_info(origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting (disabled by default)
        :param str description: description for the generated Edge IP
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE'
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origin_ip', 'enable_ha_protocol', 'description', 'monitoring_type', 'tcp_monitoring_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sip_by_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'origin_ip' is set
        if ('origin_ip' not in params or
                params['origin_ip'] is None):
            raise ValueError("Missing the required parameter `origin_ip` when calling `add_sip_by_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'origin_ip' in params:
            query_params.append(('origin_ip', params['origin_ip']))  # noqa: E501
        if 'enable_ha_protocol' in params:
            query_params.append(('enable_ha_protocol', params['enable_ha_protocol']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'monitoring_type' in params:
            query_params.append(('monitoring_type', params['monitoring_type']))  # noqa: E501
        if 'tcp_monitoring_port' in params:
            query_params.append(('tcp_monitoring_port', params['tcp_monitoring_port']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/add/ip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_by_cname(self, edge_ip, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by CNAME  # noqa: E501

        Use this operation to assign a new CNAME record to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS will be overwritten). If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_cname(edge_ip, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str cname: CNAME to onboard to service (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_by_cname_with_http_info(edge_ip, cname, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_by_cname_with_http_info(edge_ip, cname, **kwargs)  # noqa: E501
            return data

    def edit_sip_by_cname_with_http_info(self, edge_ip, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by CNAME  # noqa: E501

        Use this operation to assign a new CNAME record to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS will be overwritten). If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_cname_with_http_info(edge_ip, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str cname: CNAME to onboard to service (required)
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'cname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_by_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_by_cname`")  # noqa: E501
        # verify the required parameter 'cname' is set
        if ('cname' not in params or
                params['cname'] is None):
            raise ValueError("Missing the required parameter `cname` when calling `edit_sip_by_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'cname' in params:
            query_params.append(('cname', params['cname']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/cname', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_by_dns_and_cname(self, edge_ip, dns_name, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by DNS and origin IP  # noqa: E501

        Use this operation to assign a new CNAME record with an associated DNS name to the provided Edge IP under the 'IP Protection over TCP' service.<br/>This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten).<br/>If DNS check is enabled, the response will include the list of resolved CNAME records for the provided domain name, and the operation will only succeed if the provided CNAME is included in that list.<br/>If successful, the operation will return the Edge IP.<br/>WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_dns_and_cname(edge_ip, dns_name, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str dns_name: Domain name to onboard to service (required)
        :param str cname: CNAME to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_by_dns_and_cname_with_http_info(edge_ip, dns_name, cname, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_by_dns_and_cname_with_http_info(edge_ip, dns_name, cname, **kwargs)  # noqa: E501
            return data

    def edit_sip_by_dns_and_cname_with_http_info(self, edge_ip, dns_name, cname, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by DNS and origin IP  # noqa: E501

        Use this operation to assign a new CNAME record with an associated DNS name to the provided Edge IP under the 'IP Protection over TCP' service.<br/>This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten).<br/>If DNS check is enabled, the response will include the list of resolved CNAME records for the provided domain name, and the operation will only succeed if the provided CNAME is included in that list.<br/>If successful, the operation will return the Edge IP.<br/>WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_dns_and_cname_with_http_info(edge_ip, dns_name, cname, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str dns_name: Domain name to onboard to service (required)
        :param str cname: CNAME to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'dns_name', 'cname', 'disable_dns_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_by_dns_and_cname" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_by_dns_and_cname`")  # noqa: E501
        # verify the required parameter 'dns_name' is set
        if ('dns_name' not in params or
                params['dns_name'] is None):
            raise ValueError("Missing the required parameter `dns_name` when calling `edit_sip_by_dns_and_cname`")  # noqa: E501
        # verify the required parameter 'cname' is set
        if ('cname' not in params or
                params['cname'] is None):
            raise ValueError("Missing the required parameter `cname` when calling `edit_sip_by_dns_and_cname`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'dns_name' in params:
            query_params.append(('dns_name', params['dns_name']))  # noqa: E501
        if 'cname' in params:
            query_params.append(('cname', params['cname']))  # noqa: E501
        if 'disable_dns_check' in params:
            query_params.append(('disable_dns_check', params['disable_dns_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/dns-with-cname', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_by_dns_and_ip(self, edge_ip, dns_name, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by DNS and origin IP  # noqa: E501

        Use this operation to assign a new origin IP with an associated DNS name to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten). If DNS check is enabled, the response will include the list of resolved IPs for the provided domain name, and the operation will only succeed if the provided origin IP is included in that list. If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_dns_and_ip(edge_ip, dns_name, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str dns_name: Domain name to onboard to service (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_by_dns_and_ip_with_http_info(edge_ip, dns_name, origin_ip, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_by_dns_and_ip_with_http_info(edge_ip, dns_name, origin_ip, **kwargs)  # noqa: E501
            return data

    def edit_sip_by_dns_and_ip_with_http_info(self, edge_ip, dns_name, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by DNS and origin IP  # noqa: E501

        Use this operation to assign a new origin IP with an associated DNS name to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten). If DNS check is enabled, the response will include the list of resolved IPs for the provided domain name, and the operation will only succeed if the provided origin IP is included in that list. If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_dns_and_ip_with_http_info(edge_ip, dns_name, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str dns_name: Domain name to onboard to service (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :param bool disable_dns_check: Provide 'true' to disable DNS resolution check (enabled by default)
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'dns_name', 'origin_ip', 'disable_dns_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_by_dns_and_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_by_dns_and_ip`")  # noqa: E501
        # verify the required parameter 'dns_name' is set
        if ('dns_name' not in params or
                params['dns_name'] is None):
            raise ValueError("Missing the required parameter `dns_name` when calling `edit_sip_by_dns_and_ip`")  # noqa: E501
        # verify the required parameter 'origin_ip' is set
        if ('origin_ip' not in params or
                params['origin_ip'] is None):
            raise ValueError("Missing the required parameter `origin_ip` when calling `edit_sip_by_dns_and_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'dns_name' in params:
            query_params.append(('dns_name', params['dns_name']))  # noqa: E501
        if 'origin_ip' in params:
            query_params.append(('origin_ip', params['origin_ip']))  # noqa: E501
        if 'disable_dns_check' in params:
            query_params.append(('disable_dns_check', params['disable_dns_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/dns-with-ip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_by_ip(self, edge_ip, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by origin IP  # noqa: E501

        Use this operation to assign a new origin IP to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten). If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_ip(edge_ip, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_by_ip_with_http_info(edge_ip, origin_ip, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_by_ip_with_http_info(edge_ip, origin_ip, **kwargs)  # noqa: E501
            return data

    def edit_sip_by_ip_with_http_info(self, edge_ip, origin_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit by origin IP  # noqa: E501

        Use this operation to assign a new origin IP to the provided Edge IP under the 'IP Protection over TCP' service. This operation is also able to change the type of the entity protected by the provided Edge IP (Any existing combination of Origin IP/CNAME and DNS name will be overwritten). If successful, the operation will return the Edge IP. WARNING: Any entity already protected by this Edge IP prior to the change will no longer be protected once modification is successful, unless duplicate protection is used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_by_ip_with_http_info(edge_ip, origin_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str origin_ip: Public origin IP to onboard to service (required)
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'origin_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_by_ip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_by_ip`")  # noqa: E501
        # verify the required parameter 'origin_ip' is set
        if ('origin_ip' not in params or
                params['origin_ip'] is None):
            raise ValueError("Missing the required parameter `origin_ip` when calling `edit_sip_by_ip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'origin_ip' in params:
            query_params.append(('origin_ip', params['origin_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/ip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_ha_protocol(self, edge_ip, enable_ha_protocol, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit HA protocol setting  # noqa: E501

        Use this operation on the provided Edge IP to toggle its HA Protocol setting on or off. By default, this setting is disabled during onboarding unless explicitly set to 'true'. WARNING: Do not modify this setting unless you are familiar with the proxy protocol and understand the implications of enabling or disabling it for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_ha_protocol(edge_ip, enable_ha_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting, 'false' to disable (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_ha_protocol_with_http_info(edge_ip, enable_ha_protocol, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_ha_protocol_with_http_info(edge_ip, enable_ha_protocol, **kwargs)  # noqa: E501
            return data

    def edit_sip_ha_protocol_with_http_info(self, edge_ip, enable_ha_protocol, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit HA protocol setting  # noqa: E501

        Use this operation on the provided Edge IP to toggle its HA Protocol setting on or off. By default, this setting is disabled during onboarding unless explicitly set to 'true'. WARNING: Do not modify this setting unless you are familiar with the proxy protocol and understand the implications of enabling or disabling it for your account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_ha_protocol_with_http_info(edge_ip, enable_ha_protocol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param bool enable_ha_protocol: Provide 'true' to enable the Proxy Protocol setting, 'false' to disable (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'enable_ha_protocol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_ha_protocol" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_ha_protocol`")  # noqa: E501
        # verify the required parameter 'enable_ha_protocol' is set
        if ('enable_ha_protocol' not in params or
                params['enable_ha_protocol'] is None):
            raise ValueError("Missing the required parameter `enable_ha_protocol` when calling `edit_sip_ha_protocol`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'enable_ha_protocol' in params:
            query_params.append(('enable_ha_protocol', params['enable_ha_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/ha-protocol', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_sip_monitoring_settings(self, edge_ip, monitoring_type, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit monitoring settings  # noqa: E501

        Use this operation on the specified Edge IP to modify its monitoring settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_monitoring_settings(edge_ip, monitoring_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE' (required)
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_sip_monitoring_settings_with_http_info(edge_ip, monitoring_type, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_sip_monitoring_settings_with_http_info(edge_ip, monitoring_type, **kwargs)  # noqa: E501
            return data

    def edit_sip_monitoring_settings_with_http_info(self, edge_ip, monitoring_type, **kwargs):  # noqa: E501
        """Protected IP over TCP - edit monitoring settings  # noqa: E501

        Use this operation on the specified Edge IP to modify its monitoring settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_sip_monitoring_settings_with_http_info(edge_ip, monitoring_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :param str monitoring_type: Monitoring type for the Edge IP. Possible values: 'ICMP' (default), 'TCP' or 'NONE' (required)
        :param int tcp_monitoring_port: Port to use for TCP monitoring of the Edge IP. Required only when TCP monitoring is used.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip', 'monitoring_type', 'tcp_monitoring_port']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_sip_monitoring_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `edit_sip_monitoring_settings`")  # noqa: E501
        # verify the required parameter 'monitoring_type' is set
        if ('monitoring_type' not in params or
                params['monitoring_type'] is None):
            raise ValueError("Missing the required parameter `monitoring_type` when calling `edit_sip_monitoring_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501
        if 'monitoring_type' in params:
            query_params.append(('monitoring_type', params['monitoring_type']))  # noqa: E501
        if 'tcp_monitoring_port' in params:
            query_params.append(('tcp_monitoring_port', params['tcp_monitoring_port']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/edit/monitoring-settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_sip(self, edge_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - remove  # noqa: E501

        Use this operation on the provided Edge IP to remove it from the 'IP Protection over TCP' service.<br/>WARNING: Any entity already protected by this Edge IP will no longer be protected once the operation is successful, unless duplicate protection was enabled and used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_sip(edge_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_sip_with_http_info(edge_ip, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_sip_with_http_info(edge_ip, **kwargs)  # noqa: E501
            return data

    def remove_sip_with_http_info(self, edge_ip, **kwargs):  # noqa: E501
        """Protected IP over TCP - remove  # noqa: E501

        Use this operation on the provided Edge IP to remove it from the 'IP Protection over TCP' service.<br/>WARNING: Any entity already protected by this Edge IP will no longer be protected once the operation is successful, unless duplicate protection was enabled and used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_sip_with_http_info(edge_ip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str edge_ip: Imperva generated Edge IP (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['edge_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_sip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'edge_ip' is set
        if ('edge_ip' not in params or
                params['edge_ip'] is None):
            raise ValueError("Missing the required parameter `edge_ip` when calling `remove_sip`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'edge_ip' in params:
            query_params.append(('edge_ip', params['edge_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/ddos-protection/edge-ip/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
