# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountPlanStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'account_name': 'str',
        'website_protection': 'list[AccountPlanStatusWebsiteProtection]',
        'infrastructure_protection': 'list[AccountPlanStatusWebsiteProtection]',
        'dns_protection': 'list[AccountPlanStatusWebsiteProtection]',
        'additional_services': 'list[AccountPlanStatusWebsiteProtection]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_name': 'accountName',
        'website_protection': 'websiteProtection',
        'infrastructure_protection': 'infrastructureProtection',
        'dns_protection': 'dnsProtection',
        'additional_services': 'additionalServices'
    }

    def __init__(self, account_id=None, account_name=None, website_protection=None, infrastructure_protection=None, dns_protection=None, additional_services=None):  # noqa: E501
        """AccountPlanStatus - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_name = None
        self._website_protection = None
        self._infrastructure_protection = None
        self._dns_protection = None
        self._additional_services = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_name is not None:
            self.account_name = account_name
        if website_protection is not None:
            self.website_protection = website_protection
        if infrastructure_protection is not None:
            self.infrastructure_protection = infrastructure_protection
        if dns_protection is not None:
            self.dns_protection = dns_protection
        if additional_services is not None:
            self.additional_services = additional_services

    @property
    def account_id(self):
        """Gets the account_id of this AccountPlanStatus.  # noqa: E501


        :return: The account_id of this AccountPlanStatus.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountPlanStatus.


        :param account_id: The account_id of this AccountPlanStatus.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def account_name(self):
        """Gets the account_name of this AccountPlanStatus.  # noqa: E501


        :return: The account_name of this AccountPlanStatus.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountPlanStatus.


        :param account_name: The account_name of this AccountPlanStatus.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def website_protection(self):
        """Gets the website_protection of this AccountPlanStatus.  # noqa: E501


        :return: The website_protection of this AccountPlanStatus.  # noqa: E501
        :rtype: list[AccountPlanStatusWebsiteProtection]
        """
        return self._website_protection

    @website_protection.setter
    def website_protection(self, website_protection):
        """Sets the website_protection of this AccountPlanStatus.


        :param website_protection: The website_protection of this AccountPlanStatus.  # noqa: E501
        :type: list[AccountPlanStatusWebsiteProtection]
        """

        self._website_protection = website_protection

    @property
    def infrastructure_protection(self):
        """Gets the infrastructure_protection of this AccountPlanStatus.  # noqa: E501


        :return: The infrastructure_protection of this AccountPlanStatus.  # noqa: E501
        :rtype: list[AccountPlanStatusWebsiteProtection]
        """
        return self._infrastructure_protection

    @infrastructure_protection.setter
    def infrastructure_protection(self, infrastructure_protection):
        """Sets the infrastructure_protection of this AccountPlanStatus.


        :param infrastructure_protection: The infrastructure_protection of this AccountPlanStatus.  # noqa: E501
        :type: list[AccountPlanStatusWebsiteProtection]
        """

        self._infrastructure_protection = infrastructure_protection

    @property
    def dns_protection(self):
        """Gets the dns_protection of this AccountPlanStatus.  # noqa: E501


        :return: The dns_protection of this AccountPlanStatus.  # noqa: E501
        :rtype: list[AccountPlanStatusWebsiteProtection]
        """
        return self._dns_protection

    @dns_protection.setter
    def dns_protection(self, dns_protection):
        """Sets the dns_protection of this AccountPlanStatus.


        :param dns_protection: The dns_protection of this AccountPlanStatus.  # noqa: E501
        :type: list[AccountPlanStatusWebsiteProtection]
        """

        self._dns_protection = dns_protection

    @property
    def additional_services(self):
        """Gets the additional_services of this AccountPlanStatus.  # noqa: E501


        :return: The additional_services of this AccountPlanStatus.  # noqa: E501
        :rtype: list[AccountPlanStatusWebsiteProtection]
        """
        return self._additional_services

    @additional_services.setter
    def additional_services(self, additional_services):
        """Sets the additional_services of this AccountPlanStatus.


        :param additional_services: The additional_services of this AccountPlanStatus.  # noqa: E501
        :type: list[AccountPlanStatusWebsiteProtection]
        """

        self._additional_services = additional_services

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountPlanStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountPlanStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
