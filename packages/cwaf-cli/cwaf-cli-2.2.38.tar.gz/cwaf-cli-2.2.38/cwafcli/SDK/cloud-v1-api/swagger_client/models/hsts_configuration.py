# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HSTSConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_enabled': 'bool',
        'max_age': 'int',
        'sub_domains_included': 'bool',
        'pre_loaded': 'bool'
    }

    attribute_map = {
        'is_enabled': 'isEnabled',
        'max_age': 'maxAge',
        'sub_domains_included': 'subDomainsIncluded',
        'pre_loaded': 'preLoaded'
    }

    def __init__(self, is_enabled=False, max_age=31536000, sub_domains_included=False, pre_loaded=False):  # noqa: E501
        """HSTSConfiguration - a model defined in Swagger"""  # noqa: E501
        self._is_enabled = None
        self._max_age = None
        self._sub_domains_included = None
        self._pre_loaded = None
        self.discriminator = None
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if max_age is not None:
            self.max_age = max_age
        if sub_domains_included is not None:
            self.sub_domains_included = sub_domains_included
        if pre_loaded is not None:
            self.pre_loaded = pre_loaded

    @property
    def is_enabled(self):
        """Gets the is_enabled of this HSTSConfiguration.  # noqa: E501

        Enable/disable HSTS support for this website  # noqa: E501

        :return: The is_enabled of this HSTSConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this HSTSConfiguration.

        Enable/disable HSTS support for this website  # noqa: E501

        :param is_enabled: The is_enabled of this HSTSConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def max_age(self):
        """Gets the max_age of this HSTSConfiguration.  # noqa: E501

        (TTL) The amount of time in seconds to apply HSTS in the browser before attempting to load the page using http://.  # noqa: E501

        :return: The max_age of this HSTSConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this HSTSConfiguration.

        (TTL) The amount of time in seconds to apply HSTS in the browser before attempting to load the page using http://.  # noqa: E501

        :param max_age: The max_age of this HSTSConfiguration.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def sub_domains_included(self):
        """Gets the sub_domains_included of this HSTSConfiguration.  # noqa: E501

        Enforce HSTS on sub-domains. For example, a page listed on xxx.ddd.com uses resources from images.ddd.com. If HSTS for sub-domains is enabled, the images are also covered. Make sure that the site and all sub-domains support HTTPS so that HSTS does not break an internal resource when rendering the page.  # noqa: E501

        :return: The sub_domains_included of this HSTSConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._sub_domains_included

    @sub_domains_included.setter
    def sub_domains_included(self, sub_domains_included):
        """Sets the sub_domains_included of this HSTSConfiguration.

        Enforce HSTS on sub-domains. For example, a page listed on xxx.ddd.com uses resources from images.ddd.com. If HSTS for sub-domains is enabled, the images are also covered. Make sure that the site and all sub-domains support HTTPS so that HSTS does not break an internal resource when rendering the page.  # noqa: E501

        :param sub_domains_included: The sub_domains_included of this HSTSConfiguration.  # noqa: E501
        :type: bool
        """

        self._sub_domains_included = sub_domains_included

    @property
    def pre_loaded(self):
        """Gets the pre_loaded of this HSTSConfiguration.  # noqa: E501

        The most secure way to enforce HSTS. Ensures the first request goes out in a secure tunnel, since the browser already has that URL in the pre-load list. The domain needs to be listed at https://hstspreload.appspot.com/.  # noqa: E501

        :return: The pre_loaded of this HSTSConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._pre_loaded

    @pre_loaded.setter
    def pre_loaded(self, pre_loaded):
        """Sets the pre_loaded of this HSTSConfiguration.

        The most secure way to enforce HSTS. Ensures the first request goes out in a secure tunnel, since the browser already has that URL in the pre-load list. The domain needs to be listed at https://hstspreload.appspot.com/.  # noqa: E501

        :param pre_loaded: The pre_loaded of this HSTSConfiguration.  # noqa: E501
        :type: bool
        """

        self._pre_loaded = pre_loaded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HSTSConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HSTSConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
