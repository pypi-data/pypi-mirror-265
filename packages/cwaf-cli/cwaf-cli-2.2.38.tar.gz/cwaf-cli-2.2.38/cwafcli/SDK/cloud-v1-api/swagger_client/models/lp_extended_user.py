# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LpExtendedUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'status': 'str',
        'phone': 'str',
        'creation_date': 'datetime'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'status': 'status',
        'phone': 'phone',
        'creation_date': 'creation_date'
    }

    def __init__(self, email=None, name=None, status=None, phone=None, creation_date=None):  # noqa: E501
        """LpExtendedUser - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._name = None
        self._status = None
        self._phone = None
        self._creation_date = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if phone is not None:
            self.phone = phone
        if creation_date is not None:
            self.creation_date = creation_date

    @property
    def email(self):
        """Gets the email of this LpExtendedUser.  # noqa: E501

        email  # noqa: E501

        :return: The email of this LpExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LpExtendedUser.

        email  # noqa: E501

        :param email: The email of this LpExtendedUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this LpExtendedUser.  # noqa: E501

        name  # noqa: E501

        :return: The name of this LpExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LpExtendedUser.

        name  # noqa: E501

        :param name: The name of this LpExtendedUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this LpExtendedUser.  # noqa: E501

        status  # noqa: E501

        :return: The status of this LpExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LpExtendedUser.

        status  # noqa: E501

        :param status: The status of this LpExtendedUser.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def phone(self):
        """Gets the phone of this LpExtendedUser.  # noqa: E501

        phone  # noqa: E501

        :return: The phone of this LpExtendedUser.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LpExtendedUser.

        phone  # noqa: E501

        :param phone: The phone of this LpExtendedUser.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def creation_date(self):
        """Gets the creation_date of this LpExtendedUser.  # noqa: E501

        creation_date  # noqa: E501

        :return: The creation_date of this LpExtendedUser.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this LpExtendedUser.

        creation_date  # noqa: E501

        :param creation_date: The creation_date of this LpExtendedUser.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LpExtendedUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LpExtendedUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
