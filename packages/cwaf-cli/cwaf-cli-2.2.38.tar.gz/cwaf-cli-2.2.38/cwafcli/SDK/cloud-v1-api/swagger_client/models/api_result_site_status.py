# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiResultSiteStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'res': 'int',
        'res_message': 'str',
        'debug_info': 'list[dict(str, object)]',
        'site_id': 'int',
        'status_enum': 'str',
        'status': 'str',
        'domain': 'str',
        'account_id': 'int',
        'acceleration_level': 'str',
        'acceleration_level_raw': 'str',
        'site_creation_date': 'int',
        'ips': 'list[object]',
        'dns': 'list[DnsInstructionItem]',
        'original_dns': 'list[DnsInstructionItem]',
        'warnings': 'list[SiteConfigurationWarning]',
        'active': 'str',
        'support_all_tls_versions': 'bool',
        'use_wildcard_san_instead_of_full_domain_san': 'bool',
        'add_naked_domain_san': 'bool',
        'set_site_cookies_without_domain': 'bool',
        'enable_http_between_imperva_and_origin': 'str',
        'additional_errors': 'list[object]',
        'display_name': 'str',
        'security': 'list[dict(str, object)]',
        'ssl': 'list[dict(str, object)]',
        'site_dual_factor_settings': 'SiteDualFactorSettings',
        'request_body_timeouts': 'RequestBodyTimeoutDTO',
        'login_protect': 'LoginProtectApiResult',
        'performance_configuration': 'PerformanceConfigurationApiResult',
        'extended_ddos': 'int',
        'incap_rules': 'list[IncapRuleApiResult]',
        'restricted_cname_reuse': 'bool'
    }

    attribute_map = {
        'res': 'res',
        'res_message': 'res_message',
        'debug_info': 'debug_info',
        'site_id': 'site_id',
        'status_enum': 'statusEnum',
        'status': 'status',
        'domain': 'domain',
        'account_id': 'account_id',
        'acceleration_level': 'acceleration_level',
        'acceleration_level_raw': 'acceleration_level_raw',
        'site_creation_date': 'site_creation_date',
        'ips': 'ips',
        'dns': 'dns',
        'original_dns': 'original_dns',
        'warnings': 'warnings',
        'active': 'active',
        'support_all_tls_versions': 'support_all_tls_versions',
        'use_wildcard_san_instead_of_full_domain_san': 'use_wildcard_san_instead_of_full_domain_san',
        'add_naked_domain_san': 'add_naked_domain_san',
        'set_site_cookies_without_domain': 'set_site_cookies_without_domain',
        'enable_http_between_imperva_and_origin': 'enable_http_between_Imperva_and_origin',
        'additional_errors': 'additionalErrors',
        'display_name': 'display_name',
        'security': 'security',
        'ssl': 'ssl',
        'site_dual_factor_settings': 'siteDualFactorSettings',
        'request_body_timeouts': 'requestBodyTimeouts',
        'login_protect': 'login_protect',
        'performance_configuration': 'performance_configuration',
        'extended_ddos': 'extended_ddos',
        'incap_rules': 'incap_rules',
        'restricted_cname_reuse': 'restricted_cname_reuse'
    }

    def __init__(self, res=None, res_message=None, debug_info=None, site_id=None, status_enum=None, status=None, domain=None, account_id=None, acceleration_level=None, acceleration_level_raw=None, site_creation_date=None, ips=None, dns=None, original_dns=None, warnings=None, active=None, support_all_tls_versions=None, use_wildcard_san_instead_of_full_domain_san=None, add_naked_domain_san=None, set_site_cookies_without_domain=None, enable_http_between_imperva_and_origin=None, additional_errors=None, display_name=None, security=None, ssl=None, site_dual_factor_settings=None, request_body_timeouts=None, login_protect=None, performance_configuration=None, extended_ddos=None, incap_rules=None, restricted_cname_reuse=None):  # noqa: E501
        """ApiResultSiteStatus - a model defined in Swagger"""  # noqa: E501
        self._res = None
        self._res_message = None
        self._debug_info = None
        self._site_id = None
        self._status_enum = None
        self._status = None
        self._domain = None
        self._account_id = None
        self._acceleration_level = None
        self._acceleration_level_raw = None
        self._site_creation_date = None
        self._ips = None
        self._dns = None
        self._original_dns = None
        self._warnings = None
        self._active = None
        self._support_all_tls_versions = None
        self._use_wildcard_san_instead_of_full_domain_san = None
        self._add_naked_domain_san = None
        self._set_site_cookies_without_domain = None
        self._enable_http_between_imperva_and_origin = None
        self._additional_errors = None
        self._display_name = None
        self._security = None
        self._ssl = None
        self._site_dual_factor_settings = None
        self._request_body_timeouts = None
        self._login_protect = None
        self._performance_configuration = None
        self._extended_ddos = None
        self._incap_rules = None
        self._restricted_cname_reuse = None
        self.discriminator = None
        if res is not None:
            self.res = res
        if res_message is not None:
            self.res_message = res_message
        if debug_info is not None:
            self.debug_info = debug_info
        if site_id is not None:
            self.site_id = site_id
        if status_enum is not None:
            self.status_enum = status_enum
        if status is not None:
            self.status = status
        if domain is not None:
            self.domain = domain
        if account_id is not None:
            self.account_id = account_id
        if acceleration_level is not None:
            self.acceleration_level = acceleration_level
        if acceleration_level_raw is not None:
            self.acceleration_level_raw = acceleration_level_raw
        if site_creation_date is not None:
            self.site_creation_date = site_creation_date
        if ips is not None:
            self.ips = ips
        if dns is not None:
            self.dns = dns
        if original_dns is not None:
            self.original_dns = original_dns
        if warnings is not None:
            self.warnings = warnings
        if active is not None:
            self.active = active
        if support_all_tls_versions is not None:
            self.support_all_tls_versions = support_all_tls_versions
        if use_wildcard_san_instead_of_full_domain_san is not None:
            self.use_wildcard_san_instead_of_full_domain_san = use_wildcard_san_instead_of_full_domain_san
        if add_naked_domain_san is not None:
            self.add_naked_domain_san = add_naked_domain_san
        if set_site_cookies_without_domain is not None:
            self.set_site_cookies_without_domain = set_site_cookies_without_domain
        if enable_http_between_imperva_and_origin is not None:
            self.enable_http_between_imperva_and_origin = enable_http_between_imperva_and_origin
        if additional_errors is not None:
            self.additional_errors = additional_errors
        if display_name is not None:
            self.display_name = display_name
        if security is not None:
            self.security = security
        if ssl is not None:
            self.ssl = ssl
        if site_dual_factor_settings is not None:
            self.site_dual_factor_settings = site_dual_factor_settings
        if request_body_timeouts is not None:
            self.request_body_timeouts = request_body_timeouts
        if login_protect is not None:
            self.login_protect = login_protect
        if performance_configuration is not None:
            self.performance_configuration = performance_configuration
        if extended_ddos is not None:
            self.extended_ddos = extended_ddos
        if incap_rules is not None:
            self.incap_rules = incap_rules
        if restricted_cname_reuse is not None:
            self.restricted_cname_reuse = restricted_cname_reuse

    @property
    def res(self):
        """Gets the res of this ApiResultSiteStatus.  # noqa: E501

        res - contains specific error code  # noqa: E501

        :return: The res of this ApiResultSiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._res

    @res.setter
    def res(self, res):
        """Sets the res of this ApiResultSiteStatus.

        res - contains specific error code  # noqa: E501

        :param res: The res of this ApiResultSiteStatus.  # noqa: E501
        :type: int
        """

        self._res = res

    @property
    def res_message(self):
        """Gets the res_message of this ApiResultSiteStatus.  # noqa: E501


        :return: The res_message of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._res_message

    @res_message.setter
    def res_message(self, res_message):
        """Sets the res_message of this ApiResultSiteStatus.


        :param res_message: The res_message of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._res_message = res_message

    @property
    def debug_info(self):
        """Gets the debug_info of this ApiResultSiteStatus.  # noqa: E501


        :return: The debug_info of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._debug_info

    @debug_info.setter
    def debug_info(self, debug_info):
        """Sets the debug_info of this ApiResultSiteStatus.


        :param debug_info: The debug_info of this ApiResultSiteStatus.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._debug_info = debug_info

    @property
    def site_id(self):
        """Gets the site_id of this ApiResultSiteStatus.  # noqa: E501


        :return: The site_id of this ApiResultSiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this ApiResultSiteStatus.


        :param site_id: The site_id of this ApiResultSiteStatus.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def status_enum(self):
        """Gets the status_enum of this ApiResultSiteStatus.  # noqa: E501


        :return: The status_enum of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._status_enum

    @status_enum.setter
    def status_enum(self, status_enum):
        """Sets the status_enum of this ApiResultSiteStatus.


        :param status_enum: The status_enum of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending-txt-validation", "pending-dns-changes", "fully-configured", "pending-select-approver", "pending-certificate", "unknown"]  # noqa: E501
        if status_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `status_enum` ({0}), must be one of {1}"  # noqa: E501
                .format(status_enum, allowed_values)
            )

        self._status_enum = status_enum

    @property
    def status(self):
        """Gets the status of this ApiResultSiteStatus.  # noqa: E501


        :return: The status of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiResultSiteStatus.


        :param status: The status of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def domain(self):
        """Gets the domain of this ApiResultSiteStatus.  # noqa: E501


        :return: The domain of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ApiResultSiteStatus.


        :param domain: The domain of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def account_id(self):
        """Gets the account_id of this ApiResultSiteStatus.  # noqa: E501


        :return: The account_id of this ApiResultSiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ApiResultSiteStatus.


        :param account_id: The account_id of this ApiResultSiteStatus.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def acceleration_level(self):
        """Gets the acceleration_level of this ApiResultSiteStatus.  # noqa: E501


        :return: The acceleration_level of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._acceleration_level

    @acceleration_level.setter
    def acceleration_level(self, acceleration_level):
        """Sets the acceleration_level of this ApiResultSiteStatus.


        :param acceleration_level: The acceleration_level of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._acceleration_level = acceleration_level

    @property
    def acceleration_level_raw(self):
        """Gets the acceleration_level_raw of this ApiResultSiteStatus.  # noqa: E501


        :return: The acceleration_level_raw of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._acceleration_level_raw

    @acceleration_level_raw.setter
    def acceleration_level_raw(self, acceleration_level_raw):
        """Sets the acceleration_level_raw of this ApiResultSiteStatus.


        :param acceleration_level_raw: The acceleration_level_raw of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._acceleration_level_raw = acceleration_level_raw

    @property
    def site_creation_date(self):
        """Gets the site_creation_date of this ApiResultSiteStatus.  # noqa: E501


        :return: The site_creation_date of this ApiResultSiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._site_creation_date

    @site_creation_date.setter
    def site_creation_date(self, site_creation_date):
        """Sets the site_creation_date of this ApiResultSiteStatus.


        :param site_creation_date: The site_creation_date of this ApiResultSiteStatus.  # noqa: E501
        :type: int
        """

        self._site_creation_date = site_creation_date

    @property
    def ips(self):
        """Gets the ips of this ApiResultSiteStatus.  # noqa: E501


        :return: The ips of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[object]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this ApiResultSiteStatus.


        :param ips: The ips of this ApiResultSiteStatus.  # noqa: E501
        :type: list[object]
        """

        self._ips = ips

    @property
    def dns(self):
        """Gets the dns of this ApiResultSiteStatus.  # noqa: E501


        :return: The dns of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[DnsInstructionItem]
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this ApiResultSiteStatus.


        :param dns: The dns of this ApiResultSiteStatus.  # noqa: E501
        :type: list[DnsInstructionItem]
        """

        self._dns = dns

    @property
    def original_dns(self):
        """Gets the original_dns of this ApiResultSiteStatus.  # noqa: E501


        :return: The original_dns of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[DnsInstructionItem]
        """
        return self._original_dns

    @original_dns.setter
    def original_dns(self, original_dns):
        """Sets the original_dns of this ApiResultSiteStatus.


        :param original_dns: The original_dns of this ApiResultSiteStatus.  # noqa: E501
        :type: list[DnsInstructionItem]
        """

        self._original_dns = original_dns

    @property
    def warnings(self):
        """Gets the warnings of this ApiResultSiteStatus.  # noqa: E501


        :return: The warnings of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[SiteConfigurationWarning]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ApiResultSiteStatus.


        :param warnings: The warnings of this ApiResultSiteStatus.  # noqa: E501
        :type: list[SiteConfigurationWarning]
        """

        self._warnings = warnings

    @property
    def active(self):
        """Gets the active of this ApiResultSiteStatus.  # noqa: E501


        :return: The active of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApiResultSiteStatus.


        :param active: The active of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "bypass"]  # noqa: E501
        if active not in allowed_values:
            raise ValueError(
                "Invalid value for `active` ({0}), must be one of {1}"  # noqa: E501
                .format(active, allowed_values)
            )

        self._active = active

    @property
    def support_all_tls_versions(self):
        """Gets the support_all_tls_versions of this ApiResultSiteStatus.  # noqa: E501


        :return: The support_all_tls_versions of this ApiResultSiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._support_all_tls_versions

    @support_all_tls_versions.setter
    def support_all_tls_versions(self, support_all_tls_versions):
        """Sets the support_all_tls_versions of this ApiResultSiteStatus.


        :param support_all_tls_versions: The support_all_tls_versions of this ApiResultSiteStatus.  # noqa: E501
        :type: bool
        """

        self._support_all_tls_versions = support_all_tls_versions

    @property
    def use_wildcard_san_instead_of_full_domain_san(self):
        """Gets the use_wildcard_san_instead_of_full_domain_san of this ApiResultSiteStatus.  # noqa: E501


        :return: The use_wildcard_san_instead_of_full_domain_san of this ApiResultSiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._use_wildcard_san_instead_of_full_domain_san

    @use_wildcard_san_instead_of_full_domain_san.setter
    def use_wildcard_san_instead_of_full_domain_san(self, use_wildcard_san_instead_of_full_domain_san):
        """Sets the use_wildcard_san_instead_of_full_domain_san of this ApiResultSiteStatus.


        :param use_wildcard_san_instead_of_full_domain_san: The use_wildcard_san_instead_of_full_domain_san of this ApiResultSiteStatus.  # noqa: E501
        :type: bool
        """

        self._use_wildcard_san_instead_of_full_domain_san = use_wildcard_san_instead_of_full_domain_san

    @property
    def add_naked_domain_san(self):
        """Gets the add_naked_domain_san of this ApiResultSiteStatus.  # noqa: E501


        :return: The add_naked_domain_san of this ApiResultSiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._add_naked_domain_san

    @add_naked_domain_san.setter
    def add_naked_domain_san(self, add_naked_domain_san):
        """Sets the add_naked_domain_san of this ApiResultSiteStatus.


        :param add_naked_domain_san: The add_naked_domain_san of this ApiResultSiteStatus.  # noqa: E501
        :type: bool
        """

        self._add_naked_domain_san = add_naked_domain_san

    @property
    def set_site_cookies_without_domain(self):
        """Gets the set_site_cookies_without_domain of this ApiResultSiteStatus.  # noqa: E501


        :return: The set_site_cookies_without_domain of this ApiResultSiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._set_site_cookies_without_domain

    @set_site_cookies_without_domain.setter
    def set_site_cookies_without_domain(self, set_site_cookies_without_domain):
        """Sets the set_site_cookies_without_domain of this ApiResultSiteStatus.


        :param set_site_cookies_without_domain: The set_site_cookies_without_domain of this ApiResultSiteStatus.  # noqa: E501
        :type: bool
        """

        self._set_site_cookies_without_domain = set_site_cookies_without_domain

    @property
    def enable_http_between_imperva_and_origin(self):
        """Gets the enable_http_between_imperva_and_origin of this ApiResultSiteStatus.  # noqa: E501


        :return: The enable_http_between_imperva_and_origin of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._enable_http_between_imperva_and_origin

    @enable_http_between_imperva_and_origin.setter
    def enable_http_between_imperva_and_origin(self, enable_http_between_imperva_and_origin):
        """Sets the enable_http_between_imperva_and_origin of this ApiResultSiteStatus.


        :param enable_http_between_imperva_and_origin: The enable_http_between_imperva_and_origin of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._enable_http_between_imperva_and_origin = enable_http_between_imperva_and_origin

    @property
    def additional_errors(self):
        """Gets the additional_errors of this ApiResultSiteStatus.  # noqa: E501


        :return: The additional_errors of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[object]
        """
        return self._additional_errors

    @additional_errors.setter
    def additional_errors(self, additional_errors):
        """Sets the additional_errors of this ApiResultSiteStatus.


        :param additional_errors: The additional_errors of this ApiResultSiteStatus.  # noqa: E501
        :type: list[object]
        """

        self._additional_errors = additional_errors

    @property
    def display_name(self):
        """Gets the display_name of this ApiResultSiteStatus.  # noqa: E501


        :return: The display_name of this ApiResultSiteStatus.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiResultSiteStatus.


        :param display_name: The display_name of this ApiResultSiteStatus.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def security(self):
        """Gets the security of this ApiResultSiteStatus.  # noqa: E501


        :return: The security of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this ApiResultSiteStatus.


        :param security: The security of this ApiResultSiteStatus.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._security = security

    @property
    def ssl(self):
        """Gets the ssl of this ApiResultSiteStatus.  # noqa: E501


        :return: The ssl of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this ApiResultSiteStatus.


        :param ssl: The ssl of this ApiResultSiteStatus.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._ssl = ssl

    @property
    def site_dual_factor_settings(self):
        """Gets the site_dual_factor_settings of this ApiResultSiteStatus.  # noqa: E501


        :return: The site_dual_factor_settings of this ApiResultSiteStatus.  # noqa: E501
        :rtype: SiteDualFactorSettings
        """
        return self._site_dual_factor_settings

    @site_dual_factor_settings.setter
    def site_dual_factor_settings(self, site_dual_factor_settings):
        """Sets the site_dual_factor_settings of this ApiResultSiteStatus.


        :param site_dual_factor_settings: The site_dual_factor_settings of this ApiResultSiteStatus.  # noqa: E501
        :type: SiteDualFactorSettings
        """

        self._site_dual_factor_settings = site_dual_factor_settings

    @property
    def request_body_timeouts(self):
        """Gets the request_body_timeouts of this ApiResultSiteStatus.  # noqa: E501


        :return: The request_body_timeouts of this ApiResultSiteStatus.  # noqa: E501
        :rtype: RequestBodyTimeoutDTO
        """
        return self._request_body_timeouts

    @request_body_timeouts.setter
    def request_body_timeouts(self, request_body_timeouts):
        """Sets the request_body_timeouts of this ApiResultSiteStatus.


        :param request_body_timeouts: The request_body_timeouts of this ApiResultSiteStatus.  # noqa: E501
        :type: RequestBodyTimeoutDTO
        """

        self._request_body_timeouts = request_body_timeouts

    @property
    def login_protect(self):
        """Gets the login_protect of this ApiResultSiteStatus.  # noqa: E501


        :return: The login_protect of this ApiResultSiteStatus.  # noqa: E501
        :rtype: LoginProtectApiResult
        """
        return self._login_protect

    @login_protect.setter
    def login_protect(self, login_protect):
        """Sets the login_protect of this ApiResultSiteStatus.


        :param login_protect: The login_protect of this ApiResultSiteStatus.  # noqa: E501
        :type: LoginProtectApiResult
        """

        self._login_protect = login_protect

    @property
    def performance_configuration(self):
        """Gets the performance_configuration of this ApiResultSiteStatus.  # noqa: E501


        :return: The performance_configuration of this ApiResultSiteStatus.  # noqa: E501
        :rtype: PerformanceConfigurationApiResult
        """
        return self._performance_configuration

    @performance_configuration.setter
    def performance_configuration(self, performance_configuration):
        """Sets the performance_configuration of this ApiResultSiteStatus.


        :param performance_configuration: The performance_configuration of this ApiResultSiteStatus.  # noqa: E501
        :type: PerformanceConfigurationApiResult
        """

        self._performance_configuration = performance_configuration

    @property
    def extended_ddos(self):
        """Gets the extended_ddos of this ApiResultSiteStatus.  # noqa: E501


        :return: The extended_ddos of this ApiResultSiteStatus.  # noqa: E501
        :rtype: int
        """
        return self._extended_ddos

    @extended_ddos.setter
    def extended_ddos(self, extended_ddos):
        """Sets the extended_ddos of this ApiResultSiteStatus.


        :param extended_ddos: The extended_ddos of this ApiResultSiteStatus.  # noqa: E501
        :type: int
        """

        self._extended_ddos = extended_ddos

    @property
    def incap_rules(self):
        """Gets the incap_rules of this ApiResultSiteStatus.  # noqa: E501


        :return: The incap_rules of this ApiResultSiteStatus.  # noqa: E501
        :rtype: list[IncapRuleApiResult]
        """
        return self._incap_rules

    @incap_rules.setter
    def incap_rules(self, incap_rules):
        """Sets the incap_rules of this ApiResultSiteStatus.


        :param incap_rules: The incap_rules of this ApiResultSiteStatus.  # noqa: E501
        :type: list[IncapRuleApiResult]
        """

        self._incap_rules = incap_rules

    @property
    def restricted_cname_reuse(self):
        """Gets the restricted_cname_reuse of this ApiResultSiteStatus.  # noqa: E501


        :return: The restricted_cname_reuse of this ApiResultSiteStatus.  # noqa: E501
        :rtype: bool
        """
        return self._restricted_cname_reuse

    @restricted_cname_reuse.setter
    def restricted_cname_reuse(self, restricted_cname_reuse):
        """Sets the restricted_cname_reuse of this ApiResultSiteStatus.


        :param restricted_cname_reuse: The restricted_cname_reuse of this ApiResultSiteStatus.  # noqa: E501
        :type: bool
        """

        self._restricted_cname_reuse = restricted_cname_reuse

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiResultSiteStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResultSiteStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
