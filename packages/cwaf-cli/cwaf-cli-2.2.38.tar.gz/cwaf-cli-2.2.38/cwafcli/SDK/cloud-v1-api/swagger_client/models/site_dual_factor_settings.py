# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteDualFactorSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specific_users': 'list[str]',
        'enabled': 'bool',
        'custom_areas': 'list[CustomAreas]',
        'custom_areas_exceptions': 'list[CustomAreasExceptions]',
        'allow_all_users': 'bool',
        'should_suggest_applicatons': 'bool',
        'allowed_media': 'list[str]',
        'should_send_login_notifications': 'bool',
        'application': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'specific_users': 'specificUsers',
        'enabled': 'enabled',
        'custom_areas': 'customAreas',
        'custom_areas_exceptions': 'customAreasExceptions',
        'allow_all_users': 'allowAllUsers',
        'should_suggest_applicatons': 'shouldSuggestApplicatons',
        'allowed_media': 'allowedMedia',
        'should_send_login_notifications': 'shouldSendLoginNotifications',
        'application': 'application',
        'version': 'version'
    }

    def __init__(self, specific_users=None, enabled=None, custom_areas=None, custom_areas_exceptions=None, allow_all_users=None, should_suggest_applicatons=None, allowed_media=None, should_send_login_notifications=None, application=None, version=None):  # noqa: E501
        """SiteDualFactorSettings - a model defined in Swagger"""  # noqa: E501
        self._specific_users = None
        self._enabled = None
        self._custom_areas = None
        self._custom_areas_exceptions = None
        self._allow_all_users = None
        self._should_suggest_applicatons = None
        self._allowed_media = None
        self._should_send_login_notifications = None
        self._application = None
        self._version = None
        self.discriminator = None
        if specific_users is not None:
            self.specific_users = specific_users
        if enabled is not None:
            self.enabled = enabled
        if custom_areas is not None:
            self.custom_areas = custom_areas
        if custom_areas_exceptions is not None:
            self.custom_areas_exceptions = custom_areas_exceptions
        if allow_all_users is not None:
            self.allow_all_users = allow_all_users
        if should_suggest_applicatons is not None:
            self.should_suggest_applicatons = should_suggest_applicatons
        if allowed_media is not None:
            self.allowed_media = allowed_media
        if should_send_login_notifications is not None:
            self.should_send_login_notifications = should_send_login_notifications
        if application is not None:
            self.application = application
        if version is not None:
            self.version = version

    @property
    def specific_users(self):
        """Gets the specific_users of this SiteDualFactorSettings.  # noqa: E501


        :return: The specific_users of this SiteDualFactorSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._specific_users

    @specific_users.setter
    def specific_users(self, specific_users):
        """Sets the specific_users of this SiteDualFactorSettings.


        :param specific_users: The specific_users of this SiteDualFactorSettings.  # noqa: E501
        :type: list[str]
        """

        self._specific_users = specific_users

    @property
    def enabled(self):
        """Gets the enabled of this SiteDualFactorSettings.  # noqa: E501

        Enable/disable LoginProtect  # noqa: E501

        :return: The enabled of this SiteDualFactorSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SiteDualFactorSettings.

        Enable/disable LoginProtect  # noqa: E501

        :param enabled: The enabled of this SiteDualFactorSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def custom_areas(self):
        """Gets the custom_areas of this SiteDualFactorSettings.  # noqa: E501


        :return: The custom_areas of this SiteDualFactorSettings.  # noqa: E501
        :rtype: list[CustomAreas]
        """
        return self._custom_areas

    @custom_areas.setter
    def custom_areas(self, custom_areas):
        """Sets the custom_areas of this SiteDualFactorSettings.


        :param custom_areas: The custom_areas of this SiteDualFactorSettings.  # noqa: E501
        :type: list[CustomAreas]
        """

        self._custom_areas = custom_areas

    @property
    def custom_areas_exceptions(self):
        """Gets the custom_areas_exceptions of this SiteDualFactorSettings.  # noqa: E501


        :return: The custom_areas_exceptions of this SiteDualFactorSettings.  # noqa: E501
        :rtype: list[CustomAreasExceptions]
        """
        return self._custom_areas_exceptions

    @custom_areas_exceptions.setter
    def custom_areas_exceptions(self, custom_areas_exceptions):
        """Sets the custom_areas_exceptions of this SiteDualFactorSettings.


        :param custom_areas_exceptions: The custom_areas_exceptions of this SiteDualFactorSettings.  # noqa: E501
        :type: list[CustomAreasExceptions]
        """

        self._custom_areas_exceptions = custom_areas_exceptions

    @property
    def allow_all_users(self):
        """Gets the allow_all_users of this SiteDualFactorSettings.  # noqa: E501

        Authorize all Login Protect users in this account  # noqa: E501

        :return: The allow_all_users of this SiteDualFactorSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_all_users

    @allow_all_users.setter
    def allow_all_users(self, allow_all_users):
        """Sets the allow_all_users of this SiteDualFactorSettings.

        Authorize all Login Protect users in this account  # noqa: E501

        :param allow_all_users: The allow_all_users of this SiteDualFactorSettings.  # noqa: E501
        :type: bool
        """

        self._allow_all_users = allow_all_users

    @property
    def should_suggest_applicatons(self):
        """Gets the should_suggest_applicatons of this SiteDualFactorSettings.  # noqa: E501


        :return: The should_suggest_applicatons of this SiteDualFactorSettings.  # noqa: E501
        :rtype: bool
        """
        return self._should_suggest_applicatons

    @should_suggest_applicatons.setter
    def should_suggest_applicatons(self, should_suggest_applicatons):
        """Sets the should_suggest_applicatons of this SiteDualFactorSettings.


        :param should_suggest_applicatons: The should_suggest_applicatons of this SiteDualFactorSettings.  # noqa: E501
        :type: bool
        """

        self._should_suggest_applicatons = should_suggest_applicatons

    @property
    def allowed_media(self):
        """Gets the allowed_media of this SiteDualFactorSettings.  # noqa: E501


        :return: The allowed_media of this SiteDualFactorSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_media

    @allowed_media.setter
    def allowed_media(self, allowed_media):
        """Sets the allowed_media of this SiteDualFactorSettings.


        :param allowed_media: The allowed_media of this SiteDualFactorSettings.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ga", "sms", "email"]  # noqa: E501
        if not set(allowed_media).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_media` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(allowed_media) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_media = allowed_media

    @property
    def should_send_login_notifications(self):
        """Gets the should_send_login_notifications of this SiteDualFactorSettings.  # noqa: E501

        Send Notifications on Login to protected URL  # noqa: E501

        :return: The should_send_login_notifications of this SiteDualFactorSettings.  # noqa: E501
        :rtype: bool
        """
        return self._should_send_login_notifications

    @should_send_login_notifications.setter
    def should_send_login_notifications(self, should_send_login_notifications):
        """Sets the should_send_login_notifications of this SiteDualFactorSettings.

        Send Notifications on Login to protected URL  # noqa: E501

        :param should_send_login_notifications: The should_send_login_notifications of this SiteDualFactorSettings.  # noqa: E501
        :type: bool
        """

        self._should_send_login_notifications = should_send_login_notifications

    @property
    def application(self):
        """Gets the application of this SiteDualFactorSettings.  # noqa: E501


        :return: The application of this SiteDualFactorSettings.  # noqa: E501
        :rtype: bool
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this SiteDualFactorSettings.


        :param application: The application of this SiteDualFactorSettings.  # noqa: E501
        :type: bool
        """

        self._application = application

    @property
    def version(self):
        """Gets the version of this SiteDualFactorSettings.  # noqa: E501


        :return: The version of this SiteDualFactorSettings.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SiteDualFactorSettings.


        :param version: The version of this SiteDualFactorSettings.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteDualFactorSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteDualFactorSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
