# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DnsInstructionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dns_record_name': 'str',
        'set_type_to': 'str',
        'set_data_to': 'list[object]'
    }

    attribute_map = {
        'dns_record_name': 'dns_record_name',
        'set_type_to': 'set_type_to',
        'set_data_to': 'set_data_to'
    }

    def __init__(self, dns_record_name=None, set_type_to=None, set_data_to=None):  # noqa: E501
        """DnsInstructionItem - a model defined in Swagger"""  # noqa: E501
        self._dns_record_name = None
        self._set_type_to = None
        self._set_data_to = None
        self.discriminator = None
        if dns_record_name is not None:
            self.dns_record_name = dns_record_name
        if set_type_to is not None:
            self.set_type_to = set_type_to
        if set_data_to is not None:
            self.set_data_to = set_data_to

    @property
    def dns_record_name(self):
        """Gets the dns_record_name of this DnsInstructionItem.  # noqa: E501


        :return: The dns_record_name of this DnsInstructionItem.  # noqa: E501
        :rtype: str
        """
        return self._dns_record_name

    @dns_record_name.setter
    def dns_record_name(self, dns_record_name):
        """Sets the dns_record_name of this DnsInstructionItem.


        :param dns_record_name: The dns_record_name of this DnsInstructionItem.  # noqa: E501
        :type: str
        """

        self._dns_record_name = dns_record_name

    @property
    def set_type_to(self):
        """Gets the set_type_to of this DnsInstructionItem.  # noqa: E501


        :return: The set_type_to of this DnsInstructionItem.  # noqa: E501
        :rtype: str
        """
        return self._set_type_to

    @set_type_to.setter
    def set_type_to(self, set_type_to):
        """Sets the set_type_to of this DnsInstructionItem.


        :param set_type_to: The set_type_to of this DnsInstructionItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["CNAME", "A", "AAAA", "MX", "NS", "TXT", "Unkown", "CAA"]  # noqa: E501
        if set_type_to not in allowed_values:
            raise ValueError(
                "Invalid value for `set_type_to` ({0}), must be one of {1}"  # noqa: E501
                .format(set_type_to, allowed_values)
            )

        self._set_type_to = set_type_to

    @property
    def set_data_to(self):
        """Gets the set_data_to of this DnsInstructionItem.  # noqa: E501


        :return: The set_data_to of this DnsInstructionItem.  # noqa: E501
        :rtype: list[object]
        """
        return self._set_data_to

    @set_data_to.setter
    def set_data_to(self, set_data_to):
        """Sets the set_data_to of this DnsInstructionItem.


        :param set_data_to: The set_data_to of this DnsInstructionItem.  # noqa: E501
        :type: list[object]
        """

        self._set_data_to = set_data_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsInstructionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsInstructionItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
