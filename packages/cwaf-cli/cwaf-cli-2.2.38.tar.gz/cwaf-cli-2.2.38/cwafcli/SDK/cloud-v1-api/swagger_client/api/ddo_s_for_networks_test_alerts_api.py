# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DDoSForNetworksTestAlertsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_infra_protect_ddos_start(self, **kwargs):  # noqa: E501
        """DDoS start  # noqa: E501

        Use this operation to send a test notification informing you that an Infrastructure Protection DDoS attack has started.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_ddos_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP prefix to send a notification for. For example, 10.10.10.10
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_ddos_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_ddos_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_ddos_start_with_http_info(self, **kwargs):  # noqa: E501
        """DDoS start  # noqa: E501

        Use this operation to send a test notification informing you that an Infrastructure Protection DDoS attack has started.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_ddos_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP prefix to send a notification for. For example, 10.10.10.10
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_prefix', 'bps', 'pps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_ddos_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip_prefix' in params:
            query_params.append(('ip_prefix', params['ip_prefix']))  # noqa: E501
        if 'bps' in params:
            query_params.append(('bps', params['bps']))  # noqa: E501
        if 'pps' in params:
            query_params.append(('pps', params['pps']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/ddos/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_ddos_stop(self, **kwargs):  # noqa: E501
        """DDoS stop  # noqa: E501

        Use this operation to send a test notification informing you that an Infrastructure Protection DDoS attack has ended.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_ddos_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP prefix to send a notification for. For example, 10.10.10.10
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_ddos_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_ddos_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_ddos_stop_with_http_info(self, **kwargs):  # noqa: E501
        """DDoS stop  # noqa: E501

        Use this operation to send a test notification informing you that an Infrastructure Protection DDoS attack has ended.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_ddos_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP prefix to send a notification for. For example, 10.10.10.10
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_prefix', 'bps', 'pps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_ddos_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip_prefix' in params:
            query_params.append(('ip_prefix', params['ip_prefix']))  # noqa: E501
        if 'bps' in params:
            query_params.append(('bps', params['bps']))  # noqa: E501
        if 'pps' in params:
            query_params.append(('pps', params['pps']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/ddos/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_monitoring_attack_start_critical_alert(self, **kwargs):  # noqa: E501
        """Monitoring attack start  # noqa: E501

        Use this operation to send a test notification informing you that the monitoring service has detected a DDoS attack.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_monitoring_attack_start_critical_alert(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP range to send a notification for. For example, 1.1.1.0/24
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :param str packet_type: Packet type. (UDP, TCP, DNS, DNS_RESPONSE, ICMP, SYN, FRAG, LARGE_SYN, NTP, NETFLOW, SSDP, GENERAL)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_monitoring_attack_start_critical_alert_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_monitoring_attack_start_critical_alert_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_monitoring_attack_start_critical_alert_with_http_info(self, **kwargs):  # noqa: E501
        """Monitoring attack start  # noqa: E501

        Use this operation to send a test notification informing you that the monitoring service has detected a DDoS attack.<br/>You can optionally provide additional parameters to determine the magnitude of the attack.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_monitoring_attack_start_critical_alert_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_prefix: The IP range to send a notification for. For example, 1.1.1.0/24
        :param int bps: Number of bits per second
        :param int pps: Number of packets per second
        :param str packet_type: Packet type. (UDP, TCP, DNS, DNS_RESPONSE, ICMP, SYN, FRAG, LARGE_SYN, NTP, NETFLOW, SSDP, GENERAL)
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_prefix', 'bps', 'pps', 'packet_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_monitoring_attack_start_critical_alert" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip_prefix' in params:
            query_params.append(('ip_prefix', params['ip_prefix']))  # noqa: E501
        if 'bps' in params:
            query_params.append(('bps', params['bps']))  # noqa: E501
        if 'pps' in params:
            query_params.append(('pps', params['pps']))  # noqa: E501
        if 'packet_type' in params:
            query_params.append(('packet_type', params['packet_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/monitoring/attack-start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_net_flow_bad_data(self, **kwargs):  # noqa: E501
        """Monitoring bad data  # noqa: E501

        Use this operation to send a test notification informing you that the monitoring service is receiving messages that do not conform to the accepted format.<br/>You can optionally provide the exporter IP found in the Management Console’s Monitoring Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_bad_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_net_flow_bad_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_net_flow_bad_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_net_flow_bad_data_with_http_info(self, **kwargs):  # noqa: E501
        """Monitoring bad data  # noqa: E501

        Use this operation to send a test notification informing you that the monitoring service is receiving messages that do not conform to the accepted format.<br/>You can optionally provide the exporter IP found in the Management Console’s Monitoring Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_bad_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_net_flow_bad_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exporter_ip' in params:
            query_params.append(('exporter_ip', params['exporter_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/monitoring/bad-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_net_flow_start(self, **kwargs):  # noqa: E501
        """Monitoring start  # noqa: E501

        Use this operation to send a test notification informing you that flow monitoring has started.<br/>You can optionally provide the exporter IP found in the Management Console’s Monitoring Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_net_flow_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_net_flow_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_net_flow_start_with_http_info(self, **kwargs):  # noqa: E501
        """Monitoring start  # noqa: E501

        Use this operation to send a test notification informing you that flow monitoring has started.<br/>You can optionally provide the exporter IP found in the Management Console’s Monitoring Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_net_flow_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exporter_ip' in params:
            query_params.append(('exporter_ip', params['exporter_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/monitoring/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_net_flow_stop(self, **kwargs):  # noqa: E501
        """Monitoring stop  # noqa: E501

        Use this operation to send a test notification informing you that NetFlow monitoring has stopped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_net_flow_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_net_flow_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_net_flow_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Monitoring stop  # noqa: E501

        Use this operation to send a test notification informing you that NetFlow monitoring has stopped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_net_flow_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_ip: The exporter IP to send a notification for. For example, 10.10.10.10.<br/>The exporter IP can be found in the Cloud Security Console’s Monitoring Settings page.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_net_flow_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'exporter_ip' in params:
            query_params.append(('exporter_ip', params['exporter_ip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/monitoring/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_tunnel_down(self, **kwargs):  # noqa: E501
        """Connection down  # noqa: E501

        Use this operation to send a test notification informing you that the Infrastructure Protection connection is down.<br/>You can optionally provide the name of the connection as it appears in the Management Console’s Protection Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_tunnel_down(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_name: The connection to send a notification for.<br/>Enter the connection name as it appears in the Cloud Security Console’s Protection Settings page. For example, Test_GRE_Tunnel.
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_tunnel_down_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_tunnel_down_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_tunnel_down_with_http_info(self, **kwargs):  # noqa: E501
        """Connection down  # noqa: E501

        Use this operation to send a test notification informing you that the Infrastructure Protection connection is down.<br/>You can optionally provide the name of the connection as it appears in the Management Console’s Protection Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_tunnel_down_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_name: The connection to send a notification for.<br/>Enter the connection name as it appears in the Cloud Security Console’s Protection Settings page. For example, Test_GRE_Tunnel.
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connection_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_tunnel_down" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'connection_name' in params:
            query_params.append(('connection_name', params['connection_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/connection/down', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_infra_protect_tunnel_up(self, **kwargs):  # noqa: E501
        """Connection up  # noqa: E501

        Use this operation to send a test notification informing you that the Infrastructure Protection connection is up.<br/>You can optionally provide the name of the connection as it appears in the Management Console’s Protection Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_tunnel_up(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_name: The connection to send a notification for.<br/>Enter the connection name as it appears in the Cloud Security Console’s Protection Settings page. For example, Test_GRE_Tunnel.
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_infra_protect_tunnel_up_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_infra_protect_tunnel_up_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_infra_protect_tunnel_up_with_http_info(self, **kwargs):  # noqa: E501
        """Connection up  # noqa: E501

        Use this operation to send a test notification informing you that the Infrastructure Protection connection is up.<br/>You can optionally provide the name of the connection as it appears in the Management Console’s Protection Settings page.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_infra_protect_tunnel_up_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_name: The connection to send a notification for.<br/>Enter the connection name as it appears in the Cloud Security Console’s Protection Settings page. For example, Test_GRE_Tunnel.
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['connection_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_infra_protect_tunnel_up" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'connection_name' in params:
            query_params.append(('connection_name', params['connection_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/connection/up', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_protected_ip_status_down(self, **kwargs):  # noqa: E501
        """IP protection status down  # noqa: E501

        Use this operation to send a test notification informing you that the IP Protection status is down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_protected_ip_status_down(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_protection: The IP to send a notification for. For example, 10.10.10.10
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_protected_ip_status_down_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_protected_ip_status_down_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_protected_ip_status_down_with_http_info(self, **kwargs):  # noqa: E501
        """IP protection status down  # noqa: E501

        Use this operation to send a test notification informing you that the IP Protection status is down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_protected_ip_status_down_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_protection: The IP to send a notification for. For example, 10.10.10.10
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_protection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_protected_ip_status_down" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip_protection' in params:
            query_params.append(('ip_protection', params['ip_protection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/ip-protection-status/down', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_protected_ip_status_up(self, **kwargs):  # noqa: E501
        """IP protection status up  # noqa: E501

        Use this operation to send a test notification informing you that the IP Protection status is up.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_protected_ip_status_up(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_protection: The IP to send a notification for. For example, 10.10.10.10
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_protected_ip_status_up_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_protected_ip_status_up_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_protected_ip_status_up_with_http_info(self, **kwargs):  # noqa: E501
        """IP protection status up  # noqa: E501

        Use this operation to send a test notification informing you that the IP Protection status is up.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_protected_ip_status_up_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ip_protection: The IP to send a notification for. For example, 10.10.10.10
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_protection']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_protected_ip_status_up" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ip_protection' in params:
            query_params.append(('ip_protection', params['ip_protection']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/infra-protect/test-alerts/ip-protection-status/up', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
