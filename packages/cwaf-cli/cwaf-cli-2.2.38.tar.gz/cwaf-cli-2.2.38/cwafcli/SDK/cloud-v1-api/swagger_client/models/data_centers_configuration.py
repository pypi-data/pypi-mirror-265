# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataCentersConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lb_algorithm': 'str',
        'fail_over_required_monitors': 'str',
        'data_center_mode': 'str',
        'min_available_servers_for_data_center_up': 'int',
        'kick_start_url': 'str',
        'kick_start_user': 'str',
        'kick_start_pass': 'str',
        'is_persistent': 'bool',
        'data_centers': 'list[DataCenterConfiguration]'
    }

    attribute_map = {
        'lb_algorithm': 'lbAlgorithm',
        'fail_over_required_monitors': 'failOverRequiredMonitors',
        'data_center_mode': 'dataCenterMode',
        'min_available_servers_for_data_center_up': 'minAvailableServersForDataCenterUp',
        'kick_start_url': 'kickStartURL',
        'kick_start_user': 'kickStartUser',
        'kick_start_pass': 'kickStartPass',
        'is_persistent': 'isPersistent',
        'data_centers': 'dataCenters'
    }

    def __init__(self, lb_algorithm='BEST_CONNECTION_TIME', fail_over_required_monitors='MOST', data_center_mode='SINGLE_DC', min_available_servers_for_data_center_up=1, kick_start_url=None, kick_start_user=None, kick_start_pass=None, is_persistent=True, data_centers=None):  # noqa: E501
        """DataCentersConfiguration - a model defined in Swagger"""  # noqa: E501
        self._lb_algorithm = None
        self._fail_over_required_monitors = None
        self._data_center_mode = None
        self._min_available_servers_for_data_center_up = None
        self._kick_start_url = None
        self._kick_start_user = None
        self._kick_start_pass = None
        self._is_persistent = None
        self._data_centers = None
        self.discriminator = None
        if lb_algorithm is not None:
            self.lb_algorithm = lb_algorithm
        if fail_over_required_monitors is not None:
            self.fail_over_required_monitors = fail_over_required_monitors
        if data_center_mode is not None:
            self.data_center_mode = data_center_mode
        if min_available_servers_for_data_center_up is not None:
            self.min_available_servers_for_data_center_up = min_available_servers_for_data_center_up
        if kick_start_url is not None:
            self.kick_start_url = kick_start_url
        if kick_start_user is not None:
            self.kick_start_user = kick_start_user
        if kick_start_pass is not None:
            self.kick_start_pass = kick_start_pass
        if is_persistent is not None:
            self.is_persistent = is_persistent
        if data_centers is not None:
            self.data_centers = data_centers

    @property
    def lb_algorithm(self):
        """Gets the lb_algorithm of this DataCentersConfiguration.  # noqa: E501

        Specifies how to load balance between multiple data centers  # noqa: E501

        :return: The lb_algorithm of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._lb_algorithm

    @lb_algorithm.setter
    def lb_algorithm(self, lb_algorithm):
        """Sets the lb_algorithm of this DataCentersConfiguration.

        Specifies how to load balance between multiple data centers  # noqa: E501

        :param lb_algorithm: The lb_algorithm of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["BEST_CONNECTION_TIME", "GEO_PREFERRED", "GEO_REQUIRED", "WEIGHTED_LB"]  # noqa: E501
        if lb_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `lb_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(lb_algorithm, allowed_values)
            )

        self._lb_algorithm = lb_algorithm

    @property
    def fail_over_required_monitors(self):
        """Gets the fail_over_required_monitors of this DataCentersConfiguration.  # noqa: E501

        How many Imperva PoPs should assess Data Center as down before failover is performed.MANY means more than one. MOST means more than 50%.  # noqa: E501

        :return: The fail_over_required_monitors of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._fail_over_required_monitors

    @fail_over_required_monitors.setter
    def fail_over_required_monitors(self, fail_over_required_monitors):
        """Sets the fail_over_required_monitors of this DataCentersConfiguration.

        How many Imperva PoPs should assess Data Center as down before failover is performed.MANY means more than one. MOST means more than 50%.  # noqa: E501

        :param fail_over_required_monitors: The fail_over_required_monitors of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["ONE", "MANY", "MOST", "ALL"]  # noqa: E501
        if fail_over_required_monitors not in allowed_values:
            raise ValueError(
                "Invalid value for `fail_over_required_monitors` ({0}), must be one of {1}"  # noqa: E501
                .format(fail_over_required_monitors, allowed_values)
            )

        self._fail_over_required_monitors = fail_over_required_monitors

    @property
    def data_center_mode(self):
        """Gets the data_center_mode of this DataCentersConfiguration.  # noqa: E501

        SINGLE_SERVER does not allow load balancing. SINGLE_DC allows load balancing and/or failover between its servers. MULTIPLE_DC allows load balancing and/or failover between the data centers plus geo aware routing.  # noqa: E501

        :return: The data_center_mode of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._data_center_mode

    @data_center_mode.setter
    def data_center_mode(self, data_center_mode):
        """Sets the data_center_mode of this DataCentersConfiguration.

        SINGLE_SERVER does not allow load balancing. SINGLE_DC allows load balancing and/or failover between its servers. MULTIPLE_DC allows load balancing and/or failover between the data centers plus geo aware routing.  # noqa: E501

        :param data_center_mode: The data_center_mode of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["SINGLE_SERVER", "SINGLE_DC", "MULTIPLE_DC"]  # noqa: E501
        if data_center_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `data_center_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(data_center_mode, allowed_values)
            )

        self._data_center_mode = data_center_mode

    @property
    def min_available_servers_for_data_center_up(self):
        """Gets the min_available_servers_for_data_center_up of this DataCentersConfiguration.  # noqa: E501

        The minimal number of available data center's servers to consider that data center as UP  # noqa: E501

        :return: The min_available_servers_for_data_center_up of this DataCentersConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._min_available_servers_for_data_center_up

    @min_available_servers_for_data_center_up.setter
    def min_available_servers_for_data_center_up(self, min_available_servers_for_data_center_up):
        """Sets the min_available_servers_for_data_center_up of this DataCentersConfiguration.

        The minimal number of available data center's servers to consider that data center as UP  # noqa: E501

        :param min_available_servers_for_data_center_up: The min_available_servers_for_data_center_up of this DataCentersConfiguration.  # noqa: E501
        :type: int
        """

        self._min_available_servers_for_data_center_up = min_available_servers_for_data_center_up

    @property
    def kick_start_url(self):
        """Gets the kick_start_url of this DataCentersConfiguration.  # noqa: E501

        The URL that will be sent to the standby server when Imperva performs failover based on our monitoring. Port must be specified, if protocol is https.  # noqa: E501

        :return: The kick_start_url of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kick_start_url

    @kick_start_url.setter
    def kick_start_url(self, kick_start_url):
        """Sets the kick_start_url of this DataCentersConfiguration.

        The URL that will be sent to the standby server when Imperva performs failover based on our monitoring. Port must be specified, if protocol is https.  # noqa: E501

        :param kick_start_url: The kick_start_url of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """

        self._kick_start_url = kick_start_url

    @property
    def kick_start_user(self):
        """Gets the kick_start_user of this DataCentersConfiguration.  # noqa: E501

        The kickstart user, if kickstart URL is protected by user and password  # noqa: E501

        :return: The kick_start_user of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kick_start_user

    @kick_start_user.setter
    def kick_start_user(self, kick_start_user):
        """Sets the kick_start_user of this DataCentersConfiguration.

        The kickstart user, if kickstart URL is protected by user and password  # noqa: E501

        :param kick_start_user: The kick_start_user of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """

        self._kick_start_user = kick_start_user

    @property
    def kick_start_pass(self):
        """Gets the kick_start_pass of this DataCentersConfiguration.  # noqa: E501

        The kickstart password, if kickstart URL is protected by user and password  # noqa: E501

        :return: The kick_start_pass of this DataCentersConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._kick_start_pass

    @kick_start_pass.setter
    def kick_start_pass(self, kick_start_pass):
        """Sets the kick_start_pass of this DataCentersConfiguration.

        The kickstart password, if kickstart URL is protected by user and password  # noqa: E501

        :param kick_start_pass: The kick_start_pass of this DataCentersConfiguration.  # noqa: E501
        :type: str
        """

        self._kick_start_pass = kick_start_pass

    @property
    def is_persistent(self):
        """Gets the is_persistent of this DataCentersConfiguration.  # noqa: E501

        When true our proxy servers will maintain session stickiness to origin servers by a cookie  # noqa: E501

        :return: The is_persistent of this DataCentersConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_persistent

    @is_persistent.setter
    def is_persistent(self, is_persistent):
        """Sets the is_persistent of this DataCentersConfiguration.

        When true our proxy servers will maintain session stickiness to origin servers by a cookie  # noqa: E501

        :param is_persistent: The is_persistent of this DataCentersConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_persistent = is_persistent

    @property
    def data_centers(self):
        """Gets the data_centers of this DataCentersConfiguration.  # noqa: E501


        :return: The data_centers of this DataCentersConfiguration.  # noqa: E501
        :rtype: list[DataCenterConfiguration]
        """
        return self._data_centers

    @data_centers.setter
    def data_centers(self, data_centers):
        """Sets the data_centers of this DataCentersConfiguration.


        :param data_centers: The data_centers of this DataCentersConfiguration.  # noqa: E501
        :type: list[DataCenterConfiguration]
        """

        self._data_centers = data_centers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataCentersConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataCentersConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
