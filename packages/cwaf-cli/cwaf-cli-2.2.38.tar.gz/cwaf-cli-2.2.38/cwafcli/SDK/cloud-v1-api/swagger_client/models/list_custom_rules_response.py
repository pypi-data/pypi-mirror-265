# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListCustomRulesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'incap_rules': 'list[dict(str, object)]',
        'delivery_rules': 'list[dict(str, object)]',
        'rate_rules': 'list[dict(str, object)]'
    }

    attribute_map = {
        'incap_rules': 'incap_rules',
        'delivery_rules': 'delivery_rules',
        'rate_rules': 'rate_rules'
    }

    def __init__(self, incap_rules=None, delivery_rules=None, rate_rules=None):  # noqa: E501
        """ListCustomRulesResponse - a model defined in Swagger"""  # noqa: E501
        self._incap_rules = None
        self._delivery_rules = None
        self._rate_rules = None
        self.discriminator = None
        if incap_rules is not None:
            self.incap_rules = incap_rules
        if delivery_rules is not None:
            self.delivery_rules = delivery_rules
        if rate_rules is not None:
            self.rate_rules = rate_rules

    @property
    def incap_rules(self):
        """Gets the incap_rules of this ListCustomRulesResponse.  # noqa: E501


        :return: The incap_rules of this ListCustomRulesResponse.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._incap_rules

    @incap_rules.setter
    def incap_rules(self, incap_rules):
        """Sets the incap_rules of this ListCustomRulesResponse.


        :param incap_rules: The incap_rules of this ListCustomRulesResponse.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._incap_rules = incap_rules

    @property
    def delivery_rules(self):
        """Gets the delivery_rules of this ListCustomRulesResponse.  # noqa: E501


        :return: The delivery_rules of this ListCustomRulesResponse.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._delivery_rules

    @delivery_rules.setter
    def delivery_rules(self, delivery_rules):
        """Sets the delivery_rules of this ListCustomRulesResponse.


        :param delivery_rules: The delivery_rules of this ListCustomRulesResponse.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._delivery_rules = delivery_rules

    @property
    def rate_rules(self):
        """Gets the rate_rules of this ListCustomRulesResponse.  # noqa: E501


        :return: The rate_rules of this ListCustomRulesResponse.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._rate_rules

    @rate_rules.setter
    def rate_rules(self, rate_rules):
        """Sets the rate_rules of this ListCustomRulesResponse.


        :param rate_rules: The rate_rules of this ListCustomRulesResponse.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._rate_rules = rate_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListCustomRulesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListCustomRulesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
