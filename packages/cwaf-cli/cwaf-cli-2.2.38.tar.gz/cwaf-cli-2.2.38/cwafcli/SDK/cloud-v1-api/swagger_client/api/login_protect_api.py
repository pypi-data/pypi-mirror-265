# coding: utf-8

"""
    Cloud Application Security API

    Imperva provides customers and partners with the ability to manage accounts and sites via an API. For more information, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/csh?context=my_api\">Cloud Application Security API Reference</a>.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LoginProtectApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_lp_user(self, account_id, email, **kwargs):  # noqa: E501
        """Add login protect user  # noqa: E501

        Use this operation to add a Login Protect user for a site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lp_user(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str name: Example: John Smith
        :param str phone: Phone number. For example: \"1-8662507659\"
        :param bool is_phone_verified: Whether or not to skip phone verification.
        :param bool is_email_verified: Whether or not to skip email address verification.
        :param bool should_send_activation_email: Whether or not to send activation email to user.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.add_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
            return data

    def add_lp_user_with_http_info(self, account_id, email, **kwargs):  # noqa: E501
        """Add login protect user  # noqa: E501

        Use this operation to add a Login Protect user for a site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_lp_user_with_http_info(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str name: Example: John Smith
        :param str phone: Phone number. For example: \"1-8662507659\"
        :param bool is_phone_verified: Whether or not to skip phone verification.
        :param bool is_email_verified: Whether or not to skip email address verification.
        :param bool should_send_activation_email: Whether or not to send activation email to user.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'email', 'name', 'phone', 'is_phone_verified', 'is_email_verified', 'should_send_activation_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_lp_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `add_lp_user`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `add_lp_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'is_phone_verified' in params:
            query_params.append(('is_phone_verified', params['is_phone_verified']))  # noqa: E501
        if 'is_email_verified' in params:
            query_params.append(('is_email_verified', params['is_email_verified']))  # noqa: E501
        if 'should_send_activation_email' in params:
            query_params.append(('should_send_activation_email', params['should_send_activation_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/add-user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_protected_app_by_lp(self, site_id, **kwargs):  # noqa: E501
        """Configure login protect on admin areas  # noqa: E501

        Use this operation to configure Login Protect on wordpress | joomla | phpbb admin areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_protected_app_by_lp(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on. (required)
        :param str protected_app: Protect admin areas of joomla | wordpress | phpBB.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_protected_app_by_lp_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_protected_app_by_lp_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def configure_protected_app_by_lp_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Configure login protect on admin areas  # noqa: E501

        Use this operation to configure Login Protect on wordpress | joomla | phpbb admin areas.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_protected_app_by_lp_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on. (required)
        :param str protected_app: Protect admin areas of joomla | wordpress | phpBB.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'protected_app']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_protected_app_by_lp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `configure_protected_app_by_lp`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'protected_app' in params:
            query_params.append(('protected_app', params['protected_app']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/configure-app', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_lp_user(self, account_id, email, **kwargs):  # noqa: E501
        """Edit login protect user  # noqa: E501

        Edit Login Protect user's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_lp_user(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str name: Example: John Smith
        :param str phone: Phone number. For example: \"1-8662507659\"
        :param bool is_phone_verified: Whether or not to skip phone verification.
        :param bool is_email_verified: Whether or not to skip email address verification.
        :param bool should_send_activation_email: Whether or not to send activation email to user.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
            return data

    def edit_lp_user_with_http_info(self, account_id, email, **kwargs):  # noqa: E501
        """Edit login protect user  # noqa: E501

        Edit Login Protect user's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_lp_user_with_http_info(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str name: Example: John Smith
        :param str phone: Phone number. For example: \"1-8662507659\"
        :param bool is_phone_verified: Whether or not to skip phone verification.
        :param bool is_email_verified: Whether or not to skip email address verification.
        :param bool should_send_activation_email: Whether or not to send activation email to user.
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'email', 'name', 'phone', 'is_phone_verified', 'is_email_verified', 'should_send_activation_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_lp_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `edit_lp_user`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `edit_lp_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'phone' in params:
            query_params.append(('phone', params['phone']))  # noqa: E501
        if 'is_phone_verified' in params:
            query_params.append(('is_phone_verified', params['is_phone_verified']))  # noqa: E501
        if 'is_email_verified' in params:
            query_params.append(('is_email_verified', params['is_email_verified']))  # noqa: E501
        if 'should_send_activation_email' in params:
            query_params.append(('should_send_activation_email', params['should_send_activation_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/edit-user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lp_users(self, account_id, **kwargs):  # noqa: E501
        """Get login protect users  # noqa: E501

        Use this operation to get the account's login protect user list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lp_users(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lp_users_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lp_users_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_lp_users_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get login protect users  # noqa: E501

        Use this operation to get the account's login protect user list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lp_users_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lp_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_lp_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_lp_site_configuration(self, site_id, **kwargs):  # noqa: E501
        """Modify Site Login Protect Configuration  # noqa: E501

        Use this operation to change Login Protect settings for a site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_lp_site_configuration(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on. (required)
        :param bool enabled: Pass true to enable login protect on site, and false to disable it.<br/>Default: true
        :param str specific_users_list: Comma separated email list to set login protect users for the site. If the list is empty all users will be allowed to access the site using Login Protect.
        :param bool send_lp_notifications: Pass true to send notification on successful login using login protect.<br/>Default: false
        :param bool allow_all_users: Pass true to allow all login protect users to access the site. If you want to allow only a specific list of users to access the site using Login Protect set this to false, and add the list to specific_user_list.<br/>Default: true
        :param str authentication_methods: Comma separated list of allowed authentication methods: sms | email | ga
        :param str urls: A comma separated list of resource paths. For example, /home and /admin/index.html are resource paths, while <a href=\"http://www.example.com/home\">http://www.example.com/home</a> is not. Each URL should be encoded separately using percent encoding as specified by RFC 3986 (<a href=\"http://tools.ietf.org/html/rfc3986#section-2.1\">http://tools.ietf.org/html/rfc3986#section-2.1</a>). An empty URL list will remove all URLs.
        :param str url_patterns: A comma separated list of url patterns. Possible values: contains | equals | prefix | suffix | not_equals | not_contain | not_prefix | not_suffix. The patterns should be in accordance with the matching urls sent by the urls parameter.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_lp_site_configuration_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_lp_site_configuration_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def modify_lp_site_configuration_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Modify Site Login Protect Configuration  # noqa: E501

        Use this operation to change Login Protect settings for a site.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_lp_site_configuration_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: Numeric identifier of the site to operate on. (required)
        :param bool enabled: Pass true to enable login protect on site, and false to disable it.<br/>Default: true
        :param str specific_users_list: Comma separated email list to set login protect users for the site. If the list is empty all users will be allowed to access the site using Login Protect.
        :param bool send_lp_notifications: Pass true to send notification on successful login using login protect.<br/>Default: false
        :param bool allow_all_users: Pass true to allow all login protect users to access the site. If you want to allow only a specific list of users to access the site using Login Protect set this to false, and add the list to specific_user_list.<br/>Default: true
        :param str authentication_methods: Comma separated list of allowed authentication methods: sms | email | ga
        :param str urls: A comma separated list of resource paths. For example, /home and /admin/index.html are resource paths, while <a href=\"http://www.example.com/home\">http://www.example.com/home</a> is not. Each URL should be encoded separately using percent encoding as specified by RFC 3986 (<a href=\"http://tools.ietf.org/html/rfc3986#section-2.1\">http://tools.ietf.org/html/rfc3986#section-2.1</a>). An empty URL list will remove all URLs.
        :param str url_patterns: A comma separated list of url patterns. Possible values: contains | equals | prefix | suffix | not_equals | not_contain | not_prefix | not_suffix. The patterns should be in accordance with the matching urls sent by the urls parameter.
        :return: InlineResponse20014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'enabled', 'specific_users_list', 'send_lp_notifications', 'allow_all_users', 'authentication_methods', 'urls', 'url_patterns']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_lp_site_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `modify_lp_site_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'specific_users_list' in params:
            query_params.append(('specific_users_list', params['specific_users_list']))  # noqa: E501
        if 'send_lp_notifications' in params:
            query_params.append(('send_lp_notifications', params['send_lp_notifications']))  # noqa: E501
        if 'allow_all_users' in params:
            query_params.append(('allow_all_users', params['allow_all_users']))  # noqa: E501
        if 'authentication_methods' in params:
            query_params.append(('authentication_methods', params['authentication_methods']))  # noqa: E501
        if 'urls' in params:
            query_params.append(('urls', params['urls']))  # noqa: E501
        if 'url_patterns' in params:
            query_params.append(('url_patterns', params['url_patterns']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/configure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_lp_user(self, account_id, email, **kwargs):  # noqa: E501
        """Remove login protect user  # noqa: E501

        Use this operation to remove a login protect user from an account's user list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lp_user(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_lp_user_with_http_info(account_id, email, **kwargs)  # noqa: E501
            return data

    def remove_lp_user_with_http_info(self, account_id, email, **kwargs):  # noqa: E501
        """Remove login protect user  # noqa: E501

        Use this operation to remove a login protect user from an account's user list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_lp_user_with_http_info(account_id, email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_lp_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `remove_lp_user`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `remove_lp_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_sms(self, account_id, email, sms_text, **kwargs):  # noqa: E501
        """Send SMS to user  # noqa: E501

        Use this operation to send an SMS to a login protect user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms(account_id, email, sms_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str sms_text: Text that will be sent in SMS. (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_sms_with_http_info(account_id, email, sms_text, **kwargs)  # noqa: E501
        else:
            (data) = self.send_sms_with_http_info(account_id, email, sms_text, **kwargs)  # noqa: E501
            return data

    def send_sms_with_http_info(self, account_id, email, sms_text, **kwargs):  # noqa: E501
        """Send SMS to user  # noqa: E501

        Use this operation to send an SMS to a login protect user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_sms_with_http_info(account_id, email, sms_text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Numeric identifier of the account to operate on. (required)
        :param str email: Email address. (required)
        :param str sms_text: Text that will be sent in SMS. (required)
        :return: ApiResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'email', 'sms_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_sms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `send_sms`")  # noqa: E501
        # verify the required parameter 'email' is set
        if ('email' not in params or
                params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `send_sms`")  # noqa: E501
        # verify the required parameter 'sms_text' is set
        if ('sms_text' not in params or
                params['sms_text'] is None):
            raise ValueError("Missing the required parameter `sms_text` when calling `send_sms`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'sms_text' in params:
            query_params.append(('sms_text', params['sms_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_id', 'api_key']  # noqa: E501

        return self.api_client.call_api(
            '/api/prov/v1/sites/lp/send-sms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
