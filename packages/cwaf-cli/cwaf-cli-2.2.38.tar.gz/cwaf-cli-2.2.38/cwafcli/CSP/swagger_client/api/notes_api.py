# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cwafcli.CSP.swagger_client.api_client import ApiClient


class NotesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_domain_note(self, body, site_id, domain_id, **kwargs):  # noqa: E501
        """Add notes to a discovered domain.  # noqa: E501

        Add a quick note to a domain to help in future analysis and investigation. You can add as many notes as you like. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_note(body, site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Content of the note. (required)
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation. (required)
        :return: list[FullNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_domain_note_with_http_info(body, site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_domain_note_with_http_info(body, site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def add_domain_note_with_http_info(self, body, site_id, domain_id, **kwargs):  # noqa: E501
        """Add notes to a discovered domain.  # noqa: E501

        Add a quick note to a domain to help in future analysis and investigation. You can add as many notes as you like. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_domain_note_with_http_info(body, site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Content of the note. (required)
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation. (required)
        :return: list[FullNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_domain_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_domain_note`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_domain_note`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `add_domain_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}/notes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FullNote]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_note(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Delete notes from a discovered domain  # noqa: E501

        Delete all notes for a domain. All notes attached to a domain will be removed! If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_note(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_note_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_note_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def delete_note_with_http_info(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Delete notes from a discovered domain  # noqa: E501

        Delete all notes for a domain. All notes attached to a domain will be removed! If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_note_with_http_info(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_note" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_note`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `delete_note`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}/notes', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_domain_notes(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve user notes for a discovered domain  # noqa: E501

        Retrieves the list of user-added notes for a domain aimed to help in future analysis in investigation If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_notes(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: list[FullNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domain_notes_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_domain_notes_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def get_domain_notes_with_http_info(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve user notes for a discovered domain  # noqa: E501

        Retrieves the list of user-added notes for a domain aimed to help in future analysis in investigation If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_notes_with_http_info(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: list[FullNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domain_notes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_domain_notes`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `get_domain_notes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}/notes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FullNote]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
