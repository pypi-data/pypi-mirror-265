# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cwafcli.CSP.swagger_client.api_client import ApiClient


class WebsitesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_discovery_status(self, site_id, **kwargs):  # noqa: E501
        """Retrieve discovery status of a website  # noqa: E501

        Indicates if Client-Side Protection discovery is active or suspended.    When paused, Client-Side Protection stops monitoring for new domains and doesn’t inject the Content-Security-Policy header in the website response. You can still review domains and update the website settings. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_discovery_status(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: DiscoveryStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_discovery_status_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_status_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_discovery_status_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve discovery status of a website  # noqa: E501

        Indicates if Client-Side Protection discovery is active or suspended.    When paused, Client-Side Protection stops monitoring for new domains and doesn’t inject the Content-Security-Policy header in the website response. You can still review domains and update the website settings. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_discovery_status_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: DiscoveryStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_discovery_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/discovery', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveryStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_enforcement_mode(self, site_id, **kwargs):  # noqa: E501
        """Retrieve protection mode of a website  # noqa: E501

        Retrieves the protection mode of a website.    When in Enforce Mode, all resources you set to Block are not available in your application and new resources are automatically blocked. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enforcement_mode(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_enforcement_mode_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_enforcement_mode_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_enforcement_mode_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve protection mode of a website  # noqa: E501

        Retrieves the protection mode of a website.    When in Enforce Mode, all resources you set to Block are not available in your application and new resources are automatically blocked. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_enforcement_mode_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: Mode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_enforcement_mode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_enforcement_mode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/mode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_google_tracking_ids(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of Google tracking IDs detected for this website  # noqa: E501

        Retrieves the list of Google Analytics tracking IDs that were detected, indicating which account Google Analytics data is being sent to from your website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_google_tracking_ids(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: list[Analytics]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_google_tracking_ids_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_google_tracking_ids_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_google_tracking_ids_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of Google tracking IDs detected for this website  # noqa: E501

        Retrieves the list of Google Analytics tracking IDs that were detected, indicating which account Google Analytics data is being sent to from your website.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_google_tracking_ids_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: list[Analytics]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_google_tracking_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_google_tracking_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/tracking-ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Analytics]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site(self, site_id, **kwargs):  # noqa: E501
        """Retrieve website configuration and status details  # noqa: E501

        Retrieves Client-Side Protection configuration and status details for a specific website. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve website configuration and status details  # noqa: E501

        Retrieves Client-Side Protection configuration and status details for a specific website. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Site',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_reputation(self, site_id, **kwargs):  # noqa: E501
        """Retrieve Osint scores for this website  # noqa: E501

        Retrieves Osint scores for each domain from Osint Domain Reputation Service for this website, Osint score indicates the risk level of a domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_reputation(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: SiteReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_reputation_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_reputation_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_reputation_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve Osint scores for this website  # noqa: E501

        Retrieves Osint scores for each domain from Osint Domain Reputation Service for this website, Osint score indicates the risk level of a domain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_reputation_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: SiteReputation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_reputation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_reputation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domain_reputation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteReputation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_settings(self, site_id, **kwargs):  # noqa: E501
        """Retrieve website settings  # noqa: E501

        Retrieves Client-Side Protection settings for a specific website, such as the list of email address in the event notification recipient list. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_settings(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: SiteSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_settings_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_settings_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_site_settings_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve website settings  # noqa: E501

        Retrieves Client-Side Protection settings for a specific website, such as the list of email address in the event notification recipient list. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_settings_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site. (required)
        :return: SiteSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sites(self, **kwargs):  # noqa: E501
        """Retrieve all websites for current account  # noqa: E501

        Retrieves the list of all websites in your account, as well as their Client-Side Protection configuration and status details. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, Site)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sites_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all websites for current account  # noqa: E501

        Retrieves the list of all websites in your account, as well as their Client-Side Protection configuration and status details. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, Site)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key'] # noqa: E501

        return self.api_client.call_api(
            '/v1/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, Site)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_discovery_status(self, body, site_id, **kwargs):  # noqa: E501
        """Change discovery status of a website  # noqa: E501

        Suspend or restart the discovery of new services.    When paused, Client-Side Protection stops monitoring for new domains and doesn’t inject the Content-Security-Policy header in the website response. You can still review domains and update the website settings. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_discovery_status(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: discovery status (required)
        :param int site_id: The numeric identifier of the site. (required)
        :return: Discovery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_discovery_status_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_discovery_status_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def set_discovery_status_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Change discovery status of a website  # noqa: E501

        Suspend or restart the discovery of new services.    When paused, Client-Side Protection stops monitoring for new domains and doesn’t inject the Content-Security-Policy header in the website response. You can still review domains and update the website settings. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_discovery_status_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: discovery status (required)
        :param int site_id: The numeric identifier of the site. (required)
        :return: Discovery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_discovery_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_discovery_status`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `set_discovery_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/discovery', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Discovery',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_enforcement_mode(self, body, site_id, **kwargs):  # noqa: E501
        """Change protection mode of a website  # noqa: E501

        Enables you to switch between Monitor Mode and Enforce Mode.    When in Enforce Mode, all resources you set to Block are not available in your application and new resources are automatically blocked. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_enforcement_mode(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: enforcement mode, 'enforce' to enable enforcement, 'monitor' to switch site to monitor mode. (required)
        :param int site_id: The numeric identifier of the site (required)
        :param datetime if_unmodified_since: Block only if no new domains were discovered since the specified date.
        :param str if_match: Block only if the list of domains discovered by Client-Side Protection matches the list fetched by client from get domains call. The value for If-Match header must be taken from the value of ETag of the GET /domains call. Recommended use with 'W/' prefix for fuzzy comparison: only block when the difference between lists is reasonably insignificant.for example: 'If-Match: W/\"etagvalue\"' 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_enforcement_mode_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_enforcement_mode_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def set_enforcement_mode_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Change protection mode of a website  # noqa: E501

        Enables you to switch between Monitor Mode and Enforce Mode.    When in Enforce Mode, all resources you set to Block are not available in your application and new resources are automatically blocked. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_enforcement_mode_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: enforcement mode, 'enforce' to enable enforcement, 'monitor' to switch site to monitor mode. (required)
        :param int site_id: The numeric identifier of the site (required)
        :param datetime if_unmodified_since: Block only if no new domains were discovered since the specified date.
        :param str if_match: Block only if the list of domains discovered by Client-Side Protection matches the list fetched by client from get domains call. The value for If-Match header must be taken from the value of ETag of the GET /domains call. Recommended use with 'W/' prefix for fuzzy comparison: only block when the difference between lists is reasonably insignificant.for example: 'If-Match: W/\"etagvalue\"' 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'if_unmodified_since', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_enforcement_mode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_enforcement_mode`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `set_enforcement_mode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_unmodified_since' in params:
            header_params['If-Unmodified-Since'] = params['if_unmodified_since']  # noqa: E501
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/mode', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_site(self, body, site_id, **kwargs):  # noqa: E501
        """Change website configuration and status details  # noqa: E501

        Change Client-Side Protection configuration and status details for a specific website.  This will change the discovery status, protection mode and emails list all at once for the site. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_site(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetSite body: (required)
        :param int site_id: The numeric identifier of the site. (required)
        :return: SetSite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_site_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_site_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def set_site_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Change website configuration and status details  # noqa: E501

        Change Client-Side Protection configuration and status details for a specific website.  This will change the discovery status, protection mode and emails list all at once for the site. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_site_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetSite body: (required)
        :param int site_id: The numeric identifier of the site. (required)
        :return: SetSite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_site`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `set_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetSite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
