# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cwafcli.CSP.swagger_client.api_client import ApiClient


class PreApprovedDomainsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_pre_approved_domain(self, body, site_id, **kwargs):  # noqa: E501
        """Add a domain to pre-approved list  # noqa: E501

        Adds a known domain to a pre-approved list.   When the domain is discovered by Client-Side Protection, it is automatically approved and marked as Allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pre_approved_domain(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShallowPreApprovedDomain body: The known domain user wants to pre-approve (required)
        :param int site_id: The numeric identifier of the site (required)
        :return: PreApprovedDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_pre_approved_domain_with_http_info(body, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_pre_approved_domain_with_http_info(body, site_id, **kwargs)  # noqa: E501
            return data

    def add_pre_approved_domain_with_http_info(self, body, site_id, **kwargs):  # noqa: E501
        """Add a domain to pre-approved list  # noqa: E501

        Adds a known domain to a pre-approved list.   When the domain is discovered by Client-Side Protection, it is automatically approved and marked as Allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_pre_approved_domain_with_http_info(body, site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShallowPreApprovedDomain body: The known domain user wants to pre-approve (required)
        :param int site_id: The numeric identifier of the site (required)
        :return: PreApprovedDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_pre_approved_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_pre_approved_domain`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_pre_approved_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/preapprovedlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreApprovedDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_pre_approved_domain(self, site_id, pre_approved_domain_id, **kwargs):  # noqa: E501
        """Delete the pre-approved domain  # noqa: E501

        Removes the domain from the pre-approved list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pre_approved_domain(site_id, pre_approved_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str pre_approved_domain_id: The Imperva domain ID of the pre-approved domain. You can retrieve the domain ID using the GET HTTP method.) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, **kwargs)  # noqa: E501
            return data

    def delete_pre_approved_domain_with_http_info(self, site_id, pre_approved_domain_id, **kwargs):  # noqa: E501
        """Delete the pre-approved domain  # noqa: E501

        Removes the domain from the pre-approved list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str pre_approved_domain_id: The Imperva domain ID of the pre-approved domain. You can retrieve the domain ID using the GET HTTP method.) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'pre_approved_domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pre_approved_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_pre_approved_domain`")  # noqa: E501
        # verify the required parameter 'pre_approved_domain_id' is set
        if ('pre_approved_domain_id' not in params or
                params['pre_approved_domain_id'] is None):
            raise ValueError("Missing the required parameter `pre_approved_domain_id` when calling `delete_pre_approved_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'pre_approved_domain_id' in params:
            path_params['preApprovedDomainId'] = params['pre_approved_domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/preapprovedlist/{preApprovedDomainId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pre_approved_domain(self, site_id, pre_approved_domain_id, **kwargs):  # noqa: E501
        """Retrieve the pre-approved domain  # noqa: E501

        Retrieve the domain from the pre-approved list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_approved_domain(site_id, pre_approved_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str pre_approved_domain_id: The Imperva domain ID of the pre-approved domain. You can retrieve the domain ID using the GET HTTP method.) (required)
        :return: PreApprovedDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, **kwargs)  # noqa: E501
            return data

    def get_pre_approved_domain_with_http_info(self, site_id, pre_approved_domain_id, **kwargs):  # noqa: E501
        """Retrieve the pre-approved domain  # noqa: E501

        Retrieve the domain from the pre-approved list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_approved_domain_with_http_info(site_id, pre_approved_domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str pre_approved_domain_id: The Imperva domain ID of the pre-approved domain. You can retrieve the domain ID using the GET HTTP method.) (required)
        :return: PreApprovedDomain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'pre_approved_domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pre_approved_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_pre_approved_domain`")  # noqa: E501
        # verify the required parameter 'pre_approved_domain_id' is set
        if ('pre_approved_domain_id' not in params or
                params['pre_approved_domain_id'] is None):
            raise ValueError("Missing the required parameter `pre_approved_domain_id` when calling `get_pre_approved_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'pre_approved_domain_id' in params:
            path_params['preApprovedDomainId'] = params['pre_approved_domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/preapprovedlist/{preApprovedDomainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PreApprovedDomain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pre_approved_domains(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of pre-approved domains  # noqa: E501

        Retrieves the list of domains approved by user before they were discovered by the system.   When these domains are discovered by Client-Side Protection, they are automatically approved and marked as Allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_approved_domains(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: list[PreApprovedDomain]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pre_approved_domains_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pre_approved_domains_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_pre_approved_domains_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of pre-approved domains  # noqa: E501

        Retrieves the list of domains approved by user before they were discovered by the system.   When these domains are discovered by Client-Side Protection, they are automatically approved and marked as Allowed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pre_approved_domains_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :return: list[PreApprovedDomain]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pre_approved_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_pre_approved_domains`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/preapprovedlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PreApprovedDomain]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
