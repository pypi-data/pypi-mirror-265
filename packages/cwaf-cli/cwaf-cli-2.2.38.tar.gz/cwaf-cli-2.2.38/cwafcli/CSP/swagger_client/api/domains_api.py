# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cwafcli.CSP.swagger_client.api_client import ApiClient


class DomainsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_domain(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve information about specific domain  # noqa: E501

        Get full information about the domain and its status. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domain_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_domain_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def get_domain_with_http_info(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve information about specific domain  # noqa: E501

        Get full information about the domain and its status. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_with_http_info(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_domain`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `get_domain`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_domain_allowance(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve status details of a discovered domain  # noqa: E501

        Retrieves status details of the domain including whether the domain is blocked or allowed, and reviewed or unreviewed.   When the website is in \"enforce\" mode, all requests from the website to blocked domains are blocked.    By default, all newly discovered domains are allowed if the website is in \"monitor\" mode, and blocked if the website is in \"enforce\" mode. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_allowance(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation. (required)
        :return: DomainStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domain_allowance_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_domain_allowance_with_http_info(site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def get_domain_allowance_with_http_info(self, site_id, domain_id, **kwargs):  # noqa: E501
        """Retrieve status details of a discovered domain  # noqa: E501

        Retrieves status details of the domain including whether the domain is blocked or allowed, and reviewed or unreviewed.   When the website is in \"enforce\" mode, all requests from the website to blocked domains are blocked.    By default, all newly discovered domains are allowed if the website is in \"monitor\" mode, and blocked if the website is in \"enforce\" mode. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domain_allowance_with_http_info(site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation. (required)
        :return: DomainStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domain_allowance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_domain_allowance`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `get_domain_allowance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_domains(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of all discovered domains  # noqa: E501

        Every domain accessed from the site is recorded in this list. Client-Side Protection gathers all available information the domain to help with analysis. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param bool significant: Show only significant domains. If the service is part of the profile and/or frequently requested. The two values are 1 or 0. 1 = significant. 0 = not significant.
        :param bool expand: Expand domain object to include additional information. Adds #domainInfo and #domainReports fields.
        :param str resource: Show only domains with specific resource type
        :param int start: Start index of domains
        :param int length: Length of requested domains
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_domains_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_domains_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_domains_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Retrieve list of all discovered domains  # noqa: E501

        Every domain accessed from the site is recorded in this list. Client-Side Protection gathers all available information the domain to help with analysis. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_domains_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: The numeric identifier of the site (required)
        :param bool significant: Show only significant domains. If the service is part of the profile and/or frequently requested. The two values are 1 or 0. 1 = significant. 0 = not significant.
        :param bool expand: Expand domain object to include additional information. Adds #domainInfo and #domainReports fields.
        :param str resource: Show only domains with specific resource type
        :param int start: Start index of domains
        :param int length: Length of requested domains
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'significant', 'expand', 'resource', 'start', 'length']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_domains`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'significant' in params:
            query_params.append(('significant', params['significant']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'resource' in params:
            query_params.append(('resource', params['resource']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'length' in params:
            query_params.append(('length', params['length']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Domain]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_domain_allowance(self, body, site_id, domain_id, **kwargs):  # noqa: E501
        """Overwrite status of the a discovered domain  # noqa: E501

        Sets the domain status to block or allow.   When the website is in \"enforce\" mode, all requests from the website to blocked domains are blocked.    By default, all newly discovered domains are allowed if the website is in \"monitor\" mode, and blocked if the website is in \"enforce\" mode. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_domain_allowance(body, site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainStatus body: (required)
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: DomainStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_domain_allowance_with_http_info(body, site_id, domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_domain_allowance_with_http_info(body, site_id, domain_id, **kwargs)  # noqa: E501
            return data

    def set_domain_allowance_with_http_info(self, body, site_id, domain_id, **kwargs):  # noqa: E501
        """Overwrite status of the a discovered domain  # noqa: E501

        Sets the domain status to block or allow.   When the website is in \"enforce\" mode, all requests from the website to blocked domains are blocked.    By default, all newly discovered domains are allowed if the website is in \"monitor\" mode, and blocked if the website is in \"enforce\" mode. If the API key used is for a parent account, and the website belongs to a sub account, the caid of the sub account must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_domain_allowance_with_http_info(body, site_id, domain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DomainStatus body: (required)
        :param int site_id: The numeric identifier of the site (required)
        :param str domain_id: Domain reference id as received from getDomains operation (required)
        :return: DomainStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'site_id', 'domain_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_domain_allowance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_domain_allowance`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `set_domain_allowance`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `set_domain_allowance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domainId'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['x-API-Id', 'x-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/sites/{siteId}/domains/{domainId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
