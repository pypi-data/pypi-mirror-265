# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Domain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'domain': 'str',
        'status': 'DomainStatus',
        'domain_risk': 'DomainRisk',
        'notes': 'list[FullNote]',
        'time_bucket': 'int',
        'significance': 'int',
        'resource_types': 'list[str]',
        'browser_stats': 'dict(str, int)',
        'country_stats': 'dict(str, int)',
        'ips_sample': 'list[str]',
        'sources': 'int',
        'frequent': 'bool',
        'part_of_profile': 'bool',
        'discovered_at': 'int',
        'last_seen_ms': 'int',
        'domain_info': 'DomainInfo',
        'domain_reports': 'list[DomainReport]',
        'obfuscation_report': 'DomainObfuscationReport',
        'domain_popularity': 'str',
        'instant_block_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'domain': 'domain',
        'status': 'status',
        'domain_risk': 'domainRisk',
        'notes': 'notes',
        'time_bucket': 'timeBucket',
        'significance': 'significance',
        'resource_types': 'resourceTypes',
        'browser_stats': 'browserStats',
        'country_stats': 'countryStats',
        'ips_sample': 'ipsSample',
        'sources': 'sources',
        'frequent': 'frequent',
        'part_of_profile': 'partOfProfile',
        'discovered_at': 'discoveredAt',
        'last_seen_ms': 'lastSeenMs',
        'domain_info': 'domainInfo',
        'domain_reports': 'domainReports',
        'obfuscation_report': 'obfuscationReport',
        'domain_popularity': 'domainPopularity',
        'instant_block_enabled': 'instantBlockEnabled'
    }

    def __init__(self, id=None, domain=None, status=None, domain_risk=None, notes=None, time_bucket=None, significance=None, resource_types=None, browser_stats=None, country_stats=None, ips_sample=None, sources=None, frequent=None, part_of_profile=None, discovered_at=None, last_seen_ms=None, domain_info=None, domain_reports=None, obfuscation_report=None, domain_popularity=None, instant_block_enabled=None):  # noqa: E501
        """Domain - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._domain = None
        self._status = None
        self._domain_risk = None
        self._notes = None
        self._time_bucket = None
        self._significance = None
        self._resource_types = None
        self._browser_stats = None
        self._country_stats = None
        self._ips_sample = None
        self._sources = None
        self._frequent = None
        self._part_of_profile = None
        self._discovered_at = None
        self._last_seen_ms = None
        self._domain_info = None
        self._domain_reports = None
        self._obfuscation_report = None
        self._domain_popularity = None
        self._instant_block_enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if domain is not None:
            self.domain = domain
        if status is not None:
            self.status = status
        if domain_risk is not None:
            self.domain_risk = domain_risk
        if notes is not None:
            self.notes = notes
        if time_bucket is not None:
            self.time_bucket = time_bucket
        if significance is not None:
            self.significance = significance
        if resource_types is not None:
            self.resource_types = resource_types
        if browser_stats is not None:
            self.browser_stats = browser_stats
        if country_stats is not None:
            self.country_stats = country_stats
        if ips_sample is not None:
            self.ips_sample = ips_sample
        if sources is not None:
            self.sources = sources
        if frequent is not None:
            self.frequent = frequent
        if part_of_profile is not None:
            self.part_of_profile = part_of_profile
        if discovered_at is not None:
            self.discovered_at = discovered_at
        if last_seen_ms is not None:
            self.last_seen_ms = last_seen_ms
        if domain_info is not None:
            self.domain_info = domain_info
        if domain_reports is not None:
            self.domain_reports = domain_reports
        if obfuscation_report is not None:
            self.obfuscation_report = obfuscation_report
        if domain_popularity is not None:
            self.domain_popularity = domain_popularity
        if instant_block_enabled is not None:
            self.instant_block_enabled = instant_block_enabled

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501

        Domain reference id used in different operations.  # noqa: E501

        :return: The id of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.

        Domain reference id used in different operations.  # noqa: E501

        :param id: The id of this Domain.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def domain(self):
        """Gets the domain of this Domain.  # noqa: E501

        Domain name  # noqa: E501

        :return: The domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domain.

        Domain name  # noqa: E501

        :param domain: The domain of this Domain.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def status(self):
        """Gets the status of this Domain.  # noqa: E501


        :return: The status of this Domain.  # noqa: E501
        :rtype: DomainStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Domain.


        :param status: The status of this Domain.  # noqa: E501
        :type: DomainStatus
        """

        self._status = status

    @property
    def domain_risk(self):
        """Gets the domain_risk of this Domain.  # noqa: E501


        :return: The domain_risk of this Domain.  # noqa: E501
        :rtype: DomainRisk
        """
        return self._domain_risk

    @domain_risk.setter
    def domain_risk(self, domain_risk):
        """Sets the domain_risk of this Domain.


        :param domain_risk: The domain_risk of this Domain.  # noqa: E501
        :type: DomainRisk
        """

        self._domain_risk = domain_risk

    @property
    def notes(self):
        """Gets the notes of this Domain.  # noqa: E501

        List of notes associated with the domain. Added by the API user as a quick note for convenience.  # noqa: E501

        :return: The notes of this Domain.  # noqa: E501
        :rtype: list[FullNote]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Domain.

        List of notes associated with the domain. Added by the API user as a quick note for convenience.  # noqa: E501

        :param notes: The notes of this Domain.  # noqa: E501
        :type: list[FullNote]
        """

        self._notes = notes

    @property
    def time_bucket(self):
        """Gets the time_bucket of this Domain.  # noqa: E501


        :return: The time_bucket of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._time_bucket

    @time_bucket.setter
    def time_bucket(self, time_bucket):
        """Sets the time_bucket of this Domain.


        :param time_bucket: The time_bucket of this Domain.  # noqa: E501
        :type: int
        """

        self._time_bucket = time_bucket

    @property
    def significance(self):
        """Gets the significance of this Domain.  # noqa: E501

        If the service is part of the profile and/or frequently requested. The two values are 1 or 0. 1 = significant. 0 = not significant.  # noqa: E501

        :return: The significance of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._significance

    @significance.setter
    def significance(self, significance):
        """Sets the significance of this Domain.

        If the service is part of the profile and/or frequently requested. The two values are 1 or 0. 1 = significant. 0 = not significant.  # noqa: E501

        :param significance: The significance of this Domain.  # noqa: E501
        :type: int
        """

        self._significance = significance

    @property
    def resource_types(self):
        """Gets the resource_types of this Domain.  # noqa: E501


        :return: The resource_types of this Domain.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this Domain.


        :param resource_types: The resource_types of this Domain.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ALL", "UNKNOWN", "RESOURCE", "FRAME", "IMAGE", "DATA_TRANSFER", "STYLE", "FONT", "SCRIPT", "MANIFEST", "MEDIA", "FORM_ACTION", "FRAME_ANCESTORS"]  # noqa: E501
        if not set(resource_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `resource_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(resource_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._resource_types = resource_types

    @property
    def browser_stats(self):
        """Gets the browser_stats of this Domain.  # noqa: E501

        Statistics of browsers of clients that used the domain.  # noqa: E501

        :return: The browser_stats of this Domain.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._browser_stats

    @browser_stats.setter
    def browser_stats(self, browser_stats):
        """Sets the browser_stats of this Domain.

        Statistics of browsers of clients that used the domain.  # noqa: E501

        :param browser_stats: The browser_stats of this Domain.  # noqa: E501
        :type: dict(str, int)
        """

        self._browser_stats = browser_stats

    @property
    def country_stats(self):
        """Gets the country_stats of this Domain.  # noqa: E501

        Statistics of countries of clients that used the domain.  # noqa: E501

        :return: The country_stats of this Domain.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._country_stats

    @country_stats.setter
    def country_stats(self, country_stats):
        """Sets the country_stats of this Domain.

        Statistics of countries of clients that used the domain.  # noqa: E501

        :param country_stats: The country_stats of this Domain.  # noqa: E501
        :type: dict(str, int)
        """

        self._country_stats = country_stats

    @property
    def ips_sample(self):
        """Gets the ips_sample of this Domain.  # noqa: E501

        A sample of IP sources detected in the CSP reports.  # noqa: E501

        :return: The ips_sample of this Domain.  # noqa: E501
        :rtype: list[str]
        """
        return self._ips_sample

    @ips_sample.setter
    def ips_sample(self, ips_sample):
        """Sets the ips_sample of this Domain.

        A sample of IP sources detected in the CSP reports.  # noqa: E501

        :param ips_sample: The ips_sample of this Domain.  # noqa: E501
        :type: list[str]
        """

        self._ips_sample = ips_sample

    @property
    def sources(self):
        """Gets the sources of this Domain.  # noqa: E501

        IP sources detected in the sampled CSP reports.  # noqa: E501

        :return: The sources of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Domain.

        IP sources detected in the sampled CSP reports.  # noqa: E501

        :param sources: The sources of this Domain.  # noqa: E501
        :type: int
        """

        self._sources = sources

    @property
    def frequent(self):
        """Gets the frequent of this Domain.  # noqa: E501

        If the service is frequently requested.  # noqa: E501

        :return: The frequent of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._frequent

    @frequent.setter
    def frequent(self, frequent):
        """Sets the frequent of this Domain.

        If the service is frequently requested.  # noqa: E501

        :param frequent: The frequent of this Domain.  # noqa: E501
        :type: bool
        """

        self._frequent = frequent

    @property
    def part_of_profile(self):
        """Gets the part_of_profile of this Domain.  # noqa: E501

        Domain is likely a part of the profile. The profile is the list of domains and services that are embedded in the website, directly or through 3rd-party dependency.  # noqa: E501

        :return: The part_of_profile of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._part_of_profile

    @part_of_profile.setter
    def part_of_profile(self, part_of_profile):
        """Sets the part_of_profile of this Domain.

        Domain is likely a part of the profile. The profile is the list of domains and services that are embedded in the website, directly or through 3rd-party dependency.  # noqa: E501

        :param part_of_profile: The part_of_profile of this Domain.  # noqa: E501
        :type: bool
        """

        self._part_of_profile = part_of_profile

    @property
    def discovered_at(self):
        """Gets the discovered_at of this Domain.  # noqa: E501

        Date when domain was discovered in milliseconds.  # noqa: E501

        :return: The discovered_at of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._discovered_at

    @discovered_at.setter
    def discovered_at(self, discovered_at):
        """Sets the discovered_at of this Domain.

        Date when domain was discovered in milliseconds.  # noqa: E501

        :param discovered_at: The discovered_at of this Domain.  # noqa: E501
        :type: int
        """

        self._discovered_at = discovered_at

    @property
    def last_seen_ms(self):
        """Gets the last_seen_ms of this Domain.  # noqa: E501

        Date when domain was last seen in milliseconds.  # noqa: E501

        :return: The last_seen_ms of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._last_seen_ms

    @last_seen_ms.setter
    def last_seen_ms(self, last_seen_ms):
        """Sets the last_seen_ms of this Domain.

        Date when domain was last seen in milliseconds.  # noqa: E501

        :param last_seen_ms: The last_seen_ms of this Domain.  # noqa: E501
        :type: int
        """

        self._last_seen_ms = last_seen_ms

    @property
    def domain_info(self):
        """Gets the domain_info of this Domain.  # noqa: E501


        :return: The domain_info of this Domain.  # noqa: E501
        :rtype: DomainInfo
        """
        return self._domain_info

    @domain_info.setter
    def domain_info(self, domain_info):
        """Sets the domain_info of this Domain.


        :param domain_info: The domain_info of this Domain.  # noqa: E501
        :type: DomainInfo
        """

        self._domain_info = domain_info

    @property
    def domain_reports(self):
        """Gets the domain_reports of this Domain.  # noqa: E501

        Aggregated domain report data.  # noqa: E501

        :return: The domain_reports of this Domain.  # noqa: E501
        :rtype: list[DomainReport]
        """
        return self._domain_reports

    @domain_reports.setter
    def domain_reports(self, domain_reports):
        """Sets the domain_reports of this Domain.

        Aggregated domain report data.  # noqa: E501

        :param domain_reports: The domain_reports of this Domain.  # noqa: E501
        :type: list[DomainReport]
        """

        self._domain_reports = domain_reports

    @property
    def obfuscation_report(self):
        """Gets the obfuscation_report of this Domain.  # noqa: E501


        :return: The obfuscation_report of this Domain.  # noqa: E501
        :rtype: DomainObfuscationReport
        """
        return self._obfuscation_report

    @obfuscation_report.setter
    def obfuscation_report(self, obfuscation_report):
        """Sets the obfuscation_report of this Domain.


        :param obfuscation_report: The obfuscation_report of this Domain.  # noqa: E501
        :type: DomainObfuscationReport
        """

        self._obfuscation_report = obfuscation_report

    @property
    def domain_popularity(self):
        """Gets the domain_popularity of this Domain.  # noqa: E501

        Domain popularity.  # noqa: E501

        :return: The domain_popularity of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._domain_popularity

    @domain_popularity.setter
    def domain_popularity(self, domain_popularity):
        """Sets the domain_popularity of this Domain.

        Domain popularity.  # noqa: E501

        :param domain_popularity: The domain_popularity of this Domain.  # noqa: E501
        :type: str
        """
        allowed_values = ["Rarely used", "Regularly used", "Widely used"]  # noqa: E501
        if domain_popularity not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_popularity` ({0}), must be one of {1}"  # noqa: E501
                .format(domain_popularity, allowed_values)
            )

        self._domain_popularity = domain_popularity

    @property
    def instant_block_enabled(self):
        """Gets the instant_block_enabled of this Domain.  # noqa: E501

        Indicates whether or not Instant Block is enabled for this domain.  # noqa: E501

        :return: The instant_block_enabled of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._instant_block_enabled

    @instant_block_enabled.setter
    def instant_block_enabled(self, instant_block_enabled):
        """Sets the instant_block_enabled of this Domain.

        Indicates whether or not Instant Block is enabled for this domain.  # noqa: E501

        :param instant_block_enabled: The instant_block_enabled of this Domain.  # noqa: E501
        :type: bool
        """

        self._instant_block_enabled = instant_block_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Domain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
