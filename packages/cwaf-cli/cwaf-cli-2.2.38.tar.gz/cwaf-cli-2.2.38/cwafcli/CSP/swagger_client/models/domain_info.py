# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_domain': 'str',
        'company_name': 'str',
        'domain_category': 'str',
        'countries': 'list[str]',
        'ssl_certificate_info': 'SSLCertificateInfo',
        'registration_time': 'TimeMeasurement',
        'registrar': 'str',
        'org_owner': 'str',
        'dynamic_dns_based': 'bool',
        'domain_quality': 'DomainQuality',
        'additional_insights': 'list[str]',
        'domain_category_semrush': 'str'
    }

    attribute_map = {
        'base_domain': 'baseDomain',
        'company_name': 'companyName',
        'domain_category': 'domainCategory',
        'countries': 'countries',
        'ssl_certificate_info': 'sslCertificateInfo',
        'registration_time': 'registrationTime',
        'registrar': 'registrar',
        'org_owner': 'orgOwner',
        'dynamic_dns_based': 'dynamicDnsBased',
        'domain_quality': 'domainQuality',
        'additional_insights': 'additionalInsights',
        'domain_category_semrush': 'domainCategorySemrush'
    }

    def __init__(self, base_domain=None, company_name=None, domain_category=None, countries=None, ssl_certificate_info=None, registration_time=None, registrar=None, org_owner=None, dynamic_dns_based=None, domain_quality=None, additional_insights=None, domain_category_semrush=None):  # noqa: E501
        """DomainInfo - a model defined in Swagger"""  # noqa: E501
        self._base_domain = None
        self._company_name = None
        self._domain_category = None
        self._countries = None
        self._ssl_certificate_info = None
        self._registration_time = None
        self._registrar = None
        self._org_owner = None
        self._dynamic_dns_based = None
        self._domain_quality = None
        self._additional_insights = None
        self._domain_category_semrush = None
        self.discriminator = None
        if base_domain is not None:
            self.base_domain = base_domain
        if company_name is not None:
            self.company_name = company_name
        if domain_category is not None:
            self.domain_category = domain_category
        if countries is not None:
            self.countries = countries
        if ssl_certificate_info is not None:
            self.ssl_certificate_info = ssl_certificate_info
        if registration_time is not None:
            self.registration_time = registration_time
        if registrar is not None:
            self.registrar = registrar
        if org_owner is not None:
            self.org_owner = org_owner
        if dynamic_dns_based is not None:
            self.dynamic_dns_based = dynamic_dns_based
        if domain_quality is not None:
            self.domain_quality = domain_quality
        if additional_insights is not None:
            self.additional_insights = additional_insights
        if domain_category_semrush is not None:
            self.domain_category_semrush = domain_category_semrush

    @property
    def base_domain(self):
        """Gets the base_domain of this DomainInfo.  # noqa: E501

        Base domain.  # noqa: E501

        :return: The base_domain of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._base_domain

    @base_domain.setter
    def base_domain(self, base_domain):
        """Sets the base_domain of this DomainInfo.

        Base domain.  # noqa: E501

        :param base_domain: The base_domain of this DomainInfo.  # noqa: E501
        :type: str
        """

        self._base_domain = base_domain

    @property
    def company_name(self):
        """Gets the company_name of this DomainInfo.  # noqa: E501

        Name of the company that owns the domain.  # noqa: E501

        :return: The company_name of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this DomainInfo.

        Name of the company that owns the domain.  # noqa: E501

        :param company_name: The company_name of this DomainInfo.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def domain_category(self):
        """Gets the domain_category of this DomainInfo.  # noqa: E501

        Category of domain  # noqa: E501

        :return: The domain_category of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._domain_category

    @domain_category.setter
    def domain_category(self, domain_category):
        """Sets the domain_category of this DomainInfo.

        Category of domain  # noqa: E501

        :param domain_category: The domain_category of this DomainInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Website analytics", "Social media", "Payments", "Personalization tools", "Advertisements", "CDN", "Media sharing", "Cloud storage", "Forms management", "Live support", "Hosted JS libraries", "Marketing tracker", "Unclassified"]  # noqa: E501
        if domain_category not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_category` ({0}), must be one of {1}"  # noqa: E501
                .format(domain_category, allowed_values)
            )

        self._domain_category = domain_category

    @property
    def countries(self):
        """Gets the countries of this DomainInfo.  # noqa: E501


        :return: The countries of this DomainInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this DomainInfo.


        :param countries: The countries of this DomainInfo.  # noqa: E501
        :type: list[str]
        """

        self._countries = countries

    @property
    def ssl_certificate_info(self):
        """Gets the ssl_certificate_info of this DomainInfo.  # noqa: E501


        :return: The ssl_certificate_info of this DomainInfo.  # noqa: E501
        :rtype: SSLCertificateInfo
        """
        return self._ssl_certificate_info

    @ssl_certificate_info.setter
    def ssl_certificate_info(self, ssl_certificate_info):
        """Sets the ssl_certificate_info of this DomainInfo.


        :param ssl_certificate_info: The ssl_certificate_info of this DomainInfo.  # noqa: E501
        :type: SSLCertificateInfo
        """

        self._ssl_certificate_info = ssl_certificate_info

    @property
    def registration_time(self):
        """Gets the registration_time of this DomainInfo.  # noqa: E501


        :return: The registration_time of this DomainInfo.  # noqa: E501
        :rtype: TimeMeasurement
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this DomainInfo.


        :param registration_time: The registration_time of this DomainInfo.  # noqa: E501
        :type: TimeMeasurement
        """

        self._registration_time = registration_time

    @property
    def registrar(self):
        """Gets the registrar of this DomainInfo.  # noqa: E501

        The company which provides the site registration  # noqa: E501

        :return: The registrar of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._registrar

    @registrar.setter
    def registrar(self, registrar):
        """Sets the registrar of this DomainInfo.

        The company which provides the site registration  # noqa: E501

        :param registrar: The registrar of this DomainInfo.  # noqa: E501
        :type: str
        """

        self._registrar = registrar

    @property
    def org_owner(self):
        """Gets the org_owner of this DomainInfo.  # noqa: E501

        The owner of domain  # noqa: E501

        :return: The org_owner of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._org_owner

    @org_owner.setter
    def org_owner(self, org_owner):
        """Sets the org_owner of this DomainInfo.

        The owner of domain  # noqa: E501

        :param org_owner: The org_owner of this DomainInfo.  # noqa: E501
        :type: str
        """

        self._org_owner = org_owner

    @property
    def dynamic_dns_based(self):
        """Gets the dynamic_dns_based of this DomainInfo.  # noqa: E501


        :return: The dynamic_dns_based of this DomainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_dns_based

    @dynamic_dns_based.setter
    def dynamic_dns_based(self, dynamic_dns_based):
        """Sets the dynamic_dns_based of this DomainInfo.


        :param dynamic_dns_based: The dynamic_dns_based of this DomainInfo.  # noqa: E501
        :type: bool
        """

        self._dynamic_dns_based = dynamic_dns_based

    @property
    def domain_quality(self):
        """Gets the domain_quality of this DomainInfo.  # noqa: E501


        :return: The domain_quality of this DomainInfo.  # noqa: E501
        :rtype: DomainQuality
        """
        return self._domain_quality

    @domain_quality.setter
    def domain_quality(self, domain_quality):
        """Sets the domain_quality of this DomainInfo.


        :param domain_quality: The domain_quality of this DomainInfo.  # noqa: E501
        :type: DomainQuality
        """

        self._domain_quality = domain_quality

    @property
    def additional_insights(self):
        """Gets the additional_insights of this DomainInfo.  # noqa: E501


        :return: The additional_insights of this DomainInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_insights

    @additional_insights.setter
    def additional_insights(self, additional_insights):
        """Sets the additional_insights of this DomainInfo.


        :param additional_insights: The additional_insights of this DomainInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["NONE", "EXTENSION", "LOW_FREQUENCY"]  # noqa: E501
        if not set(additional_insights).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `additional_insights` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(additional_insights) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._additional_insights = additional_insights

    @property
    def domain_category_semrush(self):
        """Gets the domain_category_semrush of this DomainInfo.  # noqa: E501


        :return: The domain_category_semrush of this DomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._domain_category_semrush

    @domain_category_semrush.setter
    def domain_category_semrush(self, domain_category_semrush):
        """Sets the domain_category_semrush of this DomainInfo.


        :param domain_category_semrush: The domain_category_semrush of this DomainInfo.  # noqa: E501
        :type: str
        """

        self._domain_category_semrush = domain_category_semrush

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
