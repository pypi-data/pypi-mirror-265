# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainQuality(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'score': 'float',
        'score_from_ml': 'float',
        'score_from_heuristics': 'float',
        'score_override': 'str'
    }

    attribute_map = {
        'score': 'score',
        'score_from_ml': 'scoreFromMl',
        'score_from_heuristics': 'scoreFromHeuristics',
        'score_override': 'scoreOverride'
    }

    def __init__(self, score=None, score_from_ml=None, score_from_heuristics=None, score_override=None):  # noqa: E501
        """DomainQuality - a model defined in Swagger"""  # noqa: E501
        self._score = None
        self._score_from_ml = None
        self._score_from_heuristics = None
        self._score_override = None
        self.discriminator = None
        if score is not None:
            self.score = score
        if score_from_ml is not None:
            self.score_from_ml = score_from_ml
        if score_from_heuristics is not None:
            self.score_from_heuristics = score_from_heuristics
        if score_override is not None:
            self.score_override = score_override

    @property
    def score(self):
        """Gets the score of this DomainQuality.  # noqa: E501


        :return: The score of this DomainQuality.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DomainQuality.


        :param score: The score of this DomainQuality.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def score_from_ml(self):
        """Gets the score_from_ml of this DomainQuality.  # noqa: E501


        :return: The score_from_ml of this DomainQuality.  # noqa: E501
        :rtype: float
        """
        return self._score_from_ml

    @score_from_ml.setter
    def score_from_ml(self, score_from_ml):
        """Sets the score_from_ml of this DomainQuality.


        :param score_from_ml: The score_from_ml of this DomainQuality.  # noqa: E501
        :type: float
        """

        self._score_from_ml = score_from_ml

    @property
    def score_from_heuristics(self):
        """Gets the score_from_heuristics of this DomainQuality.  # noqa: E501


        :return: The score_from_heuristics of this DomainQuality.  # noqa: E501
        :rtype: float
        """
        return self._score_from_heuristics

    @score_from_heuristics.setter
    def score_from_heuristics(self, score_from_heuristics):
        """Sets the score_from_heuristics of this DomainQuality.


        :param score_from_heuristics: The score_from_heuristics of this DomainQuality.  # noqa: E501
        :type: float
        """

        self._score_from_heuristics = score_from_heuristics

    @property
    def score_override(self):
        """Gets the score_override of this DomainQuality.  # noqa: E501


        :return: The score_override of this DomainQuality.  # noqa: E501
        :rtype: str
        """
        return self._score_override

    @score_override.setter
    def score_override(self, score_override):
        """Sets the score_override of this DomainQuality.


        :param score_override: The score_override of this DomainQuality.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUSPICIOUS", "MALICIOUS", "MAGECART", "MALWARE", "BENIGN"]  # noqa: E501
        if score_override not in allowed_values:
            raise ValueError(
                "Invalid value for `score_override` ({0}), must be one of {1}"  # noqa: E501
                .format(score_override, allowed_values)
            )

        self._score_override = score_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainQuality, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainQuality):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
