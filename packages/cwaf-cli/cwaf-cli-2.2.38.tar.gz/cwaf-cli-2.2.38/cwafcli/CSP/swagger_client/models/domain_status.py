# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blocked': 'bool',
        'reviewed': 'bool',
        'reviewed_at': 'int'
    }

    attribute_map = {
        'blocked': 'blocked',
        'reviewed': 'reviewed',
        'reviewed_at': 'reviewedAt'
    }

    def __init__(self, blocked=None, reviewed=None, reviewed_at=None):  # noqa: E501
        """DomainStatus - a model defined in Swagger"""  # noqa: E501
        self._blocked = None
        self._reviewed = None
        self._reviewed_at = None
        self.discriminator = None
        if blocked is not None:
            self.blocked = blocked
        if reviewed is not None:
            self.reviewed = reviewed
        if reviewed_at is not None:
            self.reviewed_at = reviewed_at

    @property
    def blocked(self):
        """Gets the blocked of this DomainStatus.  # noqa: E501

        Indicates if the domain is blocked. Default is false if the website is in \"monitor”\" mode, and true if the website is in \"enforce\" mode.  # noqa: E501

        :return: The blocked of this DomainStatus.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this DomainStatus.

        Indicates if the domain is blocked. Default is false if the website is in \"monitor”\" mode, and true if the website is in \"enforce\" mode.  # noqa: E501

        :param blocked: The blocked of this DomainStatus.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def reviewed(self):
        """Gets the reviewed of this DomainStatus.  # noqa: E501

        Indicates if the domain is reviewed. A convenient tag to mark domain reviewed to clearly see which domains are reviewed and which are still left for review.  # noqa: E501

        :return: The reviewed of this DomainStatus.  # noqa: E501
        :rtype: bool
        """
        return self._reviewed

    @reviewed.setter
    def reviewed(self, reviewed):
        """Sets the reviewed of this DomainStatus.

        Indicates if the domain is reviewed. A convenient tag to mark domain reviewed to clearly see which domains are reviewed and which are still left for review.  # noqa: E501

        :param reviewed: The reviewed of this DomainStatus.  # noqa: E501
        :type: bool
        """

        self._reviewed = reviewed

    @property
    def reviewed_at(self):
        """Gets the reviewed_at of this DomainStatus.  # noqa: E501

        The date the domain was reviewed.  # noqa: E501

        :return: The reviewed_at of this DomainStatus.  # noqa: E501
        :rtype: int
        """
        return self._reviewed_at

    @reviewed_at.setter
    def reviewed_at(self, reviewed_at):
        """Sets the reviewed_at of this DomainStatus.

        The date the domain was reviewed.  # noqa: E501

        :param reviewed_at: The reviewed_at of this DomainStatus.  # noqa: E501
        :type: int
        """

        self._reviewed_at = reviewed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
