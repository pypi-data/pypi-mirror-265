# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiscoveryStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'Discovery',
        'onboarding_time': 'int'
    }

    attribute_map = {
        'status': 'status',
        'onboarding_time': 'onboardingTime'
    }

    def __init__(self, status=None, onboarding_time=None):  # noqa: E501
        """DiscoveryStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._onboarding_time = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if onboarding_time is not None:
            self.onboarding_time = onboarding_time

    @property
    def status(self):
        """Gets the status of this DiscoveryStatus.  # noqa: E501


        :return: The status of this DiscoveryStatus.  # noqa: E501
        :rtype: Discovery
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DiscoveryStatus.


        :param status: The status of this DiscoveryStatus.  # noqa: E501
        :type: Discovery
        """

        self._status = status

    @property
    def onboarding_time(self):
        """Gets the onboarding_time of this DiscoveryStatus.  # noqa: E501


        :return: The onboarding_time of this DiscoveryStatus.  # noqa: E501
        :rtype: int
        """
        return self._onboarding_time

    @onboarding_time.setter
    def onboarding_time(self, onboarding_time):
        """Sets the onboarding_time of this DiscoveryStatus.


        :param onboarding_time: The onboarding_time of this DiscoveryStatus.  # noqa: E501
        :type: int
        """

        self._onboarding_time = onboarding_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveryStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
