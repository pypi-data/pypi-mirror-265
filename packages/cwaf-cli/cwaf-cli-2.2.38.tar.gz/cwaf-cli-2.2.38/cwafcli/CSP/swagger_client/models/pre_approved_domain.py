# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreApprovedDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'subdomains': 'bool',
        'reference_id': 'str'
    }

    attribute_map = {
        'domain': 'domain',
        'subdomains': 'subdomains',
        'reference_id': 'referenceId'
    }

    def __init__(self, domain=None, subdomains=None, reference_id=None):  # noqa: E501
        """PreApprovedDomain - a model defined in Swagger"""  # noqa: E501
        self._domain = None
        self._subdomains = None
        self._reference_id = None
        self.discriminator = None
        if domain is not None:
            self.domain = domain
        if subdomains is not None:
            self.subdomains = subdomains
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def domain(self):
        """Gets the domain of this PreApprovedDomain.  # noqa: E501

        Domain name. For example, www.domain.com.  # noqa: E501

        :return: The domain of this PreApprovedDomain.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PreApprovedDomain.

        Domain name. For example, www.domain.com.  # noqa: E501

        :param domain: The domain of this PreApprovedDomain.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def subdomains(self):
        """Gets the subdomains of this PreApprovedDomain.  # noqa: E501

        Whether or not subdomains are pre-approved as well.  # noqa: E501

        :return: The subdomains of this PreApprovedDomain.  # noqa: E501
        :rtype: bool
        """
        return self._subdomains

    @subdomains.setter
    def subdomains(self, subdomains):
        """Sets the subdomains of this PreApprovedDomain.

        Whether or not subdomains are pre-approved as well.  # noqa: E501

        :param subdomains: The subdomains of this PreApprovedDomain.  # noqa: E501
        :type: bool
        """

        self._subdomains = subdomains

    @property
    def reference_id(self):
        """Gets the reference_id of this PreApprovedDomain.  # noqa: E501

        The Imperva ID of the pre-approved domain.  # noqa: E501

        :return: The reference_id of this PreApprovedDomain.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PreApprovedDomain.

        The Imperva ID of the pre-approved domain.  # noqa: E501

        :param reference_id: The reference_id of this PreApprovedDomain.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreApprovedDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreApprovedDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
