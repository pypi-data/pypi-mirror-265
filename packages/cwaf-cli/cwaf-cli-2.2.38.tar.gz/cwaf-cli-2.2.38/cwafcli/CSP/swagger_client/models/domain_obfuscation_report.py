# coding: utf-8

"""
    Imperva Client-Side Protection API

    This is an API for Imperva Client-Side Protection. Gain visibility into the JavaScript services making requests to your application along with their risk factors. Use these APIs to pull data and configure which services should have access to your application. For full feature documentation, see <a style=\"text-decoration:none\" href=\"https://docs.imperva.com/bundle/client-side-protection\">Client-Side Protection</a>  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DomainObfuscationReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'int',
        'domain': 'str',
        'reports': 'list[UrlObfuscationReport]',
        'obfuscated': 'int',
        'total_urls': 'int',
        'analyzed': 'int',
        'failed': 'int'
    }

    attribute_map = {
        'site_id': 'siteId',
        'domain': 'domain',
        'reports': 'reports',
        'obfuscated': 'obfuscated',
        'total_urls': 'totalUrls',
        'analyzed': 'analyzed',
        'failed': 'failed'
    }

    def __init__(self, site_id=None, domain=None, reports=None, obfuscated=None, total_urls=None, analyzed=None, failed=None):  # noqa: E501
        """DomainObfuscationReport - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._domain = None
        self._reports = None
        self._obfuscated = None
        self._total_urls = None
        self._analyzed = None
        self._failed = None
        self.discriminator = None
        if site_id is not None:
            self.site_id = site_id
        if domain is not None:
            self.domain = domain
        if reports is not None:
            self.reports = reports
        if obfuscated is not None:
            self.obfuscated = obfuscated
        if total_urls is not None:
            self.total_urls = total_urls
        if analyzed is not None:
            self.analyzed = analyzed
        if failed is not None:
            self.failed = failed

    @property
    def site_id(self):
        """Gets the site_id of this DomainObfuscationReport.  # noqa: E501


        :return: The site_id of this DomainObfuscationReport.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this DomainObfuscationReport.


        :param site_id: The site_id of this DomainObfuscationReport.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def domain(self):
        """Gets the domain of this DomainObfuscationReport.  # noqa: E501


        :return: The domain of this DomainObfuscationReport.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DomainObfuscationReport.


        :param domain: The domain of this DomainObfuscationReport.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def reports(self):
        """Gets the reports of this DomainObfuscationReport.  # noqa: E501


        :return: The reports of this DomainObfuscationReport.  # noqa: E501
        :rtype: list[UrlObfuscationReport]
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this DomainObfuscationReport.


        :param reports: The reports of this DomainObfuscationReport.  # noqa: E501
        :type: list[UrlObfuscationReport]
        """

        self._reports = reports

    @property
    def obfuscated(self):
        """Gets the obfuscated of this DomainObfuscationReport.  # noqa: E501


        :return: The obfuscated of this DomainObfuscationReport.  # noqa: E501
        :rtype: int
        """
        return self._obfuscated

    @obfuscated.setter
    def obfuscated(self, obfuscated):
        """Sets the obfuscated of this DomainObfuscationReport.


        :param obfuscated: The obfuscated of this DomainObfuscationReport.  # noqa: E501
        :type: int
        """

        self._obfuscated = obfuscated

    @property
    def total_urls(self):
        """Gets the total_urls of this DomainObfuscationReport.  # noqa: E501


        :return: The total_urls of this DomainObfuscationReport.  # noqa: E501
        :rtype: int
        """
        return self._total_urls

    @total_urls.setter
    def total_urls(self, total_urls):
        """Sets the total_urls of this DomainObfuscationReport.


        :param total_urls: The total_urls of this DomainObfuscationReport.  # noqa: E501
        :type: int
        """

        self._total_urls = total_urls

    @property
    def analyzed(self):
        """Gets the analyzed of this DomainObfuscationReport.  # noqa: E501


        :return: The analyzed of this DomainObfuscationReport.  # noqa: E501
        :rtype: int
        """
        return self._analyzed

    @analyzed.setter
    def analyzed(self, analyzed):
        """Sets the analyzed of this DomainObfuscationReport.


        :param analyzed: The analyzed of this DomainObfuscationReport.  # noqa: E501
        :type: int
        """

        self._analyzed = analyzed

    @property
    def failed(self):
        """Gets the failed of this DomainObfuscationReport.  # noqa: E501


        :return: The failed of this DomainObfuscationReport.  # noqa: E501
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this DomainObfuscationReport.


        :param failed: The failed of this DomainObfuscationReport.  # noqa: E501
        :type: int
        """

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomainObfuscationReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainObfuscationReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
