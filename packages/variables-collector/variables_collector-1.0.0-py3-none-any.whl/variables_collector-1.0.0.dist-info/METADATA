Metadata-Version: 2.1
Name: variables_collector
Version: 1.0.0
Summary: Variables collector
Home-page: https://github.com/infodavide/data_collector
Author: David R
Author-email: contact@infodavid.org
License: Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
License-File: LICENSE

# Data Collector Python module
A data collection module in Python to collect variables using readers and writers.

A module to collect values of variables at fixed interval of time using a context, one or many readers and one or many writers to persist or publish the values.

The implementation of this module is based on the use of the industry. The industry sometimes uses some collects to read the data from an equipment using one or more protocols like Modbus, OPC, etc.

## The context or data collection context

The context (DataCollectionContext class) describes:
- a numeric identifier from an external repository from where it can be retrieved,
- a *minimum interval of time* in milliseconds is available in this object to prevent issues when trying to collect data too fast. Note that each reader can override this value by providing a different minimum interval,
- a *default interval of time* in milliseconds is also available. It will be automatically used if variable does not specify its interval,
- a *duration of the collect* in seconds is used to avoid infinite running. The default life duration of a context is 24 hours,
- a *start and a end date* are available and are filled on start and stop of the collect.
- the variables in its *plan*.

## The variables or data collection plan

The variables (Variable class) are associated to a context and a specific reader.

A variable describes:
- a numeric identifier from an external repository from where it can be retrieved,
- a textual representation of an address is available too for the variable,
- a textual and Python oriented representation of the type of the value associated with the variable.
- a reader is associated to the variable with a textual identifier of type,
- a read interval in milliseconds (optional).

## The readers

THe reader (DataReader abstract class) is in charge of reading a list of variables (CollectedVariables class).

The reader can set the value and the read datetime of the variable.

Reading is done in a different task (internal _DataReaderTask class) and thread per type of reader.

If you need to read values using Modbus, you have to implement your own reader class that extends the DataReader abstract class. The instanciation of your reader is specific and should be done before instanciating the collector.

__Take a look at the file 'data_reader/random_data_reader.py' which implements a reader generating random values for variables.__

## The writers

The writer (DataWriter abstract class) is in charge of writing a list of variables (CollectedVariables class).

Writing is done in a different task (internal _DataWriterTask class) and is triggered by each reader thread.

If you need to write the data to a database or NoSQL repository, you have to implement your own writer class that extends the DataWriter abstract class. The instanciation of your writer is specific and should be done before instanciating the collector.

__Take a look at the file 'data_writer/noop_data_writer.py' which implements a writer logging some data of each retrieved variable and value.__

If you need to write synchronously the data, for example in a file, you have to implement your own writer using a synchrization mechanism to avoid concurrent writes on the same output file (No map and reduce mechanism is provided to write  the data in a single thread at the end of the collect).

__Take a look at the file 'data_writer/csv_file_data_writer.py' which implements a writer using a reentrant lock to write a CSV file.__

## The data collector

The data collector object (DataCollector class) is instantiated using a logger, a list of readers and a list of writers.

To start a data collection, you just have to invoke the start method on the collector object with a data collection context. 

You can start many contexts, the variables will be retrieved only one time if the interval of the collect is the same as the one specified by the running contexts. 

When a context is started, the mechanism will compute a new retrieval interval for a set of variables. For example, if the context A uses a variable with an interval of 300ms and a context B uses the same variable with a different interval of 200ms, then the retrieval will be computed and set to 100ms (gcd).

You can then pause and resume the data collection using the identifier of the context passed on the initial start.

Finally, you can complete the data collection using the stop method on the collector object with the context identifier.

The close method of the collector can called to stop all the contexts, clean up the thread pool, the scheduler.

The events associated with the actions on the collector object can be listened using a derived class of the abstract DataCollectionListener class which defines the following methods:
- before_close: called before closing the collector object,
- after_close: called when all the internal objects of the collector have been cleaned up,
- before_start: called before starting the collect of a context,
- after_start: called when the collect of a context has been started,
- before_stop: called before stopping the collect of a context,
- after_stop: called when the collect of a context has been stopped,

__Take a look at the file 'test/data_collector_test.py' which implements unit tests and build a reader, a writer, a context and the data collector.__

## On going

The current development is *not fully tested*:
- the unit tests have to be completed too.
