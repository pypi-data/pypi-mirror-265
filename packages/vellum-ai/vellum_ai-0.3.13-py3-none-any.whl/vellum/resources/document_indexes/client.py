# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.document_index_read import DocumentIndexRead
from ...types.entity_status import EntityStatus
from ...types.environment_enum import EnvironmentEnum
from ...types.paginated_document_index_read_list import PaginatedDocumentIndexReadList
from .types.document_indexes_list_request_status import DocumentIndexesListRequestStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DocumentIndexesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        status: typing.Optional[DocumentIndexesListRequestStatus] = None,
    ) -> PaginatedDocumentIndexReadList:
        """
        Used to retrieve a list of Document Indexes.

        Parameters:
            - limit: typing.Optional[int]. Number of results to return per page.

            - offset: typing.Optional[int]. The initial index from which to return the results.

            - ordering: typing.Optional[str]. Which field to use when ordering the results.

            - status: typing.Optional[DocumentIndexesListRequestStatus]. The current status of the document index

                                                                         - `ACTIVE` - Active
                                                                         - `ARCHIVED` - Archived---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", "v1/document-indexes"),
            params=remove_none_from_dict({"limit": limit, "offset": offset, "ordering": ordering, "status": status}),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedDocumentIndexReadList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        label: str,
        name: str,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
        indexing_config: typing.Dict[str, typing.Any],
        copy_documents_from_index_id: typing.Optional[str] = OMIT,
    ) -> DocumentIndexRead:
        """
        Creates a new document index.

        Parameters:
            - label: str. A human-readable label for the document index

            - name: str. A name that uniquely identifies this index within its workspace

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production
            - indexing_config: typing.Dict[str, typing.Any]. Configuration representing how documents should be indexed

            - copy_documents_from_index_id: typing.Optional[str]. Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index
        ---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.create(
            label="My Document Index",
            name="my-document-index",
            indexing_config={
                "chunking": {
                    "unknown": {
                        "chunker_name": "sentence-chunker",
                        "chunker_config": {
                            "character_limit": 1000,
                            "min_overlap_ratio": 0.5,
                        },
                    },
                    "type": "unknown",
                },
                "vectorizer": {
                    "unknown": {
                        "model_name": "hkunlp/instructor-xl",
                        "config": {
                            "instruction_domain": "",
                            "instruction_document_text_type": "plain_text",
                            "instruction_query_text_type": "plain_text",
                        },
                    },
                    "type": "unknown",
                },
            },
        )
        """
        _request: typing.Dict[str, typing.Any] = {"label": label, "name": name, "indexing_config": indexing_config}
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        if copy_documents_from_index_id is not OMIT:
            _request["copy_documents_from_index_id"] = copy_documents_from_index_id
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", "v1/document-indexes"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve(self, id: str) -> DocumentIndexRead:
        """
        Used to retrieve a Document Index given its ID or name.

        Parameters:
            - id: str. Either the Document Index's ID or its unique name
        ---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.retrieve(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        *,
        label: str,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
    ) -> DocumentIndexRead:
        """
        Used to fully update a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.

            - label: str. A human-readable label for the document index

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.update(
            id="id",
            label="label",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"label": label}
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def destroy(self, id: str) -> None:
        """
        Used to delete a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.
        ---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.destroy(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def partial_update(
        self,
        id: str,
        *,
        label: typing.Optional[str] = OMIT,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
    ) -> DocumentIndexRead:
        """
        Used to partial update a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.

            - label: typing.Optional[str]. A human-readable label for the document index

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production---
        from vellum.client import Vellum

        client = Vellum(
            api_key="YOUR_API_KEY",
        )
        client.document_indexes.partial_update(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if label is not OMIT:
            _request["label"] = label
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDocumentIndexesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        status: typing.Optional[DocumentIndexesListRequestStatus] = None,
    ) -> PaginatedDocumentIndexReadList:
        """
        Used to retrieve a list of Document Indexes.

        Parameters:
            - limit: typing.Optional[int]. Number of results to return per page.

            - offset: typing.Optional[int]. The initial index from which to return the results.

            - ordering: typing.Optional[str]. Which field to use when ordering the results.

            - status: typing.Optional[DocumentIndexesListRequestStatus]. The current status of the document index

                                                                         - `ACTIVE` - Active
                                                                         - `ARCHIVED` - Archived---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", "v1/document-indexes"),
            params=remove_none_from_dict({"limit": limit, "offset": offset, "ordering": ordering, "status": status}),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PaginatedDocumentIndexReadList, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        label: str,
        name: str,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
        indexing_config: typing.Dict[str, typing.Any],
        copy_documents_from_index_id: typing.Optional[str] = OMIT,
    ) -> DocumentIndexRead:
        """
        Creates a new document index.

        Parameters:
            - label: str. A human-readable label for the document index

            - name: str. A name that uniquely identifies this index within its workspace

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production
            - indexing_config: typing.Dict[str, typing.Any]. Configuration representing how documents should be indexed

            - copy_documents_from_index_id: typing.Optional[str]. Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index
        ---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.create(
            label="My Document Index",
            name="my-document-index",
            indexing_config={
                "chunking": {
                    "unknown": {
                        "chunker_name": "sentence-chunker",
                        "chunker_config": {
                            "character_limit": 1000,
                            "min_overlap_ratio": 0.5,
                        },
                    },
                    "type": "unknown",
                },
                "vectorizer": {
                    "unknown": {
                        "model_name": "hkunlp/instructor-xl",
                        "config": {
                            "instruction_domain": "",
                            "instruction_document_text_type": "plain_text",
                            "instruction_query_text_type": "plain_text",
                        },
                    },
                    "type": "unknown",
                },
            },
        )
        """
        _request: typing.Dict[str, typing.Any] = {"label": label, "name": name, "indexing_config": indexing_config}
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        if copy_documents_from_index_id is not OMIT:
            _request["copy_documents_from_index_id"] = copy_documents_from_index_id
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", "v1/document-indexes"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def retrieve(self, id: str) -> DocumentIndexRead:
        """
        Used to retrieve a Document Index given its ID or name.

        Parameters:
            - id: str. Either the Document Index's ID or its unique name
        ---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.retrieve(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        *,
        label: str,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
    ) -> DocumentIndexRead:
        """
        Used to fully update a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.

            - label: str. A human-readable label for the document index

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.update(
            id="id",
            label="label",
        )
        """
        _request: typing.Dict[str, typing.Any] = {"label": label}
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def destroy(self, id: str) -> None:
        """
        Used to delete a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.
        ---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.destroy(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def partial_update(
        self,
        id: str,
        *,
        label: typing.Optional[str] = OMIT,
        status: typing.Optional[EntityStatus] = OMIT,
        environment: typing.Optional[EnvironmentEnum] = OMIT,
    ) -> DocumentIndexRead:
        """
        Used to partial update a Document Index given its ID.

        Parameters:
            - id: str. A UUID string identifying this document index.

            - label: typing.Optional[str]. A human-readable label for the document index

            - status: typing.Optional[EntityStatus]. The current status of the document index

                                                     * `ACTIVE` - Active
                                                     * `ARCHIVED` - Archived
            - environment: typing.Optional[EnvironmentEnum]. The environment this document index is used in

                                                             * `DEVELOPMENT` - Development
                                                             * `STAGING` - Staging
                                                             * `PRODUCTION` - Production---
        from vellum.client import AsyncVellum

        client = AsyncVellum(
            api_key="YOUR_API_KEY",
        )
        await client.document_indexes.partial_update(
            id="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if label is not OMIT:
            _request["label"] = label
        if status is not OMIT:
            _request["status"] = status
        if environment is not OMIT:
            _request["environment"] = environment
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_environment().default}/", f"v1/document-indexes/{id}"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DocumentIndexRead, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
