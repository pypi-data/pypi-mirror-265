# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .execution_vellum_value import ExecutionVellumValue
from .workflow_event_error import WorkflowEventError
from .workflow_node_result_event_state import WorkflowNodeResultEventState
from .workflow_output import WorkflowOutput
from .workflow_result_event_output_data import WorkflowResultEventOutputData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class WorkflowResultEvent(pydantic.BaseModel):
    id: str
    state: WorkflowNodeResultEventState
    ts: dt.datetime
    output: typing.Optional[WorkflowResultEventOutputData]
    error: typing.Optional[WorkflowEventError]
    outputs: typing.Optional[typing.List[WorkflowOutput]]
    inputs: typing.Optional[typing.List[ExecutionVellumValue]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
