# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .node_output_compiled_value import NodeOutputCompiledValue
from .workflow_node_result_data import WorkflowNodeResultData

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class StreamingWorkflowNodeResultEvent(pydantic.BaseModel):
    """
    An event that indicates that the node has execution is in progress.
    """

    id: str
    node_id: str
    node_result_id: str
    ts: typing.Optional[dt.datetime]
    data: typing.Optional[WorkflowNodeResultData]
    source_execution_id: typing.Optional[str]
    output: typing.Optional[NodeOutputCompiledValue]
    output_index: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
