# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .indexing_state_enum import IndexingStateEnum

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class DocumentDocumentToDocumentIndex(pydantic.BaseModel):
    id: str = pydantic.Field(description="Vellum-generated ID that uniquely identifies this link.")
    document_index_id: str = pydantic.Field(
        description="Vellum-generated ID that uniquely identifies the index this document is included in."
    )
    indexing_state: typing.Optional[IndexingStateEnum] = pydantic.Field(
        description=(
            "An enum value representing where this document is along its indexing lifecycle for this index.\n"
            "\n"
            "- `AWAITING_PROCESSING` - Awaiting Processing\n"
            "- `QUEUED` - Queued\n"
            "- `INDEXING` - Indexing\n"
            "- `INDEXED` - Indexed\n"
            "- `FAILED` - Failed\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
