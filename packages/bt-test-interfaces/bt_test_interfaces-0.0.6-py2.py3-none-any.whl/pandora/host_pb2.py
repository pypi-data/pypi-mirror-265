# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pandora/host.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12pandora/host.proto\x12\x07pandora\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\"2\n\nConnection\x12$\n\x06\x63ookie\x18\x01 \x01(\x0b\x32\x14.google.protobuf.Any\"\x96\x0c\n\tDataTypes\x12(\n incomplete_service_class_uuids16\x18\x01 \x03(\t\x12&\n\x1e\x63omplete_service_class_uuids16\x18\x02 \x03(\t\x12(\n incomplete_service_class_uuids32\x18\x03 \x03(\t\x12&\n\x1e\x63omplete_service_class_uuids32\x18\x04 \x03(\t\x12)\n!incomplete_service_class_uuids128\x18\x05 \x03(\t\x12\'\n\x1f\x63omplete_service_class_uuids128\x18\x06 \x03(\t\x12\x1e\n\x14shortened_local_name\x18\x07 \x01(\tH\x00\x12&\n\x1cinclude_shortened_local_name\x18\x08 \x01(\x08H\x00\x12\x1d\n\x13\x63omplete_local_name\x18\t \x01(\tH\x01\x12%\n\x1binclude_complete_local_name\x18\n \x01(\x08H\x01\x12\x18\n\x0etx_power_level\x18\x0b \x01(\rH\x02\x12 \n\x16include_tx_power_level\x18\x0c \x01(\x08H\x02\x12\x19\n\x0f\x63lass_of_device\x18\r \x01(\rH\x03\x12!\n\x17include_class_of_device\x18\x0e \x01(\x08H\x03\x12*\n\"peripheral_connection_interval_min\x18\x0f \x01(\r\x12*\n\"peripheral_connection_interval_max\x18\x10 \x01(\r\x12$\n\x1cservice_solicitation_uuids16\x18\x11 \x03(\t\x12%\n\x1dservice_solicitation_uuids128\x18\x12 \x03(\t\x12\x46\n\x13service_data_uuid16\x18\x13 \x03(\x0b\x32).pandora.DataTypes.ServiceDataUuid16Entry\x12\x1f\n\x17public_target_addresses\x18\x14 \x03(\x0c\x12\x1f\n\x17random_target_addresses\x18\x15 \x03(\x0c\x12\x12\n\nappearance\x18\x16 \x01(\r\x12\x1e\n\x14\x61\x64vertising_interval\x18\x17 \x01(\rH\x04\x12&\n\x1cinclude_advertising_interval\x18\x18 \x01(\x08H\x04\x12$\n\x1cservice_solicitation_uuids32\x18\x19 \x03(\t\x12\x46\n\x13service_data_uuid32\x18\x1a \x03(\x0b\x32).pandora.DataTypes.ServiceDataUuid32Entry\x12H\n\x14service_data_uuid128\x18\x1b \x03(\x0b\x32*.pandora.DataTypes.ServiceDataUuid128Entry\x12\x0b\n\x03uri\x18\x1c \x01(\t\x12\x1d\n\x15le_supported_features\x18\x1d \x01(\x0c\x12\"\n\x1amanufacturer_specific_data\x18\x1e \x01(\x0c\x12=\n\x17le_discoverability_mode\x18\x1f \x01(\x0e\x32\x1c.pandora.DiscoverabilityMode\x1a\x38\n\x16ServiceDataUuid16Entry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x0c:\x02\x38\x01\x1a\x38\n\x16ServiceDataUuid32Entry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x0c:\x02\x38\x01\x1a\x39\n\x17ServiceDataUuid128Entry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\x0c:\x02\x38\x01\x42\x1c\n\x1ashortened_local_name_oneofB\x1b\n\x19\x63omplete_local_name_oneofB\x16\n\x14tx_power_level_oneofB\x17\n\x15\x63lass_of_device_oneofB\x1c\n\x1a\x61\x64vertising_interval_oneof\"+\n\x18ReadLocalAddressResponse\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\x0c\"!\n\x0e\x43onnectRequest\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\x0c\"\xd8\x02\n\x0f\x43onnectResponse\x12)\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.ConnectionH\x00\x12\x30\n\x0epeer_not_found\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12;\n\x19\x63onnection_already_exists\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0fpairing_failure\x18\x04 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x38\n\x16\x61uthentication_failure\x18\x05 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x34\n\x12\x65ncryption_failure\x18\x06 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"(\n\x15WaitConnectionRequest\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\x0c\"M\n\x16WaitConnectionResponse\x12)\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.ConnectionH\x00\x42\x08\n\x06result\"\xb1\x01\n\x10\x43onnectLERequest\x12\x31\n\x10own_address_type\x18\x01 \x01(\x0e\x32\x17.pandora.OwnAddressType\x12\x10\n\x06public\x18\x02 \x01(\x0cH\x00\x12\x10\n\x06random\x18\x03 \x01(\x0cH\x00\x12\x19\n\x0fpublic_identity\x18\x04 \x01(\x0cH\x00\x12 \n\x16random_static_identity\x18\x05 \x01(\x0cH\x00\x42\t\n\x07\x61\x64\x64ress\"\xb7\x01\n\x11\x43onnectLEResponse\x12)\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.ConnectionH\x00\x12\x30\n\x0epeer_not_found\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12;\n\x19\x63onnection_already_exists\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"F\n\x1bWaitConnectionUpdateRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"\xa0\x01\n\x1cWaitConnectionUpdateResponse\x12>\n\x15\x63onnection_parameters\x18\x01 \x01(\x0b\x32\x1d.pandora.ConnectionParametersH\x00\x12\x36\n\x14\x63onnection_not_found\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"I\n\x1eGetConnectionParametersRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"\xa3\x01\n\x1fGetConnectionParametersResponse\x12>\n\x15\x63onnection_parameters\x18\x01 \x01(\x0b\x32\x1d.pandora.ConnectionParametersH\x00\x12\x36\n\x14\x63onnection_not_found\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"l\n\x14\x43onnectionParameters\x12\x1b\n\x13\x63onnection_interval\x18\x01 \x01(\r\x12\x1a\n\x12peripheral_latency\x18\x02 \x01(\r\x12\x1b\n\x13supervision_timeout\x18\x03 \x01(\r\"<\n\x11\x44isconnectRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"C\n\x18WaitDisconnectionRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"\xec\x02\n\x10\x41\x64vertiseRequest\x12\x0e\n\x06legacy\x18\x01 \x01(\x08\x12 \n\x04\x64\x61ta\x18\x02 \x01(\x0b\x32\x12.pandora.DataTypes\x12.\n\x12scan_response_data\x18\x03 \x01(\x0b\x32\x12.pandora.DataTypes\x12\x10\n\x06public\x18\x04 \x01(\x0cH\x00\x12\x10\n\x06random\x18\x05 \x01(\x0cH\x00\x12\x31\n\x10own_address_type\x18\x06 \x01(\x0e\x32\x17.pandora.OwnAddressType\x12\x13\n\x0b\x63onnectable\x18\x07 \x01(\x08\x12\x10\n\x08interval\x18\x08 \x01(\x02\x12\x16\n\x0einterval_range\x18\t \x01(\x02\x12(\n\x0bprimary_phy\x18\n \x01(\x0e\x32\x13.pandora.PrimaryPhy\x12,\n\rsecondary_phy\x18\x0b \x01(\x0e\x32\x15.pandora.SecondaryPhyB\x08\n\x06target\"<\n\x11\x41\x64vertiseResponse\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"\xa6\x01\n\x0bScanRequest\x12\x0e\n\x06legacy\x18\x01 \x01(\x08\x12\x0f\n\x07passive\x18\x02 \x01(\x08\x12\x31\n\x10own_address_type\x18\x03 \x01(\x0e\x32\x17.pandora.OwnAddressType\x12\x10\n\x08interval\x18\x04 \x01(\x02\x12\x0e\n\x06window\x18\x05 \x01(\x02\x12!\n\x04phys\x18\x06 \x03(\x0e\x32\x13.pandora.PrimaryPhy\"\xd2\x04\n\x10ScanningResponse\x12\x0e\n\x06legacy\x18\x01 \x01(\x08\x12\x10\n\x06public\x18\x02 \x01(\x0cH\x00\x12\x10\n\x06random\x18\x03 \x01(\x0cH\x00\x12\x19\n\x0fpublic_identity\x18\x04 \x01(\x0cH\x00\x12 \n\x16random_static_identity\x18\x05 \x01(\x0cH\x00\x12\x17\n\rdirect_public\x18\x06 \x01(\x0cH\x01\x12&\n\x1c\x64irect_non_resolvable_random\x18\x07 \x01(\x0cH\x01\x12 \n\x16\x64irect_resolved_public\x18\x08 \x01(\x0cH\x01\x12 \n\x16\x64irect_resolved_random\x18\t \x01(\x0cH\x01\x12\"\n\x18\x64irect_unresolved_random\x18\n \x01(\x0cH\x01\x12\x13\n\x0b\x63onnectable\x18\x0b \x01(\x08\x12\x11\n\tscannable\x18\x0c \x01(\x08\x12\x11\n\ttruncated\x18\r \x01(\x08\x12\x0b\n\x03sid\x18\x0e \x01(\r\x12(\n\x0bprimary_phy\x18\x0f \x01(\x0e\x32\x13.pandora.PrimaryPhy\x12,\n\rsecondary_phy\x18\x10 \x01(\x0e\x32\x15.pandora.SecondaryPhy\x12\x10\n\x08tx_power\x18\x11 \x01(\x05\x12\x0c\n\x04rssi\x18\x12 \x01(\x05\x12%\n\x1dperiodic_advertising_interval\x18\x13 \x01(\x02\x12 \n\x04\x64\x61ta\x18\x14 \x01(\x0b\x32\x12.pandora.DataTypesB\t\n\x07\x61\x64\x64ressB\x10\n\x0e\x64irect_address\"\xa4\x01\n\x0fInquiryResponse\x12\x0f\n\x07\x61\x64\x64ress\x18\x01 \x01(\x0c\x12!\n\x19page_scan_repetition_mode\x18\x02 \x01(\r\x12\x17\n\x0f\x63lass_of_device\x18\x03 \x01(\r\x12\x14\n\x0c\x63lock_offset\x18\x04 \x01(\r\x12\x0c\n\x04rssi\x18\x05 \x01(\x05\x12 \n\x04\x64\x61ta\x18\x06 \x01(\x0b\x32\x12.pandora.DataTypes\"K\n\x1dSetDiscoverabilityModeRequest\x12*\n\x04mode\x18\x01 \x01(\x0e\x32\x1c.pandora.DiscoverabilityMode\"I\n\x1cSetConnectabilityModeRequest\x12)\n\x04mode\x18\x01 \x01(\x0e\x32\x1b.pandora.ConnectabilityMode*\\\n\x0eOwnAddressType\x12\n\n\x06PUBLIC\x10\x00\x12\n\n\x06RANDOM\x10\x01\x12\x18\n\x14RESOLVABLE_OR_PUBLIC\x10\x02\x12\x18\n\x14RESOLVABLE_OR_RANDOM\x10\x03*/\n\nPrimaryPhy\x12\x0e\n\nPRIMARY_1M\x10\x00\x12\x11\n\rPRIMARY_CODED\x10\x02*[\n\x0cSecondaryPhy\x12\x12\n\x0eSECONDARY_NONE\x10\x00\x12\x10\n\x0cSECONDARY_1M\x10\x01\x12\x10\n\x0cSECONDARY_2M\x10\x02\x12\x13\n\x0fSECONDARY_CODED\x10\x03*_\n\x13\x44iscoverabilityMode\x12\x14\n\x10NOT_DISCOVERABLE\x10\x00\x12\x18\n\x14\x44ISCOVERABLE_LIMITED\x10\x01\x12\x18\n\x14\x44ISCOVERABLE_GENERAL\x10\x02*:\n\x12\x43onnectabilityMode\x12\x13\n\x0fNOT_CONNECTABLE\x10\x00\x12\x0f\n\x0b\x43ONNECTABLE\x10\x01\x32\xfa\x08\n\x04Host\x12>\n\x0c\x46\x61\x63toryReset\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x12\x37\n\x05Reset\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\x12M\n\x10ReadLocalAddress\x12\x16.google.protobuf.Empty\x1a!.pandora.ReadLocalAddressResponse\x12<\n\x07\x43onnect\x12\x17.pandora.ConnectRequest\x1a\x18.pandora.ConnectResponse\x12Q\n\x0eWaitConnection\x12\x1e.pandora.WaitConnectionRequest\x1a\x1f.pandora.WaitConnectionResponse\x12\x42\n\tConnectLE\x12\x19.pandora.ConnectLERequest\x1a\x1a.pandora.ConnectLEResponse\x12\x63\n\x14WaitConnectionUpdate\x12$.pandora.WaitConnectionUpdateRequest\x1a%.pandora.WaitConnectionUpdateResponse\x12l\n\x17GetConnectionParameters\x12\'.pandora.GetConnectionParametersRequest\x1a(.pandora.GetConnectionParametersResponse\x12@\n\nDisconnect\x12\x1a.pandora.DisconnectRequest\x1a\x16.google.protobuf.Empty\x12N\n\x11WaitDisconnection\x12!.pandora.WaitDisconnectionRequest\x1a\x16.google.protobuf.Empty\x12\x44\n\tAdvertise\x12\x19.pandora.AdvertiseRequest\x1a\x1a.pandora.AdvertiseResponse0\x01\x12\x39\n\x04Scan\x12\x14.pandora.ScanRequest\x1a\x19.pandora.ScanningResponse0\x01\x12=\n\x07Inquiry\x12\x16.google.protobuf.Empty\x1a\x18.pandora.InquiryResponse0\x01\x12X\n\x16SetDiscoverabilityMode\x12&.pandora.SetDiscoverabilityModeRequest\x1a\x16.google.protobuf.Empty\x12V\n\x15SetConnectabilityMode\x12%.pandora.SetConnectabilityModeRequest\x1a\x16.google.protobuf.EmptyB\x0b\x42\tHostProtob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'pandora.host_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'B\tHostProto'
  _globals['_DATATYPES_SERVICEDATAUUID16ENTRY']._options = None
  _globals['_DATATYPES_SERVICEDATAUUID16ENTRY']._serialized_options = b'8\001'
  _globals['_DATATYPES_SERVICEDATAUUID32ENTRY']._options = None
  _globals['_DATATYPES_SERVICEDATAUUID32ENTRY']._serialized_options = b'8\001'
  _globals['_DATATYPES_SERVICEDATAUUID128ENTRY']._options = None
  _globals['_DATATYPES_SERVICEDATAUUID128ENTRY']._serialized_options = b'8\001'
  _globals['_OWNADDRESSTYPE']._serialized_start=4845
  _globals['_OWNADDRESSTYPE']._serialized_end=4937
  _globals['_PRIMARYPHY']._serialized_start=4939
  _globals['_PRIMARYPHY']._serialized_end=4986
  _globals['_SECONDARYPHY']._serialized_start=4988
  _globals['_SECONDARYPHY']._serialized_end=5079
  _globals['_DISCOVERABILITYMODE']._serialized_start=5081
  _globals['_DISCOVERABILITYMODE']._serialized_end=5176
  _globals['_CONNECTABILITYMODE']._serialized_start=5178
  _globals['_CONNECTABILITYMODE']._serialized_end=5236
  _globals['_CONNECTION']._serialized_start=87
  _globals['_CONNECTION']._serialized_end=137
  _globals['_DATATYPES']._serialized_start=140
  _globals['_DATATYPES']._serialized_end=1698
  _globals['_DATATYPES_SERVICEDATAUUID16ENTRY']._serialized_start=1387
  _globals['_DATATYPES_SERVICEDATAUUID16ENTRY']._serialized_end=1443
  _globals['_DATATYPES_SERVICEDATAUUID32ENTRY']._serialized_start=1445
  _globals['_DATATYPES_SERVICEDATAUUID32ENTRY']._serialized_end=1501
  _globals['_DATATYPES_SERVICEDATAUUID128ENTRY']._serialized_start=1503
  _globals['_DATATYPES_SERVICEDATAUUID128ENTRY']._serialized_end=1560
  _globals['_READLOCALADDRESSRESPONSE']._serialized_start=1700
  _globals['_READLOCALADDRESSRESPONSE']._serialized_end=1743
  _globals['_CONNECTREQUEST']._serialized_start=1745
  _globals['_CONNECTREQUEST']._serialized_end=1778
  _globals['_CONNECTRESPONSE']._serialized_start=1781
  _globals['_CONNECTRESPONSE']._serialized_end=2125
  _globals['_WAITCONNECTIONREQUEST']._serialized_start=2127
  _globals['_WAITCONNECTIONREQUEST']._serialized_end=2167
  _globals['_WAITCONNECTIONRESPONSE']._serialized_start=2169
  _globals['_WAITCONNECTIONRESPONSE']._serialized_end=2246
  _globals['_CONNECTLEREQUEST']._serialized_start=2249
  _globals['_CONNECTLEREQUEST']._serialized_end=2426
  _globals['_CONNECTLERESPONSE']._serialized_start=2429
  _globals['_CONNECTLERESPONSE']._serialized_end=2612
  _globals['_WAITCONNECTIONUPDATEREQUEST']._serialized_start=2614
  _globals['_WAITCONNECTIONUPDATEREQUEST']._serialized_end=2684
  _globals['_WAITCONNECTIONUPDATERESPONSE']._serialized_start=2687
  _globals['_WAITCONNECTIONUPDATERESPONSE']._serialized_end=2847
  _globals['_GETCONNECTIONPARAMETERSREQUEST']._serialized_start=2849
  _globals['_GETCONNECTIONPARAMETERSREQUEST']._serialized_end=2922
  _globals['_GETCONNECTIONPARAMETERSRESPONSE']._serialized_start=2925
  _globals['_GETCONNECTIONPARAMETERSRESPONSE']._serialized_end=3088
  _globals['_CONNECTIONPARAMETERS']._serialized_start=3090
  _globals['_CONNECTIONPARAMETERS']._serialized_end=3198
  _globals['_DISCONNECTREQUEST']._serialized_start=3200
  _globals['_DISCONNECTREQUEST']._serialized_end=3260
  _globals['_WAITDISCONNECTIONREQUEST']._serialized_start=3262
  _globals['_WAITDISCONNECTIONREQUEST']._serialized_end=3329
  _globals['_ADVERTISEREQUEST']._serialized_start=3332
  _globals['_ADVERTISEREQUEST']._serialized_end=3696
  _globals['_ADVERTISERESPONSE']._serialized_start=3698
  _globals['_ADVERTISERESPONSE']._serialized_end=3758
  _globals['_SCANREQUEST']._serialized_start=3761
  _globals['_SCANREQUEST']._serialized_end=3927
  _globals['_SCANNINGRESPONSE']._serialized_start=3930
  _globals['_SCANNINGRESPONSE']._serialized_end=4524
  _globals['_INQUIRYRESPONSE']._serialized_start=4527
  _globals['_INQUIRYRESPONSE']._serialized_end=4691
  _globals['_SETDISCOVERABILITYMODEREQUEST']._serialized_start=4693
  _globals['_SETDISCOVERABILITYMODEREQUEST']._serialized_end=4768
  _globals['_SETCONNECTABILITYMODEREQUEST']._serialized_start=4770
  _globals['_SETCONNECTABILITYMODEREQUEST']._serialized_end=4843
  _globals['_HOST']._serialized_start=5239
  _globals['_HOST']._serialized_end=6385
def unwrap(x):
  assert x
  return x
class OwnAddressType: ...

class PrimaryPhy: ...

class SecondaryPhy: ...

class DiscoverabilityMode: ...

class ConnectabilityMode: ...


def _DataTypes_shortened_local_name_oneof(self: DataTypes):
  variant = self.shortened_local_name_oneof_variant()
  if variant is None: return None
  if variant == 'shortened_local_name': return unwrap(self.shortened_local_name)
  if variant == 'include_shortened_local_name': return unwrap(self.include_shortened_local_name)
  raise Exception('Field `shortened_local_name_oneof` not found.')

def _DataTypes_shortened_local_name_oneof_variant(self: DataTypes):
  return self.WhichOneof('shortened_local_name_oneof')  # type: ignore

def _DataTypes_shortened_local_name_oneof_asdict(self: DataTypes):
  variant = self.shortened_local_name_oneof_variant()
  if variant is None: return {}
  if variant == 'shortened_local_name': return {'shortened_local_name': unwrap(self.shortened_local_name)}  # type: ignore
  if variant == 'include_shortened_local_name': return {'include_shortened_local_name': unwrap(self.include_shortened_local_name)}  # type: ignore
  raise Exception('Field `shortened_local_name_oneof` not found.')

setattr(DataTypes, 'shortened_local_name_oneof', property(_DataTypes_shortened_local_name_oneof))
setattr(DataTypes, 'shortened_local_name_oneof_variant', _DataTypes_shortened_local_name_oneof_variant)
setattr(DataTypes, 'shortened_local_name_oneof_asdict', _DataTypes_shortened_local_name_oneof_asdict)

def _DataTypes_complete_local_name_oneof(self: DataTypes):
  variant = self.complete_local_name_oneof_variant()
  if variant is None: return None
  if variant == 'complete_local_name': return unwrap(self.complete_local_name)
  if variant == 'include_complete_local_name': return unwrap(self.include_complete_local_name)
  raise Exception('Field `complete_local_name_oneof` not found.')

def _DataTypes_complete_local_name_oneof_variant(self: DataTypes):
  return self.WhichOneof('complete_local_name_oneof')  # type: ignore

def _DataTypes_complete_local_name_oneof_asdict(self: DataTypes):
  variant = self.complete_local_name_oneof_variant()
  if variant is None: return {}
  if variant == 'complete_local_name': return {'complete_local_name': unwrap(self.complete_local_name)}  # type: ignore
  if variant == 'include_complete_local_name': return {'include_complete_local_name': unwrap(self.include_complete_local_name)}  # type: ignore
  raise Exception('Field `complete_local_name_oneof` not found.')

setattr(DataTypes, 'complete_local_name_oneof', property(_DataTypes_complete_local_name_oneof))
setattr(DataTypes, 'complete_local_name_oneof_variant', _DataTypes_complete_local_name_oneof_variant)
setattr(DataTypes, 'complete_local_name_oneof_asdict', _DataTypes_complete_local_name_oneof_asdict)

def _DataTypes_tx_power_level_oneof(self: DataTypes):
  variant = self.tx_power_level_oneof_variant()
  if variant is None: return None
  if variant == 'tx_power_level': return unwrap(self.tx_power_level)
  if variant == 'include_tx_power_level': return unwrap(self.include_tx_power_level)
  raise Exception('Field `tx_power_level_oneof` not found.')

def _DataTypes_tx_power_level_oneof_variant(self: DataTypes):
  return self.WhichOneof('tx_power_level_oneof')  # type: ignore

def _DataTypes_tx_power_level_oneof_asdict(self: DataTypes):
  variant = self.tx_power_level_oneof_variant()
  if variant is None: return {}
  if variant == 'tx_power_level': return {'tx_power_level': unwrap(self.tx_power_level)}  # type: ignore
  if variant == 'include_tx_power_level': return {'include_tx_power_level': unwrap(self.include_tx_power_level)}  # type: ignore
  raise Exception('Field `tx_power_level_oneof` not found.')

setattr(DataTypes, 'tx_power_level_oneof', property(_DataTypes_tx_power_level_oneof))
setattr(DataTypes, 'tx_power_level_oneof_variant', _DataTypes_tx_power_level_oneof_variant)
setattr(DataTypes, 'tx_power_level_oneof_asdict', _DataTypes_tx_power_level_oneof_asdict)

def _DataTypes_class_of_device_oneof(self: DataTypes):
  variant = self.class_of_device_oneof_variant()
  if variant is None: return None
  if variant == 'class_of_device': return unwrap(self.class_of_device)
  if variant == 'include_class_of_device': return unwrap(self.include_class_of_device)
  raise Exception('Field `class_of_device_oneof` not found.')

def _DataTypes_class_of_device_oneof_variant(self: DataTypes):
  return self.WhichOneof('class_of_device_oneof')  # type: ignore

def _DataTypes_class_of_device_oneof_asdict(self: DataTypes):
  variant = self.class_of_device_oneof_variant()
  if variant is None: return {}
  if variant == 'class_of_device': return {'class_of_device': unwrap(self.class_of_device)}  # type: ignore
  if variant == 'include_class_of_device': return {'include_class_of_device': unwrap(self.include_class_of_device)}  # type: ignore
  raise Exception('Field `class_of_device_oneof` not found.')

setattr(DataTypes, 'class_of_device_oneof', property(_DataTypes_class_of_device_oneof))
setattr(DataTypes, 'class_of_device_oneof_variant', _DataTypes_class_of_device_oneof_variant)
setattr(DataTypes, 'class_of_device_oneof_asdict', _DataTypes_class_of_device_oneof_asdict)

def _DataTypes_advertising_interval_oneof(self: DataTypes):
  variant = self.advertising_interval_oneof_variant()
  if variant is None: return None
  if variant == 'advertising_interval': return unwrap(self.advertising_interval)
  if variant == 'include_advertising_interval': return unwrap(self.include_advertising_interval)
  raise Exception('Field `advertising_interval_oneof` not found.')

def _DataTypes_advertising_interval_oneof_variant(self: DataTypes):
  return self.WhichOneof('advertising_interval_oneof')  # type: ignore

def _DataTypes_advertising_interval_oneof_asdict(self: DataTypes):
  variant = self.advertising_interval_oneof_variant()
  if variant is None: return {}
  if variant == 'advertising_interval': return {'advertising_interval': unwrap(self.advertising_interval)}  # type: ignore
  if variant == 'include_advertising_interval': return {'include_advertising_interval': unwrap(self.include_advertising_interval)}  # type: ignore
  raise Exception('Field `advertising_interval_oneof` not found.')

setattr(DataTypes, 'advertising_interval_oneof', property(_DataTypes_advertising_interval_oneof))
setattr(DataTypes, 'advertising_interval_oneof_variant', _DataTypes_advertising_interval_oneof_variant)
setattr(DataTypes, 'advertising_interval_oneof_asdict', _DataTypes_advertising_interval_oneof_asdict)

def _ConnectResponse_result(self: ConnectResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'connection': return unwrap(self.connection)
  if variant == 'peer_not_found': return unwrap(self.peer_not_found)
  if variant == 'connection_already_exists': return unwrap(self.connection_already_exists)
  if variant == 'pairing_failure': return unwrap(self.pairing_failure)
  if variant == 'authentication_failure': return unwrap(self.authentication_failure)
  if variant == 'encryption_failure': return unwrap(self.encryption_failure)
  raise Exception('Field `result` not found.')

def _ConnectResponse_result_variant(self: ConnectResponse):
  return self.WhichOneof('result')  # type: ignore

def _ConnectResponse_result_asdict(self: ConnectResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'connection': return {'connection': unwrap(self.connection)}  # type: ignore
  if variant == 'peer_not_found': return {'peer_not_found': unwrap(self.peer_not_found)}  # type: ignore
  if variant == 'connection_already_exists': return {'connection_already_exists': unwrap(self.connection_already_exists)}  # type: ignore
  if variant == 'pairing_failure': return {'pairing_failure': unwrap(self.pairing_failure)}  # type: ignore
  if variant == 'authentication_failure': return {'authentication_failure': unwrap(self.authentication_failure)}  # type: ignore
  if variant == 'encryption_failure': return {'encryption_failure': unwrap(self.encryption_failure)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(ConnectResponse, 'result', property(_ConnectResponse_result))
setattr(ConnectResponse, 'result_variant', _ConnectResponse_result_variant)
setattr(ConnectResponse, 'result_asdict', _ConnectResponse_result_asdict)

def _WaitConnectionResponse_result(self: WaitConnectionResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'connection': return unwrap(self.connection)
  raise Exception('Field `result` not found.')

def _WaitConnectionResponse_result_variant(self: WaitConnectionResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitConnectionResponse_result_asdict(self: WaitConnectionResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'connection': return {'connection': unwrap(self.connection)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitConnectionResponse, 'result', property(_WaitConnectionResponse_result))
setattr(WaitConnectionResponse, 'result_variant', _WaitConnectionResponse_result_variant)
setattr(WaitConnectionResponse, 'result_asdict', _WaitConnectionResponse_result_asdict)

def _ConnectLERequest_address(self: ConnectLERequest):
  variant = self.address_variant()
  if variant is None: return None
  if variant == 'public': return unwrap(self.public)
  if variant == 'random': return unwrap(self.random)
  if variant == 'public_identity': return unwrap(self.public_identity)
  if variant == 'random_static_identity': return unwrap(self.random_static_identity)
  raise Exception('Field `address` not found.')

def _ConnectLERequest_address_variant(self: ConnectLERequest):
  return self.WhichOneof('address')  # type: ignore

def _ConnectLERequest_address_asdict(self: ConnectLERequest):
  variant = self.address_variant()
  if variant is None: return {}
  if variant == 'public': return {'public': unwrap(self.public)}  # type: ignore
  if variant == 'random': return {'random': unwrap(self.random)}  # type: ignore
  if variant == 'public_identity': return {'public_identity': unwrap(self.public_identity)}  # type: ignore
  if variant == 'random_static_identity': return {'random_static_identity': unwrap(self.random_static_identity)}  # type: ignore
  raise Exception('Field `address` not found.')

setattr(ConnectLERequest, 'address', property(_ConnectLERequest_address))
setattr(ConnectLERequest, 'address_variant', _ConnectLERequest_address_variant)
setattr(ConnectLERequest, 'address_asdict', _ConnectLERequest_address_asdict)

def _ConnectLEResponse_result(self: ConnectLEResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'connection': return unwrap(self.connection)
  if variant == 'peer_not_found': return unwrap(self.peer_not_found)
  if variant == 'connection_already_exists': return unwrap(self.connection_already_exists)
  raise Exception('Field `result` not found.')

def _ConnectLEResponse_result_variant(self: ConnectLEResponse):
  return self.WhichOneof('result')  # type: ignore

def _ConnectLEResponse_result_asdict(self: ConnectLEResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'connection': return {'connection': unwrap(self.connection)}  # type: ignore
  if variant == 'peer_not_found': return {'peer_not_found': unwrap(self.peer_not_found)}  # type: ignore
  if variant == 'connection_already_exists': return {'connection_already_exists': unwrap(self.connection_already_exists)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(ConnectLEResponse, 'result', property(_ConnectLEResponse_result))
setattr(ConnectLEResponse, 'result_variant', _ConnectLEResponse_result_variant)
setattr(ConnectLEResponse, 'result_asdict', _ConnectLEResponse_result_asdict)

def _WaitConnectionUpdateResponse_result(self: WaitConnectionUpdateResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'connection_parameters': return unwrap(self.connection_parameters)
  if variant == 'connection_not_found': return unwrap(self.connection_not_found)
  raise Exception('Field `result` not found.')

def _WaitConnectionUpdateResponse_result_variant(self: WaitConnectionUpdateResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitConnectionUpdateResponse_result_asdict(self: WaitConnectionUpdateResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'connection_parameters': return {'connection_parameters': unwrap(self.connection_parameters)}  # type: ignore
  if variant == 'connection_not_found': return {'connection_not_found': unwrap(self.connection_not_found)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitConnectionUpdateResponse, 'result', property(_WaitConnectionUpdateResponse_result))
setattr(WaitConnectionUpdateResponse, 'result_variant', _WaitConnectionUpdateResponse_result_variant)
setattr(WaitConnectionUpdateResponse, 'result_asdict', _WaitConnectionUpdateResponse_result_asdict)

def _GetConnectionParametersResponse_result(self: GetConnectionParametersResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'connection_parameters': return unwrap(self.connection_parameters)
  if variant == 'connection_not_found': return unwrap(self.connection_not_found)
  raise Exception('Field `result` not found.')

def _GetConnectionParametersResponse_result_variant(self: GetConnectionParametersResponse):
  return self.WhichOneof('result')  # type: ignore

def _GetConnectionParametersResponse_result_asdict(self: GetConnectionParametersResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'connection_parameters': return {'connection_parameters': unwrap(self.connection_parameters)}  # type: ignore
  if variant == 'connection_not_found': return {'connection_not_found': unwrap(self.connection_not_found)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(GetConnectionParametersResponse, 'result', property(_GetConnectionParametersResponse_result))
setattr(GetConnectionParametersResponse, 'result_variant', _GetConnectionParametersResponse_result_variant)
setattr(GetConnectionParametersResponse, 'result_asdict', _GetConnectionParametersResponse_result_asdict)

def _AdvertiseRequest_target(self: AdvertiseRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'public': return unwrap(self.public)
  if variant == 'random': return unwrap(self.random)
  raise Exception('Field `target` not found.')

def _AdvertiseRequest_target_variant(self: AdvertiseRequest):
  return self.WhichOneof('target')  # type: ignore

def _AdvertiseRequest_target_asdict(self: AdvertiseRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'public': return {'public': unwrap(self.public)}  # type: ignore
  if variant == 'random': return {'random': unwrap(self.random)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(AdvertiseRequest, 'target', property(_AdvertiseRequest_target))
setattr(AdvertiseRequest, 'target_variant', _AdvertiseRequest_target_variant)
setattr(AdvertiseRequest, 'target_asdict', _AdvertiseRequest_target_asdict)

def _ScanningResponse_address(self: ScanningResponse):
  variant = self.address_variant()
  if variant is None: return None
  if variant == 'public': return unwrap(self.public)
  if variant == 'random': return unwrap(self.random)
  if variant == 'public_identity': return unwrap(self.public_identity)
  if variant == 'random_static_identity': return unwrap(self.random_static_identity)
  raise Exception('Field `address` not found.')

def _ScanningResponse_address_variant(self: ScanningResponse):
  return self.WhichOneof('address')  # type: ignore

def _ScanningResponse_address_asdict(self: ScanningResponse):
  variant = self.address_variant()
  if variant is None: return {}
  if variant == 'public': return {'public': unwrap(self.public)}  # type: ignore
  if variant == 'random': return {'random': unwrap(self.random)}  # type: ignore
  if variant == 'public_identity': return {'public_identity': unwrap(self.public_identity)}  # type: ignore
  if variant == 'random_static_identity': return {'random_static_identity': unwrap(self.random_static_identity)}  # type: ignore
  raise Exception('Field `address` not found.')

setattr(ScanningResponse, 'address', property(_ScanningResponse_address))
setattr(ScanningResponse, 'address_variant', _ScanningResponse_address_variant)
setattr(ScanningResponse, 'address_asdict', _ScanningResponse_address_asdict)

def _ScanningResponse_direct_address(self: ScanningResponse):
  variant = self.direct_address_variant()
  if variant is None: return None
  if variant == 'direct_public': return unwrap(self.direct_public)
  if variant == 'direct_non_resolvable_random': return unwrap(self.direct_non_resolvable_random)
  if variant == 'direct_resolved_public': return unwrap(self.direct_resolved_public)
  if variant == 'direct_resolved_random': return unwrap(self.direct_resolved_random)
  if variant == 'direct_unresolved_random': return unwrap(self.direct_unresolved_random)
  raise Exception('Field `direct_address` not found.')

def _ScanningResponse_direct_address_variant(self: ScanningResponse):
  return self.WhichOneof('direct_address')  # type: ignore

def _ScanningResponse_direct_address_asdict(self: ScanningResponse):
  variant = self.direct_address_variant()
  if variant is None: return {}
  if variant == 'direct_public': return {'direct_public': unwrap(self.direct_public)}  # type: ignore
  if variant == 'direct_non_resolvable_random': return {'direct_non_resolvable_random': unwrap(self.direct_non_resolvable_random)}  # type: ignore
  if variant == 'direct_resolved_public': return {'direct_resolved_public': unwrap(self.direct_resolved_public)}  # type: ignore
  if variant == 'direct_resolved_random': return {'direct_resolved_random': unwrap(self.direct_resolved_random)}  # type: ignore
  if variant == 'direct_unresolved_random': return {'direct_unresolved_random': unwrap(self.direct_unresolved_random)}  # type: ignore
  raise Exception('Field `direct_address` not found.')

setattr(ScanningResponse, 'direct_address', property(_ScanningResponse_direct_address))
setattr(ScanningResponse, 'direct_address_variant', _ScanningResponse_direct_address_variant)
setattr(ScanningResponse, 'direct_address_asdict', _ScanningResponse_direct_address_asdict)
# @@protoc_insertion_point(module_scope)
