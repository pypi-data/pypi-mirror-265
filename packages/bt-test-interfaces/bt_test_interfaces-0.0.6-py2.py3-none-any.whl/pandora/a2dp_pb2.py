# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pandora/a2dp.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from pandora import host_pb2 as pandora_dot_host__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x12pandora/a2dp.proto\x12\x07pandora\x1a\x12pandora/host.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x18\n\x06Source\x12\x0e\n\x06\x63ookie\x18\x01 \x01(\x0c\"\x16\n\x04Sink\x12\x0e\n\x06\x63ookie\x18\x01 \x01(\x0c\"<\n\x11OpenSourceRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"q\n\x12OpenSourceResponse\x12!\n\x06source\x18\x01 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x12.\n\x0c\x64isconnected\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\":\n\x0fOpenSinkRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"k\n\x10OpenSinkResponse\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12.\n\x0c\x64isconnected\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"<\n\x11WaitSourceRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"q\n\x12WaitSourceResponse\x12!\n\x06source\x18\x01 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x12.\n\x0c\x64isconnected\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\":\n\x0fWaitSinkRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\"k\n\x10WaitSinkResponse\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12.\n\x0c\x64isconnected\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"`\n\x12IsSuspendedRequest\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12!\n\x06source\x18\x02 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x42\x08\n\x06target\"Z\n\x0cStartRequest\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12!\n\x06source\x18\x02 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x42\x08\n\x06target\"\xa7\x01\n\rStartResponse\x12)\n\x07started\x18\x01 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0f\x61lready_started\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12.\n\x0c\x64isconnected\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"\\\n\x0eSuspendRequest\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12!\n\x06source\x18\x02 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x42\x08\n\x06target\"\xad\x01\n\x0fSuspendResponse\x12+\n\tsuspended\x18\x01 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x33\n\x11\x61lready_suspended\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12.\n\x0c\x64isconnected\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"Z\n\x0c\x43loseRequest\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12!\n\x06source\x18\x02 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x42\x08\n\x06target\"\x0f\n\rCloseResponse\"e\n\x17GetAudioEncodingRequest\x12\x1d\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.SinkH\x00\x12!\n\x06source\x18\x02 \x01(\x0b\x32\x0f.pandora.SourceH\x00\x42\x08\n\x06target\"D\n\x18GetAudioEncodingResponse\x12(\n\x08\x65ncoding\x18\x01 \x01(\x0e\x32\x16.pandora.AudioEncoding\"E\n\x14PlaybackAudioRequest\x12\x1f\n\x06source\x18\x01 \x01(\x0b\x32\x0f.pandora.Source\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\"\x17\n\x15PlaybackAudioResponse\"2\n\x13\x43\x61ptureAudioRequest\x12\x1b\n\x04sink\x18\x01 \x01(\x0b\x32\r.pandora.Sink\"$\n\x14\x43\x61ptureAudioResponse\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c*F\n\rAudioEncoding\x12\x1a\n\x16PCM_S16_LE_44K1_STEREO\x10\x00\x12\x19\n\x15PCM_S16_LE_48K_STEREO\x10\x01\x32\x86\x06\n\x04\x41\x32\x44P\x12\x45\n\nOpenSource\x12\x1a.pandora.OpenSourceRequest\x1a\x1b.pandora.OpenSourceResponse\x12?\n\x08OpenSink\x12\x18.pandora.OpenSinkRequest\x1a\x19.pandora.OpenSinkResponse\x12\x45\n\nWaitSource\x12\x1a.pandora.WaitSourceRequest\x1a\x1b.pandora.WaitSourceResponse\x12?\n\x08WaitSink\x12\x18.pandora.WaitSinkRequest\x1a\x19.pandora.WaitSinkResponse\x12\x46\n\x0bIsSuspended\x12\x1b.pandora.IsSuspendedRequest\x1a\x1a.google.protobuf.BoolValue\x12\x36\n\x05Start\x12\x15.pandora.StartRequest\x1a\x16.pandora.StartResponse\x12<\n\x07Suspend\x12\x17.pandora.SuspendRequest\x1a\x18.pandora.SuspendResponse\x12\x36\n\x05\x43lose\x12\x15.pandora.CloseRequest\x1a\x16.pandora.CloseResponse\x12W\n\x10GetAudioEncoding\x12 .pandora.GetAudioEncodingRequest\x1a!.pandora.GetAudioEncodingResponse\x12P\n\rPlaybackAudio\x12\x1d.pandora.PlaybackAudioRequest\x1a\x1e.pandora.PlaybackAudioResponse(\x01\x12M\n\x0c\x43\x61ptureAudio\x12\x1c.pandora.CaptureAudioRequest\x1a\x1d.pandora.CaptureAudioResponse0\x01\x42\x0b\x42\tA2DPProtob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'pandora.a2dp_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'B\tA2DPProto'
  _globals['_AUDIOENCODING']._serialized_start=1952
  _globals['_AUDIOENCODING']._serialized_end=2022
  _globals['_SOURCE']._serialized_start=112
  _globals['_SOURCE']._serialized_end=136
  _globals['_SINK']._serialized_start=138
  _globals['_SINK']._serialized_end=160
  _globals['_OPENSOURCEREQUEST']._serialized_start=162
  _globals['_OPENSOURCEREQUEST']._serialized_end=222
  _globals['_OPENSOURCERESPONSE']._serialized_start=224
  _globals['_OPENSOURCERESPONSE']._serialized_end=337
  _globals['_OPENSINKREQUEST']._serialized_start=339
  _globals['_OPENSINKREQUEST']._serialized_end=397
  _globals['_OPENSINKRESPONSE']._serialized_start=399
  _globals['_OPENSINKRESPONSE']._serialized_end=506
  _globals['_WAITSOURCEREQUEST']._serialized_start=508
  _globals['_WAITSOURCEREQUEST']._serialized_end=568
  _globals['_WAITSOURCERESPONSE']._serialized_start=570
  _globals['_WAITSOURCERESPONSE']._serialized_end=683
  _globals['_WAITSINKREQUEST']._serialized_start=685
  _globals['_WAITSINKREQUEST']._serialized_end=743
  _globals['_WAITSINKRESPONSE']._serialized_start=745
  _globals['_WAITSINKRESPONSE']._serialized_end=852
  _globals['_ISSUSPENDEDREQUEST']._serialized_start=854
  _globals['_ISSUSPENDEDREQUEST']._serialized_end=950
  _globals['_STARTREQUEST']._serialized_start=952
  _globals['_STARTREQUEST']._serialized_end=1042
  _globals['_STARTRESPONSE']._serialized_start=1045
  _globals['_STARTRESPONSE']._serialized_end=1212
  _globals['_SUSPENDREQUEST']._serialized_start=1214
  _globals['_SUSPENDREQUEST']._serialized_end=1306
  _globals['_SUSPENDRESPONSE']._serialized_start=1309
  _globals['_SUSPENDRESPONSE']._serialized_end=1482
  _globals['_CLOSEREQUEST']._serialized_start=1484
  _globals['_CLOSEREQUEST']._serialized_end=1574
  _globals['_CLOSERESPONSE']._serialized_start=1576
  _globals['_CLOSERESPONSE']._serialized_end=1591
  _globals['_GETAUDIOENCODINGREQUEST']._serialized_start=1593
  _globals['_GETAUDIOENCODINGREQUEST']._serialized_end=1694
  _globals['_GETAUDIOENCODINGRESPONSE']._serialized_start=1696
  _globals['_GETAUDIOENCODINGRESPONSE']._serialized_end=1764
  _globals['_PLAYBACKAUDIOREQUEST']._serialized_start=1766
  _globals['_PLAYBACKAUDIOREQUEST']._serialized_end=1835
  _globals['_PLAYBACKAUDIORESPONSE']._serialized_start=1837
  _globals['_PLAYBACKAUDIORESPONSE']._serialized_end=1860
  _globals['_CAPTUREAUDIOREQUEST']._serialized_start=1862
  _globals['_CAPTUREAUDIOREQUEST']._serialized_end=1912
  _globals['_CAPTUREAUDIORESPONSE']._serialized_start=1914
  _globals['_CAPTUREAUDIORESPONSE']._serialized_end=1950
  _globals['_A2DP']._serialized_start=2025
  _globals['_A2DP']._serialized_end=2799
def unwrap(x):
  assert x
  return x
class AudioEncoding: ...


def _OpenSourceResponse_result(self: OpenSourceResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'source': return unwrap(self.source)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _OpenSourceResponse_result_variant(self: OpenSourceResponse):
  return self.WhichOneof('result')  # type: ignore

def _OpenSourceResponse_result_asdict(self: OpenSourceResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(OpenSourceResponse, 'result', property(_OpenSourceResponse_result))
setattr(OpenSourceResponse, 'result_variant', _OpenSourceResponse_result_variant)
setattr(OpenSourceResponse, 'result_asdict', _OpenSourceResponse_result_asdict)

def _OpenSinkResponse_result(self: OpenSinkResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _OpenSinkResponse_result_variant(self: OpenSinkResponse):
  return self.WhichOneof('result')  # type: ignore

def _OpenSinkResponse_result_asdict(self: OpenSinkResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(OpenSinkResponse, 'result', property(_OpenSinkResponse_result))
setattr(OpenSinkResponse, 'result_variant', _OpenSinkResponse_result_variant)
setattr(OpenSinkResponse, 'result_asdict', _OpenSinkResponse_result_asdict)

def _WaitSourceResponse_result(self: WaitSourceResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'source': return unwrap(self.source)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _WaitSourceResponse_result_variant(self: WaitSourceResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitSourceResponse_result_asdict(self: WaitSourceResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitSourceResponse, 'result', property(_WaitSourceResponse_result))
setattr(WaitSourceResponse, 'result_variant', _WaitSourceResponse_result_variant)
setattr(WaitSourceResponse, 'result_asdict', _WaitSourceResponse_result_asdict)

def _WaitSinkResponse_result(self: WaitSinkResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _WaitSinkResponse_result_variant(self: WaitSinkResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitSinkResponse_result_asdict(self: WaitSinkResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitSinkResponse, 'result', property(_WaitSinkResponse_result))
setattr(WaitSinkResponse, 'result_variant', _WaitSinkResponse_result_variant)
setattr(WaitSinkResponse, 'result_asdict', _WaitSinkResponse_result_asdict)

def _IsSuspendedRequest_target(self: IsSuspendedRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'source': return unwrap(self.source)
  raise Exception('Field `target` not found.')

def _IsSuspendedRequest_target_variant(self: IsSuspendedRequest):
  return self.WhichOneof('target')  # type: ignore

def _IsSuspendedRequest_target_asdict(self: IsSuspendedRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(IsSuspendedRequest, 'target', property(_IsSuspendedRequest_target))
setattr(IsSuspendedRequest, 'target_variant', _IsSuspendedRequest_target_variant)
setattr(IsSuspendedRequest, 'target_asdict', _IsSuspendedRequest_target_asdict)

def _StartRequest_target(self: StartRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'source': return unwrap(self.source)
  raise Exception('Field `target` not found.')

def _StartRequest_target_variant(self: StartRequest):
  return self.WhichOneof('target')  # type: ignore

def _StartRequest_target_asdict(self: StartRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(StartRequest, 'target', property(_StartRequest_target))
setattr(StartRequest, 'target_variant', _StartRequest_target_variant)
setattr(StartRequest, 'target_asdict', _StartRequest_target_asdict)

def _StartResponse_result(self: StartResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'started': return unwrap(self.started)
  if variant == 'already_started': return unwrap(self.already_started)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _StartResponse_result_variant(self: StartResponse):
  return self.WhichOneof('result')  # type: ignore

def _StartResponse_result_asdict(self: StartResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'started': return {'started': unwrap(self.started)}  # type: ignore
  if variant == 'already_started': return {'already_started': unwrap(self.already_started)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(StartResponse, 'result', property(_StartResponse_result))
setattr(StartResponse, 'result_variant', _StartResponse_result_variant)
setattr(StartResponse, 'result_asdict', _StartResponse_result_asdict)

def _SuspendRequest_target(self: SuspendRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'source': return unwrap(self.source)
  raise Exception('Field `target` not found.')

def _SuspendRequest_target_variant(self: SuspendRequest):
  return self.WhichOneof('target')  # type: ignore

def _SuspendRequest_target_asdict(self: SuspendRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(SuspendRequest, 'target', property(_SuspendRequest_target))
setattr(SuspendRequest, 'target_variant', _SuspendRequest_target_variant)
setattr(SuspendRequest, 'target_asdict', _SuspendRequest_target_asdict)

def _SuspendResponse_result(self: SuspendResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'suspended': return unwrap(self.suspended)
  if variant == 'already_suspended': return unwrap(self.already_suspended)
  if variant == 'disconnected': return unwrap(self.disconnected)
  raise Exception('Field `result` not found.')

def _SuspendResponse_result_variant(self: SuspendResponse):
  return self.WhichOneof('result')  # type: ignore

def _SuspendResponse_result_asdict(self: SuspendResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'suspended': return {'suspended': unwrap(self.suspended)}  # type: ignore
  if variant == 'already_suspended': return {'already_suspended': unwrap(self.already_suspended)}  # type: ignore
  if variant == 'disconnected': return {'disconnected': unwrap(self.disconnected)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(SuspendResponse, 'result', property(_SuspendResponse_result))
setattr(SuspendResponse, 'result_variant', _SuspendResponse_result_variant)
setattr(SuspendResponse, 'result_asdict', _SuspendResponse_result_asdict)

def _CloseRequest_target(self: CloseRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'source': return unwrap(self.source)
  raise Exception('Field `target` not found.')

def _CloseRequest_target_variant(self: CloseRequest):
  return self.WhichOneof('target')  # type: ignore

def _CloseRequest_target_asdict(self: CloseRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(CloseRequest, 'target', property(_CloseRequest_target))
setattr(CloseRequest, 'target_variant', _CloseRequest_target_variant)
setattr(CloseRequest, 'target_asdict', _CloseRequest_target_asdict)

def _GetAudioEncodingRequest_target(self: GetAudioEncodingRequest):
  variant = self.target_variant()
  if variant is None: return None
  if variant == 'sink': return unwrap(self.sink)
  if variant == 'source': return unwrap(self.source)
  raise Exception('Field `target` not found.')

def _GetAudioEncodingRequest_target_variant(self: GetAudioEncodingRequest):
  return self.WhichOneof('target')  # type: ignore

def _GetAudioEncodingRequest_target_asdict(self: GetAudioEncodingRequest):
  variant = self.target_variant()
  if variant is None: return {}
  if variant == 'sink': return {'sink': unwrap(self.sink)}  # type: ignore
  if variant == 'source': return {'source': unwrap(self.source)}  # type: ignore
  raise Exception('Field `target` not found.')

setattr(GetAudioEncodingRequest, 'target', property(_GetAudioEncodingRequest_target))
setattr(GetAudioEncodingRequest, 'target_variant', _GetAudioEncodingRequest_target_variant)
setattr(GetAudioEncodingRequest, 'target_asdict', _GetAudioEncodingRequest_target_asdict)
# @@protoc_insertion_point(module_scope)
