# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pandora/security.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
from pandora import host_pb2 as pandora_dot_host__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16pandora/security.proto\x12\x07pandora\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x12pandora/host.proto\"\xe0\x02\n\x0cPairingEvent\x12\x11\n\x07\x61\x64\x64ress\x18\x01 \x01(\x0cH\x00\x12)\n\nconnection\x18\x02 \x01(\x0b\x32\x13.pandora.ConnectionH\x00\x12,\n\njust_works\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x01\x12\x1c\n\x12numeric_comparison\x18\x04 \x01(\rH\x01\x12\x37\n\x15passkey_entry_request\x18\x05 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x01\x12$\n\x1apasskey_entry_notification\x18\x06 \x01(\rH\x01\x12\x32\n\x10pin_code_request\x18\x07 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x01\x12\x1f\n\x15pin_code_notification\x18\x08 \x01(\x0cH\x01\x42\x08\n\x06remoteB\x08\n\x06method\"y\n\x12PairingEventAnswer\x12$\n\x05\x65vent\x18\x01 \x01(\x0b\x32\x15.pandora.PairingEvent\x12\x11\n\x07\x63onfirm\x18\x02 \x01(\x08H\x00\x12\x11\n\x07passkey\x18\x03 \x01(\rH\x00\x12\r\n\x03pin\x18\x04 \x01(\x0cH\x00\x42\x08\n\x06\x61nswer\"\x94\x01\n\rSecureRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\x12)\n\x07\x63lassic\x18\x02 \x01(\x0e\x32\x16.pandora.SecurityLevelH\x00\x12&\n\x02le\x18\x03 \x01(\x0e\x32\x18.pandora.LESecurityLevelH\x00\x42\x07\n\x05level\"\xca\x02\n\x0eSecureResponse\x12)\n\x07success\x18\x01 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12-\n\x0bnot_reached\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0f\x63onnection_died\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0fpairing_failure\x18\x04 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x38\n\x16\x61uthentication_failure\x18\x05 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x34\n\x12\x65ncryption_failure\x18\x06 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"\x9a\x01\n\x13WaitSecurityRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\x12)\n\x07\x63lassic\x18\x02 \x01(\x0e\x32\x16.pandora.SecurityLevelH\x00\x12&\n\x02le\x18\x03 \x01(\x0e\x32\x18.pandora.LESecurityLevelH\x00\x42\x07\n\x05level\"\xa1\x02\n\x14WaitSecurityResponse\x12)\n\x07success\x18\x01 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0f\x63onnection_died\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x31\n\x0fpairing_failure\x18\x03 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x38\n\x16\x61uthentication_failure\x18\x04 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x12\x34\n\x12\x65ncryption_failure\x18\x05 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"@\n\x0fIsBondedRequest\x12\x10\n\x06public\x18\x01 \x01(\x0cH\x00\x12\x10\n\x06random\x18\x02 \x01(\x0cH\x00\x42\t\n\x07\x61\x64\x64ress\"B\n\x11\x44\x65leteBondRequest\x12\x10\n\x06public\x18\x01 \x01(\x0cH\x00\x12\x10\n\x06random\x18\x02 \x01(\x0cH\x00\x42\t\n\x07\x61\x64\x64ress*K\n\rSecurityLevel\x12\n\n\x06LEVEL0\x10\x00\x12\n\n\x06LEVEL1\x10\x01\x12\n\n\x06LEVEL2\x10\x02\x12\n\n\x06LEVEL3\x10\x03\x12\n\n\x06LEVEL4\x10\x04*M\n\x0fLESecurityLevel\x12\r\n\tLE_LEVEL1\x10\x00\x12\r\n\tLE_LEVEL2\x10\x01\x12\r\n\tLE_LEVEL3\x10\x02\x12\r\n\tLE_LEVEL4\x10\x03\x32\xd7\x01\n\x08Security\x12\x43\n\tOnPairing\x12\x1b.pandora.PairingEventAnswer\x1a\x15.pandora.PairingEvent(\x01\x30\x01\x12\x39\n\x06Secure\x12\x16.pandora.SecureRequest\x1a\x17.pandora.SecureResponse\x12K\n\x0cWaitSecurity\x12\x1c.pandora.WaitSecurityRequest\x1a\x1d.pandora.WaitSecurityResponse2\x95\x01\n\x0fSecurityStorage\x12@\n\x08IsBonded\x12\x18.pandora.IsBondedRequest\x1a\x1a.google.protobuf.BoolValue\x12@\n\nDeleteBond\x12\x1a.pandora.DeleteBondRequest\x1a\x16.google.protobuf.EmptyB\x0f\x42\rSecurityProtob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'pandora.security_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'B\rSecurityProto'
  _globals['_SECURITYLEVEL']._serialized_start=1661
  _globals['_SECURITYLEVEL']._serialized_end=1736
  _globals['_LESECURITYLEVEL']._serialized_start=1738
  _globals['_LESECURITYLEVEL']._serialized_end=1815
  _globals['_PAIRINGEVENT']._serialized_start=117
  _globals['_PAIRINGEVENT']._serialized_end=469
  _globals['_PAIRINGEVENTANSWER']._serialized_start=471
  _globals['_PAIRINGEVENTANSWER']._serialized_end=592
  _globals['_SECUREREQUEST']._serialized_start=595
  _globals['_SECUREREQUEST']._serialized_end=743
  _globals['_SECURERESPONSE']._serialized_start=746
  _globals['_SECURERESPONSE']._serialized_end=1076
  _globals['_WAITSECURITYREQUEST']._serialized_start=1079
  _globals['_WAITSECURITYREQUEST']._serialized_end=1233
  _globals['_WAITSECURITYRESPONSE']._serialized_start=1236
  _globals['_WAITSECURITYRESPONSE']._serialized_end=1525
  _globals['_ISBONDEDREQUEST']._serialized_start=1527
  _globals['_ISBONDEDREQUEST']._serialized_end=1591
  _globals['_DELETEBONDREQUEST']._serialized_start=1593
  _globals['_DELETEBONDREQUEST']._serialized_end=1659
  _globals['_SECURITY']._serialized_start=1818
  _globals['_SECURITY']._serialized_end=2033
  _globals['_SECURITYSTORAGE']._serialized_start=2036
  _globals['_SECURITYSTORAGE']._serialized_end=2185
def unwrap(x):
  assert x
  return x
class SecurityLevel: ...

class LESecurityLevel: ...


def _PairingEvent_remote(self: PairingEvent):
  variant = self.remote_variant()
  if variant is None: return None
  if variant == 'address': return unwrap(self.address)
  if variant == 'connection': return unwrap(self.connection)
  raise Exception('Field `remote` not found.')

def _PairingEvent_remote_variant(self: PairingEvent):
  return self.WhichOneof('remote')  # type: ignore

def _PairingEvent_remote_asdict(self: PairingEvent):
  variant = self.remote_variant()
  if variant is None: return {}
  if variant == 'address': return {'address': unwrap(self.address)}  # type: ignore
  if variant == 'connection': return {'connection': unwrap(self.connection)}  # type: ignore
  raise Exception('Field `remote` not found.')

setattr(PairingEvent, 'remote', property(_PairingEvent_remote))
setattr(PairingEvent, 'remote_variant', _PairingEvent_remote_variant)
setattr(PairingEvent, 'remote_asdict', _PairingEvent_remote_asdict)

def _PairingEvent_method(self: PairingEvent):
  variant = self.method_variant()
  if variant is None: return None
  if variant == 'just_works': return unwrap(self.just_works)
  if variant == 'numeric_comparison': return unwrap(self.numeric_comparison)
  if variant == 'passkey_entry_request': return unwrap(self.passkey_entry_request)
  if variant == 'passkey_entry_notification': return unwrap(self.passkey_entry_notification)
  if variant == 'pin_code_request': return unwrap(self.pin_code_request)
  if variant == 'pin_code_notification': return unwrap(self.pin_code_notification)
  raise Exception('Field `method` not found.')

def _PairingEvent_method_variant(self: PairingEvent):
  return self.WhichOneof('method')  # type: ignore

def _PairingEvent_method_asdict(self: PairingEvent):
  variant = self.method_variant()
  if variant is None: return {}
  if variant == 'just_works': return {'just_works': unwrap(self.just_works)}  # type: ignore
  if variant == 'numeric_comparison': return {'numeric_comparison': unwrap(self.numeric_comparison)}  # type: ignore
  if variant == 'passkey_entry_request': return {'passkey_entry_request': unwrap(self.passkey_entry_request)}  # type: ignore
  if variant == 'passkey_entry_notification': return {'passkey_entry_notification': unwrap(self.passkey_entry_notification)}  # type: ignore
  if variant == 'pin_code_request': return {'pin_code_request': unwrap(self.pin_code_request)}  # type: ignore
  if variant == 'pin_code_notification': return {'pin_code_notification': unwrap(self.pin_code_notification)}  # type: ignore
  raise Exception('Field `method` not found.')

setattr(PairingEvent, 'method', property(_PairingEvent_method))
setattr(PairingEvent, 'method_variant', _PairingEvent_method_variant)
setattr(PairingEvent, 'method_asdict', _PairingEvent_method_asdict)

def _PairingEventAnswer_answer(self: PairingEventAnswer):
  variant = self.answer_variant()
  if variant is None: return None
  if variant == 'confirm': return unwrap(self.confirm)
  if variant == 'passkey': return unwrap(self.passkey)
  if variant == 'pin': return unwrap(self.pin)
  raise Exception('Field `answer` not found.')

def _PairingEventAnswer_answer_variant(self: PairingEventAnswer):
  return self.WhichOneof('answer')  # type: ignore

def _PairingEventAnswer_answer_asdict(self: PairingEventAnswer):
  variant = self.answer_variant()
  if variant is None: return {}
  if variant == 'confirm': return {'confirm': unwrap(self.confirm)}  # type: ignore
  if variant == 'passkey': return {'passkey': unwrap(self.passkey)}  # type: ignore
  if variant == 'pin': return {'pin': unwrap(self.pin)}  # type: ignore
  raise Exception('Field `answer` not found.')

setattr(PairingEventAnswer, 'answer', property(_PairingEventAnswer_answer))
setattr(PairingEventAnswer, 'answer_variant', _PairingEventAnswer_answer_variant)
setattr(PairingEventAnswer, 'answer_asdict', _PairingEventAnswer_answer_asdict)

def _SecureRequest_level(self: SecureRequest):
  variant = self.level_variant()
  if variant is None: return None
  if variant == 'classic': return unwrap(self.classic)
  if variant == 'le': return unwrap(self.le)
  raise Exception('Field `level` not found.')

def _SecureRequest_level_variant(self: SecureRequest):
  return self.WhichOneof('level')  # type: ignore

def _SecureRequest_level_asdict(self: SecureRequest):
  variant = self.level_variant()
  if variant is None: return {}
  if variant == 'classic': return {'classic': unwrap(self.classic)}  # type: ignore
  if variant == 'le': return {'le': unwrap(self.le)}  # type: ignore
  raise Exception('Field `level` not found.')

setattr(SecureRequest, 'level', property(_SecureRequest_level))
setattr(SecureRequest, 'level_variant', _SecureRequest_level_variant)
setattr(SecureRequest, 'level_asdict', _SecureRequest_level_asdict)

def _SecureResponse_result(self: SecureResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'success': return unwrap(self.success)
  if variant == 'not_reached': return unwrap(self.not_reached)
  if variant == 'connection_died': return unwrap(self.connection_died)
  if variant == 'pairing_failure': return unwrap(self.pairing_failure)
  if variant == 'authentication_failure': return unwrap(self.authentication_failure)
  if variant == 'encryption_failure': return unwrap(self.encryption_failure)
  raise Exception('Field `result` not found.')

def _SecureResponse_result_variant(self: SecureResponse):
  return self.WhichOneof('result')  # type: ignore

def _SecureResponse_result_asdict(self: SecureResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'success': return {'success': unwrap(self.success)}  # type: ignore
  if variant == 'not_reached': return {'not_reached': unwrap(self.not_reached)}  # type: ignore
  if variant == 'connection_died': return {'connection_died': unwrap(self.connection_died)}  # type: ignore
  if variant == 'pairing_failure': return {'pairing_failure': unwrap(self.pairing_failure)}  # type: ignore
  if variant == 'authentication_failure': return {'authentication_failure': unwrap(self.authentication_failure)}  # type: ignore
  if variant == 'encryption_failure': return {'encryption_failure': unwrap(self.encryption_failure)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(SecureResponse, 'result', property(_SecureResponse_result))
setattr(SecureResponse, 'result_variant', _SecureResponse_result_variant)
setattr(SecureResponse, 'result_asdict', _SecureResponse_result_asdict)

def _WaitSecurityRequest_level(self: WaitSecurityRequest):
  variant = self.level_variant()
  if variant is None: return None
  if variant == 'classic': return unwrap(self.classic)
  if variant == 'le': return unwrap(self.le)
  raise Exception('Field `level` not found.')

def _WaitSecurityRequest_level_variant(self: WaitSecurityRequest):
  return self.WhichOneof('level')  # type: ignore

def _WaitSecurityRequest_level_asdict(self: WaitSecurityRequest):
  variant = self.level_variant()
  if variant is None: return {}
  if variant == 'classic': return {'classic': unwrap(self.classic)}  # type: ignore
  if variant == 'le': return {'le': unwrap(self.le)}  # type: ignore
  raise Exception('Field `level` not found.')

setattr(WaitSecurityRequest, 'level', property(_WaitSecurityRequest_level))
setattr(WaitSecurityRequest, 'level_variant', _WaitSecurityRequest_level_variant)
setattr(WaitSecurityRequest, 'level_asdict', _WaitSecurityRequest_level_asdict)

def _WaitSecurityResponse_result(self: WaitSecurityResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'success': return unwrap(self.success)
  if variant == 'connection_died': return unwrap(self.connection_died)
  if variant == 'pairing_failure': return unwrap(self.pairing_failure)
  if variant == 'authentication_failure': return unwrap(self.authentication_failure)
  if variant == 'encryption_failure': return unwrap(self.encryption_failure)
  raise Exception('Field `result` not found.')

def _WaitSecurityResponse_result_variant(self: WaitSecurityResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitSecurityResponse_result_asdict(self: WaitSecurityResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'success': return {'success': unwrap(self.success)}  # type: ignore
  if variant == 'connection_died': return {'connection_died': unwrap(self.connection_died)}  # type: ignore
  if variant == 'pairing_failure': return {'pairing_failure': unwrap(self.pairing_failure)}  # type: ignore
  if variant == 'authentication_failure': return {'authentication_failure': unwrap(self.authentication_failure)}  # type: ignore
  if variant == 'encryption_failure': return {'encryption_failure': unwrap(self.encryption_failure)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitSecurityResponse, 'result', property(_WaitSecurityResponse_result))
setattr(WaitSecurityResponse, 'result_variant', _WaitSecurityResponse_result_variant)
setattr(WaitSecurityResponse, 'result_asdict', _WaitSecurityResponse_result_asdict)

def _IsBondedRequest_address(self: IsBondedRequest):
  variant = self.address_variant()
  if variant is None: return None
  if variant == 'public': return unwrap(self.public)
  if variant == 'random': return unwrap(self.random)
  raise Exception('Field `address` not found.')

def _IsBondedRequest_address_variant(self: IsBondedRequest):
  return self.WhichOneof('address')  # type: ignore

def _IsBondedRequest_address_asdict(self: IsBondedRequest):
  variant = self.address_variant()
  if variant is None: return {}
  if variant == 'public': return {'public': unwrap(self.public)}  # type: ignore
  if variant == 'random': return {'random': unwrap(self.random)}  # type: ignore
  raise Exception('Field `address` not found.')

setattr(IsBondedRequest, 'address', property(_IsBondedRequest_address))
setattr(IsBondedRequest, 'address_variant', _IsBondedRequest_address_variant)
setattr(IsBondedRequest, 'address_asdict', _IsBondedRequest_address_asdict)

def _DeleteBondRequest_address(self: DeleteBondRequest):
  variant = self.address_variant()
  if variant is None: return None
  if variant == 'public': return unwrap(self.public)
  if variant == 'random': return unwrap(self.random)
  raise Exception('Field `address` not found.')

def _DeleteBondRequest_address_variant(self: DeleteBondRequest):
  return self.WhichOneof('address')  # type: ignore

def _DeleteBondRequest_address_asdict(self: DeleteBondRequest):
  variant = self.address_variant()
  if variant is None: return {}
  if variant == 'public': return {'public': unwrap(self.public)}  # type: ignore
  if variant == 'random': return {'random': unwrap(self.random)}  # type: ignore
  raise Exception('Field `address` not found.')

setattr(DeleteBondRequest, 'address', property(_DeleteBondRequest_address))
setattr(DeleteBondRequest, 'address_variant', _DeleteBondRequest_address_variant)
setattr(DeleteBondRequest, 'address_asdict', _DeleteBondRequest_address_asdict)
# @@protoc_insertion_point(module_scope)
