# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pandora/l2cap.proto
# Protobuf Python Version: 4.25.1
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from pandora import host_pb2 as pandora_dot_host__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x13pandora/l2cap.proto\x12\rpandora.l2cap\x1a\x19google/protobuf/any.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x12pandora/host.proto\"/\n\x07\x43hannel\x12$\n\x06\x63ookie\x18\x01 \x01(\x0b\x32\x14.google.protobuf.Any\"D\n\x0c\x46ixedChannel\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\x12\x0b\n\x03\x63id\x18\x02 \x01(\r\"<\n ConnectionOrientedChannelRequest\x12\x0b\n\x03psm\x18\x01 \x01(\r\x12\x0b\n\x03mtu\x18\x02 \x01(\r\"[\n\x19\x43reditBasedChannelRequest\x12\x0c\n\x04spsm\x18\x01 \x01(\r\x12\x0b\n\x03mtu\x18\x02 \x01(\r\x12\x0b\n\x03mps\x18\x03 \x01(\r\x12\x16\n\x0einitial_credit\x18\x04 \x01(\r\"\x93\x02\n\x0e\x43onnectRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\x12@\n\x05\x62\x61sic\x18\x02 \x01(\x0b\x32/.pandora.l2cap.ConnectionOrientedChannelRequestH\x00\x12\x43\n\x0fle_credit_based\x18\x03 \x01(\x0b\x32(.pandora.l2cap.CreditBasedChannelRequestH\x00\x12I\n\x15\x65nhanced_credit_based\x18\x04 \x01(\x0b\x32(.pandora.l2cap.CreditBasedChannelRequestH\x00\x42\x06\n\x04type\"{\n\x0f\x43onnectResponse\x12\x33\n\x05\x65rror\x18\x01 \x01(\x0e\x32\".pandora.l2cap.CommandRejectReasonH\x00\x12)\n\x07\x63hannel\x18\x02 \x01(\x0b\x32\x16.pandora.l2cap.ChannelH\x00\x42\x08\n\x06result\"\x9a\x02\n\x15WaitConnectionRequest\x12\'\n\nconnection\x18\x01 \x01(\x0b\x32\x13.pandora.Connection\x12@\n\x05\x62\x61sic\x18\x02 \x01(\x0b\x32/.pandora.l2cap.ConnectionOrientedChannelRequestH\x00\x12\x43\n\x0fle_credit_based\x18\x03 \x01(\x0b\x32(.pandora.l2cap.CreditBasedChannelRequestH\x00\x12I\n\x15\x65nhanced_credit_based\x18\x04 \x01(\x0b\x32(.pandora.l2cap.CreditBasedChannelRequestH\x00\x42\x06\n\x04type\"\x82\x01\n\x16WaitConnectionResponse\x12\x33\n\x05\x65rror\x18\x01 \x01(\x0e\x32\".pandora.l2cap.CommandRejectReasonH\x00\x12)\n\x07\x63hannel\x18\x02 \x01(\x0b\x32\x16.pandora.l2cap.ChannelH\x00\x42\x08\n\x06result\"<\n\x11\x44isconnectRequest\x12\'\n\x07\x63hannel\x18\x01 \x01(\x0b\x32\x16.pandora.l2cap.Channel\"~\n\x12\x44isconnectResponse\x12\x33\n\x05\x65rror\x18\x01 \x01(\x0e\x32\".pandora.l2cap.CommandRejectReasonH\x00\x12)\n\x07success\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"C\n\x18WaitDisconnectionRequest\x12\'\n\x07\x63hannel\x18\x01 \x01(\x0b\x32\x16.pandora.l2cap.Channel\"\x85\x01\n\x19WaitDisconnectionResponse\x12\x33\n\x05\x65rror\x18\x01 \x01(\x0e\x32\".pandora.l2cap.CommandRejectReasonH\x00\x12)\n\x07success\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result\"{\n\x0eReceiveRequest\x12)\n\x07\x63hannel\x18\x01 \x01(\x0b\x32\x16.pandora.l2cap.ChannelH\x00\x12\x34\n\rfixed_channel\x18\x02 \x01(\x0b\x32\x1b.pandora.l2cap.FixedChannelH\x00\x42\x08\n\x06source\"\x1f\n\x0fReceiveResponse\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\"\x84\x01\n\x0bSendRequest\x12)\n\x07\x63hannel\x18\x01 \x01(\x0b\x32\x16.pandora.l2cap.ChannelH\x00\x12\x34\n\rfixed_channel\x18\x02 \x01(\x0b\x32\x1b.pandora.l2cap.FixedChannelH\x00\x12\x0c\n\x04\x64\x61ta\x18\x03 \x01(\x0c\x42\x06\n\x04sink\"x\n\x0cSendResponse\x12\x33\n\x05\x65rror\x18\x01 \x01(\x0e\x32\".pandora.l2cap.CommandRejectReasonH\x00\x12)\n\x07success\x18\x02 \x01(\x0b\x32\x16.google.protobuf.EmptyH\x00\x42\x08\n\x06result*f\n\x13\x43ommandRejectReason\x12\x1a\n\x16\x43OMMAND_NOT_UNDERSTOOD\x10\x00\x12\x17\n\x13SIGNAL_MTU_EXCEEDED\x10\x01\x12\x1a\n\x16INVALID_CID_IN_REQUEST\x10\x02\x32\xf8\x03\n\x05L2CAP\x12H\n\x07\x43onnect\x12\x1d.pandora.l2cap.ConnectRequest\x1a\x1e.pandora.l2cap.ConnectResponse\x12]\n\x0eWaitConnection\x12$.pandora.l2cap.WaitConnectionRequest\x1a%.pandora.l2cap.WaitConnectionResponse\x12Q\n\nDisconnect\x12 .pandora.l2cap.DisconnectRequest\x1a!.pandora.l2cap.DisconnectResponse\x12\x66\n\x11WaitDisconnection\x12\'.pandora.l2cap.WaitDisconnectionRequest\x1a(.pandora.l2cap.WaitDisconnectionResponse\x12J\n\x07Receive\x12\x1d.pandora.l2cap.ReceiveRequest\x1a\x1e.pandora.l2cap.ReceiveResponse0\x01\x12?\n\x04Send\x12\x1a.pandora.l2cap.SendRequest\x1a\x1b.pandora.l2cap.SendResponseB\x0c\x42\nL2CAPProtob\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'pandora.l2cap_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'B\nL2CAPProto'
  _globals['_COMMANDREJECTREASON']._serialized_start=2019
  _globals['_COMMANDREJECTREASON']._serialized_end=2121
  _globals['_CHANNEL']._serialized_start=114
  _globals['_CHANNEL']._serialized_end=161
  _globals['_FIXEDCHANNEL']._serialized_start=163
  _globals['_FIXEDCHANNEL']._serialized_end=231
  _globals['_CONNECTIONORIENTEDCHANNELREQUEST']._serialized_start=233
  _globals['_CONNECTIONORIENTEDCHANNELREQUEST']._serialized_end=293
  _globals['_CREDITBASEDCHANNELREQUEST']._serialized_start=295
  _globals['_CREDITBASEDCHANNELREQUEST']._serialized_end=386
  _globals['_CONNECTREQUEST']._serialized_start=389
  _globals['_CONNECTREQUEST']._serialized_end=664
  _globals['_CONNECTRESPONSE']._serialized_start=666
  _globals['_CONNECTRESPONSE']._serialized_end=789
  _globals['_WAITCONNECTIONREQUEST']._serialized_start=792
  _globals['_WAITCONNECTIONREQUEST']._serialized_end=1074
  _globals['_WAITCONNECTIONRESPONSE']._serialized_start=1077
  _globals['_WAITCONNECTIONRESPONSE']._serialized_end=1207
  _globals['_DISCONNECTREQUEST']._serialized_start=1209
  _globals['_DISCONNECTREQUEST']._serialized_end=1269
  _globals['_DISCONNECTRESPONSE']._serialized_start=1271
  _globals['_DISCONNECTRESPONSE']._serialized_end=1397
  _globals['_WAITDISCONNECTIONREQUEST']._serialized_start=1399
  _globals['_WAITDISCONNECTIONREQUEST']._serialized_end=1466
  _globals['_WAITDISCONNECTIONRESPONSE']._serialized_start=1469
  _globals['_WAITDISCONNECTIONRESPONSE']._serialized_end=1602
  _globals['_RECEIVEREQUEST']._serialized_start=1604
  _globals['_RECEIVEREQUEST']._serialized_end=1727
  _globals['_RECEIVERESPONSE']._serialized_start=1729
  _globals['_RECEIVERESPONSE']._serialized_end=1760
  _globals['_SENDREQUEST']._serialized_start=1763
  _globals['_SENDREQUEST']._serialized_end=1895
  _globals['_SENDRESPONSE']._serialized_start=1897
  _globals['_SENDRESPONSE']._serialized_end=2017
  _globals['_L2CAP']._serialized_start=2124
  _globals['_L2CAP']._serialized_end=2628
def unwrap(x):
  assert x
  return x
class CommandRejectReason: ...


def _ConnectRequest_type(self: ConnectRequest):
  variant = self.type_variant()
  if variant is None: return None
  if variant == 'basic': return unwrap(self.basic)
  if variant == 'le_credit_based': return unwrap(self.le_credit_based)
  if variant == 'enhanced_credit_based': return unwrap(self.enhanced_credit_based)
  raise Exception('Field `type` not found.')

def _ConnectRequest_type_variant(self: ConnectRequest):
  return self.WhichOneof('type')  # type: ignore

def _ConnectRequest_type_asdict(self: ConnectRequest):
  variant = self.type_variant()
  if variant is None: return {}
  if variant == 'basic': return {'basic': unwrap(self.basic)}  # type: ignore
  if variant == 'le_credit_based': return {'le_credit_based': unwrap(self.le_credit_based)}  # type: ignore
  if variant == 'enhanced_credit_based': return {'enhanced_credit_based': unwrap(self.enhanced_credit_based)}  # type: ignore
  raise Exception('Field `type` not found.')

setattr(ConnectRequest, 'type', property(_ConnectRequest_type))
setattr(ConnectRequest, 'type_variant', _ConnectRequest_type_variant)
setattr(ConnectRequest, 'type_asdict', _ConnectRequest_type_asdict)

def _ConnectResponse_result(self: ConnectResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'error': return unwrap(self.error)
  if variant == 'channel': return unwrap(self.channel)
  raise Exception('Field `result` not found.')

def _ConnectResponse_result_variant(self: ConnectResponse):
  return self.WhichOneof('result')  # type: ignore

def _ConnectResponse_result_asdict(self: ConnectResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'error': return {'error': unwrap(self.error)}  # type: ignore
  if variant == 'channel': return {'channel': unwrap(self.channel)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(ConnectResponse, 'result', property(_ConnectResponse_result))
setattr(ConnectResponse, 'result_variant', _ConnectResponse_result_variant)
setattr(ConnectResponse, 'result_asdict', _ConnectResponse_result_asdict)

def _WaitConnectionRequest_type(self: WaitConnectionRequest):
  variant = self.type_variant()
  if variant is None: return None
  if variant == 'basic': return unwrap(self.basic)
  if variant == 'le_credit_based': return unwrap(self.le_credit_based)
  if variant == 'enhanced_credit_based': return unwrap(self.enhanced_credit_based)
  raise Exception('Field `type` not found.')

def _WaitConnectionRequest_type_variant(self: WaitConnectionRequest):
  return self.WhichOneof('type')  # type: ignore

def _WaitConnectionRequest_type_asdict(self: WaitConnectionRequest):
  variant = self.type_variant()
  if variant is None: return {}
  if variant == 'basic': return {'basic': unwrap(self.basic)}  # type: ignore
  if variant == 'le_credit_based': return {'le_credit_based': unwrap(self.le_credit_based)}  # type: ignore
  if variant == 'enhanced_credit_based': return {'enhanced_credit_based': unwrap(self.enhanced_credit_based)}  # type: ignore
  raise Exception('Field `type` not found.')

setattr(WaitConnectionRequest, 'type', property(_WaitConnectionRequest_type))
setattr(WaitConnectionRequest, 'type_variant', _WaitConnectionRequest_type_variant)
setattr(WaitConnectionRequest, 'type_asdict', _WaitConnectionRequest_type_asdict)

def _WaitConnectionResponse_result(self: WaitConnectionResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'error': return unwrap(self.error)
  if variant == 'channel': return unwrap(self.channel)
  raise Exception('Field `result` not found.')

def _WaitConnectionResponse_result_variant(self: WaitConnectionResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitConnectionResponse_result_asdict(self: WaitConnectionResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'error': return {'error': unwrap(self.error)}  # type: ignore
  if variant == 'channel': return {'channel': unwrap(self.channel)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitConnectionResponse, 'result', property(_WaitConnectionResponse_result))
setattr(WaitConnectionResponse, 'result_variant', _WaitConnectionResponse_result_variant)
setattr(WaitConnectionResponse, 'result_asdict', _WaitConnectionResponse_result_asdict)

def _DisconnectResponse_result(self: DisconnectResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'error': return unwrap(self.error)
  if variant == 'success': return unwrap(self.success)
  raise Exception('Field `result` not found.')

def _DisconnectResponse_result_variant(self: DisconnectResponse):
  return self.WhichOneof('result')  # type: ignore

def _DisconnectResponse_result_asdict(self: DisconnectResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'error': return {'error': unwrap(self.error)}  # type: ignore
  if variant == 'success': return {'success': unwrap(self.success)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(DisconnectResponse, 'result', property(_DisconnectResponse_result))
setattr(DisconnectResponse, 'result_variant', _DisconnectResponse_result_variant)
setattr(DisconnectResponse, 'result_asdict', _DisconnectResponse_result_asdict)

def _WaitDisconnectionResponse_result(self: WaitDisconnectionResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'error': return unwrap(self.error)
  if variant == 'success': return unwrap(self.success)
  raise Exception('Field `result` not found.')

def _WaitDisconnectionResponse_result_variant(self: WaitDisconnectionResponse):
  return self.WhichOneof('result')  # type: ignore

def _WaitDisconnectionResponse_result_asdict(self: WaitDisconnectionResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'error': return {'error': unwrap(self.error)}  # type: ignore
  if variant == 'success': return {'success': unwrap(self.success)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(WaitDisconnectionResponse, 'result', property(_WaitDisconnectionResponse_result))
setattr(WaitDisconnectionResponse, 'result_variant', _WaitDisconnectionResponse_result_variant)
setattr(WaitDisconnectionResponse, 'result_asdict', _WaitDisconnectionResponse_result_asdict)

def _ReceiveRequest_source(self: ReceiveRequest):
  variant = self.source_variant()
  if variant is None: return None
  if variant == 'channel': return unwrap(self.channel)
  if variant == 'fixed_channel': return unwrap(self.fixed_channel)
  raise Exception('Field `source` not found.')

def _ReceiveRequest_source_variant(self: ReceiveRequest):
  return self.WhichOneof('source')  # type: ignore

def _ReceiveRequest_source_asdict(self: ReceiveRequest):
  variant = self.source_variant()
  if variant is None: return {}
  if variant == 'channel': return {'channel': unwrap(self.channel)}  # type: ignore
  if variant == 'fixed_channel': return {'fixed_channel': unwrap(self.fixed_channel)}  # type: ignore
  raise Exception('Field `source` not found.')

setattr(ReceiveRequest, 'source', property(_ReceiveRequest_source))
setattr(ReceiveRequest, 'source_variant', _ReceiveRequest_source_variant)
setattr(ReceiveRequest, 'source_asdict', _ReceiveRequest_source_asdict)

def _SendRequest_sink(self: SendRequest):
  variant = self.sink_variant()
  if variant is None: return None
  if variant == 'channel': return unwrap(self.channel)
  if variant == 'fixed_channel': return unwrap(self.fixed_channel)
  raise Exception('Field `sink` not found.')

def _SendRequest_sink_variant(self: SendRequest):
  return self.WhichOneof('sink')  # type: ignore

def _SendRequest_sink_asdict(self: SendRequest):
  variant = self.sink_variant()
  if variant is None: return {}
  if variant == 'channel': return {'channel': unwrap(self.channel)}  # type: ignore
  if variant == 'fixed_channel': return {'fixed_channel': unwrap(self.fixed_channel)}  # type: ignore
  raise Exception('Field `sink` not found.')

setattr(SendRequest, 'sink', property(_SendRequest_sink))
setattr(SendRequest, 'sink_variant', _SendRequest_sink_variant)
setattr(SendRequest, 'sink_asdict', _SendRequest_sink_asdict)

def _SendResponse_result(self: SendResponse):
  variant = self.result_variant()
  if variant is None: return None
  if variant == 'error': return unwrap(self.error)
  if variant == 'success': return unwrap(self.success)
  raise Exception('Field `result` not found.')

def _SendResponse_result_variant(self: SendResponse):
  return self.WhichOneof('result')  # type: ignore

def _SendResponse_result_asdict(self: SendResponse):
  variant = self.result_variant()
  if variant is None: return {}
  if variant == 'error': return {'error': unwrap(self.error)}  # type: ignore
  if variant == 'success': return {'success': unwrap(self.success)}  # type: ignore
  raise Exception('Field `result` not found.')

setattr(SendResponse, 'result', property(_SendResponse_result))
setattr(SendResponse, 'result_variant', _SendResponse_result_variant)
setattr(SendResponse, 'result_asdict', _SendResponse_result_asdict)
# @@protoc_insertion_point(module_scope)
