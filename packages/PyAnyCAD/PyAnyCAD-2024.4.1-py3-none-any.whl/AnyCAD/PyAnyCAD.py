# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyAnyCAD
else:
    import _PyAnyCAD

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _PyAnyCAD.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_SwigPyIterator

    def value(self):
        return _PyAnyCAD.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyAnyCAD.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyAnyCAD.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyAnyCAD.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyAnyCAD.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyAnyCAD.SwigPyIterator_copy(self)

    def next(self):
        return _PyAnyCAD.SwigPyIterator_next(self)

    def __next__(self):
        return _PyAnyCAD.SwigPyIterator___next__(self)

    def previous(self):
        return _PyAnyCAD.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyAnyCAD.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyAnyCAD.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyAnyCAD.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyAnyCAD.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyAnyCAD.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyAnyCAD.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyAnyCAD.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PyAnyCAD:
_PyAnyCAD.SwigPyIterator_swigregister(SwigPyIterator)
packed_highp = _PyAnyCAD.packed_highp
packed_mediump = _PyAnyCAD.packed_mediump
packed_lowp = _PyAnyCAD.packed_lowp
highp = _PyAnyCAD.highp
mediump = _PyAnyCAD.mediump
lowp = _PyAnyCAD.lowp
class Vector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector2_swiginit(self, _PyAnyCAD.new_Vector2(*args))
    x = property(_PyAnyCAD.Vector2_x_get, _PyAnyCAD.Vector2_x_set)
    y = property(_PyAnyCAD.Vector2_y_get, _PyAnyCAD.Vector2_y_set)
    __swig_destroy__ = _PyAnyCAD.delete_Vector2

# Register Vector2 in _PyAnyCAD:
_PyAnyCAD.Vector2_swigregister(Vector2)
class Vector2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector2i_swiginit(self, _PyAnyCAD.new_Vector2i(*args))
    x = property(_PyAnyCAD.Vector2i_x_get, _PyAnyCAD.Vector2i_x_set)
    y = property(_PyAnyCAD.Vector2i_y_get, _PyAnyCAD.Vector2i_y_set)
    __swig_destroy__ = _PyAnyCAD.delete_Vector2i

# Register Vector2i in _PyAnyCAD:
_PyAnyCAD.Vector2i_swigregister(Vector2i)
class Vector3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector3_swiginit(self, _PyAnyCAD.new_Vector3(*args))
    x = property(_PyAnyCAD.Vector3_x_get, _PyAnyCAD.Vector3_x_set)
    y = property(_PyAnyCAD.Vector3_y_get, _PyAnyCAD.Vector3_y_set)
    z = property(_PyAnyCAD.Vector3_z_get, _PyAnyCAD.Vector3_z_set)

    def clone(self):
        return _PyAnyCAD.Vector3_clone(self)

    def add(self, v):
        return _PyAnyCAD.Vector3_add(self, v)

    def sub(self, v):
        return _PyAnyCAD.Vector3_sub(self, v)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector3_applyMatrix4(self, trf)

    def applyMatrix4d(self, trf):
        return _PyAnyCAD.Vector3_applyMatrix4d(self, trf)

    def multiplyScalar(self, scalar):
        return _PyAnyCAD.Vector3_multiplyScalar(self, scalar)

    def normalize(self):
        return _PyAnyCAD.Vector3_normalize(self)

    def normalized(self):
        return _PyAnyCAD.Vector3_normalized(self)

    def length(self):
        return _PyAnyCAD.Vector3_length(self)

    def distanceTo(self, v):
        return _PyAnyCAD.Vector3_distanceTo(self, v)

    def angleTo(self, v):
        return _PyAnyCAD.Vector3_angleTo(self, v)

    def orientedAngle(self, v, ref):
        return _PyAnyCAD.Vector3_orientedAngle(self, v, ref)

    def dot(self, v):
        return _PyAnyCAD.Vector3_dot(self, v)

    def cross(self, v):
        return _PyAnyCAD.Vector3_cross(self, v)
    __swig_destroy__ = _PyAnyCAD.delete_Vector3

# Register Vector3 in _PyAnyCAD:
_PyAnyCAD.Vector3_swigregister(Vector3)
class Vector4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector4_swiginit(self, _PyAnyCAD.new_Vector4(*args))
    x = property(_PyAnyCAD.Vector4_x_get, _PyAnyCAD.Vector4_x_set)
    y = property(_PyAnyCAD.Vector4_y_get, _PyAnyCAD.Vector4_y_set)
    z = property(_PyAnyCAD.Vector4_z_get, _PyAnyCAD.Vector4_z_set)
    w = property(_PyAnyCAD.Vector4_w_get, _PyAnyCAD.Vector4_w_set)

    def clone(self):
        return _PyAnyCAD.Vector4_clone(self)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector4_applyMatrix4(self, trf)

    def applyMatrix4d(self, trf):
        return _PyAnyCAD.Vector4_applyMatrix4d(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_Vector4

# Register Vector4 in _PyAnyCAD:
_PyAnyCAD.Vector4_swigregister(Vector4)
class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Quaternion_swiginit(self, _PyAnyCAD.new_Quaternion(*args))
    x = property(_PyAnyCAD.Quaternion_x_get, _PyAnyCAD.Quaternion_x_set)
    y = property(_PyAnyCAD.Quaternion_y_get, _PyAnyCAD.Quaternion_y_set)
    z = property(_PyAnyCAD.Quaternion_z_get, _PyAnyCAD.Quaternion_z_set)
    w = property(_PyAnyCAD.Quaternion_w_get, _PyAnyCAD.Quaternion_w_set)

    def clone(self):
        return _PyAnyCAD.Quaternion_clone(self)

    def toMatrix4(self):
        return _PyAnyCAD.Quaternion_toMatrix4(self)

    def toMatrix3(self):
        return _PyAnyCAD.Quaternion_toMatrix3(self)

    def conjugate(self):
        return _PyAnyCAD.Quaternion_conjugate(self)

    def eulerAngles(self):
        return _PyAnyCAD.Quaternion_eulerAngles(self)

    @staticmethod
    def makeFromAxisAngle(angle, axis):
        return _PyAnyCAD.Quaternion_makeFromAxisAngle(angle, axis)

    @staticmethod
    def makeFromMatrix3(mat):
        return _PyAnyCAD.Quaternion_makeFromMatrix3(mat)

    @staticmethod
    def makeFromMatrix4(mat):
        return _PyAnyCAD.Quaternion_makeFromMatrix4(mat)

    @staticmethod
    def makeFromEulerAngles(pitch, yaw, roll):
        return _PyAnyCAD.Quaternion_makeFromEulerAngles(pitch, yaw, roll)

    @staticmethod
    def getRotationTo(_from, to):
        return _PyAnyCAD.Quaternion_getRotationTo(_from, to)
    __swig_destroy__ = _PyAnyCAD.delete_Quaternion

# Register Quaternion in _PyAnyCAD:
_PyAnyCAD.Quaternion_swigregister(Quaternion)
class Matrix2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix2_swiginit(self, _PyAnyCAD.new_Matrix2(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Matrix2

# Register Matrix2 in _PyAnyCAD:
_PyAnyCAD.Matrix2_swigregister(Matrix2)
class Matrix3(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix3_swiginit(self, _PyAnyCAD.new_Matrix3(*args))

    def get(self, i, j):
        return _PyAnyCAD.Matrix3_get(self, i, j)

    def set(self, i, j, val):
        return _PyAnyCAD.Matrix3_set(self, i, j, val)

    def toMatrix4(self):
        return _PyAnyCAD.Matrix3_toMatrix4(self)
    __swig_destroy__ = _PyAnyCAD.delete_Matrix3

# Register Matrix3 in _PyAnyCAD:
_PyAnyCAD.Matrix3_swigregister(Matrix3)
class Matrix4(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix4_swiginit(self, _PyAnyCAD.new_Matrix4(*args))

    def clone(self):
        return _PyAnyCAD.Matrix4_clone(self)

    def copy(self, m):
        return _PyAnyCAD.Matrix4_copy(self, m)

    def get(self, i, j):
        return _PyAnyCAD.Matrix4_get(self, i, j)

    def set(self, i, j, val):
        return _PyAnyCAD.Matrix4_set(self, i, j, val)

    def rotate(self, angle, axis):
        return _PyAnyCAD.Matrix4_rotate(self, angle, axis)

    def scale(self, ratio):
        return _PyAnyCAD.Matrix4_scale(self, ratio)

    def translate(self, v):
        return _PyAnyCAD.Matrix4_translate(self, v)

    def toMatrix3(self):
        return _PyAnyCAD.Matrix4_toMatrix3(self)

    def multiply(self, trf):
        return _PyAnyCAD.Matrix4_multiply(self, trf)

    def multiplied(self, *args):
        return _PyAnyCAD.Matrix4_multiplied(self, *args)

    def transpose(self):
        return _PyAnyCAD.Matrix4_transpose(self)

    def transposed(self):
        return _PyAnyCAD.Matrix4_transposed(self)

    def inverse(self):
        return _PyAnyCAD.Matrix4_inverse(self)

    def inversed(self):
        return _PyAnyCAD.Matrix4_inversed(self)

    def determinant(self):
        return _PyAnyCAD.Matrix4_determinant(self)

    def decompose(self):
        return _PyAnyCAD.Matrix4_decompose(self)

    def decomposeTRS(self):
        return _PyAnyCAD.Matrix4_decomposeTRS(self)

    def extractTranslation(self):
        return _PyAnyCAD.Matrix4_extractTranslation(self)

    def extractScale(self):
        return _PyAnyCAD.Matrix4_extractScale(self)

    def extractEulerAngleXYZ(self):
        return _PyAnyCAD.Matrix4_extractEulerAngleXYZ(self)

    @staticmethod
    def makeRotationAxis(*args):
        return _PyAnyCAD.Matrix4_makeRotationAxis(*args)

    @staticmethod
    def makeScale(x, y, z):
        return _PyAnyCAD.Matrix4_makeScale(x, y, z)

    @staticmethod
    def makeScaleWithCenter(center, scale):
        return _PyAnyCAD.Matrix4_makeScaleWithCenter(center, scale)

    @staticmethod
    def makeTranslation(x, y, z):
        return _PyAnyCAD.Matrix4_makeTranslation(x, y, z)

    @staticmethod
    def fromEulerAngleXYZ(x, y, z):
        return _PyAnyCAD.Matrix4_fromEulerAngleXYZ(x, y, z)

    @staticmethod
    def fromEulerAngleYXZ(y, x, z):
        return _PyAnyCAD.Matrix4_fromEulerAngleYXZ(y, x, z)
    __swig_destroy__ = _PyAnyCAD.delete_Matrix4

# Register Matrix4 in _PyAnyCAD:
_PyAnyCAD.Matrix4_swigregister(Matrix4)
class Vector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector2d_swiginit(self, _PyAnyCAD.new_Vector2d(*args))
    x = property(_PyAnyCAD.Vector2d_x_get, _PyAnyCAD.Vector2d_x_set)
    y = property(_PyAnyCAD.Vector2d_y_get, _PyAnyCAD.Vector2d_y_set)
    __swig_destroy__ = _PyAnyCAD.delete_Vector2d

# Register Vector2d in _PyAnyCAD:
_PyAnyCAD.Vector2d_swigregister(Vector2d)
class Vector3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector3d_swiginit(self, _PyAnyCAD.new_Vector3d(*args))
    x = property(_PyAnyCAD.Vector3d_x_get, _PyAnyCAD.Vector3d_x_set)
    y = property(_PyAnyCAD.Vector3d_y_get, _PyAnyCAD.Vector3d_y_set)
    z = property(_PyAnyCAD.Vector3d_z_get, _PyAnyCAD.Vector3d_z_set)

    def clone(self):
        return _PyAnyCAD.Vector3d_clone(self)

    def add(self, v):
        return _PyAnyCAD.Vector3d_add(self, v)

    def sub(self, v):
        return _PyAnyCAD.Vector3d_sub(self, v)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector3d_applyMatrix4(self, trf)

    def applyMatrix4d(self, trf):
        return _PyAnyCAD.Vector3d_applyMatrix4d(self, trf)

    def multiplyScalar(self, scalar):
        return _PyAnyCAD.Vector3d_multiplyScalar(self, scalar)

    def normalize(self):
        return _PyAnyCAD.Vector3d_normalize(self)

    def normalized(self):
        return _PyAnyCAD.Vector3d_normalized(self)

    def length(self):
        return _PyAnyCAD.Vector3d_length(self)

    def distanceTo(self, v):
        return _PyAnyCAD.Vector3d_distanceTo(self, v)

    def angleTo(self, v):
        return _PyAnyCAD.Vector3d_angleTo(self, v)

    def orientedAngle(self, v, ref):
        return _PyAnyCAD.Vector3d_orientedAngle(self, v, ref)

    def dot(self, v):
        return _PyAnyCAD.Vector3d_dot(self, v)

    def cross(self, v):
        return _PyAnyCAD.Vector3d_cross(self, v)
    __swig_destroy__ = _PyAnyCAD.delete_Vector3d

# Register Vector3d in _PyAnyCAD:
_PyAnyCAD.Vector3d_swigregister(Vector3d)
class Vector4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Vector4d_swiginit(self, _PyAnyCAD.new_Vector4d(*args))
    x = property(_PyAnyCAD.Vector4d_x_get, _PyAnyCAD.Vector4d_x_set)
    y = property(_PyAnyCAD.Vector4d_y_get, _PyAnyCAD.Vector4d_y_set)
    z = property(_PyAnyCAD.Vector4d_z_get, _PyAnyCAD.Vector4d_z_set)
    w = property(_PyAnyCAD.Vector4d_w_get, _PyAnyCAD.Vector4d_w_set)

    def clone(self):
        return _PyAnyCAD.Vector4d_clone(self)

    def applyMatrix4(self, trf):
        return _PyAnyCAD.Vector4d_applyMatrix4(self, trf)

    def applyMatrix4f(self, trf):
        return _PyAnyCAD.Vector4d_applyMatrix4f(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_Vector4d

# Register Vector4d in _PyAnyCAD:
_PyAnyCAD.Vector4d_swigregister(Vector4d)
class Quaterniond(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Quaterniond_swiginit(self, _PyAnyCAD.new_Quaterniond(*args))
    x = property(_PyAnyCAD.Quaterniond_x_get, _PyAnyCAD.Quaterniond_x_set)
    y = property(_PyAnyCAD.Quaterniond_y_get, _PyAnyCAD.Quaterniond_y_set)
    z = property(_PyAnyCAD.Quaterniond_z_get, _PyAnyCAD.Quaterniond_z_set)
    w = property(_PyAnyCAD.Quaterniond_w_get, _PyAnyCAD.Quaterniond_w_set)
    __swig_destroy__ = _PyAnyCAD.delete_Quaterniond

# Register Quaterniond in _PyAnyCAD:
_PyAnyCAD.Quaterniond_swigregister(Quaterniond)
class Matrix2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix2d_swiginit(self, _PyAnyCAD.new_Matrix2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Matrix2d

# Register Matrix2d in _PyAnyCAD:
_PyAnyCAD.Matrix2d_swigregister(Matrix2d)
class Matrix3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix3d_swiginit(self, _PyAnyCAD.new_Matrix3d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Matrix3d

# Register Matrix3d in _PyAnyCAD:
_PyAnyCAD.Matrix3d_swigregister(Matrix3d)
class Matrix4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Matrix4d_swiginit(self, _PyAnyCAD.new_Matrix4d(*args))

    def clone(self):
        return _PyAnyCAD.Matrix4d_clone(self)

    def copy(self, m):
        return _PyAnyCAD.Matrix4d_copy(self, m)

    def get(self, i, j):
        return _PyAnyCAD.Matrix4d_get(self, i, j)

    def set(self, i, j, val):
        return _PyAnyCAD.Matrix4d_set(self, i, j, val)

    def rotate(self, angle, axis):
        return _PyAnyCAD.Matrix4d_rotate(self, angle, axis)

    def scale(self, ratio):
        return _PyAnyCAD.Matrix4d_scale(self, ratio)

    def translate(self, v):
        return _PyAnyCAD.Matrix4d_translate(self, v)

    def toMatrix3(self):
        return _PyAnyCAD.Matrix4d_toMatrix3(self)

    def multiply(self, trf):
        return _PyAnyCAD.Matrix4d_multiply(self, trf)

    def multiplied(self, *args):
        return _PyAnyCAD.Matrix4d_multiplied(self, *args)

    def transpose(self):
        return _PyAnyCAD.Matrix4d_transpose(self)

    def transposed(self):
        return _PyAnyCAD.Matrix4d_transposed(self)

    def inverse(self):
        return _PyAnyCAD.Matrix4d_inverse(self)

    def inversed(self):
        return _PyAnyCAD.Matrix4d_inversed(self)

    def determinant(self):
        return _PyAnyCAD.Matrix4d_determinant(self)

    @staticmethod
    def makeRotationAxis(*args):
        return _PyAnyCAD.Matrix4d_makeRotationAxis(*args)
    __swig_destroy__ = _PyAnyCAD.delete_Matrix4d

# Register Matrix4d in _PyAnyCAD:
_PyAnyCAD.Matrix4d_swigregister(Matrix4d)
class Matrix4DecomposeResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rotation = property(_PyAnyCAD.Matrix4DecomposeResult_rotation_get, _PyAnyCAD.Matrix4DecomposeResult_rotation_set)
    scale = property(_PyAnyCAD.Matrix4DecomposeResult_scale_get, _PyAnyCAD.Matrix4DecomposeResult_scale_set)
    translation = property(_PyAnyCAD.Matrix4DecomposeResult_translation_get, _PyAnyCAD.Matrix4DecomposeResult_translation_set)
    skew = property(_PyAnyCAD.Matrix4DecomposeResult_skew_get, _PyAnyCAD.Matrix4DecomposeResult_skew_set)
    perspective = property(_PyAnyCAD.Matrix4DecomposeResult_perspective_get, _PyAnyCAD.Matrix4DecomposeResult_perspective_set)

    def __init__(self):
        _PyAnyCAD.Matrix4DecomposeResult_swiginit(self, _PyAnyCAD.new_Matrix4DecomposeResult())
    __swig_destroy__ = _PyAnyCAD.delete_Matrix4DecomposeResult

# Register Matrix4DecomposeResult in _PyAnyCAD:
_PyAnyCAD.Matrix4DecomposeResult_swigregister(Matrix4DecomposeResult)
class MathDump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Dump(*args):
        return _PyAnyCAD.MathDump_Dump(*args)

    def __init__(self):
        _PyAnyCAD.MathDump_swiginit(self, _PyAnyCAD.new_MathDump())
    __swig_destroy__ = _PyAnyCAD.delete_MathDump

# Register MathDump in _PyAnyCAD:
_PyAnyCAD.MathDump_swigregister(MathDump)
GL_ZERO = _PyAnyCAD.GL_ZERO
GL_ONE = _PyAnyCAD.GL_ONE
GL_NONE = _PyAnyCAD.GL_NONE
GL_DEPTH_BUFFER_BIT = _PyAnyCAD.GL_DEPTH_BUFFER_BIT
GL_STENCIL_BUFFER_BIT = _PyAnyCAD.GL_STENCIL_BUFFER_BIT
GL_COLOR_BUFFER_BIT = _PyAnyCAD.GL_COLOR_BUFFER_BIT
GL_POINTS = _PyAnyCAD.GL_POINTS
GL_LINES = _PyAnyCAD.GL_LINES
GL_LINE_LOOP = _PyAnyCAD.GL_LINE_LOOP
GL_LINE_STRIP = _PyAnyCAD.GL_LINE_STRIP
GL_TRIANGLES = _PyAnyCAD.GL_TRIANGLES
GL_TRIANGLE_STRIP = _PyAnyCAD.GL_TRIANGLE_STRIP
GL_TRIANGLE_FAN = _PyAnyCAD.GL_TRIANGLE_FAN
GL_SRC_COLOR = _PyAnyCAD.GL_SRC_COLOR
GL_ONE_MINUS_SRC_COLOR = _PyAnyCAD.GL_ONE_MINUS_SRC_COLOR
GL_SRC_ALPHA = _PyAnyCAD.GL_SRC_ALPHA
GL_ONE_MINUS_SRC_ALPHA = _PyAnyCAD.GL_ONE_MINUS_SRC_ALPHA
GL_DST_ALPHA = _PyAnyCAD.GL_DST_ALPHA
GL_ONE_MINUS_DST_ALPHA = _PyAnyCAD.GL_ONE_MINUS_DST_ALPHA
GL_DST_COLOR = _PyAnyCAD.GL_DST_COLOR
GL_ONE_MINUS_DST_COLOR = _PyAnyCAD.GL_ONE_MINUS_DST_COLOR
GL_SRC_ALPHA_SATURATE = _PyAnyCAD.GL_SRC_ALPHA_SATURATE
GL_FUNC_ADD = _PyAnyCAD.GL_FUNC_ADD
GL_BLEND_EQUATION = _PyAnyCAD.GL_BLEND_EQUATION
GL_BLEND_EQUATION_RGB = _PyAnyCAD.GL_BLEND_EQUATION_RGB
GL_BLEND_EQUATION_ALPHA = _PyAnyCAD.GL_BLEND_EQUATION_ALPHA
GL_FUNC_SUBTRACT = _PyAnyCAD.GL_FUNC_SUBTRACT
GL_FUNC_REVERSE_SUBTRACT = _PyAnyCAD.GL_FUNC_REVERSE_SUBTRACT
GL_BLEND_DST_RGB = _PyAnyCAD.GL_BLEND_DST_RGB
GL_BLEND_SRC_RGB = _PyAnyCAD.GL_BLEND_SRC_RGB
GL_BLEND_DST_ALPHA = _PyAnyCAD.GL_BLEND_DST_ALPHA
GL_BLEND_SRC_ALPHA = _PyAnyCAD.GL_BLEND_SRC_ALPHA
GL_CONSTANT_COLOR = _PyAnyCAD.GL_CONSTANT_COLOR
GL_ONE_MINUS_CONSTANT_COLOR = _PyAnyCAD.GL_ONE_MINUS_CONSTANT_COLOR
GL_CONSTANT_ALPHA = _PyAnyCAD.GL_CONSTANT_ALPHA
GL_ONE_MINUS_CONSTANT_ALPHA = _PyAnyCAD.GL_ONE_MINUS_CONSTANT_ALPHA
GL_BLEND_COLOR = _PyAnyCAD.GL_BLEND_COLOR
GL_ARRAY_BUFFER = _PyAnyCAD.GL_ARRAY_BUFFER
GL_ELEMENT_ARRAY_BUFFER = _PyAnyCAD.GL_ELEMENT_ARRAY_BUFFER
GL_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_ARRAY_BUFFER_BINDING
GL_ELEMENT_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_ELEMENT_ARRAY_BUFFER_BINDING
GL_STREAM_DRAW = _PyAnyCAD.GL_STREAM_DRAW
GL_STATIC_DRAW = _PyAnyCAD.GL_STATIC_DRAW
GL_DYNAMIC_DRAW = _PyAnyCAD.GL_DYNAMIC_DRAW
GL_BUFFER_SIZE = _PyAnyCAD.GL_BUFFER_SIZE
GL_BUFFER_USAGE = _PyAnyCAD.GL_BUFFER_USAGE
GL_CURRENT_VERTEX_ATTRIB = _PyAnyCAD.GL_CURRENT_VERTEX_ATTRIB
GL_FRONT = _PyAnyCAD.GL_FRONT
GL_BACK = _PyAnyCAD.GL_BACK
GL_FRONT_AND_BACK = _PyAnyCAD.GL_FRONT_AND_BACK
GL_TEXTURE_2D = _PyAnyCAD.GL_TEXTURE_2D
GL_CULL_FACE = _PyAnyCAD.GL_CULL_FACE
GL_BLEND = _PyAnyCAD.GL_BLEND
GL_DITHER = _PyAnyCAD.GL_DITHER
GL_STENCIL_TEST = _PyAnyCAD.GL_STENCIL_TEST
GL_DEPTH_TEST = _PyAnyCAD.GL_DEPTH_TEST
GL_SCISSOR_TEST = _PyAnyCAD.GL_SCISSOR_TEST
GL_POLYGON_OFFSET_FILL = _PyAnyCAD.GL_POLYGON_OFFSET_FILL
GL_SAMPLE_ALPHA_TO_COVERAGE = _PyAnyCAD.GL_SAMPLE_ALPHA_TO_COVERAGE
GL_SAMPLE_COVERAGE = _PyAnyCAD.GL_SAMPLE_COVERAGE
GL_INVALID_ENUM = _PyAnyCAD.GL_INVALID_ENUM
GL_INVALID_VALUE = _PyAnyCAD.GL_INVALID_VALUE
GL_INVALID_OPERATION = _PyAnyCAD.GL_INVALID_OPERATION
GL_OUT_OF_MEMORY = _PyAnyCAD.GL_OUT_OF_MEMORY
GL_CW = _PyAnyCAD.GL_CW
GL_CCW = _PyAnyCAD.GL_CCW
GL_LINE_WIDTH = _PyAnyCAD.GL_LINE_WIDTH
GL_ALIASED_POINT_SIZE_RANGE = _PyAnyCAD.GL_ALIASED_POINT_SIZE_RANGE
GL_ALIASED_LINE_WIDTH_RANGE = _PyAnyCAD.GL_ALIASED_LINE_WIDTH_RANGE
GL_CULL_FACE_MODE = _PyAnyCAD.GL_CULL_FACE_MODE
GL_FRONT_FACE = _PyAnyCAD.GL_FRONT_FACE
GL_DEPTH_RANGE = _PyAnyCAD.GL_DEPTH_RANGE
GL_DEPTH_WRITEMASK = _PyAnyCAD.GL_DEPTH_WRITEMASK
GL_DEPTH_CLEAR_VALUE = _PyAnyCAD.GL_DEPTH_CLEAR_VALUE
GL_DEPTH_FUNC = _PyAnyCAD.GL_DEPTH_FUNC
GL_STENCIL_CLEAR_VALUE = _PyAnyCAD.GL_STENCIL_CLEAR_VALUE
GL_STENCIL_FUNC = _PyAnyCAD.GL_STENCIL_FUNC
GL_STENCIL_FAIL = _PyAnyCAD.GL_STENCIL_FAIL
GL_STENCIL_PASS_DEPTH_FAIL = _PyAnyCAD.GL_STENCIL_PASS_DEPTH_FAIL
GL_STENCIL_PASS_DEPTH_PASS = _PyAnyCAD.GL_STENCIL_PASS_DEPTH_PASS
GL_STENCIL_REF = _PyAnyCAD.GL_STENCIL_REF
GL_STENCIL_VALUE_MASK = _PyAnyCAD.GL_STENCIL_VALUE_MASK
GL_STENCIL_WRITEMASK = _PyAnyCAD.GL_STENCIL_WRITEMASK
GL_STENCIL_BACK_FUNC = _PyAnyCAD.GL_STENCIL_BACK_FUNC
GL_STENCIL_BACK_FAIL = _PyAnyCAD.GL_STENCIL_BACK_FAIL
GL_STENCIL_BACK_PASS_DEPTH_FAIL = _PyAnyCAD.GL_STENCIL_BACK_PASS_DEPTH_FAIL
GL_STENCIL_BACK_PASS_DEPTH_PASS = _PyAnyCAD.GL_STENCIL_BACK_PASS_DEPTH_PASS
GL_STENCIL_BACK_REF = _PyAnyCAD.GL_STENCIL_BACK_REF
GL_STENCIL_BACK_VALUE_MASK = _PyAnyCAD.GL_STENCIL_BACK_VALUE_MASK
GL_STENCIL_BACK_WRITEMASK = _PyAnyCAD.GL_STENCIL_BACK_WRITEMASK
GL_VIEWPORT = _PyAnyCAD.GL_VIEWPORT
GL_SCISSOR_BOX = _PyAnyCAD.GL_SCISSOR_BOX
GL_COLOR_CLEAR_VALUE = _PyAnyCAD.GL_COLOR_CLEAR_VALUE
GL_COLOR_WRITEMASK = _PyAnyCAD.GL_COLOR_WRITEMASK
GL_UNPACK_ALIGNMENT = _PyAnyCAD.GL_UNPACK_ALIGNMENT
GL_PACK_ALIGNMENT = _PyAnyCAD.GL_PACK_ALIGNMENT
GL_MAX_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_TEXTURE_SIZE
GL_MAX_VIEWPORT_DIMS = _PyAnyCAD.GL_MAX_VIEWPORT_DIMS
GL_SUBPIXEL_BITS = _PyAnyCAD.GL_SUBPIXEL_BITS
GL_RED_BITS = _PyAnyCAD.GL_RED_BITS
GL_GREEN_BITS = _PyAnyCAD.GL_GREEN_BITS
GL_BLUE_BITS = _PyAnyCAD.GL_BLUE_BITS
GL_ALPHA_BITS = _PyAnyCAD.GL_ALPHA_BITS
GL_DEPTH_BITS = _PyAnyCAD.GL_DEPTH_BITS
GL_STENCIL_BITS = _PyAnyCAD.GL_STENCIL_BITS
GL_POLYGON_OFFSET_UNITS = _PyAnyCAD.GL_POLYGON_OFFSET_UNITS
GL_POLYGON_OFFSET_FACTOR = _PyAnyCAD.GL_POLYGON_OFFSET_FACTOR
GL_TEXTURE_BINDING_2D = _PyAnyCAD.GL_TEXTURE_BINDING_2D
GL_SAMPLE_BUFFERS = _PyAnyCAD.GL_SAMPLE_BUFFERS
GL_SAMPLES = _PyAnyCAD.GL_SAMPLES
GL_SAMPLE_COVERAGE_VALUE = _PyAnyCAD.GL_SAMPLE_COVERAGE_VALUE
GL_SAMPLE_COVERAGE_INVERT = _PyAnyCAD.GL_SAMPLE_COVERAGE_INVERT
GL_NUM_COMPRESSED_TEXTURE_FORMATS = _PyAnyCAD.GL_NUM_COMPRESSED_TEXTURE_FORMATS
GL_COMPRESSED_TEXTURE_FORMATS = _PyAnyCAD.GL_COMPRESSED_TEXTURE_FORMATS
GL_DONT_CARE = _PyAnyCAD.GL_DONT_CARE
GL_FASTEST = _PyAnyCAD.GL_FASTEST
GL_NICEST = _PyAnyCAD.GL_NICEST
GL_GENERATE_MIPMAP_HINT = _PyAnyCAD.GL_GENERATE_MIPMAP_HINT
GL_BYTE = _PyAnyCAD.GL_BYTE
GL_UNSIGNED_BYTE = _PyAnyCAD.GL_UNSIGNED_BYTE
GL_SHORT = _PyAnyCAD.GL_SHORT
GL_UNSIGNED_SHORT = _PyAnyCAD.GL_UNSIGNED_SHORT
GL_INT = _PyAnyCAD.GL_INT
GL_UNSIGNED_INT = _PyAnyCAD.GL_UNSIGNED_INT
GL_FLOAT = _PyAnyCAD.GL_FLOAT
GL_FIXED = _PyAnyCAD.GL_FIXED
GL_DEPTH_COMPONENT = _PyAnyCAD.GL_DEPTH_COMPONENT
GL_ALPHA = _PyAnyCAD.GL_ALPHA
GL_RGB = _PyAnyCAD.GL_RGB
GL_RGBA = _PyAnyCAD.GL_RGBA
GL_LUMINANCE = _PyAnyCAD.GL_LUMINANCE
GL_LUMINANCE_ALPHA = _PyAnyCAD.GL_LUMINANCE_ALPHA
GL_UNSIGNED_SHORT_4_4_4_4 = _PyAnyCAD.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_5_5_5_1 = _PyAnyCAD.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_SHORT_5_6_5 = _PyAnyCAD.GL_UNSIGNED_SHORT_5_6_5
GL_FRAGMENT_SHADER = _PyAnyCAD.GL_FRAGMENT_SHADER
GL_VERTEX_SHADER = _PyAnyCAD.GL_VERTEX_SHADER
GL_MAX_VERTEX_ATTRIBS = _PyAnyCAD.GL_MAX_VERTEX_ATTRIBS
GL_MAX_VERTEX_UNIFORM_VECTORS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_VECTORS
GL_MAX_VARYING_VECTORS = _PyAnyCAD.GL_MAX_VARYING_VECTORS
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
GL_MAX_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TEXTURE_IMAGE_UNITS
GL_MAX_FRAGMENT_UNIFORM_VECTORS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_VECTORS
GL_SHADER_TYPE = _PyAnyCAD.GL_SHADER_TYPE
GL_DELETE_STATUS = _PyAnyCAD.GL_DELETE_STATUS
GL_LINK_STATUS = _PyAnyCAD.GL_LINK_STATUS
GL_VALIDATE_STATUS = _PyAnyCAD.GL_VALIDATE_STATUS
GL_ATTACHED_SHADERS = _PyAnyCAD.GL_ATTACHED_SHADERS
GL_ACTIVE_UNIFORMS = _PyAnyCAD.GL_ACTIVE_UNIFORMS
GL_ACTIVE_UNIFORM_MAX_LENGTH = _PyAnyCAD.GL_ACTIVE_UNIFORM_MAX_LENGTH
GL_ACTIVE_ATTRIBUTES = _PyAnyCAD.GL_ACTIVE_ATTRIBUTES
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = _PyAnyCAD.GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
GL_SHADING_LANGUAGE_VERSION = _PyAnyCAD.GL_SHADING_LANGUAGE_VERSION
GL_CURRENT_PROGRAM = _PyAnyCAD.GL_CURRENT_PROGRAM
GL_NEVER = _PyAnyCAD.GL_NEVER
GL_LESS = _PyAnyCAD.GL_LESS
GL_EQUAL = _PyAnyCAD.GL_EQUAL
GL_LEQUAL = _PyAnyCAD.GL_LEQUAL
GL_GREATER = _PyAnyCAD.GL_GREATER
GL_NOTEQUAL = _PyAnyCAD.GL_NOTEQUAL
GL_GEQUAL = _PyAnyCAD.GL_GEQUAL
GL_ALWAYS = _PyAnyCAD.GL_ALWAYS
GL_KEEP = _PyAnyCAD.GL_KEEP
GL_REPLACE = _PyAnyCAD.GL_REPLACE
GL_INCR = _PyAnyCAD.GL_INCR
GL_DECR = _PyAnyCAD.GL_DECR
GL_INVERT = _PyAnyCAD.GL_INVERT
GL_INCR_WRAP = _PyAnyCAD.GL_INCR_WRAP
GL_DECR_WRAP = _PyAnyCAD.GL_DECR_WRAP
GL_VENDOR = _PyAnyCAD.GL_VENDOR
GL_RENDERER = _PyAnyCAD.GL_RENDERER
GL_VERSION = _PyAnyCAD.GL_VERSION
GL_EXTENSIONS = _PyAnyCAD.GL_EXTENSIONS
GL_NEAREST = _PyAnyCAD.GL_NEAREST
GL_LINEAR = _PyAnyCAD.GL_LINEAR
GL_NEAREST_MIPMAP_NEAREST = _PyAnyCAD.GL_NEAREST_MIPMAP_NEAREST
GL_LINEAR_MIPMAP_NEAREST = _PyAnyCAD.GL_LINEAR_MIPMAP_NEAREST
GL_NEAREST_MIPMAP_LINEAR = _PyAnyCAD.GL_NEAREST_MIPMAP_LINEAR
GL_LINEAR_MIPMAP_LINEAR = _PyAnyCAD.GL_LINEAR_MIPMAP_LINEAR
GL_TEXTURE_MAG_FILTER = _PyAnyCAD.GL_TEXTURE_MAG_FILTER
GL_TEXTURE_MIN_FILTER = _PyAnyCAD.GL_TEXTURE_MIN_FILTER
GL_TEXTURE_WRAP_S = _PyAnyCAD.GL_TEXTURE_WRAP_S
GL_TEXTURE_WRAP_T = _PyAnyCAD.GL_TEXTURE_WRAP_T
GL_TEXTURE = _PyAnyCAD.GL_TEXTURE
GL_TEXTURE_CUBE_MAP = _PyAnyCAD.GL_TEXTURE_CUBE_MAP
GL_TEXTURE_BINDING_CUBE_MAP = _PyAnyCAD.GL_TEXTURE_BINDING_CUBE_MAP
GL_TEXTURE_CUBE_MAP_POSITIVE_X = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_X
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_X
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_Y
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_POSITIVE_Z
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
GL_MAX_CUBE_MAP_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_CUBE_MAP_TEXTURE_SIZE
GL_TEXTURE0 = _PyAnyCAD.GL_TEXTURE0
GL_TEXTURE1 = _PyAnyCAD.GL_TEXTURE1
GL_TEXTURE2 = _PyAnyCAD.GL_TEXTURE2
GL_TEXTURE3 = _PyAnyCAD.GL_TEXTURE3
GL_TEXTURE4 = _PyAnyCAD.GL_TEXTURE4
GL_TEXTURE5 = _PyAnyCAD.GL_TEXTURE5
GL_TEXTURE6 = _PyAnyCAD.GL_TEXTURE6
GL_TEXTURE7 = _PyAnyCAD.GL_TEXTURE7
GL_TEXTURE8 = _PyAnyCAD.GL_TEXTURE8
GL_TEXTURE9 = _PyAnyCAD.GL_TEXTURE9
GL_TEXTURE10 = _PyAnyCAD.GL_TEXTURE10
GL_TEXTURE11 = _PyAnyCAD.GL_TEXTURE11
GL_TEXTURE12 = _PyAnyCAD.GL_TEXTURE12
GL_TEXTURE13 = _PyAnyCAD.GL_TEXTURE13
GL_TEXTURE14 = _PyAnyCAD.GL_TEXTURE14
GL_TEXTURE15 = _PyAnyCAD.GL_TEXTURE15
GL_TEXTURE16 = _PyAnyCAD.GL_TEXTURE16
GL_TEXTURE17 = _PyAnyCAD.GL_TEXTURE17
GL_TEXTURE18 = _PyAnyCAD.GL_TEXTURE18
GL_TEXTURE19 = _PyAnyCAD.GL_TEXTURE19
GL_TEXTURE20 = _PyAnyCAD.GL_TEXTURE20
GL_TEXTURE21 = _PyAnyCAD.GL_TEXTURE21
GL_TEXTURE22 = _PyAnyCAD.GL_TEXTURE22
GL_TEXTURE23 = _PyAnyCAD.GL_TEXTURE23
GL_TEXTURE24 = _PyAnyCAD.GL_TEXTURE24
GL_TEXTURE25 = _PyAnyCAD.GL_TEXTURE25
GL_TEXTURE26 = _PyAnyCAD.GL_TEXTURE26
GL_TEXTURE27 = _PyAnyCAD.GL_TEXTURE27
GL_TEXTURE28 = _PyAnyCAD.GL_TEXTURE28
GL_TEXTURE29 = _PyAnyCAD.GL_TEXTURE29
GL_TEXTURE30 = _PyAnyCAD.GL_TEXTURE30
GL_TEXTURE31 = _PyAnyCAD.GL_TEXTURE31
GL_ACTIVE_TEXTURE = _PyAnyCAD.GL_ACTIVE_TEXTURE
GL_REPEAT = _PyAnyCAD.GL_REPEAT
GL_CLAMP_TO_EDGE = _PyAnyCAD.GL_CLAMP_TO_EDGE
GL_MIRRORED_REPEAT = _PyAnyCAD.GL_MIRRORED_REPEAT
GL_FLOAT_VEC2 = _PyAnyCAD.GL_FLOAT_VEC2
GL_FLOAT_VEC3 = _PyAnyCAD.GL_FLOAT_VEC3
GL_FLOAT_VEC4 = _PyAnyCAD.GL_FLOAT_VEC4
GL_INT_VEC2 = _PyAnyCAD.GL_INT_VEC2
GL_INT_VEC3 = _PyAnyCAD.GL_INT_VEC3
GL_INT_VEC4 = _PyAnyCAD.GL_INT_VEC4
GL_BOOL = _PyAnyCAD.GL_BOOL
GL_BOOL_VEC2 = _PyAnyCAD.GL_BOOL_VEC2
GL_BOOL_VEC3 = _PyAnyCAD.GL_BOOL_VEC3
GL_BOOL_VEC4 = _PyAnyCAD.GL_BOOL_VEC4
GL_FLOAT_MAT2 = _PyAnyCAD.GL_FLOAT_MAT2
GL_FLOAT_MAT3 = _PyAnyCAD.GL_FLOAT_MAT3
GL_FLOAT_MAT4 = _PyAnyCAD.GL_FLOAT_MAT4
GL_SAMPLER_2D = _PyAnyCAD.GL_SAMPLER_2D
GL_SAMPLER_CUBE = _PyAnyCAD.GL_SAMPLER_CUBE
GL_VERTEX_ATTRIB_ARRAY_ENABLED = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_ENABLED
GL_VERTEX_ATTRIB_ARRAY_SIZE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_SIZE
GL_VERTEX_ATTRIB_ARRAY_STRIDE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_STRIDE
GL_VERTEX_ATTRIB_ARRAY_TYPE = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_TYPE
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
GL_VERTEX_ATTRIB_ARRAY_POINTER = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_POINTER
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
GL_IMPLEMENTATION_COLOR_READ_TYPE = _PyAnyCAD.GL_IMPLEMENTATION_COLOR_READ_TYPE
GL_IMPLEMENTATION_COLOR_READ_FORMAT = _PyAnyCAD.GL_IMPLEMENTATION_COLOR_READ_FORMAT
GL_COMPILE_STATUS = _PyAnyCAD.GL_COMPILE_STATUS
GL_INFO_LOG_LENGTH = _PyAnyCAD.GL_INFO_LOG_LENGTH
GL_SHADER_SOURCE_LENGTH = _PyAnyCAD.GL_SHADER_SOURCE_LENGTH
GL_SHADER_COMPILER = _PyAnyCAD.GL_SHADER_COMPILER
GL_SHADER_BINARY_FORMATS = _PyAnyCAD.GL_SHADER_BINARY_FORMATS
GL_NUM_SHADER_BINARY_FORMATS = _PyAnyCAD.GL_NUM_SHADER_BINARY_FORMATS
GL_LOW_FLOAT = _PyAnyCAD.GL_LOW_FLOAT
GL_MEDIUM_FLOAT = _PyAnyCAD.GL_MEDIUM_FLOAT
GL_HIGH_FLOAT = _PyAnyCAD.GL_HIGH_FLOAT
GL_LOW_INT = _PyAnyCAD.GL_LOW_INT
GL_MEDIUM_INT = _PyAnyCAD.GL_MEDIUM_INT
GL_HIGH_INT = _PyAnyCAD.GL_HIGH_INT
GL_FRAMEBUFFER = _PyAnyCAD.GL_FRAMEBUFFER
GL_RENDERBUFFER = _PyAnyCAD.GL_RENDERBUFFER
GL_RGBA4 = _PyAnyCAD.GL_RGBA4
GL_RGB5_A1 = _PyAnyCAD.GL_RGB5_A1
GL_RGB565 = _PyAnyCAD.GL_RGB565
GL_DEPTH_COMPONENT16 = _PyAnyCAD.GL_DEPTH_COMPONENT16
GL_STENCIL_INDEX8 = _PyAnyCAD.GL_STENCIL_INDEX8
GL_RENDERBUFFER_WIDTH = _PyAnyCAD.GL_RENDERBUFFER_WIDTH
GL_RENDERBUFFER_HEIGHT = _PyAnyCAD.GL_RENDERBUFFER_HEIGHT
GL_RENDERBUFFER_INTERNAL_FORMAT = _PyAnyCAD.GL_RENDERBUFFER_INTERNAL_FORMAT
GL_RENDERBUFFER_RED_SIZE = _PyAnyCAD.GL_RENDERBUFFER_RED_SIZE
GL_RENDERBUFFER_GREEN_SIZE = _PyAnyCAD.GL_RENDERBUFFER_GREEN_SIZE
GL_RENDERBUFFER_BLUE_SIZE = _PyAnyCAD.GL_RENDERBUFFER_BLUE_SIZE
GL_RENDERBUFFER_ALPHA_SIZE = _PyAnyCAD.GL_RENDERBUFFER_ALPHA_SIZE
GL_RENDERBUFFER_DEPTH_SIZE = _PyAnyCAD.GL_RENDERBUFFER_DEPTH_SIZE
GL_RENDERBUFFER_STENCIL_SIZE = _PyAnyCAD.GL_RENDERBUFFER_STENCIL_SIZE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
GL_COLOR_ATTACHMENT0 = _PyAnyCAD.GL_COLOR_ATTACHMENT0
GL_DEPTH_ATTACHMENT = _PyAnyCAD.GL_DEPTH_ATTACHMENT
GL_STENCIL_ATTACHMENT = _PyAnyCAD.GL_STENCIL_ATTACHMENT
GL_FRAMEBUFFER_COMPLETE = _PyAnyCAD.GL_FRAMEBUFFER_COMPLETE
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
GL_FRAMEBUFFER_UNSUPPORTED = _PyAnyCAD.GL_FRAMEBUFFER_UNSUPPORTED
GL_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_BINDING = _PyAnyCAD.GL_RENDERBUFFER_BINDING
GL_MAX_RENDERBUFFER_SIZE = _PyAnyCAD.GL_MAX_RENDERBUFFER_SIZE
GL_INVALID_FRAMEBUFFER_OPERATION = _PyAnyCAD.GL_INVALID_FRAMEBUFFER_OPERATION
GL_READ_BUFFER = _PyAnyCAD.GL_READ_BUFFER
GL_UNPACK_ROW_LENGTH = _PyAnyCAD.GL_UNPACK_ROW_LENGTH
GL_UNPACK_SKIP_ROWS = _PyAnyCAD.GL_UNPACK_SKIP_ROWS
GL_UNPACK_SKIP_PIXELS = _PyAnyCAD.GL_UNPACK_SKIP_PIXELS
GL_PACK_ROW_LENGTH = _PyAnyCAD.GL_PACK_ROW_LENGTH
GL_PACK_SKIP_ROWS = _PyAnyCAD.GL_PACK_SKIP_ROWS
GL_PACK_SKIP_PIXELS = _PyAnyCAD.GL_PACK_SKIP_PIXELS
GL_COLOR = _PyAnyCAD.GL_COLOR
GL_DEPTH = _PyAnyCAD.GL_DEPTH
GL_STENCIL = _PyAnyCAD.GL_STENCIL
GL_RED = _PyAnyCAD.GL_RED
GL_RGB8 = _PyAnyCAD.GL_RGB8
GL_RGBA8 = _PyAnyCAD.GL_RGBA8
GL_RGB10_A2 = _PyAnyCAD.GL_RGB10_A2
GL_TEXTURE_BINDING_3D = _PyAnyCAD.GL_TEXTURE_BINDING_3D
GL_UNPACK_SKIP_IMAGES = _PyAnyCAD.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _PyAnyCAD.GL_UNPACK_IMAGE_HEIGHT
GL_TEXTURE_3D = _PyAnyCAD.GL_TEXTURE_3D
GL_TEXTURE_WRAP_R = _PyAnyCAD.GL_TEXTURE_WRAP_R
GL_MAX_3D_TEXTURE_SIZE = _PyAnyCAD.GL_MAX_3D_TEXTURE_SIZE
GL_UNSIGNED_INT_2_10_10_10_REV = _PyAnyCAD.GL_UNSIGNED_INT_2_10_10_10_REV
GL_MAX_ELEMENTS_VERTICES = _PyAnyCAD.GL_MAX_ELEMENTS_VERTICES
GL_MAX_ELEMENTS_INDICES = _PyAnyCAD.GL_MAX_ELEMENTS_INDICES
GL_TEXTURE_MIN_LOD = _PyAnyCAD.GL_TEXTURE_MIN_LOD
GL_TEXTURE_MAX_LOD = _PyAnyCAD.GL_TEXTURE_MAX_LOD
GL_TEXTURE_BASE_LEVEL = _PyAnyCAD.GL_TEXTURE_BASE_LEVEL
GL_TEXTURE_MAX_LEVEL = _PyAnyCAD.GL_TEXTURE_MAX_LEVEL
GL_MIN = _PyAnyCAD.GL_MIN
GL_MAX = _PyAnyCAD.GL_MAX
GL_DEPTH_COMPONENT24 = _PyAnyCAD.GL_DEPTH_COMPONENT24
GL_MAX_TEXTURE_LOD_BIAS = _PyAnyCAD.GL_MAX_TEXTURE_LOD_BIAS
GL_TEXTURE_COMPARE_MODE = _PyAnyCAD.GL_TEXTURE_COMPARE_MODE
GL_TEXTURE_COMPARE_FUNC = _PyAnyCAD.GL_TEXTURE_COMPARE_FUNC
GL_CURRENT_QUERY = _PyAnyCAD.GL_CURRENT_QUERY
GL_QUERY_RESULT = _PyAnyCAD.GL_QUERY_RESULT
GL_QUERY_RESULT_AVAILABLE = _PyAnyCAD.GL_QUERY_RESULT_AVAILABLE
GL_BUFFER_MAPPED = _PyAnyCAD.GL_BUFFER_MAPPED
GL_BUFFER_MAP_POINTER = _PyAnyCAD.GL_BUFFER_MAP_POINTER
GL_STREAM_READ = _PyAnyCAD.GL_STREAM_READ
GL_STREAM_COPY = _PyAnyCAD.GL_STREAM_COPY
GL_STATIC_READ = _PyAnyCAD.GL_STATIC_READ
GL_STATIC_COPY = _PyAnyCAD.GL_STATIC_COPY
GL_DYNAMIC_READ = _PyAnyCAD.GL_DYNAMIC_READ
GL_DYNAMIC_COPY = _PyAnyCAD.GL_DYNAMIC_COPY
GL_MAX_DRAW_BUFFERS = _PyAnyCAD.GL_MAX_DRAW_BUFFERS
GL_DRAW_BUFFER0 = _PyAnyCAD.GL_DRAW_BUFFER0
GL_DRAW_BUFFER1 = _PyAnyCAD.GL_DRAW_BUFFER1
GL_DRAW_BUFFER2 = _PyAnyCAD.GL_DRAW_BUFFER2
GL_DRAW_BUFFER3 = _PyAnyCAD.GL_DRAW_BUFFER3
GL_DRAW_BUFFER4 = _PyAnyCAD.GL_DRAW_BUFFER4
GL_DRAW_BUFFER5 = _PyAnyCAD.GL_DRAW_BUFFER5
GL_DRAW_BUFFER6 = _PyAnyCAD.GL_DRAW_BUFFER6
GL_DRAW_BUFFER7 = _PyAnyCAD.GL_DRAW_BUFFER7
GL_DRAW_BUFFER8 = _PyAnyCAD.GL_DRAW_BUFFER8
GL_DRAW_BUFFER9 = _PyAnyCAD.GL_DRAW_BUFFER9
GL_DRAW_BUFFER10 = _PyAnyCAD.GL_DRAW_BUFFER10
GL_DRAW_BUFFER11 = _PyAnyCAD.GL_DRAW_BUFFER11
GL_DRAW_BUFFER12 = _PyAnyCAD.GL_DRAW_BUFFER12
GL_DRAW_BUFFER13 = _PyAnyCAD.GL_DRAW_BUFFER13
GL_DRAW_BUFFER14 = _PyAnyCAD.GL_DRAW_BUFFER14
GL_DRAW_BUFFER15 = _PyAnyCAD.GL_DRAW_BUFFER15
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
GL_MAX_VERTEX_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_COMPONENTS
GL_SAMPLER_3D = _PyAnyCAD.GL_SAMPLER_3D
GL_SAMPLER_2D_SHADOW = _PyAnyCAD.GL_SAMPLER_2D_SHADOW
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = _PyAnyCAD.GL_FRAGMENT_SHADER_DERIVATIVE_HINT
GL_PIXEL_PACK_BUFFER = _PyAnyCAD.GL_PIXEL_PACK_BUFFER
GL_PIXEL_UNPACK_BUFFER = _PyAnyCAD.GL_PIXEL_UNPACK_BUFFER
GL_PIXEL_PACK_BUFFER_BINDING = _PyAnyCAD.GL_PIXEL_PACK_BUFFER_BINDING
GL_PIXEL_UNPACK_BUFFER_BINDING = _PyAnyCAD.GL_PIXEL_UNPACK_BUFFER_BINDING
GL_FLOAT_MAT2x3 = _PyAnyCAD.GL_FLOAT_MAT2x3
GL_FLOAT_MAT2x4 = _PyAnyCAD.GL_FLOAT_MAT2x4
GL_FLOAT_MAT3x2 = _PyAnyCAD.GL_FLOAT_MAT3x2
GL_FLOAT_MAT3x4 = _PyAnyCAD.GL_FLOAT_MAT3x4
GL_FLOAT_MAT4x2 = _PyAnyCAD.GL_FLOAT_MAT4x2
GL_FLOAT_MAT4x3 = _PyAnyCAD.GL_FLOAT_MAT4x3
GL_SRGB = _PyAnyCAD.GL_SRGB
GL_SRGB8 = _PyAnyCAD.GL_SRGB8
GL_SRGB8_ALPHA8 = _PyAnyCAD.GL_SRGB8_ALPHA8
GL_COMPARE_REF_TO_TEXTURE = _PyAnyCAD.GL_COMPARE_REF_TO_TEXTURE
GL_MAJOR_VERSION = _PyAnyCAD.GL_MAJOR_VERSION
GL_MINOR_VERSION = _PyAnyCAD.GL_MINOR_VERSION
GL_NUM_EXTENSIONS = _PyAnyCAD.GL_NUM_EXTENSIONS
GL_RGBA32F = _PyAnyCAD.GL_RGBA32F
GL_RGB32F = _PyAnyCAD.GL_RGB32F
GL_RGBA16F = _PyAnyCAD.GL_RGBA16F
GL_RGB16F = _PyAnyCAD.GL_RGB16F
GL_VERTEX_ATTRIB_ARRAY_INTEGER = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_INTEGER
GL_MAX_ARRAY_TEXTURE_LAYERS = _PyAnyCAD.GL_MAX_ARRAY_TEXTURE_LAYERS
GL_MIN_PROGRAM_TEXEL_OFFSET = _PyAnyCAD.GL_MIN_PROGRAM_TEXEL_OFFSET
GL_MAX_PROGRAM_TEXEL_OFFSET = _PyAnyCAD.GL_MAX_PROGRAM_TEXEL_OFFSET
GL_MAX_VARYING_COMPONENTS = _PyAnyCAD.GL_MAX_VARYING_COMPONENTS
GL_TEXTURE_2D_ARRAY = _PyAnyCAD.GL_TEXTURE_2D_ARRAY
GL_TEXTURE_BINDING_2D_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_2D_ARRAY
GL_R11F_G11F_B10F = _PyAnyCAD.GL_R11F_G11F_B10F
GL_UNSIGNED_INT_10F_11F_11F_REV = _PyAnyCAD.GL_UNSIGNED_INT_10F_11F_11F_REV
GL_RGB9_E5 = _PyAnyCAD.GL_RGB9_E5
GL_UNSIGNED_INT_5_9_9_9_REV = _PyAnyCAD.GL_UNSIGNED_INT_5_9_9_9_REV
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_MODE
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
GL_TRANSFORM_FEEDBACK_VARYINGS = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYINGS
GL_TRANSFORM_FEEDBACK_BUFFER_START = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_START
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
GL_RASTERIZER_DISCARD = _PyAnyCAD.GL_RASTERIZER_DISCARD
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = _PyAnyCAD.GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
GL_INTERLEAVED_ATTRIBS = _PyAnyCAD.GL_INTERLEAVED_ATTRIBS
GL_SEPARATE_ATTRIBS = _PyAnyCAD.GL_SEPARATE_ATTRIBS
GL_TRANSFORM_FEEDBACK_BUFFER = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
GL_RGBA32UI = _PyAnyCAD.GL_RGBA32UI
GL_RGB32UI = _PyAnyCAD.GL_RGB32UI
GL_RGBA16UI = _PyAnyCAD.GL_RGBA16UI
GL_RGB16UI = _PyAnyCAD.GL_RGB16UI
GL_RGBA8UI = _PyAnyCAD.GL_RGBA8UI
GL_RGB8UI = _PyAnyCAD.GL_RGB8UI
GL_RGBA32I = _PyAnyCAD.GL_RGBA32I
GL_RGB32I = _PyAnyCAD.GL_RGB32I
GL_RGBA16I = _PyAnyCAD.GL_RGBA16I
GL_RGB16I = _PyAnyCAD.GL_RGB16I
GL_RGBA8I = _PyAnyCAD.GL_RGBA8I
GL_RGB8I = _PyAnyCAD.GL_RGB8I
GL_RED_INTEGER = _PyAnyCAD.GL_RED_INTEGER
GL_RGB_INTEGER = _PyAnyCAD.GL_RGB_INTEGER
GL_RGBA_INTEGER = _PyAnyCAD.GL_RGBA_INTEGER
GL_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_SAMPLER_2D_ARRAY
GL_SAMPLER_2D_ARRAY_SHADOW = _PyAnyCAD.GL_SAMPLER_2D_ARRAY_SHADOW
GL_SAMPLER_CUBE_SHADOW = _PyAnyCAD.GL_SAMPLER_CUBE_SHADOW
GL_UNSIGNED_INT_VEC2 = _PyAnyCAD.GL_UNSIGNED_INT_VEC2
GL_UNSIGNED_INT_VEC3 = _PyAnyCAD.GL_UNSIGNED_INT_VEC3
GL_UNSIGNED_INT_VEC4 = _PyAnyCAD.GL_UNSIGNED_INT_VEC4
GL_INT_SAMPLER_2D = _PyAnyCAD.GL_INT_SAMPLER_2D
GL_INT_SAMPLER_3D = _PyAnyCAD.GL_INT_SAMPLER_3D
GL_INT_SAMPLER_CUBE = _PyAnyCAD.GL_INT_SAMPLER_CUBE
GL_INT_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_2D_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D
GL_UNSIGNED_INT_SAMPLER_3D = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_3D
GL_UNSIGNED_INT_SAMPLER_CUBE = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_CUBE
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
GL_BUFFER_ACCESS_FLAGS = _PyAnyCAD.GL_BUFFER_ACCESS_FLAGS
GL_BUFFER_MAP_LENGTH = _PyAnyCAD.GL_BUFFER_MAP_LENGTH
GL_BUFFER_MAP_OFFSET = _PyAnyCAD.GL_BUFFER_MAP_OFFSET
GL_DEPTH_COMPONENT32F = _PyAnyCAD.GL_DEPTH_COMPONENT32F
GL_DEPTH32F_STENCIL8 = _PyAnyCAD.GL_DEPTH32F_STENCIL8
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = _PyAnyCAD.GL_FLOAT_32_UNSIGNED_INT_24_8_REV
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
GL_FRAMEBUFFER_DEFAULT = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT
GL_FRAMEBUFFER_UNDEFINED = _PyAnyCAD.GL_FRAMEBUFFER_UNDEFINED
GL_DEPTH_STENCIL_ATTACHMENT = _PyAnyCAD.GL_DEPTH_STENCIL_ATTACHMENT
GL_DEPTH_STENCIL = _PyAnyCAD.GL_DEPTH_STENCIL
GL_UNSIGNED_INT_24_8 = _PyAnyCAD.GL_UNSIGNED_INT_24_8
GL_DEPTH24_STENCIL8 = _PyAnyCAD.GL_DEPTH24_STENCIL8
GL_UNSIGNED_NORMALIZED = _PyAnyCAD.GL_UNSIGNED_NORMALIZED
GL_DRAW_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_DRAW_FRAMEBUFFER_BINDING
GL_READ_FRAMEBUFFER = _PyAnyCAD.GL_READ_FRAMEBUFFER
GL_DRAW_FRAMEBUFFER = _PyAnyCAD.GL_DRAW_FRAMEBUFFER
GL_READ_FRAMEBUFFER_BINDING = _PyAnyCAD.GL_READ_FRAMEBUFFER_BINDING
GL_RENDERBUFFER_SAMPLES = _PyAnyCAD.GL_RENDERBUFFER_SAMPLES
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
GL_MAX_COLOR_ATTACHMENTS = _PyAnyCAD.GL_MAX_COLOR_ATTACHMENTS
GL_COLOR_ATTACHMENT1 = _PyAnyCAD.GL_COLOR_ATTACHMENT1
GL_COLOR_ATTACHMENT2 = _PyAnyCAD.GL_COLOR_ATTACHMENT2
GL_COLOR_ATTACHMENT3 = _PyAnyCAD.GL_COLOR_ATTACHMENT3
GL_COLOR_ATTACHMENT4 = _PyAnyCAD.GL_COLOR_ATTACHMENT4
GL_COLOR_ATTACHMENT5 = _PyAnyCAD.GL_COLOR_ATTACHMENT5
GL_COLOR_ATTACHMENT6 = _PyAnyCAD.GL_COLOR_ATTACHMENT6
GL_COLOR_ATTACHMENT7 = _PyAnyCAD.GL_COLOR_ATTACHMENT7
GL_COLOR_ATTACHMENT8 = _PyAnyCAD.GL_COLOR_ATTACHMENT8
GL_COLOR_ATTACHMENT9 = _PyAnyCAD.GL_COLOR_ATTACHMENT9
GL_COLOR_ATTACHMENT10 = _PyAnyCAD.GL_COLOR_ATTACHMENT10
GL_COLOR_ATTACHMENT11 = _PyAnyCAD.GL_COLOR_ATTACHMENT11
GL_COLOR_ATTACHMENT12 = _PyAnyCAD.GL_COLOR_ATTACHMENT12
GL_COLOR_ATTACHMENT13 = _PyAnyCAD.GL_COLOR_ATTACHMENT13
GL_COLOR_ATTACHMENT14 = _PyAnyCAD.GL_COLOR_ATTACHMENT14
GL_COLOR_ATTACHMENT15 = _PyAnyCAD.GL_COLOR_ATTACHMENT15
GL_COLOR_ATTACHMENT16 = _PyAnyCAD.GL_COLOR_ATTACHMENT16
GL_COLOR_ATTACHMENT17 = _PyAnyCAD.GL_COLOR_ATTACHMENT17
GL_COLOR_ATTACHMENT18 = _PyAnyCAD.GL_COLOR_ATTACHMENT18
GL_COLOR_ATTACHMENT19 = _PyAnyCAD.GL_COLOR_ATTACHMENT19
GL_COLOR_ATTACHMENT20 = _PyAnyCAD.GL_COLOR_ATTACHMENT20
GL_COLOR_ATTACHMENT21 = _PyAnyCAD.GL_COLOR_ATTACHMENT21
GL_COLOR_ATTACHMENT22 = _PyAnyCAD.GL_COLOR_ATTACHMENT22
GL_COLOR_ATTACHMENT23 = _PyAnyCAD.GL_COLOR_ATTACHMENT23
GL_COLOR_ATTACHMENT24 = _PyAnyCAD.GL_COLOR_ATTACHMENT24
GL_COLOR_ATTACHMENT25 = _PyAnyCAD.GL_COLOR_ATTACHMENT25
GL_COLOR_ATTACHMENT26 = _PyAnyCAD.GL_COLOR_ATTACHMENT26
GL_COLOR_ATTACHMENT27 = _PyAnyCAD.GL_COLOR_ATTACHMENT27
GL_COLOR_ATTACHMENT28 = _PyAnyCAD.GL_COLOR_ATTACHMENT28
GL_COLOR_ATTACHMENT29 = _PyAnyCAD.GL_COLOR_ATTACHMENT29
GL_COLOR_ATTACHMENT30 = _PyAnyCAD.GL_COLOR_ATTACHMENT30
GL_COLOR_ATTACHMENT31 = _PyAnyCAD.GL_COLOR_ATTACHMENT31
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
GL_MAX_SAMPLES = _PyAnyCAD.GL_MAX_SAMPLES
GL_HALF_FLOAT = _PyAnyCAD.GL_HALF_FLOAT
GL_MAP_READ_BIT = _PyAnyCAD.GL_MAP_READ_BIT
GL_MAP_WRITE_BIT = _PyAnyCAD.GL_MAP_WRITE_BIT
GL_MAP_INVALIDATE_RANGE_BIT = _PyAnyCAD.GL_MAP_INVALIDATE_RANGE_BIT
GL_MAP_INVALIDATE_BUFFER_BIT = _PyAnyCAD.GL_MAP_INVALIDATE_BUFFER_BIT
GL_MAP_FLUSH_EXPLICIT_BIT = _PyAnyCAD.GL_MAP_FLUSH_EXPLICIT_BIT
GL_MAP_UNSYNCHRONIZED_BIT = _PyAnyCAD.GL_MAP_UNSYNCHRONIZED_BIT
GL_RG = _PyAnyCAD.GL_RG
GL_RG_INTEGER = _PyAnyCAD.GL_RG_INTEGER
GL_R8 = _PyAnyCAD.GL_R8
GL_RG8 = _PyAnyCAD.GL_RG8
GL_R16F = _PyAnyCAD.GL_R16F
GL_R32F = _PyAnyCAD.GL_R32F
GL_RG16F = _PyAnyCAD.GL_RG16F
GL_RG32F = _PyAnyCAD.GL_RG32F
GL_R8I = _PyAnyCAD.GL_R8I
GL_R8UI = _PyAnyCAD.GL_R8UI
GL_R16I = _PyAnyCAD.GL_R16I
GL_R16UI = _PyAnyCAD.GL_R16UI
GL_R32I = _PyAnyCAD.GL_R32I
GL_R32UI = _PyAnyCAD.GL_R32UI
GL_RG8I = _PyAnyCAD.GL_RG8I
GL_RG8UI = _PyAnyCAD.GL_RG8UI
GL_RG16I = _PyAnyCAD.GL_RG16I
GL_RG16UI = _PyAnyCAD.GL_RG16UI
GL_RG32I = _PyAnyCAD.GL_RG32I
GL_RG32UI = _PyAnyCAD.GL_RG32UI
GL_VERTEX_ARRAY_BINDING = _PyAnyCAD.GL_VERTEX_ARRAY_BINDING
GL_R8_SNORM = _PyAnyCAD.GL_R8_SNORM
GL_RG8_SNORM = _PyAnyCAD.GL_RG8_SNORM
GL_RGB8_SNORM = _PyAnyCAD.GL_RGB8_SNORM
GL_RGBA8_SNORM = _PyAnyCAD.GL_RGBA8_SNORM
GL_SIGNED_NORMALIZED = _PyAnyCAD.GL_SIGNED_NORMALIZED
GL_PRIMITIVE_RESTART_FIXED_INDEX = _PyAnyCAD.GL_PRIMITIVE_RESTART_FIXED_INDEX
GL_COPY_READ_BUFFER = _PyAnyCAD.GL_COPY_READ_BUFFER
GL_COPY_WRITE_BUFFER = _PyAnyCAD.GL_COPY_WRITE_BUFFER
GL_COPY_READ_BUFFER_BINDING = _PyAnyCAD.GL_COPY_READ_BUFFER_BINDING
GL_COPY_WRITE_BUFFER_BINDING = _PyAnyCAD.GL_COPY_WRITE_BUFFER_BINDING
GL_UNIFORM_BUFFER = _PyAnyCAD.GL_UNIFORM_BUFFER
GL_UNIFORM_BUFFER_BINDING = _PyAnyCAD.GL_UNIFORM_BUFFER_BINDING
GL_UNIFORM_BUFFER_START = _PyAnyCAD.GL_UNIFORM_BUFFER_START
GL_UNIFORM_BUFFER_SIZE = _PyAnyCAD.GL_UNIFORM_BUFFER_SIZE
GL_MAX_VERTEX_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_VERTEX_UNIFORM_BLOCKS
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_FRAGMENT_UNIFORM_BLOCKS
GL_MAX_COMBINED_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_COMBINED_UNIFORM_BLOCKS
GL_MAX_UNIFORM_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_UNIFORM_BUFFER_BINDINGS
GL_MAX_UNIFORM_BLOCK_SIZE = _PyAnyCAD.GL_MAX_UNIFORM_BLOCK_SIZE
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = _PyAnyCAD.GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
GL_ACTIVE_UNIFORM_BLOCKS = _PyAnyCAD.GL_ACTIVE_UNIFORM_BLOCKS
GL_UNIFORM_TYPE = _PyAnyCAD.GL_UNIFORM_TYPE
GL_UNIFORM_SIZE = _PyAnyCAD.GL_UNIFORM_SIZE
GL_UNIFORM_NAME_LENGTH = _PyAnyCAD.GL_UNIFORM_NAME_LENGTH
GL_UNIFORM_BLOCK_INDEX = _PyAnyCAD.GL_UNIFORM_BLOCK_INDEX
GL_UNIFORM_OFFSET = _PyAnyCAD.GL_UNIFORM_OFFSET
GL_UNIFORM_ARRAY_STRIDE = _PyAnyCAD.GL_UNIFORM_ARRAY_STRIDE
GL_UNIFORM_MATRIX_STRIDE = _PyAnyCAD.GL_UNIFORM_MATRIX_STRIDE
GL_UNIFORM_IS_ROW_MAJOR = _PyAnyCAD.GL_UNIFORM_IS_ROW_MAJOR
GL_UNIFORM_BLOCK_BINDING = _PyAnyCAD.GL_UNIFORM_BLOCK_BINDING
GL_UNIFORM_BLOCK_DATA_SIZE = _PyAnyCAD.GL_UNIFORM_BLOCK_DATA_SIZE
GL_UNIFORM_BLOCK_NAME_LENGTH = _PyAnyCAD.GL_UNIFORM_BLOCK_NAME_LENGTH
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = _PyAnyCAD.GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = _PyAnyCAD.GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = _PyAnyCAD.GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = _PyAnyCAD.GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
GL_INVALID_INDEX = _PyAnyCAD.GL_INVALID_INDEX
GL_MAX_VERTEX_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_VERTEX_OUTPUT_COMPONENTS
GL_MAX_FRAGMENT_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_FRAGMENT_INPUT_COMPONENTS
GL_MAX_SERVER_WAIT_TIMEOUT = _PyAnyCAD.GL_MAX_SERVER_WAIT_TIMEOUT
GL_OBJECT_TYPE = _PyAnyCAD.GL_OBJECT_TYPE
GL_SYNC_CONDITION = _PyAnyCAD.GL_SYNC_CONDITION
GL_SYNC_STATUS = _PyAnyCAD.GL_SYNC_STATUS
GL_SYNC_FLAGS = _PyAnyCAD.GL_SYNC_FLAGS
GL_SYNC_FENCE = _PyAnyCAD.GL_SYNC_FENCE
GL_SYNC_GPU_COMMANDS_COMPLETE = _PyAnyCAD.GL_SYNC_GPU_COMMANDS_COMPLETE
GL_UNSIGNALED = _PyAnyCAD.GL_UNSIGNALED
GL_SIGNALED = _PyAnyCAD.GL_SIGNALED
GL_ALREADY_SIGNALED = _PyAnyCAD.GL_ALREADY_SIGNALED
GL_TIMEOUT_EXPIRED = _PyAnyCAD.GL_TIMEOUT_EXPIRED
GL_CONDITION_SATISFIED = _PyAnyCAD.GL_CONDITION_SATISFIED
GL_WAIT_FAILED = _PyAnyCAD.GL_WAIT_FAILED
GL_SYNC_FLUSH_COMMANDS_BIT = _PyAnyCAD.GL_SYNC_FLUSH_COMMANDS_BIT
GL_TIMEOUT_IGNORED = _PyAnyCAD.GL_TIMEOUT_IGNORED
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_DIVISOR
GL_ANY_SAMPLES_PASSED = _PyAnyCAD.GL_ANY_SAMPLES_PASSED
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = _PyAnyCAD.GL_ANY_SAMPLES_PASSED_CONSERVATIVE
GL_SAMPLER_BINDING = _PyAnyCAD.GL_SAMPLER_BINDING
GL_RGB10_A2UI = _PyAnyCAD.GL_RGB10_A2UI
GL_TEXTURE_SWIZZLE_R = _PyAnyCAD.GL_TEXTURE_SWIZZLE_R
GL_TEXTURE_SWIZZLE_G = _PyAnyCAD.GL_TEXTURE_SWIZZLE_G
GL_TEXTURE_SWIZZLE_B = _PyAnyCAD.GL_TEXTURE_SWIZZLE_B
GL_TEXTURE_SWIZZLE_A = _PyAnyCAD.GL_TEXTURE_SWIZZLE_A
GL_GREEN = _PyAnyCAD.GL_GREEN
GL_BLUE = _PyAnyCAD.GL_BLUE
GL_INT_2_10_10_10_REV = _PyAnyCAD.GL_INT_2_10_10_10_REV
GL_TRANSFORM_FEEDBACK = _PyAnyCAD.GL_TRANSFORM_FEEDBACK
GL_TRANSFORM_FEEDBACK_PAUSED = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_PAUSED
GL_TRANSFORM_FEEDBACK_ACTIVE = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_ACTIVE
GL_TRANSFORM_FEEDBACK_BINDING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BINDING
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = _PyAnyCAD.GL_PROGRAM_BINARY_RETRIEVABLE_HINT
GL_PROGRAM_BINARY_LENGTH = _PyAnyCAD.GL_PROGRAM_BINARY_LENGTH
GL_NUM_PROGRAM_BINARY_FORMATS = _PyAnyCAD.GL_NUM_PROGRAM_BINARY_FORMATS
GL_PROGRAM_BINARY_FORMATS = _PyAnyCAD.GL_PROGRAM_BINARY_FORMATS
GL_COMPRESSED_R11_EAC = _PyAnyCAD.GL_COMPRESSED_R11_EAC
GL_COMPRESSED_SIGNED_R11_EAC = _PyAnyCAD.GL_COMPRESSED_SIGNED_R11_EAC
GL_COMPRESSED_RG11_EAC = _PyAnyCAD.GL_COMPRESSED_RG11_EAC
GL_COMPRESSED_SIGNED_RG11_EAC = _PyAnyCAD.GL_COMPRESSED_SIGNED_RG11_EAC
GL_COMPRESSED_RGB8_ETC2 = _PyAnyCAD.GL_COMPRESSED_RGB8_ETC2
GL_COMPRESSED_SRGB8_ETC2 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ETC2
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _PyAnyCAD.GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = _PyAnyCAD.GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
GL_COMPRESSED_RGBA8_ETC2_EAC = _PyAnyCAD.GL_COMPRESSED_RGBA8_ETC2_EAC
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
GL_TEXTURE_IMMUTABLE_FORMAT = _PyAnyCAD.GL_TEXTURE_IMMUTABLE_FORMAT
GL_MAX_ELEMENT_INDEX = _PyAnyCAD.GL_MAX_ELEMENT_INDEX
GL_NUM_SAMPLE_COUNTS = _PyAnyCAD.GL_NUM_SAMPLE_COUNTS
GL_TEXTURE_IMMUTABLE_LEVELS = _PyAnyCAD.GL_TEXTURE_IMMUTABLE_LEVELS
GL_COMPUTE_SHADER = _PyAnyCAD.GL_COMPUTE_SHADER
GL_MAX_COMPUTE_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_COMPUTE_UNIFORM_BLOCKS
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
GL_MAX_COMPUTE_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_COMPUTE_IMAGE_UNIFORMS
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = _PyAnyCAD.GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
GL_MAX_COMPUTE_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMPUTE_UNIFORM_COMPONENTS
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
GL_MAX_COMPUTE_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_COMPUTE_ATOMIC_COUNTERS
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
GL_MAX_COMPUTE_WORK_GROUP_COUNT = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_COUNT
GL_MAX_COMPUTE_WORK_GROUP_SIZE = _PyAnyCAD.GL_MAX_COMPUTE_WORK_GROUP_SIZE
GL_COMPUTE_WORK_GROUP_SIZE = _PyAnyCAD.GL_COMPUTE_WORK_GROUP_SIZE
GL_DISPATCH_INDIRECT_BUFFER = _PyAnyCAD.GL_DISPATCH_INDIRECT_BUFFER
GL_DISPATCH_INDIRECT_BUFFER_BINDING = _PyAnyCAD.GL_DISPATCH_INDIRECT_BUFFER_BINDING
GL_COMPUTE_SHADER_BIT = _PyAnyCAD.GL_COMPUTE_SHADER_BIT
GL_DRAW_INDIRECT_BUFFER = _PyAnyCAD.GL_DRAW_INDIRECT_BUFFER
GL_DRAW_INDIRECT_BUFFER_BINDING = _PyAnyCAD.GL_DRAW_INDIRECT_BUFFER_BINDING
GL_MAX_UNIFORM_LOCATIONS = _PyAnyCAD.GL_MAX_UNIFORM_LOCATIONS
GL_FRAMEBUFFER_DEFAULT_WIDTH = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_WIDTH
GL_FRAMEBUFFER_DEFAULT_HEIGHT = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_HEIGHT
GL_FRAMEBUFFER_DEFAULT_SAMPLES = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_SAMPLES
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
GL_MAX_FRAMEBUFFER_WIDTH = _PyAnyCAD.GL_MAX_FRAMEBUFFER_WIDTH
GL_MAX_FRAMEBUFFER_HEIGHT = _PyAnyCAD.GL_MAX_FRAMEBUFFER_HEIGHT
GL_MAX_FRAMEBUFFER_SAMPLES = _PyAnyCAD.GL_MAX_FRAMEBUFFER_SAMPLES
GL_UNIFORM = _PyAnyCAD.GL_UNIFORM
GL_UNIFORM_BLOCK = _PyAnyCAD.GL_UNIFORM_BLOCK
GL_PROGRAM_INPUT = _PyAnyCAD.GL_PROGRAM_INPUT
GL_PROGRAM_OUTPUT = _PyAnyCAD.GL_PROGRAM_OUTPUT
GL_BUFFER_VARIABLE = _PyAnyCAD.GL_BUFFER_VARIABLE
GL_SHADER_STORAGE_BLOCK = _PyAnyCAD.GL_SHADER_STORAGE_BLOCK
GL_ATOMIC_COUNTER_BUFFER = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER
GL_TRANSFORM_FEEDBACK_VARYING = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_VARYING
GL_ACTIVE_RESOURCES = _PyAnyCAD.GL_ACTIVE_RESOURCES
GL_MAX_NAME_LENGTH = _PyAnyCAD.GL_MAX_NAME_LENGTH
GL_MAX_NUM_ACTIVE_VARIABLES = _PyAnyCAD.GL_MAX_NUM_ACTIVE_VARIABLES
GL_NAME_LENGTH = _PyAnyCAD.GL_NAME_LENGTH
GL_TYPE = _PyAnyCAD.GL_TYPE
GL_ARRAY_SIZE = _PyAnyCAD.GL_ARRAY_SIZE
GL_OFFSET = _PyAnyCAD.GL_OFFSET
GL_BLOCK_INDEX = _PyAnyCAD.GL_BLOCK_INDEX
GL_ARRAY_STRIDE = _PyAnyCAD.GL_ARRAY_STRIDE
GL_MATRIX_STRIDE = _PyAnyCAD.GL_MATRIX_STRIDE
GL_IS_ROW_MAJOR = _PyAnyCAD.GL_IS_ROW_MAJOR
GL_ATOMIC_COUNTER_BUFFER_INDEX = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_INDEX
GL_BUFFER_BINDING = _PyAnyCAD.GL_BUFFER_BINDING
GL_BUFFER_DATA_SIZE = _PyAnyCAD.GL_BUFFER_DATA_SIZE
GL_NUM_ACTIVE_VARIABLES = _PyAnyCAD.GL_NUM_ACTIVE_VARIABLES
GL_ACTIVE_VARIABLES = _PyAnyCAD.GL_ACTIVE_VARIABLES
GL_REFERENCED_BY_VERTEX_SHADER = _PyAnyCAD.GL_REFERENCED_BY_VERTEX_SHADER
GL_REFERENCED_BY_FRAGMENT_SHADER = _PyAnyCAD.GL_REFERENCED_BY_FRAGMENT_SHADER
GL_REFERENCED_BY_COMPUTE_SHADER = _PyAnyCAD.GL_REFERENCED_BY_COMPUTE_SHADER
GL_TOP_LEVEL_ARRAY_SIZE = _PyAnyCAD.GL_TOP_LEVEL_ARRAY_SIZE
GL_TOP_LEVEL_ARRAY_STRIDE = _PyAnyCAD.GL_TOP_LEVEL_ARRAY_STRIDE
GL_LOCATION = _PyAnyCAD.GL_LOCATION
GL_VERTEX_SHADER_BIT = _PyAnyCAD.GL_VERTEX_SHADER_BIT
GL_FRAGMENT_SHADER_BIT = _PyAnyCAD.GL_FRAGMENT_SHADER_BIT
GL_ALL_SHADER_BITS = _PyAnyCAD.GL_ALL_SHADER_BITS
GL_PROGRAM_SEPARABLE = _PyAnyCAD.GL_PROGRAM_SEPARABLE
GL_ACTIVE_PROGRAM = _PyAnyCAD.GL_ACTIVE_PROGRAM
GL_PROGRAM_PIPELINE_BINDING = _PyAnyCAD.GL_PROGRAM_PIPELINE_BINDING
GL_ATOMIC_COUNTER_BUFFER_BINDING = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_BINDING
GL_ATOMIC_COUNTER_BUFFER_START = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_START
GL_ATOMIC_COUNTER_BUFFER_SIZE = _PyAnyCAD.GL_ATOMIC_COUNTER_BUFFER_SIZE
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
GL_MAX_VERTEX_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_VERTEX_ATOMIC_COUNTERS
GL_MAX_FRAGMENT_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_FRAGMENT_ATOMIC_COUNTERS
GL_MAX_COMBINED_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_COMBINED_ATOMIC_COUNTERS
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = _PyAnyCAD.GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
GL_UNSIGNED_INT_ATOMIC_COUNTER = _PyAnyCAD.GL_UNSIGNED_INT_ATOMIC_COUNTER
GL_MAX_IMAGE_UNITS = _PyAnyCAD.GL_MAX_IMAGE_UNITS
GL_MAX_VERTEX_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_VERTEX_IMAGE_UNIFORMS
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_FRAGMENT_IMAGE_UNIFORMS
GL_MAX_COMBINED_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_COMBINED_IMAGE_UNIFORMS
GL_IMAGE_BINDING_NAME = _PyAnyCAD.GL_IMAGE_BINDING_NAME
GL_IMAGE_BINDING_LEVEL = _PyAnyCAD.GL_IMAGE_BINDING_LEVEL
GL_IMAGE_BINDING_LAYERED = _PyAnyCAD.GL_IMAGE_BINDING_LAYERED
GL_IMAGE_BINDING_LAYER = _PyAnyCAD.GL_IMAGE_BINDING_LAYER
GL_IMAGE_BINDING_ACCESS = _PyAnyCAD.GL_IMAGE_BINDING_ACCESS
GL_IMAGE_BINDING_FORMAT = _PyAnyCAD.GL_IMAGE_BINDING_FORMAT
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = _PyAnyCAD.GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
GL_ELEMENT_ARRAY_BARRIER_BIT = _PyAnyCAD.GL_ELEMENT_ARRAY_BARRIER_BIT
GL_UNIFORM_BARRIER_BIT = _PyAnyCAD.GL_UNIFORM_BARRIER_BIT
GL_TEXTURE_FETCH_BARRIER_BIT = _PyAnyCAD.GL_TEXTURE_FETCH_BARRIER_BIT
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = _PyAnyCAD.GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
GL_COMMAND_BARRIER_BIT = _PyAnyCAD.GL_COMMAND_BARRIER_BIT
GL_PIXEL_BUFFER_BARRIER_BIT = _PyAnyCAD.GL_PIXEL_BUFFER_BARRIER_BIT
GL_TEXTURE_UPDATE_BARRIER_BIT = _PyAnyCAD.GL_TEXTURE_UPDATE_BARRIER_BIT
GL_BUFFER_UPDATE_BARRIER_BIT = _PyAnyCAD.GL_BUFFER_UPDATE_BARRIER_BIT
GL_FRAMEBUFFER_BARRIER_BIT = _PyAnyCAD.GL_FRAMEBUFFER_BARRIER_BIT
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = _PyAnyCAD.GL_TRANSFORM_FEEDBACK_BARRIER_BIT
GL_ATOMIC_COUNTER_BARRIER_BIT = _PyAnyCAD.GL_ATOMIC_COUNTER_BARRIER_BIT
GL_ALL_BARRIER_BITS = _PyAnyCAD.GL_ALL_BARRIER_BITS
GL_IMAGE_2D = _PyAnyCAD.GL_IMAGE_2D
GL_IMAGE_3D = _PyAnyCAD.GL_IMAGE_3D
GL_IMAGE_CUBE = _PyAnyCAD.GL_IMAGE_CUBE
GL_IMAGE_2D_ARRAY = _PyAnyCAD.GL_IMAGE_2D_ARRAY
GL_INT_IMAGE_2D = _PyAnyCAD.GL_INT_IMAGE_2D
GL_INT_IMAGE_3D = _PyAnyCAD.GL_INT_IMAGE_3D
GL_INT_IMAGE_CUBE = _PyAnyCAD.GL_INT_IMAGE_CUBE
GL_INT_IMAGE_2D_ARRAY = _PyAnyCAD.GL_INT_IMAGE_2D_ARRAY
GL_UNSIGNED_INT_IMAGE_2D = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_2D
GL_UNSIGNED_INT_IMAGE_3D = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_3D
GL_UNSIGNED_INT_IMAGE_CUBE = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_CUBE
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_2D_ARRAY
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = _PyAnyCAD.GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
GL_READ_ONLY = _PyAnyCAD.GL_READ_ONLY
GL_WRITE_ONLY = _PyAnyCAD.GL_WRITE_ONLY
GL_READ_WRITE = _PyAnyCAD.GL_READ_WRITE
GL_SHADER_STORAGE_BUFFER = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER
GL_SHADER_STORAGE_BUFFER_BINDING = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_BINDING
GL_SHADER_STORAGE_BUFFER_START = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_START
GL_SHADER_STORAGE_BUFFER_SIZE = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_SIZE
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = _PyAnyCAD.GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
GL_MAX_SHADER_STORAGE_BLOCK_SIZE = _PyAnyCAD.GL_MAX_SHADER_STORAGE_BLOCK_SIZE
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
GL_SHADER_STORAGE_BARRIER_BIT = _PyAnyCAD.GL_SHADER_STORAGE_BARRIER_BIT
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = _PyAnyCAD.GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
GL_DEPTH_STENCIL_TEXTURE_MODE = _PyAnyCAD.GL_DEPTH_STENCIL_TEXTURE_MODE
GL_STENCIL_INDEX = _PyAnyCAD.GL_STENCIL_INDEX
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = _PyAnyCAD.GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = _PyAnyCAD.GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
GL_SAMPLE_POSITION = _PyAnyCAD.GL_SAMPLE_POSITION
GL_SAMPLE_MASK = _PyAnyCAD.GL_SAMPLE_MASK
GL_SAMPLE_MASK_VALUE = _PyAnyCAD.GL_SAMPLE_MASK_VALUE
GL_TEXTURE_2D_MULTISAMPLE = _PyAnyCAD.GL_TEXTURE_2D_MULTISAMPLE
GL_MAX_SAMPLE_MASK_WORDS = _PyAnyCAD.GL_MAX_SAMPLE_MASK_WORDS
GL_MAX_COLOR_TEXTURE_SAMPLES = _PyAnyCAD.GL_MAX_COLOR_TEXTURE_SAMPLES
GL_MAX_DEPTH_TEXTURE_SAMPLES = _PyAnyCAD.GL_MAX_DEPTH_TEXTURE_SAMPLES
GL_MAX_INTEGER_SAMPLES = _PyAnyCAD.GL_MAX_INTEGER_SAMPLES
GL_TEXTURE_BINDING_2D_MULTISAMPLE = _PyAnyCAD.GL_TEXTURE_BINDING_2D_MULTISAMPLE
GL_TEXTURE_SAMPLES = _PyAnyCAD.GL_TEXTURE_SAMPLES
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = _PyAnyCAD.GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
GL_TEXTURE_WIDTH = _PyAnyCAD.GL_TEXTURE_WIDTH
GL_TEXTURE_HEIGHT = _PyAnyCAD.GL_TEXTURE_HEIGHT
GL_TEXTURE_DEPTH = _PyAnyCAD.GL_TEXTURE_DEPTH
GL_TEXTURE_INTERNAL_FORMAT = _PyAnyCAD.GL_TEXTURE_INTERNAL_FORMAT
GL_TEXTURE_RED_SIZE = _PyAnyCAD.GL_TEXTURE_RED_SIZE
GL_TEXTURE_GREEN_SIZE = _PyAnyCAD.GL_TEXTURE_GREEN_SIZE
GL_TEXTURE_BLUE_SIZE = _PyAnyCAD.GL_TEXTURE_BLUE_SIZE
GL_TEXTURE_ALPHA_SIZE = _PyAnyCAD.GL_TEXTURE_ALPHA_SIZE
GL_TEXTURE_DEPTH_SIZE = _PyAnyCAD.GL_TEXTURE_DEPTH_SIZE
GL_TEXTURE_STENCIL_SIZE = _PyAnyCAD.GL_TEXTURE_STENCIL_SIZE
GL_TEXTURE_SHARED_SIZE = _PyAnyCAD.GL_TEXTURE_SHARED_SIZE
GL_TEXTURE_RED_TYPE = _PyAnyCAD.GL_TEXTURE_RED_TYPE
GL_TEXTURE_GREEN_TYPE = _PyAnyCAD.GL_TEXTURE_GREEN_TYPE
GL_TEXTURE_BLUE_TYPE = _PyAnyCAD.GL_TEXTURE_BLUE_TYPE
GL_TEXTURE_ALPHA_TYPE = _PyAnyCAD.GL_TEXTURE_ALPHA_TYPE
GL_TEXTURE_DEPTH_TYPE = _PyAnyCAD.GL_TEXTURE_DEPTH_TYPE
GL_TEXTURE_COMPRESSED = _PyAnyCAD.GL_TEXTURE_COMPRESSED
GL_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_SAMPLER_2D_MULTISAMPLE
GL_INT_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_INT_SAMPLER_2D_MULTISAMPLE
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
GL_VERTEX_ATTRIB_BINDING = _PyAnyCAD.GL_VERTEX_ATTRIB_BINDING
GL_VERTEX_ATTRIB_RELATIVE_OFFSET = _PyAnyCAD.GL_VERTEX_ATTRIB_RELATIVE_OFFSET
GL_VERTEX_BINDING_DIVISOR = _PyAnyCAD.GL_VERTEX_BINDING_DIVISOR
GL_VERTEX_BINDING_OFFSET = _PyAnyCAD.GL_VERTEX_BINDING_OFFSET
GL_VERTEX_BINDING_STRIDE = _PyAnyCAD.GL_VERTEX_BINDING_STRIDE
GL_VERTEX_BINDING_BUFFER = _PyAnyCAD.GL_VERTEX_BINDING_BUFFER
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
GL_MAX_VERTEX_ATTRIB_BINDINGS = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_BINDINGS
GL_MAX_VERTEX_ATTRIB_STRIDE = _PyAnyCAD.GL_MAX_VERTEX_ATTRIB_STRIDE
GL_MULTISAMPLE_LINE_WIDTH_RANGE = _PyAnyCAD.GL_MULTISAMPLE_LINE_WIDTH_RANGE
GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = _PyAnyCAD.GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY
GL_MULTIPLY = _PyAnyCAD.GL_MULTIPLY
GL_SCREEN = _PyAnyCAD.GL_SCREEN
GL_OVERLAY = _PyAnyCAD.GL_OVERLAY
GL_DARKEN = _PyAnyCAD.GL_DARKEN
GL_LIGHTEN = _PyAnyCAD.GL_LIGHTEN
GL_COLORDODGE = _PyAnyCAD.GL_COLORDODGE
GL_COLORBURN = _PyAnyCAD.GL_COLORBURN
GL_HARDLIGHT = _PyAnyCAD.GL_HARDLIGHT
GL_SOFTLIGHT = _PyAnyCAD.GL_SOFTLIGHT
GL_DIFFERENCE = _PyAnyCAD.GL_DIFFERENCE
GL_EXCLUSION = _PyAnyCAD.GL_EXCLUSION
GL_HSL_HUE = _PyAnyCAD.GL_HSL_HUE
GL_HSL_SATURATION = _PyAnyCAD.GL_HSL_SATURATION
GL_HSL_COLOR = _PyAnyCAD.GL_HSL_COLOR
GL_HSL_LUMINOSITY = _PyAnyCAD.GL_HSL_LUMINOSITY
GL_DEBUG_OUTPUT_SYNCHRONOUS = _PyAnyCAD.GL_DEBUG_OUTPUT_SYNCHRONOUS
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = _PyAnyCAD.GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
GL_DEBUG_CALLBACK_FUNCTION = _PyAnyCAD.GL_DEBUG_CALLBACK_FUNCTION
GL_DEBUG_CALLBACK_USER_PARAM = _PyAnyCAD.GL_DEBUG_CALLBACK_USER_PARAM
GL_DEBUG_SOURCE_API = _PyAnyCAD.GL_DEBUG_SOURCE_API
GL_DEBUG_SOURCE_WINDOW_SYSTEM = _PyAnyCAD.GL_DEBUG_SOURCE_WINDOW_SYSTEM
GL_DEBUG_SOURCE_SHADER_COMPILER = _PyAnyCAD.GL_DEBUG_SOURCE_SHADER_COMPILER
GL_DEBUG_SOURCE_THIRD_PARTY = _PyAnyCAD.GL_DEBUG_SOURCE_THIRD_PARTY
GL_DEBUG_SOURCE_APPLICATION = _PyAnyCAD.GL_DEBUG_SOURCE_APPLICATION
GL_DEBUG_SOURCE_OTHER = _PyAnyCAD.GL_DEBUG_SOURCE_OTHER
GL_DEBUG_TYPE_ERROR = _PyAnyCAD.GL_DEBUG_TYPE_ERROR
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = _PyAnyCAD.GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = _PyAnyCAD.GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
GL_DEBUG_TYPE_PORTABILITY = _PyAnyCAD.GL_DEBUG_TYPE_PORTABILITY
GL_DEBUG_TYPE_PERFORMANCE = _PyAnyCAD.GL_DEBUG_TYPE_PERFORMANCE
GL_DEBUG_TYPE_OTHER = _PyAnyCAD.GL_DEBUG_TYPE_OTHER
GL_DEBUG_TYPE_MARKER = _PyAnyCAD.GL_DEBUG_TYPE_MARKER
GL_DEBUG_TYPE_PUSH_GROUP = _PyAnyCAD.GL_DEBUG_TYPE_PUSH_GROUP
GL_DEBUG_TYPE_POP_GROUP = _PyAnyCAD.GL_DEBUG_TYPE_POP_GROUP
GL_DEBUG_SEVERITY_NOTIFICATION = _PyAnyCAD.GL_DEBUG_SEVERITY_NOTIFICATION
GL_MAX_DEBUG_GROUP_STACK_DEPTH = _PyAnyCAD.GL_MAX_DEBUG_GROUP_STACK_DEPTH
GL_DEBUG_GROUP_STACK_DEPTH = _PyAnyCAD.GL_DEBUG_GROUP_STACK_DEPTH
GL_BUFFER = _PyAnyCAD.GL_BUFFER
GL_SHADER = _PyAnyCAD.GL_SHADER
GL_PROGRAM = _PyAnyCAD.GL_PROGRAM
GL_VERTEX_ARRAY = _PyAnyCAD.GL_VERTEX_ARRAY
GL_QUERY = _PyAnyCAD.GL_QUERY
GL_PROGRAM_PIPELINE = _PyAnyCAD.GL_PROGRAM_PIPELINE
GL_SAMPLER = _PyAnyCAD.GL_SAMPLER
GL_MAX_LABEL_LENGTH = _PyAnyCAD.GL_MAX_LABEL_LENGTH
GL_MAX_DEBUG_MESSAGE_LENGTH = _PyAnyCAD.GL_MAX_DEBUG_MESSAGE_LENGTH
GL_MAX_DEBUG_LOGGED_MESSAGES = _PyAnyCAD.GL_MAX_DEBUG_LOGGED_MESSAGES
GL_DEBUG_LOGGED_MESSAGES = _PyAnyCAD.GL_DEBUG_LOGGED_MESSAGES
GL_DEBUG_SEVERITY_HIGH = _PyAnyCAD.GL_DEBUG_SEVERITY_HIGH
GL_DEBUG_SEVERITY_MEDIUM = _PyAnyCAD.GL_DEBUG_SEVERITY_MEDIUM
GL_DEBUG_SEVERITY_LOW = _PyAnyCAD.GL_DEBUG_SEVERITY_LOW
GL_DEBUG_OUTPUT = _PyAnyCAD.GL_DEBUG_OUTPUT
GL_CONTEXT_FLAG_DEBUG_BIT = _PyAnyCAD.GL_CONTEXT_FLAG_DEBUG_BIT
GL_STACK_OVERFLOW = _PyAnyCAD.GL_STACK_OVERFLOW
GL_STACK_UNDERFLOW = _PyAnyCAD.GL_STACK_UNDERFLOW
GL_GEOMETRY_SHADER = _PyAnyCAD.GL_GEOMETRY_SHADER
GL_GEOMETRY_SHADER_BIT = _PyAnyCAD.GL_GEOMETRY_SHADER_BIT
GL_GEOMETRY_VERTICES_OUT = _PyAnyCAD.GL_GEOMETRY_VERTICES_OUT
GL_GEOMETRY_INPUT_TYPE = _PyAnyCAD.GL_GEOMETRY_INPUT_TYPE
GL_GEOMETRY_OUTPUT_TYPE = _PyAnyCAD.GL_GEOMETRY_OUTPUT_TYPE
GL_GEOMETRY_SHADER_INVOCATIONS = _PyAnyCAD.GL_GEOMETRY_SHADER_INVOCATIONS
GL_LAYER_PROVOKING_VERTEX = _PyAnyCAD.GL_LAYER_PROVOKING_VERTEX
GL_LINES_ADJACENCY = _PyAnyCAD.GL_LINES_ADJACENCY
GL_LINE_STRIP_ADJACENCY = _PyAnyCAD.GL_LINE_STRIP_ADJACENCY
GL_TRIANGLES_ADJACENCY = _PyAnyCAD.GL_TRIANGLES_ADJACENCY
GL_TRIANGLE_STRIP_ADJACENCY = _PyAnyCAD.GL_TRIANGLE_STRIP_ADJACENCY
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_GEOMETRY_UNIFORM_BLOCKS
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
GL_MAX_GEOMETRY_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_INPUT_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
GL_MAX_GEOMETRY_OUTPUT_VERTICES = _PyAnyCAD.GL_MAX_GEOMETRY_OUTPUT_VERTICES
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
GL_MAX_GEOMETRY_SHADER_INVOCATIONS = _PyAnyCAD.GL_MAX_GEOMETRY_SHADER_INVOCATIONS
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
GL_MAX_GEOMETRY_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_GEOMETRY_ATOMIC_COUNTERS
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_GEOMETRY_IMAGE_UNIFORMS
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
GL_FIRST_VERTEX_CONVENTION = _PyAnyCAD.GL_FIRST_VERTEX_CONVENTION
GL_LAST_VERTEX_CONVENTION = _PyAnyCAD.GL_LAST_VERTEX_CONVENTION
GL_UNDEFINED_VERTEX = _PyAnyCAD.GL_UNDEFINED_VERTEX
GL_PRIMITIVES_GENERATED = _PyAnyCAD.GL_PRIMITIVES_GENERATED
GL_FRAMEBUFFER_DEFAULT_LAYERS = _PyAnyCAD.GL_FRAMEBUFFER_DEFAULT_LAYERS
GL_MAX_FRAMEBUFFER_LAYERS = _PyAnyCAD.GL_MAX_FRAMEBUFFER_LAYERS
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = _PyAnyCAD.GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
GL_FRAMEBUFFER_ATTACHMENT_LAYERED = _PyAnyCAD.GL_FRAMEBUFFER_ATTACHMENT_LAYERED
GL_REFERENCED_BY_GEOMETRY_SHADER = _PyAnyCAD.GL_REFERENCED_BY_GEOMETRY_SHADER
GL_PRIMITIVE_BOUNDING_BOX = _PyAnyCAD.GL_PRIMITIVE_BOUNDING_BOX
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = _PyAnyCAD.GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
GL_CONTEXT_FLAGS = _PyAnyCAD.GL_CONTEXT_FLAGS
GL_LOSE_CONTEXT_ON_RESET = _PyAnyCAD.GL_LOSE_CONTEXT_ON_RESET
GL_GUILTY_CONTEXT_RESET = _PyAnyCAD.GL_GUILTY_CONTEXT_RESET
GL_INNOCENT_CONTEXT_RESET = _PyAnyCAD.GL_INNOCENT_CONTEXT_RESET
GL_UNKNOWN_CONTEXT_RESET = _PyAnyCAD.GL_UNKNOWN_CONTEXT_RESET
GL_RESET_NOTIFICATION_STRATEGY = _PyAnyCAD.GL_RESET_NOTIFICATION_STRATEGY
GL_NO_RESET_NOTIFICATION = _PyAnyCAD.GL_NO_RESET_NOTIFICATION
GL_CONTEXT_LOST = _PyAnyCAD.GL_CONTEXT_LOST
GL_SAMPLE_SHADING = _PyAnyCAD.GL_SAMPLE_SHADING
GL_MIN_SAMPLE_SHADING_VALUE = _PyAnyCAD.GL_MIN_SAMPLE_SHADING_VALUE
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = _PyAnyCAD.GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = _PyAnyCAD.GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = _PyAnyCAD.GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
GL_PATCHES = _PyAnyCAD.GL_PATCHES
GL_PATCH_VERTICES = _PyAnyCAD.GL_PATCH_VERTICES
GL_TESS_CONTROL_OUTPUT_VERTICES = _PyAnyCAD.GL_TESS_CONTROL_OUTPUT_VERTICES
GL_TESS_GEN_MODE = _PyAnyCAD.GL_TESS_GEN_MODE
GL_TESS_GEN_SPACING = _PyAnyCAD.GL_TESS_GEN_SPACING
GL_TESS_GEN_VERTEX_ORDER = _PyAnyCAD.GL_TESS_GEN_VERTEX_ORDER
GL_TESS_GEN_POINT_MODE = _PyAnyCAD.GL_TESS_GEN_POINT_MODE
GL_ISOLINES = _PyAnyCAD.GL_ISOLINES
GL_QUADS = _PyAnyCAD.GL_QUADS
GL_FRACTIONAL_ODD = _PyAnyCAD.GL_FRACTIONAL_ODD
GL_FRACTIONAL_EVEN = _PyAnyCAD.GL_FRACTIONAL_EVEN
GL_MAX_PATCH_VERTICES = _PyAnyCAD.GL_MAX_PATCH_VERTICES
GL_MAX_TESS_GEN_LEVEL = _PyAnyCAD.GL_MAX_TESS_GEN_LEVEL
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
GL_MAX_TESS_PATCH_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_PATCH_COMPONENTS
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = _PyAnyCAD.GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = _PyAnyCAD.GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = _PyAnyCAD.GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
GL_IS_PER_PATCH = _PyAnyCAD.GL_IS_PER_PATCH
GL_REFERENCED_BY_TESS_CONTROL_SHADER = _PyAnyCAD.GL_REFERENCED_BY_TESS_CONTROL_SHADER
GL_REFERENCED_BY_TESS_EVALUATION_SHADER = _PyAnyCAD.GL_REFERENCED_BY_TESS_EVALUATION_SHADER
GL_TESS_CONTROL_SHADER = _PyAnyCAD.GL_TESS_CONTROL_SHADER
GL_TESS_EVALUATION_SHADER = _PyAnyCAD.GL_TESS_EVALUATION_SHADER
GL_TESS_CONTROL_SHADER_BIT = _PyAnyCAD.GL_TESS_CONTROL_SHADER_BIT
GL_TESS_EVALUATION_SHADER_BIT = _PyAnyCAD.GL_TESS_EVALUATION_SHADER_BIT
GL_TEXTURE_BORDER_COLOR = _PyAnyCAD.GL_TEXTURE_BORDER_COLOR
GL_CLAMP_TO_BORDER = _PyAnyCAD.GL_CLAMP_TO_BORDER
GL_TEXTURE_BUFFER = _PyAnyCAD.GL_TEXTURE_BUFFER
GL_TEXTURE_BUFFER_BINDING = _PyAnyCAD.GL_TEXTURE_BUFFER_BINDING
GL_MAX_TEXTURE_BUFFER_SIZE = _PyAnyCAD.GL_MAX_TEXTURE_BUFFER_SIZE
GL_TEXTURE_BINDING_BUFFER = _PyAnyCAD.GL_TEXTURE_BINDING_BUFFER
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = _PyAnyCAD.GL_TEXTURE_BUFFER_DATA_STORE_BINDING
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = _PyAnyCAD.GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
GL_SAMPLER_BUFFER = _PyAnyCAD.GL_SAMPLER_BUFFER
GL_INT_SAMPLER_BUFFER = _PyAnyCAD.GL_INT_SAMPLER_BUFFER
GL_UNSIGNED_INT_SAMPLER_BUFFER = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_BUFFER
GL_IMAGE_BUFFER = _PyAnyCAD.GL_IMAGE_BUFFER
GL_INT_IMAGE_BUFFER = _PyAnyCAD.GL_INT_IMAGE_BUFFER
GL_UNSIGNED_INT_IMAGE_BUFFER = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_BUFFER
GL_TEXTURE_BUFFER_OFFSET = _PyAnyCAD.GL_TEXTURE_BUFFER_OFFSET
GL_TEXTURE_BUFFER_SIZE = _PyAnyCAD.GL_TEXTURE_BUFFER_SIZE
GL_COMPRESSED_RGBA_ASTC_4x4 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_4x4
GL_COMPRESSED_RGBA_ASTC_5x4 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_5x4
GL_COMPRESSED_RGBA_ASTC_5x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_5x5
GL_COMPRESSED_RGBA_ASTC_6x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_6x5
GL_COMPRESSED_RGBA_ASTC_6x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_6x6
GL_COMPRESSED_RGBA_ASTC_8x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x5
GL_COMPRESSED_RGBA_ASTC_8x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x6
GL_COMPRESSED_RGBA_ASTC_8x8 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_8x8
GL_COMPRESSED_RGBA_ASTC_10x5 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x5
GL_COMPRESSED_RGBA_ASTC_10x6 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x6
GL_COMPRESSED_RGBA_ASTC_10x8 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x8
GL_COMPRESSED_RGBA_ASTC_10x10 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_10x10
GL_COMPRESSED_RGBA_ASTC_12x10 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_12x10
GL_COMPRESSED_RGBA_ASTC_12x12 = _PyAnyCAD.GL_COMPRESSED_RGBA_ASTC_12x12
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = _PyAnyCAD.GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12
GL_TEXTURE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_TEXTURE_CUBE_MAP_ARRAY
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
GL_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_SAMPLER_CUBE_MAP_ARRAY
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = _PyAnyCAD.GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
GL_INT_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_CUBE_MAP_ARRAY
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
GL_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_IMAGE_CUBE_MAP_ARRAY
GL_INT_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_INT_IMAGE_CUBE_MAP_ARRAY
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_TEXTURE_2D_MULTISAMPLE_ARRAY
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = _PyAnyCAD.GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
class StringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.StringList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.StringList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.StringList_pop(self)

    def append(self, x):
        return _PyAnyCAD.StringList_append(self, x)

    def empty(self):
        return _PyAnyCAD.StringList_empty(self)

    def size(self):
        return _PyAnyCAD.StringList_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringList_begin(self)

    def end(self):
        return _PyAnyCAD.StringList_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringList_rend(self)

    def clear(self):
        return _PyAnyCAD.StringList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.StringList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.StringList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.StringList_swiginit(self, _PyAnyCAD.new_StringList(*args))

    def push_back(self, x):
        return _PyAnyCAD.StringList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.StringList_front(self)

    def back(self):
        return _PyAnyCAD.StringList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.StringList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.StringList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.StringList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.StringList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.StringList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_StringList

# Register StringList in _PyAnyCAD:
_PyAnyCAD.StringList_swigregister(StringList)
class StringWList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringWList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringWList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringWList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringWList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.StringWList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.StringWList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.StringWList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.StringWList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.StringWList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringWList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.StringWList_pop(self)

    def append(self, x):
        return _PyAnyCAD.StringWList_append(self, x)

    def empty(self):
        return _PyAnyCAD.StringWList_empty(self)

    def size(self):
        return _PyAnyCAD.StringWList_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringWList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringWList_begin(self)

    def end(self):
        return _PyAnyCAD.StringWList_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringWList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringWList_rend(self)

    def clear(self):
        return _PyAnyCAD.StringWList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringWList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.StringWList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.StringWList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.StringWList_swiginit(self, _PyAnyCAD.new_StringWList(*args))

    def push_back(self, x):
        return _PyAnyCAD.StringWList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.StringWList_front(self)

    def back(self):
        return _PyAnyCAD.StringWList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.StringWList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.StringWList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.StringWList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.StringWList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.StringWList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_StringWList

# Register StringWList in _PyAnyCAD:
_PyAnyCAD.StringWList_swigregister(StringWList)
class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.StringMap___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.StringMap___bool__(self)

    def __len__(self):
        return _PyAnyCAD.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _PyAnyCAD.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _PyAnyCAD.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _PyAnyCAD.StringMap_has_key(self, key)

    def keys(self):
        return _PyAnyCAD.StringMap_keys(self)

    def values(self):
        return _PyAnyCAD.StringMap_values(self)

    def items(self):
        return _PyAnyCAD.StringMap_items(self)

    def __contains__(self, key):
        return _PyAnyCAD.StringMap___contains__(self, key)

    def key_iterator(self):
        return _PyAnyCAD.StringMap_key_iterator(self)

    def value_iterator(self):
        return _PyAnyCAD.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _PyAnyCAD.StringMap___setitem__(self, *args)

    def asdict(self):
        return _PyAnyCAD.StringMap_asdict(self)

    def __init__(self, *args):
        _PyAnyCAD.StringMap_swiginit(self, _PyAnyCAD.new_StringMap(*args))

    def empty(self):
        return _PyAnyCAD.StringMap_empty(self)

    def size(self):
        return _PyAnyCAD.StringMap_size(self)

    def swap(self, v):
        return _PyAnyCAD.StringMap_swap(self, v)

    def begin(self):
        return _PyAnyCAD.StringMap_begin(self)

    def end(self):
        return _PyAnyCAD.StringMap_end(self)

    def rbegin(self):
        return _PyAnyCAD.StringMap_rbegin(self)

    def rend(self):
        return _PyAnyCAD.StringMap_rend(self)

    def clear(self):
        return _PyAnyCAD.StringMap_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.StringMap_get_allocator(self)

    def count(self, x):
        return _PyAnyCAD.StringMap_count(self, x)

    def erase(self, *args):
        return _PyAnyCAD.StringMap_erase(self, *args)

    def find(self, x):
        return _PyAnyCAD.StringMap_find(self, x)

    def lower_bound(self, x):
        return _PyAnyCAD.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _PyAnyCAD.StringMap_upper_bound(self, x)
    __swig_destroy__ = _PyAnyCAD.delete_StringMap

# Register StringMap in _PyAnyCAD:
_PyAnyCAD.StringMap_swigregister(StringMap)
EnumDataType_FLOAT = _PyAnyCAD.EnumDataType_FLOAT
EnumDataType_UNSIGNED_INT = _PyAnyCAD.EnumDataType_UNSIGNED_INT
EnumDataType_UNSIGNED_SHORT = _PyAnyCAD.EnumDataType_UNSIGNED_SHORT
EnumDataType_UNSIGNED_BYTE = _PyAnyCAD.EnumDataType_UNSIGNED_BYTE
EnumDataType_UNSIGNED_INT_24_8 = _PyAnyCAD.EnumDataType_UNSIGNED_INT_24_8
EnumDataType_FLOAT_32_UNSIGNED_INT_24_8_REV = _PyAnyCAD.EnumDataType_FLOAT_32_UNSIGNED_INT_24_8_REV
class ClassId(object):
    r"""
    Author: Common
    类信息.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, ver, parent):
        _PyAnyCAD.ClassId_swiginit(self, _PyAnyCAD.new_ClassId(name, ver, parent))
    __swig_destroy__ = _PyAnyCAD.delete_ClassId

    def GetName(self):
        r"""
        获得类名称
        :rtype: string
        :return: 类名称
        """
        return _PyAnyCAD.ClassId_GetName(self)

    def GetVersion(self, *args):
        return _PyAnyCAD.ClassId_GetVersion(self, *args)

    def GetParent(self):
        r"""
        获取父类信息
        :rtype: :py:class:`ClassId`
        :return: 返回父类信息
        """
        return _PyAnyCAD.ClassId_GetParent(self)

    def IsEqual(self, other):
        r"""
        两个类是否相等
        :type other: :py:class:`ClassId`
        :param other: 需要比较的类信息
        :rtype: boolean
        :return: 返回true，如果相同
        """
        return _PyAnyCAD.ClassId_IsEqual(self, other)

    def IsTypeOf(self, className):
        r"""
        判断是否是指定的类
        :type className: string
        :param className: 类名称
        :rtype: boolean
        :return: 是否与className一致。
        """
        return _PyAnyCAD.ClassId_IsTypeOf(self, className)

# Register ClassId in _PyAnyCAD:
_PyAnyCAD.ClassId_swigregister(ClassId)
class AObject(object):
    r"""
     Author: Common
    基类，提供基本的反射方法.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.AObject_swiginit(self, _PyAnyCAD.new_AObject())
    __swig_destroy__ = _PyAnyCAD.delete_AObject

    @staticmethod
    def GetStaticClassId():
        r"""
        获取类信息
        :rtype: :py:class:`ClassId`
        :return: 
        """
        return _PyAnyCAD.AObject_GetStaticClassId()

    def GetClassId(self):
        r"""
        获取对象的类型信息
        :rtype: :py:class:`ClassId`
        :return: 类信息
        """
        return _PyAnyCAD.AObject_GetClassId(self)

    def IsEqual(self, other):
        r"""
        对象是否相同，或同一个对象
        :type other: :py:class:`AObject`
        :param other: 需要比较的对象
        :rtype: boolean
        :return: 返回true如果是同一个对象。
        """
        return _PyAnyCAD.AObject_IsEqual(self, other)

# Register AObject in _PyAnyCAD:
_PyAnyCAD.AObject_swigregister(AObject)
class ArrayBuffer(AObject):
    r"""
    Author: Common
    表示一块连续的内存空间。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ArrayBuffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ArrayBuffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ArrayBuffer_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_ArrayBuffer

    def GetBufferSize(self):
        r"""
        Buffer的byte大小.
        :rtype: int
        :return: the size.
        """
        return _PyAnyCAD.ArrayBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数.
        :rtype: int
        :return: the number
        """
        return _PyAnyCAD.ArrayBuffer_GetItemCount(self)

    def GetDataType(self):
        r"""
        获取数据类型.
        :rtype: int
        :return: the type.
        """
        return _PyAnyCAD.ArrayBuffer_GetDataType(self)

    def Save(self, fleName):
        r"""
        保存为二进制文件
        :type fleName: string
        :param fleName: the file name.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.ArrayBuffer_Save(self, fleName)

# Register ArrayBuffer in _PyAnyCAD:
_PyAnyCAD.ArrayBuffer_swigregister(ArrayBuffer)
EnumLoggingLevel_Trace = _PyAnyCAD.EnumLoggingLevel_Trace
EnumLoggingLevel_Debug = _PyAnyCAD.EnumLoggingLevel_Debug
EnumLoggingLevel_Info = _PyAnyCAD.EnumLoggingLevel_Info
EnumLoggingLevel_Warn = _PyAnyCAD.EnumLoggingLevel_Warn
EnumLoggingLevel_Error = _PyAnyCAD.EnumLoggingLevel_Error
EnumLoggingLevel_Fatal = _PyAnyCAD.EnumLoggingLevel_Fatal
EnumLoggingLevel_Off = _PyAnyCAD.EnumLoggingLevel_Off
class DoubleList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.DoubleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.DoubleList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.DoubleList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.DoubleList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.DoubleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.DoubleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.DoubleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.DoubleList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.DoubleList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.DoubleList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.DoubleList_pop(self)

    def append(self, x):
        return _PyAnyCAD.DoubleList_append(self, x)

    def empty(self):
        return _PyAnyCAD.DoubleList_empty(self)

    def size(self):
        return _PyAnyCAD.DoubleList_size(self)

    def swap(self, v):
        return _PyAnyCAD.DoubleList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.DoubleList_begin(self)

    def end(self):
        return _PyAnyCAD.DoubleList_end(self)

    def rbegin(self):
        return _PyAnyCAD.DoubleList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.DoubleList_rend(self)

    def clear(self):
        return _PyAnyCAD.DoubleList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.DoubleList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.DoubleList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.DoubleList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.DoubleList_swiginit(self, _PyAnyCAD.new_DoubleList(*args))

    def push_back(self, x):
        return _PyAnyCAD.DoubleList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.DoubleList_front(self)

    def back(self):
        return _PyAnyCAD.DoubleList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.DoubleList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.DoubleList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.DoubleList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.DoubleList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.DoubleList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_DoubleList

# Register DoubleList in _PyAnyCAD:
_PyAnyCAD.DoubleList_swigregister(DoubleList)
class FloatList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.FloatList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.FloatList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.FloatList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.FloatList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.FloatList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.FloatList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.FloatList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.FloatList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.FloatList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.FloatList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.FloatList_pop(self)

    def append(self, x):
        return _PyAnyCAD.FloatList_append(self, x)

    def empty(self):
        return _PyAnyCAD.FloatList_empty(self)

    def size(self):
        return _PyAnyCAD.FloatList_size(self)

    def swap(self, v):
        return _PyAnyCAD.FloatList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.FloatList_begin(self)

    def end(self):
        return _PyAnyCAD.FloatList_end(self)

    def rbegin(self):
        return _PyAnyCAD.FloatList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.FloatList_rend(self)

    def clear(self):
        return _PyAnyCAD.FloatList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.FloatList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.FloatList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.FloatList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.FloatList_swiginit(self, _PyAnyCAD.new_FloatList(*args))

    def push_back(self, x):
        return _PyAnyCAD.FloatList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.FloatList_front(self)

    def back(self):
        return _PyAnyCAD.FloatList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.FloatList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.FloatList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.FloatList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.FloatList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.FloatList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_FloatList

# Register FloatList in _PyAnyCAD:
_PyAnyCAD.FloatList_swigregister(FloatList)
class Uint32List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint32List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint32List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint32List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint32List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint32List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint32List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint32List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint32List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint32List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint32List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint32List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint32List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint32List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint32List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint32List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint32List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint32List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint32List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint32List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint32List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint32List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint32List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint32List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint32List_swiginit(self, _PyAnyCAD.new_Uint32List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint32List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint32List_front(self)

    def back(self):
        return _PyAnyCAD.Uint32List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint32List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint32List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint32List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint32List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint32List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32List

# Register Uint32List in _PyAnyCAD:
_PyAnyCAD.Uint32List_swigregister(Uint32List)
class Int32List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Int32List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Int32List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Int32List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Int32List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Int32List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Int32List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Int32List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Int32List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Int32List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Int32List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Int32List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Int32List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Int32List_empty(self)

    def size(self):
        return _PyAnyCAD.Int32List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Int32List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Int32List_begin(self)

    def end(self):
        return _PyAnyCAD.Int32List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Int32List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Int32List_rend(self)

    def clear(self):
        return _PyAnyCAD.Int32List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Int32List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Int32List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Int32List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Int32List_swiginit(self, _PyAnyCAD.new_Int32List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Int32List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Int32List_front(self)

    def back(self):
        return _PyAnyCAD.Int32List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Int32List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Int32List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Int32List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Int32List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Int32List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32List

# Register Int32List in _PyAnyCAD:
_PyAnyCAD.Int32List_swigregister(Int32List)
class Uint16List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint16List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint16List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint16List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint16List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint16List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint16List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint16List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint16List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint16List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint16List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint16List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint16List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint16List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint16List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint16List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint16List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint16List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint16List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint16List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint16List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint16List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint16List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint16List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint16List_swiginit(self, _PyAnyCAD.new_Uint16List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint16List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint16List_front(self)

    def back(self):
        return _PyAnyCAD.Uint16List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint16List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint16List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint16List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint16List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint16List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16List

# Register Uint16List in _PyAnyCAD:
_PyAnyCAD.Uint16List_swigregister(Uint16List)
class Uint8List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint8List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint8List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint8List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint8List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Uint8List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Uint8List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Uint8List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Uint8List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Uint8List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Uint8List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Uint8List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Uint8List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Uint8List_empty(self)

    def size(self):
        return _PyAnyCAD.Uint8List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Uint8List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Uint8List_begin(self)

    def end(self):
        return _PyAnyCAD.Uint8List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint8List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint8List_rend(self)

    def clear(self):
        return _PyAnyCAD.Uint8List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Uint8List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Uint8List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint8List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Uint8List_swiginit(self, _PyAnyCAD.new_Uint8List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Uint8List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Uint8List_front(self)

    def back(self):
        return _PyAnyCAD.Uint8List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Uint8List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Uint8List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Uint8List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Uint8List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Uint8List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8List

# Register Uint8List in _PyAnyCAD:
_PyAnyCAD.Uint8List_swigregister(Uint8List)
class CharList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.CharList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.CharList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.CharList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.CharList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.CharList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.CharList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.CharList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.CharList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.CharList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.CharList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.CharList_pop(self)

    def append(self, x):
        return _PyAnyCAD.CharList_append(self, x)

    def empty(self):
        return _PyAnyCAD.CharList_empty(self)

    def size(self):
        return _PyAnyCAD.CharList_size(self)

    def swap(self, v):
        return _PyAnyCAD.CharList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.CharList_begin(self)

    def end(self):
        return _PyAnyCAD.CharList_end(self)

    def rbegin(self):
        return _PyAnyCAD.CharList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.CharList_rend(self)

    def clear(self):
        return _PyAnyCAD.CharList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.CharList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.CharList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.CharList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.CharList_swiginit(self, _PyAnyCAD.new_CharList(*args))

    def push_back(self, x):
        return _PyAnyCAD.CharList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.CharList_front(self)

    def back(self):
        return _PyAnyCAD.CharList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.CharList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.CharList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.CharList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.CharList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.CharList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_CharList

# Register CharList in _PyAnyCAD:
_PyAnyCAD.CharList_swigregister(CharList)
class Vec3List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Vec3List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Vec3List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Vec3List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Vec3List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Vec3List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Vec3List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Vec3List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Vec3List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Vec3List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Vec3List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Vec3List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Vec3List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Vec3List_empty(self)

    def size(self):
        return _PyAnyCAD.Vec3List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Vec3List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Vec3List_begin(self)

    def end(self):
        return _PyAnyCAD.Vec3List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Vec3List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Vec3List_rend(self)

    def clear(self):
        return _PyAnyCAD.Vec3List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Vec3List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Vec3List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Vec3List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Vec3List_swiginit(self, _PyAnyCAD.new_Vec3List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Vec3List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Vec3List_front(self)

    def back(self):
        return _PyAnyCAD.Vec3List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Vec3List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Vec3List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Vec3List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Vec3List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Vec3List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Vec3List

# Register Vec3List in _PyAnyCAD:
_PyAnyCAD.Vec3List_swigregister(Vec3List)
class Double3List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Double3List_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Double3List___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Double3List___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Double3List___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.Double3List___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.Double3List___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.Double3List___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.Double3List___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.Double3List___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.Double3List___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.Double3List_pop(self)

    def append(self, x):
        return _PyAnyCAD.Double3List_append(self, x)

    def empty(self):
        return _PyAnyCAD.Double3List_empty(self)

    def size(self):
        return _PyAnyCAD.Double3List_size(self)

    def swap(self, v):
        return _PyAnyCAD.Double3List_swap(self, v)

    def begin(self):
        return _PyAnyCAD.Double3List_begin(self)

    def end(self):
        return _PyAnyCAD.Double3List_end(self)

    def rbegin(self):
        return _PyAnyCAD.Double3List_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Double3List_rend(self)

    def clear(self):
        return _PyAnyCAD.Double3List_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.Double3List_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.Double3List_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.Double3List_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.Double3List_swiginit(self, _PyAnyCAD.new_Double3List(*args))

    def push_back(self, x):
        return _PyAnyCAD.Double3List_push_back(self, x)

    def front(self):
        return _PyAnyCAD.Double3List_front(self)

    def back(self):
        return _PyAnyCAD.Double3List_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.Double3List_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.Double3List_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.Double3List_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.Double3List_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.Double3List_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_Double3List

# Register Double3List in _PyAnyCAD:
_PyAnyCAD.Double3List_swigregister(Double3List)
class Uint32Set(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.Uint32Set_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.Uint32Set___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.Uint32Set___bool__(self)

    def __len__(self):
        return _PyAnyCAD.Uint32Set___len__(self)

    def append(self, x):
        return _PyAnyCAD.Uint32Set_append(self, x)

    def __contains__(self, x):
        return _PyAnyCAD.Uint32Set___contains__(self, x)

    def __getitem__(self, i):
        return _PyAnyCAD.Uint32Set___getitem__(self, i)

    def add(self, x):
        return _PyAnyCAD.Uint32Set_add(self, x)

    def discard(self, x):
        return _PyAnyCAD.Uint32Set_discard(self, x)

    def __init__(self, *args):
        _PyAnyCAD.Uint32Set_swiginit(self, _PyAnyCAD.new_Uint32Set(*args))

    def empty(self):
        return _PyAnyCAD.Uint32Set_empty(self)

    def size(self):
        return _PyAnyCAD.Uint32Set_size(self)

    def clear(self):
        return _PyAnyCAD.Uint32Set_clear(self)

    def swap(self, v):
        return _PyAnyCAD.Uint32Set_swap(self, v)

    def count(self, x):
        return _PyAnyCAD.Uint32Set_count(self, x)

    def begin(self):
        return _PyAnyCAD.Uint32Set_begin(self)

    def end(self):
        return _PyAnyCAD.Uint32Set_end(self)

    def rbegin(self):
        return _PyAnyCAD.Uint32Set_rbegin(self)

    def rend(self):
        return _PyAnyCAD.Uint32Set_rend(self)

    def erase(self, *args):
        return _PyAnyCAD.Uint32Set_erase(self, *args)

    def find(self, x):
        return _PyAnyCAD.Uint32Set_find(self, x)

    def lower_bound(self, x):
        return _PyAnyCAD.Uint32Set_lower_bound(self, x)

    def upper_bound(self, x):
        return _PyAnyCAD.Uint32Set_upper_bound(self, x)

    def equal_range(self, x):
        return _PyAnyCAD.Uint32Set_equal_range(self, x)

    def insert(self, __x):
        return _PyAnyCAD.Uint32Set_insert(self, __x)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32Set

# Register Uint32Set in _PyAnyCAD:
_PyAnyCAD.Uint32Set_swigregister(Uint32Set)
class Float32TypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.Float32TypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.Float32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: float
        :param val: 值
        """
        return _PyAnyCAD.Float32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: float
        :return: 值
        """
        return _PyAnyCAD.Float32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: float
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: float
        :param a: 第一个
        :type b: float
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: float
        :param a: 第1个
        :type b: float
        :param b: 第2个
        :type c: float
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: float
        :param a: 第1个
        :type b: float
        :param b: 第2个
        :type c: float
        :param c: 第3个
        :type d: float
        :param d: 第4个
        """
        return _PyAnyCAD.Float32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.Float32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Float32TypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Float32TypedBuffer

# Register Float32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Float32TypedBuffer_swigregister(Float32TypedBuffer)
class Float32Buffer(Float32TypedBuffer):
    r"""
    Author: Common
    内容为Float32的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Float32Buffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Float32Buffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Float32Buffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Float32Buffer_swiginit(self, _PyAnyCAD.new_Float32Buffer(*args))

    def Clone(self):
        return _PyAnyCAD.Float32Buffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.Float32Buffer_GetDataType(self)

    @staticmethod
    def Create(data):
        r"""
        使用数据来构造Buffer
        :type data: std::vector< float,std::allocator< float > >
        :param data: float数组
        :rtype: :py:class:`Float32Buffer`
        :return: 对象
        """
        return _PyAnyCAD.Float32Buffer_Create(data)

    def GetValue(self, idx):
        return _PyAnyCAD.Float32Buffer_GetValue(self, idx)

    def SetValue(self, *args):
        return _PyAnyCAD.Float32Buffer_SetValue(self, *args)

    def Append3(self, val):
        r"""
        在尾部添加Vector3f数据
        :type val: :py:class:`vec3`
        :param val: 值
        """
        return _PyAnyCAD.Float32Buffer_Append3(self, val)

    def Append2(self, val):
        r"""
        在尾部添加Vector2f值
        :type val: :py:class:`vec2`
        :param val: 值
        """
        return _PyAnyCAD.Float32Buffer_Append2(self, val)

    def Plus(self, idx, v):
        r"""
        Add v to the exsiting value
        :type idx: int
        :param idx:
        :type v: :py:class:`vec3`
        :param v:
        """
        return _PyAnyCAD.Float32Buffer_Plus(self, idx, v)

    def SaveText(self, fileName):
        r"""
        保存为文本。用于做测试使用
        :type fileName: string
        :param fileName: 文件名
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.Float32Buffer_SaveText(self, fileName)
    __swig_destroy__ = _PyAnyCAD.delete_Float32Buffer

# Register Float32Buffer in _PyAnyCAD:
_PyAnyCAD.Float32Buffer_swigregister(Float32Buffer)
class Uint32TypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.Uint32TypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.Uint32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: int
        :param val: 值
        """
        return _PyAnyCAD.Uint32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.Uint32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: int
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: int
        :param a: 第一个
        :type b: int
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个
        :type d: int
        :param d: 第4个
        """
        return _PyAnyCAD.Uint32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.Uint32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Uint32TypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32TypedBuffer

# Register Uint32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint32TypedBuffer_swigregister(Uint32TypedBuffer)
class Uint32Buffer(Uint32TypedBuffer):
    r"""
    Author: Common
    内容为Uint32的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Uint32Buffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Uint32Buffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Uint32Buffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Uint32Buffer_swiginit(self, _PyAnyCAD.new_Uint32Buffer(*args))

    def Clone(self):
        return _PyAnyCAD.Uint32Buffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.Uint32Buffer_GetDataType(self)

    @staticmethod
    def Create(data):
        r"""
        使用数组来创建对象
        :type data: std::vector< uint32_t,std::allocator< uint32_t > >
        :param data: 数组
        :rtype: :py:class:`Uint32Buffer`
        :return: 对象
        """
        return _PyAnyCAD.Uint32Buffer_Create(data)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32Buffer

# Register Uint32Buffer in _PyAnyCAD:
_PyAnyCAD.Uint32Buffer_swigregister(Uint32Buffer)
class Uint16TypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.Uint16TypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.Uint16TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: int
        :param val: 值
        """
        return _PyAnyCAD.Uint16TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.Uint16TypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: int
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: int
        :param a: 第一个
        :type b: int
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个
        :type d: int
        :param d: 第4个
        """
        return _PyAnyCAD.Uint16TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.Uint16TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Uint16TypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16TypedBuffer

# Register Uint16TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint16TypedBuffer_swigregister(Uint16TypedBuffer)
class Uint16Buffer(Uint16TypedBuffer):
    r"""
    Author: Common
    内容为Uint16的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Uint16Buffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Uint16Buffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Uint16Buffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Uint16Buffer_swiginit(self, _PyAnyCAD.new_Uint16Buffer(*args))

    def Clone(self):
        return _PyAnyCAD.Uint16Buffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.Uint16Buffer_GetDataType(self)

    @staticmethod
    def Create(data):
        return _PyAnyCAD.Uint16Buffer_Create(data)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16Buffer

# Register Uint16Buffer in _PyAnyCAD:
_PyAnyCAD.Uint16Buffer_swigregister(Uint16Buffer)
class Uint8TypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.Uint8TypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.Uint8TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: unsigned char
        :param val: 值
        """
        return _PyAnyCAD.Uint8TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: unsigned char
        :return: 值
        """
        return _PyAnyCAD.Uint8TypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: unsigned char
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: unsigned char
        :param a: 第一个
        :type b: unsigned char
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: unsigned char
        :param a: 第1个
        :type b: unsigned char
        :param b: 第2个
        :type c: unsigned char
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: unsigned char
        :param a: 第1个
        :type b: unsigned char
        :param b: 第2个
        :type c: unsigned char
        :param c: 第3个
        :type d: unsigned char
        :param d: 第4个
        """
        return _PyAnyCAD.Uint8TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.Uint8TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Uint8TypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8TypedBuffer

# Register Uint8TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Uint8TypedBuffer_swigregister(Uint8TypedBuffer)
class Uint8Buffer(Uint8TypedBuffer):
    r"""
    Author: Common
    内容为Uint8的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Uint8Buffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Uint8Buffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Uint8Buffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Uint8Buffer_swiginit(self, _PyAnyCAD.new_Uint8Buffer(*args))

    def Clone(self):
        return _PyAnyCAD.Uint8Buffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.Uint8Buffer_GetDataType(self)

    @staticmethod
    def Create(list):
        return _PyAnyCAD.Uint8Buffer_Create(list)
    __swig_destroy__ = _PyAnyCAD.delete_Uint8Buffer

# Register Uint8Buffer in _PyAnyCAD:
_PyAnyCAD.Uint8Buffer_swigregister(Uint8Buffer)
class Int32TypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.Int32TypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.Int32TypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: int
        :param val: 值
        """
        return _PyAnyCAD.Int32TypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.Int32TypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: int
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: int
        :param a: 第一个
        :type b: int
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: int
        :param a: 第1个
        :type b: int
        :param b: 第2个
        :type c: int
        :param c: 第3个
        :type d: int
        :param d: 第4个
        """
        return _PyAnyCAD.Int32TypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.Int32TypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Int32TypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32TypedBuffer

# Register Int32TypedBuffer in _PyAnyCAD:
_PyAnyCAD.Int32TypedBuffer_swigregister(Int32TypedBuffer)
class Int32Buffer(Int32TypedBuffer):
    r"""
    Author: Common
    内容为Int32的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Int32Buffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Int32Buffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Int32Buffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Int32Buffer_swiginit(self, _PyAnyCAD.new_Int32Buffer(*args))

    def Clone(self):
        return _PyAnyCAD.Int32Buffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.Int32Buffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_Int32Buffer

# Register Int32Buffer in _PyAnyCAD:
_PyAnyCAD.Int32Buffer_swigregister(Int32Buffer)
class CharTypedBuffer(ArrayBuffer):
    r"""
    Author: Common
    模板辅助类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.CharTypedBuffer_GetData(self)

    def Reserve(self, count):
        r"""
        保留内存大小，避免重复分配
        :type count: std::size_t
        :param count: 元素的个数
        """
        return _PyAnyCAD.CharTypedBuffer_Reserve(self, count)

    def Set(self, idx, val):
        r"""
        设置元素
        :type idx: int
        :param idx: 索引
        :type val: char
        :param val: 值
        """
        return _PyAnyCAD.CharTypedBuffer_Set(self, idx, val)

    def Get(self, idx):
        r"""
        获取元素的值
        :type idx: int
        :param idx: 索引
        :rtype: char
        :return: 值
        """
        return _PyAnyCAD.CharTypedBuffer_Get(self, idx)

    def Append(self, *args):
        r"""
        *Overload 1:*

        在尾部添加元素
        :type val: char
        :param val: 值

        |

        *Overload 2:*

        在尾部添加两个值
        :type a: char
        :param a: 第一个
        :type b: char
        :param b: 第二个

        |

        *Overload 3:*

        在尾部添加三个值
        :type a: char
        :param a: 第1个
        :type b: char
        :param b: 第2个
        :type c: char
        :param c: 第3个

        |

        *Overload 4:*

        在尾部添加四个值
        :type a: char
        :param a: 第1个
        :type b: char
        :param b: 第2个
        :type c: char
        :param c: 第3个
        :type d: char
        :param d: 第4个
        """
        return _PyAnyCAD.CharTypedBuffer_Append(self, *args)

    def GetBufferSize(self):
        r"""
        获取缓冲区大小
        :rtype: int
        :return: 大小
        """
        return _PyAnyCAD.CharTypedBuffer_GetBufferSize(self)

    def GetItemCount(self):
        r"""
        获取元素的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.CharTypedBuffer_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_CharTypedBuffer

# Register CharTypedBuffer in _PyAnyCAD:
_PyAnyCAD.CharTypedBuffer_swigregister(CharTypedBuffer)
class CharBuffer(CharTypedBuffer):
    r"""
    Author: Common
    内容为char的内存空间
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.CharBuffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.CharBuffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CharBuffer_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.CharBuffer_swiginit(self, _PyAnyCAD.new_CharBuffer(*args))

    def Clone(self):
        return _PyAnyCAD.CharBuffer_Clone(self)

    def GetDataType(self):
        return _PyAnyCAD.CharBuffer_GetDataType(self)
    __swig_destroy__ = _PyAnyCAD.delete_CharBuffer

# Register CharBuffer in _PyAnyCAD:
_PyAnyCAD.CharBuffer_swigregister(CharBuffer)
class RawBuffer(ArrayBuffer):
    r"""
    Author: Common
    任意的内存空间.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.RawBuffer_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.RawBuffer_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RawBuffer_Cast(obj)

    def __init__(self):
        _PyAnyCAD.RawBuffer_swiginit(self, _PyAnyCAD.new_RawBuffer())
    __swig_destroy__ = _PyAnyCAD.delete_RawBuffer

    def GetByteLength(self):
        return _PyAnyCAD.RawBuffer_GetByteLength(self)

    @staticmethod
    def LoadFromFile(filename):
        return _PyAnyCAD.RawBuffer_LoadFromFile(filename)

    def GetBufferSize(self):
        return _PyAnyCAD.RawBuffer_GetBufferSize(self)

    def GetItemCount(self):
        return _PyAnyCAD.RawBuffer_GetItemCount(self)

    def GetDataType(self):
        return _PyAnyCAD.RawBuffer_GetDataType(self)

# Register RawBuffer in _PyAnyCAD:
_PyAnyCAD.RawBuffer_swigregister(RawBuffer)
class ArrayBufferView(object):
    r"""
    Author: Common

    用于方便访问ArrayBuffer数据。ArrayBufferView不保存数据，只能用来访问修改数据元素，无法更改ArrayBuffer的大小。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ArrayBufferView_swiginit(self, _PyAnyCAD.new_ArrayBufferView(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ArrayBufferView

    def GetByteOffset(self):
        return _PyAnyCAD.ArrayBufferView_GetByteOffset(self)

    def GetByteLength(self):
        return _PyAnyCAD.ArrayBufferView_GetByteLength(self)

    def GetDataType(self):
        return _PyAnyCAD.ArrayBufferView_GetDataType(self)

    def GetBuffer(self):
        return _PyAnyCAD.ArrayBufferView_GetBuffer(self)

    def UpdateAddress(self):
        return _PyAnyCAD.ArrayBufferView_UpdateAddress(self)

# Register ArrayBufferView in _PyAnyCAD:
_PyAnyCAD.ArrayBufferView_swigregister(ArrayBufferView)
class Float32TypedArray(ArrayBufferView):
    r"""
     Author: Common
    ArrayBufferView辅助类模板
    :param T: 数据类型
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer

        |

        *Overload 2:*

        使用ArrayBufferView来构造
        :type view: :py:class:`ArrayBufferView`
        :param view: ArrayBufferView

        |

        *Overload 3:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type dataType: int
        :param dataType: 指定数据类型

        |

        *Overload 4:*

        使用ArrayBuffer来构造，取指定区域的数据
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type byteOffset: int
        :param byteOffset: 距原始数据的偏移
        :type byteLength: int
        :param byteLength: 偏移的长度
        :type dataType: int
        :param dataType: 数据类型
        """
        _PyAnyCAD.Float32TypedArray_swiginit(self, _PyAnyCAD.new_Float32TypedArray(*args))

    def GetValue(self, idx):
        r"""
        获取第idx个数据
        :type idx: int
        :param idx: 索引
        :rtype: float
        :return: 值
        """
        return _PyAnyCAD.Float32TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        r"""
        *Overload 1:*

        设置第idx个的数值
        :type idx: int
        :param idx: 索引
        :type val: float
        :param val: 值

        |

        *Overload 2:*

        设置第idx和第idx+1的值
        :type idx: int
        :param idx: 索引
        :type x: float
        :param x: idx的值
        :type y: float
        :param y: idx+1的值

        |

        *Overload 3:*

        设置第idx及其后连选的三个值
        :type idx: int
        :param idx: 索引
        :type x: float
        :param x: idx的值
        :type y: float
        :param y: idx+1的值
        :type z: float
        :param z: idx+2的值
        """
        return _PyAnyCAD.Float32TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        r"""
        获取数据项的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Float32TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Float32TypedArray

# Register Float32TypedArray in _PyAnyCAD:
_PyAnyCAD.Float32TypedArray_swigregister(Float32TypedArray)
class Float32Array(Float32TypedArray):
    r"""
     Author: Common
    把ArrayBuffer当作Float32数组来处理。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Float32Array_swiginit(self, _PyAnyCAD.new_Float32Array(*args))

    def GetVec3(self, idx):
        r"""
        获取值
        :type idx: int
        :param idx: 按照float元素计算的索引
        :rtype: :py:class:`vec3`
        :return: Vector3f
        """
        return _PyAnyCAD.Float32Array_GetVec3(self, idx)

    def SetVec3(self, idx, val):
        r"""
        设置值
        :type idx: int
        :param idx: 按照float元素计算的索引
        :type val: :py:class:`vec3`
        :param val: Vector3f类型值
        """
        return _PyAnyCAD.Float32Array_SetVec3(self, idx, val)
    __swig_destroy__ = _PyAnyCAD.delete_Float32Array

# Register Float32Array in _PyAnyCAD:
_PyAnyCAD.Float32Array_swigregister(Float32Array)
class Uint32TypedArray(ArrayBufferView):
    r"""
     Author: Common
    ArrayBufferView辅助类模板
    :param T: 数据类型
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer

        |

        *Overload 2:*

        使用ArrayBufferView来构造
        :type view: :py:class:`ArrayBufferView`
        :param view: ArrayBufferView

        |

        *Overload 3:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type dataType: int
        :param dataType: 指定数据类型

        |

        *Overload 4:*

        使用ArrayBuffer来构造，取指定区域的数据
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type byteOffset: int
        :param byteOffset: 距原始数据的偏移
        :type byteLength: int
        :param byteLength: 偏移的长度
        :type dataType: int
        :param dataType: 数据类型
        """
        _PyAnyCAD.Uint32TypedArray_swiginit(self, _PyAnyCAD.new_Uint32TypedArray(*args))

    def GetValue(self, idx):
        r"""
        获取第idx个数据
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.Uint32TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        r"""
        *Overload 1:*

        设置第idx个的数值
        :type idx: int
        :param idx: 索引
        :type val: int
        :param val: 值

        |

        *Overload 2:*

        设置第idx和第idx+1的值
        :type idx: int
        :param idx: 索引
        :type x: int
        :param x: idx的值
        :type y: int
        :param y: idx+1的值

        |

        *Overload 3:*

        设置第idx及其后连选的三个值
        :type idx: int
        :param idx: 索引
        :type x: int
        :param x: idx的值
        :type y: int
        :param y: idx+1的值
        :type z: int
        :param z: idx+2的值
        """
        return _PyAnyCAD.Uint32TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        r"""
        获取数据项的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Uint32TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint32TypedArray

# Register Uint32TypedArray in _PyAnyCAD:
_PyAnyCAD.Uint32TypedArray_swigregister(Uint32TypedArray)
class Uint32Array(Uint32TypedArray):
    r"""
     Author: Common
    把ArrayBuffer当作Uint32数组来处理
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint32Array_swiginit(self, _PyAnyCAD.new_Uint32Array(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Uint32Array

# Register Uint32Array in _PyAnyCAD:
_PyAnyCAD.Uint32Array_swigregister(Uint32Array)
class Uint16TypedArray(ArrayBufferView):
    r"""
     Author: Common
    ArrayBufferView辅助类模板
    :param T: 数据类型
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer

        |

        *Overload 2:*

        使用ArrayBufferView来构造
        :type view: :py:class:`ArrayBufferView`
        :param view: ArrayBufferView

        |

        *Overload 3:*

        使用ArrayBuffer来构造
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type dataType: int
        :param dataType: 指定数据类型

        |

        *Overload 4:*

        使用ArrayBuffer来构造，取指定区域的数据
        :type buffer: :py:class:`ArrayBuffer`
        :param buffer: ArrayBuffer
        :type byteOffset: int
        :param byteOffset: 距原始数据的偏移
        :type byteLength: int
        :param byteLength: 偏移的长度
        :type dataType: int
        :param dataType: 数据类型
        """
        _PyAnyCAD.Uint16TypedArray_swiginit(self, _PyAnyCAD.new_Uint16TypedArray(*args))

    def GetValue(self, idx):
        r"""
        获取第idx个数据
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.Uint16TypedArray_GetValue(self, idx)

    def SetValue(self, *args):
        r"""
        *Overload 1:*

        设置第idx个的数值
        :type idx: int
        :param idx: 索引
        :type val: int
        :param val: 值

        |

        *Overload 2:*

        设置第idx和第idx+1的值
        :type idx: int
        :param idx: 索引
        :type x: int
        :param x: idx的值
        :type y: int
        :param y: idx+1的值

        |

        *Overload 3:*

        设置第idx及其后连选的三个值
        :type idx: int
        :param idx: 索引
        :type x: int
        :param x: idx的值
        :type y: int
        :param y: idx+1的值
        :type z: int
        :param z: idx+2的值
        """
        return _PyAnyCAD.Uint16TypedArray_SetValue(self, *args)

    def GetItemCount(self):
        r"""
        获取数据项的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.Uint16TypedArray_GetItemCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_Uint16TypedArray

# Register Uint16TypedArray in _PyAnyCAD:
_PyAnyCAD.Uint16TypedArray_swigregister(Uint16TypedArray)
class Uint16Array(Uint16TypedArray):
    r"""
     Author: Common
    把ArrayBuffer当作Uint16数组来处理
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Uint16Array_swiginit(self, _PyAnyCAD.new_Uint16Array(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Uint16Array

# Register Uint16Array in _PyAnyCAD:
_PyAnyCAD.Uint16Array_swigregister(Uint16Array)
EnumTextEncoding_Unicode = _PyAnyCAD.EnumTextEncoding_Unicode
EnumTextEncoding_UTF8 = _PyAnyCAD.EnumTextEncoding_UTF8
class Path(object):
    r"""
    Author: Common
    The Path utility
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Path_swiginit(self, _PyAnyCAD.new_Path(*args))

    def SetString(self, path):
        r"""
        设置路径字符串
        :type path: string
        :param path: 字符串
        """
        return _PyAnyCAD.Path_SetString(self, path)

    def GetString(self):
        r"""
        获取路径字符串
        :rtype: string
        :return: 字符串
        """
        return _PyAnyCAD.Path_GetString(self)

    def ToA(self):
        return _PyAnyCAD.Path_ToA(self)

    def IsEmpty(self):
        r"""
        是否为空
        :rtype: boolean
        :return: true为空
        """
        return _PyAnyCAD.Path_IsEmpty(self)

    def GetExtension(self):
        return _PyAnyCAD.Path_GetExtension(self)

    @staticmethod
    def ToUtf8(filePath):
        r"""
        转成UTF8
        :type filePath: anycore::StringW
        :param filePath: UNICODE的字符串
        :rtype: string
        :return: UTF8的字符串
        """
        return _PyAnyCAD.Path_ToUtf8(filePath)

    @staticmethod
    def CreateFolders(folderName):
        r"""
        创建目录，如果父目录不存在，会递归创建
        :type folderName: string
        :param folderName: 目录路径
        :rtype: boolean
        :return: 创建成功与否
        """
        return _PyAnyCAD.Path_CreateFolders(folderName)

    @staticmethod
    def GetFolderPath(fileName):
        r"""
        获取文件夹路径
        :type fileName: string
        :param fileName: 路径
        :rtype: string
        :return: 文件夹路径，如 c:/anycad/
        """
        return _PyAnyCAD.Path_GetFolderPath(fileName)

    @staticmethod
    def GetFileName(fileName):
        r"""
        获取文件名，带后缀
        :type fileName: string
        :param fileName: 路径
        :rtype: string
        :return: 文件名
        """
        return _PyAnyCAD.Path_GetFileName(fileName)

    @staticmethod
    def Extension(fileName):
        r"""
        提取文件后缀
        :type fileName: anycore::StringW
        :param fileName: 文件名。
        :rtype: anycore::StringW
        :return: 后缀，如".txt"
        """
        return _PyAnyCAD.Path_Extension(fileName)

    @staticmethod
    def GetBackupFileName(fileName):
        r"""
        根据文件名生成备份的文件名
        :type fileName: string
        :param fileName: 文件名
        :rtype: string
        :return: 新文件名
        """
        return _PyAnyCAD.Path_GetBackupFileName(fileName)

    @staticmethod
    def IsExist(fileName):
        r"""
        路径是否存在
        :type fileName: string
        :param fileName: 路径
        :rtype: boolean
        :return: true存在
        """
        return _PyAnyCAD.Path_IsExist(fileName)

    @staticmethod
    def GetProgramPath():
        r"""
        获取程序所在的目录
        :rtype: string
        :return: 程序路径
        """
        return _PyAnyCAD.Path_GetProgramPath()

    @staticmethod
    def GetAssetPath():
        r"""
        资源路径
        :rtype: string
        :return: 路径
        """
        return _PyAnyCAD.Path_GetAssetPath()

    @staticmethod
    def TempFileName(postfix):
        r"""
        在临时目录中生成临时文件
        :type postfix: string
        :param postfix: 后缀，如 .png
        :rtype: string
        :return: 完整目录
        """
        return _PyAnyCAD.Path_TempFileName(postfix)
    __swig_destroy__ = _PyAnyCAD.delete_Path

# Register Path in _PyAnyCAD:
_PyAnyCAD.Path_swigregister(Path)
class IpcChannel(object):
    r"""
    Author: Common
    The String utility
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, server):
        _PyAnyCAD.IpcChannel_swiginit(self, _PyAnyCAD.new_IpcChannel(name, server))
    __swig_destroy__ = _PyAnyCAD.delete_IpcChannel

    def GetName(self):
        return _PyAnyCAD.IpcChannel_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.IpcChannel_SetName(self, val)

    def Send(self, msg):
        return _PyAnyCAD.IpcChannel_Send(self, msg)

    def Receive(self):
        return _PyAnyCAD.IpcChannel_Receive(self)

# Register IpcChannel in _PyAnyCAD:
_PyAnyCAD.IpcChannel_swigregister(IpcChannel)
class IpcServer(object):
    r"""The IPC Server"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, hostId, slaveId):
        r"""
        Constructor
        :type hostId: string
        :param hostId: the host server id, to recevie message.
        :type slaveId: string
        :param slaveId: the slave id, to send message
        """
        _PyAnyCAD.IpcServer_swiginit(self, _PyAnyCAD.new_IpcServer(hostId, slaveId))
    __swig_destroy__ = _PyAnyCAD.delete_IpcServer

    def Send(self, message):
        r"""
        Send message by Slave.
        :type message: string
        :param message: the message.
        :rtype: boolean
        :return: true.
        """
        return _PyAnyCAD.IpcServer_Send(self, message)

    def Receive(self):
        r"""
        Get message from Host.
        :rtype: string
        :return: the message
        """
        return _PyAnyCAD.IpcServer_Receive(self)

    def GetHostId(self):
        return _PyAnyCAD.IpcServer_GetHostId(self)

    def GetSlaveId(self):
        return _PyAnyCAD.IpcServer_GetSlaveId(self)
    m_SlaveIPC = property(_PyAnyCAD.IpcServer_m_SlaveIPC_get)
    m_HostIPC = property(_PyAnyCAD.IpcServer_m_HostIPC_get)

# Register IpcServer in _PyAnyCAD:
_PyAnyCAD.IpcServer_swigregister(IpcServer)
class DialogUtil(object):
    r"""
    Author: Common
    The Dialog utility
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def OpenFileDialog(title, filter):
        r"""
        打开文件对话框
        :type title: string
        :param title: 标题
        :type filter: :py:class:`StringList`
        :param filter: 文件过滤条件, 如{ "CAD Files (.igs .iges .stp .step)", "*.igs *.iges *.stp *.step" }
        :rtype: :py:class:`Path`
        :return: Path如果为空，则打开失败
        """
        return _PyAnyCAD.DialogUtil_OpenFileDialog(title, filter)

    @staticmethod
    def SaveFileDialog(title, fileName, filter):
        r"""
        保存文件对话框
        :type title: string
        :param title: 标题
        :type fileName: string
        :param fileName: 文件名称
        :type filter: :py:class:`StringList`
        :param filter: 文件类型过滤器，如{ "CAD Files (.igs .iges .stp .step)", "*.igs *.iges *.stp *.step" }
        :rtype: :py:class:`Path`
        :return: Path为空则打开失败
        """
        return _PyAnyCAD.DialogUtil_SaveFileDialog(title, fileName, filter)

    @staticmethod
    def NotifyMessage(title, content):
        r"""
        通知消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: 内容UTF8
        """
        return _PyAnyCAD.DialogUtil_NotifyMessage(title, content)

    @staticmethod
    def NotifyMessageU(title, content):
        r"""
        通知消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: UNICODE
        """
        return _PyAnyCAD.DialogUtil_NotifyMessageU(title, content)

    @staticmethod
    def ShowMessageBox(title, content):
        r"""
        显示消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: 内容UTF8
        :rtype: boolean
        :return: 是否ok
        """
        return _PyAnyCAD.DialogUtil_ShowMessageBox(title, content)

    @staticmethod
    def ShowMessageBoxU(title, content):
        r"""
        显示消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: 内容UNICODE
        :rtype: boolean
        :return: 是否ok
        """
        return _PyAnyCAD.DialogUtil_ShowMessageBoxU(title, content)

    @staticmethod
    def ShowWarningBox(title, content):
        r"""
        显示消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: 内容UTF8
        :rtype: boolean
        :return: 是否ok
        """
        return _PyAnyCAD.DialogUtil_ShowWarningBox(title, content)

    @staticmethod
    def ShowWarningBoxU(title, content):
        r"""
        显示消息对话框
        :type title: string
        :param title: 标题
        :type content: string
        :param content: 内容UNICODE
        :rtype: boolean
        :return: 是否ok
        """
        return _PyAnyCAD.DialogUtil_ShowWarningBoxU(title, content)

    def __init__(self):
        _PyAnyCAD.DialogUtil_swiginit(self, _PyAnyCAD.new_DialogUtil())
    __swig_destroy__ = _PyAnyCAD.delete_DialogUtil

# Register DialogUtil in _PyAnyCAD:
_PyAnyCAD.DialogUtil_swigregister(DialogUtil)
class AABox(object):
    r"""
     A 3D box aligned with the x/y/z axes.
    Remarks: 
    This class represents a simple box which is aligned with the
    axes. Internally it only stores 2 points as the extremeties of
    the box, one which is the minima of all 3 axes, and the other
    which is the maxima of all 3 axes. This class is typically used
    for an axis-aligned bounding box (AABB) for collision and
    visibility determination.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Extent_EXTENT_NULL = _PyAnyCAD.AABox_Extent_EXTENT_NULL
    Extent_EXTENT_FINITE = _PyAnyCAD.AABox_Extent_EXTENT_FINITE
    Extent_EXTENT_INFINITE = _PyAnyCAD.AABox_Extent_EXTENT_INFINITE
    CornerEnum_FAR_LEFT_BOTTOM = _PyAnyCAD.AABox_CornerEnum_FAR_LEFT_BOTTOM
    CornerEnum_FAR_LEFT_TOP = _PyAnyCAD.AABox_CornerEnum_FAR_LEFT_TOP
    CornerEnum_FAR_RIGHT_TOP = _PyAnyCAD.AABox_CornerEnum_FAR_RIGHT_TOP
    CornerEnum_FAR_RIGHT_BOTTOM = _PyAnyCAD.AABox_CornerEnum_FAR_RIGHT_BOTTOM
    CornerEnum_NEAR_RIGHT_BOTTOM = _PyAnyCAD.AABox_CornerEnum_NEAR_RIGHT_BOTTOM
    CornerEnum_NEAR_LEFT_BOTTOM = _PyAnyCAD.AABox_CornerEnum_NEAR_LEFT_BOTTOM
    CornerEnum_NEAR_LEFT_TOP = _PyAnyCAD.AABox_CornerEnum_NEAR_LEFT_TOP
    CornerEnum_NEAR_RIGHT_TOP = _PyAnyCAD.AABox_CornerEnum_NEAR_RIGHT_TOP

    def __init__(self, *args):
        _PyAnyCAD.AABox_swiginit(self, _PyAnyCAD.new_AABox(*args))

    def getMinimum(self):
        r""" Gets the minimum corner of the box."""
        return _PyAnyCAD.AABox_getMinimum(self)

    def getMaximum(self):
        r""" Gets the maximum corner of the box."""
        return _PyAnyCAD.AABox_getMaximum(self)

    def setMinimum(self, *args):
        return _PyAnyCAD.AABox_setMinimum(self, *args)

    def setMinimumX(self, x):
        r"""
        Changes one of the components of the minimum corner of the box
           used to resize only one dimension of the box
        """
        return _PyAnyCAD.AABox_setMinimumX(self, x)

    def setMinimumY(self, y):
        return _PyAnyCAD.AABox_setMinimumY(self, y)

    def setMinimumZ(self, z):
        return _PyAnyCAD.AABox_setMinimumZ(self, z)

    def setMaximum(self, *args):
        return _PyAnyCAD.AABox_setMaximum(self, *args)

    def setMaximumX(self, x):
        r"""
        Changes one of the components of the maximum corner of the box
           used to resize only one dimension of the box
        """
        return _PyAnyCAD.AABox_setMaximumX(self, x)

    def setMaximumY(self, y):
        return _PyAnyCAD.AABox_setMaximumY(self, y)

    def setMaximumZ(self, z):
        return _PyAnyCAD.AABox_setMaximumZ(self, z)

    def setExtents(self, *args):
        return _PyAnyCAD.AABox_setExtents(self, *args)

    def getAllCorners(self):
        r"""
         Returns a pointer to an array of 8 corner points, useful for
            collision vs. non-aligned objects.
            Remarks: 
            If the order of these corners is important, they are as
            follows: The 4 points of the minimum Z face (note that
            because Ogre uses right-handed coordinates, the minimum Z is
            at the 'back' of the box) starting with the minimum point of
            all, then anticlockwise around this face (if you are looking
            onto the face from outside the box). Then the 4 points of the
            maximum Z face, starting with maximum point of all, then
            anticlockwise around this face (looking onto the face from
            outside the box). Like this:

               1-------2
        |      /|
        |     / |
            5-------4  |
            |  0----|--3
            | /     | /
            |/      |/
            6-------7
        """
        return _PyAnyCAD.AABox_getAllCorners(self)

    def getCorner(self, cornerToGet):
        r""" Gets the position of one of the corners"""
        return _PyAnyCAD.AABox_getCorner(self, cornerToGet)

    def merge(self, *args):
        r"""
        *Overload 1:*
        Merges the passed in box into the current box. The result is the
           box which encompasses both.

        |

        *Overload 2:*
        Extends the box to encompass the specified point (if needed).
        """
        return _PyAnyCAD.AABox_merge(self, *args)

    def matPlusVec3(self, m, v):
        r"""
        Transforms the box according to the matrix supplied.
           Remarks: 
           By calling this method you get the axis-aligned box which
           surrounds the transformed version of this box. Therefore each
           corner of the box is transformed by the matrix, then the
           extents are mapped back onto the axes to produce another
           AABB. Useful when you have a local AABB for an object which
           is then transformed.
        """
        return _PyAnyCAD.AABox_matPlusVec3(self, m, v)

    def transform(self, matrix):
        return _PyAnyCAD.AABox_transform(self, matrix)

    def transformedCorners(self, matrix):
        r"""
        Get all corners which transformed by given matrix
        :type matrix: :py:class:`mat4`
        :param matrix:
        """
        return _PyAnyCAD.AABox_transformedCorners(self, matrix)

    def setNull(self):
        r""" Sets the box to a 'null' value i.e. not a box."""
        return _PyAnyCAD.AABox_setNull(self)

    def isNull(self):
        r""" Returns true if the box is null i.e. empty."""
        return _PyAnyCAD.AABox_isNull(self)

    def isFinite(self):
        r""" Returns true if the box is finite."""
        return _PyAnyCAD.AABox_isFinite(self)

    def setInfinite(self):
        r""" Sets the box to 'infinite'"""
        return _PyAnyCAD.AABox_setInfinite(self)

    def isInfinite(self):
        r""" Returns true if the box is infinite."""
        return _PyAnyCAD.AABox_isInfinite(self)

    def intersection(self, b2):
        r""" Calculate the area of intersection of this box and another"""
        return _PyAnyCAD.AABox_intersection(self, b2)

    def volume(self):
        r""" Calculate the volume of this box"""
        return _PyAnyCAD.AABox_volume(self)

    def scale(self, s):
        r""" Scales the AABB by the vector given."""
        return _PyAnyCAD.AABox_scale(self, s)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Returns whether or not this box intersects another.

        |

        *Overload 2:*
        Tests whether this box intersects a sphere.

        |

        *Overload 3:*
        Tests whether this box intersects a plane.

        |

        *Overload 4:*
        Tests whether the vector point is within this box.
        """
        return _PyAnyCAD.AABox_intersects(self, *args)

    def getCenter(self):
        r""" Gets the centre of the box"""
        return _PyAnyCAD.AABox_getCenter(self)

    def getSize(self):
        r""" Gets the size of the box"""
        return _PyAnyCAD.AABox_getSize(self)

    def getHalfSize(self):
        r""" Gets the half-size of the box"""
        return _PyAnyCAD.AABox_getHalfSize(self)

    def squaredDistance(self, v):
        r"""
        Returns the squared minimum distance between a given point and any part of the box.
        This is faster than distance since avoiding a squareroot, so use if you can.
        """
        return _PyAnyCAD.AABox_squaredDistance(self, v)

    def distance(self, v):
        r""" Returns the minimum distance between a given point and any part of the box."""
        return _PyAnyCAD.AABox_distance(self, v)

    def contains(self, *args):
        r"""
        *Overload 1:*
        Tests whether the given point contained by this box.

        |

        *Overload 2:*
        Tests whether another box contained by this box.
        """
        return _PyAnyCAD.AABox_contains(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_AABox

# Register AABox in _PyAnyCAD:
_PyAnyCAD.AABox_swigregister(AABox)
class AABoxD(object):
    r"""
     A 3D box aligned with the x/y/z axes.
    Remarks: 
    This class represents a simple box which is aligned with the
    axes. Internally it only stores 2 points as the extremeties of
    the box, one which is the minima of all 3 axes, and the other
    which is the maxima of all 3 axes. This class is typically used
    for an axis-aligned bounding box (AABB) for collision and
    visibility determination.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Extent_EXTENT_NULL = _PyAnyCAD.AABoxD_Extent_EXTENT_NULL
    Extent_EXTENT_FINITE = _PyAnyCAD.AABoxD_Extent_EXTENT_FINITE
    Extent_EXTENT_INFINITE = _PyAnyCAD.AABoxD_Extent_EXTENT_INFINITE
    CornerEnum_FAR_LEFT_BOTTOM = _PyAnyCAD.AABoxD_CornerEnum_FAR_LEFT_BOTTOM
    CornerEnum_FAR_LEFT_TOP = _PyAnyCAD.AABoxD_CornerEnum_FAR_LEFT_TOP
    CornerEnum_FAR_RIGHT_TOP = _PyAnyCAD.AABoxD_CornerEnum_FAR_RIGHT_TOP
    CornerEnum_FAR_RIGHT_BOTTOM = _PyAnyCAD.AABoxD_CornerEnum_FAR_RIGHT_BOTTOM
    CornerEnum_NEAR_RIGHT_BOTTOM = _PyAnyCAD.AABoxD_CornerEnum_NEAR_RIGHT_BOTTOM
    CornerEnum_NEAR_LEFT_BOTTOM = _PyAnyCAD.AABoxD_CornerEnum_NEAR_LEFT_BOTTOM
    CornerEnum_NEAR_LEFT_TOP = _PyAnyCAD.AABoxD_CornerEnum_NEAR_LEFT_TOP
    CornerEnum_NEAR_RIGHT_TOP = _PyAnyCAD.AABoxD_CornerEnum_NEAR_RIGHT_TOP

    def __init__(self, *args):
        _PyAnyCAD.AABoxD_swiginit(self, _PyAnyCAD.new_AABoxD(*args))

    def getMinimum(self):
        r""" Gets the minimum corner of the box."""
        return _PyAnyCAD.AABoxD_getMinimum(self)

    def getMaximum(self):
        r""" Gets the maximum corner of the box."""
        return _PyAnyCAD.AABoxD_getMaximum(self)

    def setMinimum(self, *args):
        return _PyAnyCAD.AABoxD_setMinimum(self, *args)

    def setMinimumX(self, x):
        r"""
        Changes one of the components of the minimum corner of the box
           used to resize only one dimension of the box
        """
        return _PyAnyCAD.AABoxD_setMinimumX(self, x)

    def setMinimumY(self, y):
        return _PyAnyCAD.AABoxD_setMinimumY(self, y)

    def setMinimumZ(self, z):
        return _PyAnyCAD.AABoxD_setMinimumZ(self, z)

    def setMaximum(self, *args):
        return _PyAnyCAD.AABoxD_setMaximum(self, *args)

    def setMaximumX(self, x):
        r"""
        Changes one of the components of the maximum corner of the box
           used to resize only one dimension of the box
        """
        return _PyAnyCAD.AABoxD_setMaximumX(self, x)

    def setMaximumY(self, y):
        return _PyAnyCAD.AABoxD_setMaximumY(self, y)

    def setMaximumZ(self, z):
        return _PyAnyCAD.AABoxD_setMaximumZ(self, z)

    def setExtents(self, *args):
        return _PyAnyCAD.AABoxD_setExtents(self, *args)

    def getAllCorners(self):
        r"""
         Returns a pointer to an array of 8 corner points, useful for
            collision vs. non-aligned objects.
            Remarks: 
            If the order of these corners is important, they are as
            follows: The 4 points of the minimum Z face (note that
            because Ogre uses right-handed coordinates, the minimum Z is
            at the 'back' of the box) starting with the minimum point of
            all, then anticlockwise around this face (if you are looking
            onto the face from outside the box). Then the 4 points of the
            maximum Z face, starting with maximum point of all, then
            anticlockwise around this face (looking onto the face from
            outside the box). Like this:

               1-------2
        |      /|
        |     / |
            5-------4  |
            |  0----|--3
            | /     | /
            |/      |/
            6-------7
        """
        return _PyAnyCAD.AABoxD_getAllCorners(self)

    def getCorner(self, cornerToGet):
        r""" Gets the position of one of the corners"""
        return _PyAnyCAD.AABoxD_getCorner(self, cornerToGet)

    def merge(self, *args):
        r"""
        *Overload 1:*
        Merges the passed in box into the current box. The result is the
           box which encompasses both.

        |

        *Overload 2:*
        Extends the box to encompass the specified point (if needed).
        """
        return _PyAnyCAD.AABoxD_merge(self, *args)

    def matPlusVec3(self, m, v):
        r"""
        Transforms the box according to the matrix supplied.
           Remarks: 
           By calling this method you get the axis-aligned box which
           surrounds the transformed version of this box. Therefore each
           corner of the box is transformed by the matrix, then the
           extents are mapped back onto the axes to produce another
           AABB. Useful when you have a local AABB for an object which
           is then transformed.
        """
        return _PyAnyCAD.AABoxD_matPlusVec3(self, m, v)

    def transform(self, matrix):
        return _PyAnyCAD.AABoxD_transform(self, matrix)

    def transformedCorners(self, matrix):
        r"""
        Get all corners which transformed by given matrix
        :type matrix: :py:class:`mat4`
        :param matrix:
        """
        return _PyAnyCAD.AABoxD_transformedCorners(self, matrix)

    def setNull(self):
        r""" Sets the box to a 'null' value i.e. not a box."""
        return _PyAnyCAD.AABoxD_setNull(self)

    def isNull(self):
        r""" Returns true if the box is null i.e. empty."""
        return _PyAnyCAD.AABoxD_isNull(self)

    def isFinite(self):
        r""" Returns true if the box is finite."""
        return _PyAnyCAD.AABoxD_isFinite(self)

    def setInfinite(self):
        r""" Sets the box to 'infinite'"""
        return _PyAnyCAD.AABoxD_setInfinite(self)

    def isInfinite(self):
        r""" Returns true if the box is infinite."""
        return _PyAnyCAD.AABoxD_isInfinite(self)

    def intersection(self, b2):
        r""" Calculate the area of intersection of this box and another"""
        return _PyAnyCAD.AABoxD_intersection(self, b2)

    def volume(self):
        r""" Calculate the volume of this box"""
        return _PyAnyCAD.AABoxD_volume(self)

    def scale(self, s):
        r""" Scales the AABB by the vector given."""
        return _PyAnyCAD.AABoxD_scale(self, s)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Returns whether or not this box intersects another.

        |

        *Overload 2:*
        Tests whether this box intersects a sphere.

        |

        *Overload 3:*
        Tests whether this box intersects a plane.

        |

        *Overload 4:*
        Tests whether the vector point is within this box.
        """
        return _PyAnyCAD.AABoxD_intersects(self, *args)

    def getCenter(self):
        r""" Gets the centre of the box"""
        return _PyAnyCAD.AABoxD_getCenter(self)

    def getSize(self):
        r""" Gets the size of the box"""
        return _PyAnyCAD.AABoxD_getSize(self)

    def getHalfSize(self):
        r""" Gets the half-size of the box"""
        return _PyAnyCAD.AABoxD_getHalfSize(self)

    def squaredDistance(self, v):
        r"""
        Returns the squared minimum distance between a given point and any part of the box.
        This is faster than distance since avoiding a squareroot, so use if you can.
        """
        return _PyAnyCAD.AABoxD_squaredDistance(self, v)

    def distance(self, v):
        r""" Returns the minimum distance between a given point and any part of the box."""
        return _PyAnyCAD.AABoxD_distance(self, v)

    def contains(self, *args):
        r"""
        *Overload 1:*
        Tests whether the given point contained by this box.

        |

        *Overload 2:*
        Tests whether another box contained by this box.
        """
        return _PyAnyCAD.AABoxD_contains(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_AABoxD

# Register AABoxD in _PyAnyCAD:
_PyAnyCAD.AABoxD_swigregister(AABoxD)
class BoundedVolume(object):
    r"""
    Author: Common
    Represents a convex volume bounded by planes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    planes = property(_PyAnyCAD.BoundedVolume_planes_get, _PyAnyCAD.BoundedVolume_planes_set)
    outside = property(_PyAnyCAD.BoundedVolume_outside_get, _PyAnyCAD.BoundedVolume_outside_set)

    def __init__(self, *args):
        r""" Constructor, determines which side is deemed to be 'outside'"""
        _PyAnyCAD.BoundedVolume_swiginit(self, _PyAnyCAD.new_BoundedVolume(*args))

    def intersects(self, *args):
        r"""
        *Overload 1:*
         Intersection test with AABB
        	Remarks: May return false positives but will never miss an intersection.


        |

        *Overload 2:*
         Intersection test with Sphere
        	Remarks: May return false positives but will never miss an intersection.


        |

        *Overload 3:*
         Intersection test with a Ray
        	:rtype: std::pair< bool,float >
        :return: std::pair of hit (bool) and distance
            	Remarks: May return false positives but will never miss an intersection.
        """
        return _PyAnyCAD.BoundedVolume_intersects(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_BoundedVolume

# Register BoundedVolume in _PyAnyCAD:
_PyAnyCAD.BoundedVolume_swigregister(BoundedVolume)
class BoundedVolumeD(object):
    r"""
    Author: Common
    Represents a convex volume bounded by planes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    planes = property(_PyAnyCAD.BoundedVolumeD_planes_get, _PyAnyCAD.BoundedVolumeD_planes_set)
    outside = property(_PyAnyCAD.BoundedVolumeD_outside_get, _PyAnyCAD.BoundedVolumeD_outside_set)

    def __init__(self, *args):
        r""" Constructor, determines which side is deemed to be 'outside'"""
        _PyAnyCAD.BoundedVolumeD_swiginit(self, _PyAnyCAD.new_BoundedVolumeD(*args))

    def intersects(self, *args):
        r"""
        *Overload 1:*
         Intersection test with AABB
        	Remarks: May return false positives but will never miss an intersection.


        |

        *Overload 2:*
         Intersection test with Sphere
        	Remarks: May return false positives but will never miss an intersection.


        |

        *Overload 3:*
         Intersection test with a Ray
        	:rtype: std::pair< bool,double >
        :return: std::pair of hit (bool) and distance
            	Remarks: May return false positives but will never miss an intersection.
        """
        return _PyAnyCAD.BoundedVolumeD_intersects(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_BoundedVolumeD

# Register BoundedVolumeD in _PyAnyCAD:
_PyAnyCAD.BoundedVolumeD_swigregister(BoundedVolumeD)
class SphereF(object):
    r"""
     A sphere primitive, mostly used for bounds checking.
    Remarks: 
        A sphere in math texts is normally represented by the function
        x^2 + y^2 + z^2 = r^2 (for sphere's centered on the origin). Ogre stores spheres
        simply as a center point and a radius.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.SphereF_swiginit(self, _PyAnyCAD.new_SphereF(*args))

    def getRadius(self):
        r""" Returns the radius of the sphere."""
        return _PyAnyCAD.SphereF_getRadius(self)

    def setRadius(self, radius):
        r""" Sets the radius of the sphere."""
        return _PyAnyCAD.SphereF_setRadius(self, radius)

    def getCenter(self):
        r""" Returns the center point of the sphere."""
        return _PyAnyCAD.SphereF_getCenter(self)

    def setCenter(self, center):
        r""" Sets the center point of the sphere."""
        return _PyAnyCAD.SphereF_setCenter(self, center)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Returns whether or not this sphere intersects another sphere.

        |

        *Overload 2:*
        Returns whether or not this sphere intersects a box.

        |

        *Overload 3:*
        Returns whether or not this sphere intersects a plane.

        |

        *Overload 4:*
        Returns whether or not this sphere intersects a point.
        """
        return _PyAnyCAD.SphereF_intersects(self, *args)

    def merge(self, oth):
        r""" Merges another Sphere into the current sphere"""
        return _PyAnyCAD.SphereF_merge(self, oth)

    def transform(self, trf):
        return _PyAnyCAD.SphereF_transform(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_SphereF

# Register SphereF in _PyAnyCAD:
_PyAnyCAD.SphereF_swigregister(SphereF)
class Sphere(object):
    r"""
     A sphere primitive, mostly used for bounds checking.
    Remarks: 
        A sphere in math texts is normally represented by the function
        x^2 + y^2 + z^2 = r^2 (for sphere's centered on the origin). Ogre stores spheres
        simply as a center point and a radius.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Sphere_swiginit(self, _PyAnyCAD.new_Sphere(*args))

    def getRadius(self):
        r""" Returns the radius of the sphere."""
        return _PyAnyCAD.Sphere_getRadius(self)

    def setRadius(self, radius):
        r""" Sets the radius of the sphere."""
        return _PyAnyCAD.Sphere_setRadius(self, radius)

    def getCenter(self):
        r""" Returns the center point of the sphere."""
        return _PyAnyCAD.Sphere_getCenter(self)

    def setCenter(self, center):
        r""" Sets the center point of the sphere."""
        return _PyAnyCAD.Sphere_setCenter(self, center)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Returns whether or not this sphere intersects another sphere.

        |

        *Overload 2:*
        Returns whether or not this sphere intersects a box.

        |

        *Overload 3:*
        Returns whether or not this sphere intersects a plane.

        |

        *Overload 4:*
        Returns whether or not this sphere intersects a point.
        """
        return _PyAnyCAD.Sphere_intersects(self, *args)

    def merge(self, oth):
        r""" Merges another Sphere into the current sphere"""
        return _PyAnyCAD.Sphere_merge(self, oth)

    def transform(self, trf):
        return _PyAnyCAD.Sphere_transform(self, trf)
    __swig_destroy__ = _PyAnyCAD.delete_Sphere

# Register Sphere in _PyAnyCAD:
_PyAnyCAD.Sphere_swigregister(Sphere)
EnumPlaneSide_NO_SIDE = _PyAnyCAD.EnumPlaneSide_NO_SIDE
EnumPlaneSide_POSITIVE_SIDE = _PyAnyCAD.EnumPlaneSide_POSITIVE_SIDE
EnumPlaneSide_NEGATIVE_SIDE = _PyAnyCAD.EnumPlaneSide_NEGATIVE_SIDE
EnumPlaneSide_BOTH_SIDE = _PyAnyCAD.EnumPlaneSide_BOTH_SIDE
class PlaneF(object):
    r"""
     Defines a plane in 3D space.
        Remarks: 
            A plane is defined in 3D space by the equation
            Ax + By + Cz + D = 0
        Title:         This equates to a vector (the normal of the plane, whose x, y
            and z components equate to the coefficients A, B and C
            respectively), and a constant (D) which is the distance along
            the normal you have to go to move the plane back to the origin.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    normal = property(_PyAnyCAD.PlaneF_normal_get, _PyAnyCAD.PlaneF_normal_set)
    d = property(_PyAnyCAD.PlaneF_d_get, _PyAnyCAD.PlaneF_d_set)

    def __init__(self, *args):
        _PyAnyCAD.PlaneF_swiginit(self, _PyAnyCAD.new_PlaneF(*args))

    def getSide(self, *args):
        return _PyAnyCAD.PlaneF_getSide(self, *args)

    def getDistance(self, rkPoint):
        r"""
        This is a pseudodistance. The sign of the return value is
               positive if the point is on the positive side of the plane,
               negative if the point is on the negative side, and zero if the
               point is on the plane.
               Title:         The absolute value of the return value is the true distance only
               when the plane normal is a unit length vector.
        """
        return _PyAnyCAD.PlaneF_getDistance(self, rkPoint)

    def redefine(self, *args):
        r"""
        *Overload 1:*
        Redefine this plane based on 3 points.

        |

        *Overload 2:*
        Redefine this plane based on a normal and a point.
        """
        return _PyAnyCAD.PlaneF_redefine(self, *args)

    def projectVector(self, v):
        r"""
        Project a vector onto the plane.
           Remarks: This gives you the element of the input vector that is perpendicular
               to the normal of the plane. You can get the element which is parallel
               to the normal of the plane by subtracting the result of this method
               from the original vector, since parallel + perpendicular = original.
           :type v: anycore::PlaneT< float >::element_type
           :param v: The input vector
        """
        return _PyAnyCAD.PlaneF_projectVector(self, v)

    def normalise(self):
        r"""
        Normalises the plane.
               Remarks: 
                   This method normalises the plane's normal and the length scale of d
                   is as well.
               Notes: 
                   This function will not crash for zero-sized vectors, but there
                   will be no changes made to their components.
               :rtype: float
               :return: The previous length of the plane's normal.
        """
        return _PyAnyCAD.PlaneF_normalise(self)

    def coplanarPoint(self):
        return _PyAnyCAD.PlaneF_coplanarPoint(self)

    def applyMatrix(self, *args):
        return _PyAnyCAD.PlaneF_applyMatrix(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_PlaneF

# Register PlaneF in _PyAnyCAD:
_PyAnyCAD.PlaneF_swigregister(PlaneF)
class Plane(object):
    r"""
     Defines a plane in 3D space.
        Remarks: 
            A plane is defined in 3D space by the equation
            Ax + By + Cz + D = 0
        Title:         This equates to a vector (the normal of the plane, whose x, y
            and z components equate to the coefficients A, B and C
            respectively), and a constant (D) which is the distance along
            the normal you have to go to move the plane back to the origin.
    Author: Common
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    normal = property(_PyAnyCAD.Plane_normal_get, _PyAnyCAD.Plane_normal_set)
    d = property(_PyAnyCAD.Plane_d_get, _PyAnyCAD.Plane_d_set)

    def __init__(self, *args):
        _PyAnyCAD.Plane_swiginit(self, _PyAnyCAD.new_Plane(*args))

    def getSide(self, *args):
        return _PyAnyCAD.Plane_getSide(self, *args)

    def getDistance(self, rkPoint):
        r"""
        This is a pseudodistance. The sign of the return value is
               positive if the point is on the positive side of the plane,
               negative if the point is on the negative side, and zero if the
               point is on the plane.
               Title:         The absolute value of the return value is the true distance only
               when the plane normal is a unit length vector.
        """
        return _PyAnyCAD.Plane_getDistance(self, rkPoint)

    def redefine(self, *args):
        r"""
        *Overload 1:*
        Redefine this plane based on 3 points.

        |

        *Overload 2:*
        Redefine this plane based on a normal and a point.
        """
        return _PyAnyCAD.Plane_redefine(self, *args)

    def projectVector(self, v):
        r"""
        Project a vector onto the plane.
           Remarks: This gives you the element of the input vector that is perpendicular
               to the normal of the plane. You can get the element which is parallel
               to the normal of the plane by subtracting the result of this method
               from the original vector, since parallel + perpendicular = original.
           :type v: anycore::PlaneT< double >::element_type
           :param v: The input vector
        """
        return _PyAnyCAD.Plane_projectVector(self, v)

    def normalise(self):
        r"""
        Normalises the plane.
               Remarks: 
                   This method normalises the plane's normal and the length scale of d
                   is as well.
               Notes: 
                   This function will not crash for zero-sized vectors, but there
                   will be no changes made to their components.
               :rtype: float
               :return: The previous length of the plane's normal.
        """
        return _PyAnyCAD.Plane_normalise(self)

    def coplanarPoint(self):
        return _PyAnyCAD.Plane_coplanarPoint(self)

    def applyMatrix(self, *args):
        return _PyAnyCAD.Plane_applyMatrix(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_Plane

# Register Plane in _PyAnyCAD:
_PyAnyCAD.Plane_swigregister(Plane)
class RayF(object):
    r"""
    Author: Common

    Representation of a ray in space,
    i.e. a line with an origin and direction.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RayF_swiginit(self, _PyAnyCAD.new_RayF(*args))

    def setOrigin(self, origin):
        r""" Sets the origin of the ray."""
        return _PyAnyCAD.RayF_setOrigin(self, origin)

    def getOrigin(self):
        r""" Gets the origin of the ray."""
        return _PyAnyCAD.RayF_getOrigin(self)

    def setDirection(self, dir):
        r""" Sets the direction of the ray."""
        return _PyAnyCAD.RayF_setDirection(self, dir)

    def getDirection(self):
        r""" Gets the direction of the ray."""
        return _PyAnyCAD.RayF_getDirection(self)

    def getPoint(self, t):
        r""" Gets the position of a point t units along the ray."""
        return _PyAnyCAD.RayF_getPoint(self, t)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Tests whether this ray intersects the given plane.
           :rtype: std::pair< bool,float >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().

        |

        *Overload 2:*
        Tests whether this ray intersects the given plane bounded volume.
           :rtype: std::pair< bool,float >
           :return: A pair structure where the first element indicates whether
               an intersection occurs, and if true, the second element will
               indicate the distance along the ray at which it intersects.
               This can be converted to a point in space by calling getPoint().

        |

        *Overload 3:*
        Tests whether this ray intersects the given sphere.
           :rtype: std::pair< bool,float >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().

        |

        *Overload 4:*
        Tests whether this ray intersects the given box.
           :rtype: std::pair< bool,float >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().
        """
        return _PyAnyCAD.RayF_intersects(self, *args)

    def IsVertexOn(self, vertex):
        r""" return true if the vertex is on the ray"""
        return _PyAnyCAD.RayF_IsVertexOn(self, vertex)

    def applyMatrix(self, trf):
        return _PyAnyCAD.RayF_applyMatrix(self, trf)

    def projectPoint(self, pt):
        return _PyAnyCAD.RayF_projectPoint(self, pt)
    __swig_destroy__ = _PyAnyCAD.delete_RayF

# Register RayF in _PyAnyCAD:
_PyAnyCAD.RayF_swigregister(RayF)
class Ray(object):
    r"""
    Author: Common

    Representation of a ray in space,
    i.e. a line with an origin and direction.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Ray_swiginit(self, _PyAnyCAD.new_Ray(*args))

    def setOrigin(self, origin):
        r""" Sets the origin of the ray."""
        return _PyAnyCAD.Ray_setOrigin(self, origin)

    def getOrigin(self):
        r""" Gets the origin of the ray."""
        return _PyAnyCAD.Ray_getOrigin(self)

    def setDirection(self, dir):
        r""" Sets the direction of the ray."""
        return _PyAnyCAD.Ray_setDirection(self, dir)

    def getDirection(self):
        r""" Gets the direction of the ray."""
        return _PyAnyCAD.Ray_getDirection(self)

    def getPoint(self, t):
        r""" Gets the position of a point t units along the ray."""
        return _PyAnyCAD.Ray_getPoint(self, t)

    def intersects(self, *args):
        r"""
        *Overload 1:*
        Tests whether this ray intersects the given plane.
           :rtype: std::pair< bool,double >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().

        |

        *Overload 2:*
        Tests whether this ray intersects the given plane bounded volume.
           :rtype: std::pair< bool,double >
           :return: A pair structure where the first element indicates whether
               an intersection occurs, and if true, the second element will
               indicate the distance along the ray at which it intersects.
               This can be converted to a point in space by calling getPoint().

        |

        *Overload 3:*
        Tests whether this ray intersects the given sphere.
           :rtype: std::pair< bool,double >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().

        |

        *Overload 4:*
        Tests whether this ray intersects the given box.
           :rtype: std::pair< bool,double >
           :return: A pair structure where the first element indicates whether
                   an intersection occurs, and if true, the second element will
                   indicate the distance along the ray at which it intersects.
                   This can be converted to a point in space by calling getPoint().
        """
        return _PyAnyCAD.Ray_intersects(self, *args)

    def IsVertexOn(self, vertex):
        r""" return true if the vertex is on the ray"""
        return _PyAnyCAD.Ray_IsVertexOn(self, vertex)

    def applyMatrix(self, trf):
        return _PyAnyCAD.Ray_applyMatrix(self, trf)

    def projectPoint(self, pt):
        return _PyAnyCAD.Ray_projectPoint(self, pt)
    __swig_destroy__ = _PyAnyCAD.delete_Ray

# Register Ray in _PyAnyCAD:
_PyAnyCAD.Ray_swigregister(Ray)
class RayIntersectF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RayIntersectF_swiginit(self, _PyAnyCAD.new_RayIntersectF(*args))
    first = property(_PyAnyCAD.RayIntersectF_first_get, _PyAnyCAD.RayIntersectF_first_set)
    second = property(_PyAnyCAD.RayIntersectF_second_get, _PyAnyCAD.RayIntersectF_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _PyAnyCAD.delete_RayIntersectF

# Register RayIntersectF in _PyAnyCAD:
_PyAnyCAD.RayIntersectF_swigregister(RayIntersectF)
class RayIntersect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RayIntersect_swiginit(self, _PyAnyCAD.new_RayIntersect(*args))
    first = property(_PyAnyCAD.RayIntersect_first_get, _PyAnyCAD.RayIntersect_first_set)
    second = property(_PyAnyCAD.RayIntersect_second_get, _PyAnyCAD.RayIntersect_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _PyAnyCAD.delete_RayIntersect

# Register RayIntersect in _PyAnyCAD:
_PyAnyCAD.RayIntersect_swigregister(RayIntersect)
class PlaneFList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PlaneFList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PlaneFList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PlaneFList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PlaneFList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PlaneFList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PlaneFList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PlaneFList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PlaneFList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PlaneFList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PlaneFList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PlaneFList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PlaneFList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PlaneFList_empty(self)

    def size(self):
        return _PyAnyCAD.PlaneFList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PlaneFList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PlaneFList_begin(self)

    def end(self):
        return _PyAnyCAD.PlaneFList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PlaneFList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PlaneFList_rend(self)

    def clear(self):
        return _PyAnyCAD.PlaneFList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PlaneFList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PlaneFList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PlaneFList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PlaneFList_swiginit(self, _PyAnyCAD.new_PlaneFList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PlaneFList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PlaneFList_front(self)

    def back(self):
        return _PyAnyCAD.PlaneFList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PlaneFList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PlaneFList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PlaneFList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PlaneFList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PlaneFList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PlaneFList

# Register PlaneFList in _PyAnyCAD:
_PyAnyCAD.PlaneFList_swigregister(PlaneFList)
class PlaneList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PlaneList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PlaneList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PlaneList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PlaneList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PlaneList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PlaneList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PlaneList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PlaneList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PlaneList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PlaneList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PlaneList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PlaneList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PlaneList_empty(self)

    def size(self):
        return _PyAnyCAD.PlaneList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PlaneList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PlaneList_begin(self)

    def end(self):
        return _PyAnyCAD.PlaneList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PlaneList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PlaneList_rend(self)

    def clear(self):
        return _PyAnyCAD.PlaneList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PlaneList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PlaneList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PlaneList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PlaneList_swiginit(self, _PyAnyCAD.new_PlaneList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PlaneList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PlaneList_front(self)

    def back(self):
        return _PyAnyCAD.PlaneList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PlaneList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PlaneList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PlaneList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PlaneList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PlaneList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PlaneList

# Register PlaneList in _PyAnyCAD:
_PyAnyCAD.PlaneList_swigregister(PlaneList)
class ValueRange(object):
    r"""
    Author: Common
    Value range for double.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ValueRange_swiginit(self, _PyAnyCAD.new_ValueRange(*args))

    def SetValue(self, val):
        return _PyAnyCAD.ValueRange_SetValue(self, val)

    def GetValue(self):
        return _PyAnyCAD.ValueRange_GetValue(self)

    def GetMinValue(self):
        return _PyAnyCAD.ValueRange_GetMinValue(self)

    def SetMinValue(self, val):
        return _PyAnyCAD.ValueRange_SetMinValue(self, val)

    def GetMaxValue(self):
        return _PyAnyCAD.ValueRange_GetMaxValue(self)

    def SetMaxValue(self, val):
        return _PyAnyCAD.ValueRange_SetMaxValue(self, val)

    def SetRange(self, minV, maxV):
        return _PyAnyCAD.ValueRange_SetRange(self, minV, maxV)

    def IsValidValue(self, val):
        return _PyAnyCAD.ValueRange_IsValidValue(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_ValueRange

# Register ValueRange in _PyAnyCAD:
_PyAnyCAD.ValueRange_swigregister(ValueRange)
class ObjectId(object):
    r"""
    Author: Common

    ObjectId对象的唯一ID
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ObjectId_swiginit(self, _PyAnyCAD.new_ObjectId(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ObjectId

    def GetInteger(self):
        return _PyAnyCAD.ObjectId_GetInteger(self)

    def SetInteger(self, val):
        return _PyAnyCAD.ObjectId_SetInteger(self, val)

    @staticmethod
    def NewId():
        r"""
        创建一个ID
        :rtype: :py:class:`ObjectId`
        :return: ID
        """
        return _PyAnyCAD.ObjectId_NewId()

    def IsEqual(self, id):
        r"""
        是否与id相等
        :type id: :py:class:`ObjectId`
        :param id: 需要对比的ID
        :rtype: boolean
        :return: true如果相等
        """
        return _PyAnyCAD.ObjectId_IsEqual(self, id)

    def IsValid(self):
        r"""
        判断是否有效
        :rtype: boolean
        :return: true如果有效
        """
        return _PyAnyCAD.ObjectId_IsValid(self)

    def IsInvalid(self):
        r"""
        是否为无效
        :rtype: boolean
        :return: true如果无效
        """
        return _PyAnyCAD.ObjectId_IsInvalid(self)

    def toString(self):
        return _PyAnyCAD.ObjectId_toString(self)

# Register ObjectId in _PyAnyCAD:
_PyAnyCAD.ObjectId_swigregister(ObjectId)
cvar = _PyAnyCAD.cvar
ObjectId.InvalidId = _PyAnyCAD.cvar.ObjectId_InvalidId

class ObjectIdSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ObjectIdSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ObjectIdSet___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ObjectIdSet___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ObjectIdSet___len__(self)

    def append(self, x):
        return _PyAnyCAD.ObjectIdSet_append(self, x)

    def __contains__(self, x):
        return _PyAnyCAD.ObjectIdSet___contains__(self, x)

    def __getitem__(self, i):
        return _PyAnyCAD.ObjectIdSet___getitem__(self, i)

    def add(self, x):
        return _PyAnyCAD.ObjectIdSet_add(self, x)

    def discard(self, x):
        return _PyAnyCAD.ObjectIdSet_discard(self, x)

    def __init__(self, *args):
        _PyAnyCAD.ObjectIdSet_swiginit(self, _PyAnyCAD.new_ObjectIdSet(*args))

    def empty(self):
        return _PyAnyCAD.ObjectIdSet_empty(self)

    def size(self):
        return _PyAnyCAD.ObjectIdSet_size(self)

    def clear(self):
        return _PyAnyCAD.ObjectIdSet_clear(self)

    def swap(self, v):
        return _PyAnyCAD.ObjectIdSet_swap(self, v)

    def count(self, x):
        return _PyAnyCAD.ObjectIdSet_count(self, x)

    def begin(self):
        return _PyAnyCAD.ObjectIdSet_begin(self)

    def end(self):
        return _PyAnyCAD.ObjectIdSet_end(self)

    def rbegin(self):
        return _PyAnyCAD.ObjectIdSet_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ObjectIdSet_rend(self)

    def erase(self, *args):
        return _PyAnyCAD.ObjectIdSet_erase(self, *args)

    def find(self, x):
        return _PyAnyCAD.ObjectIdSet_find(self, x)

    def lower_bound(self, x):
        return _PyAnyCAD.ObjectIdSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _PyAnyCAD.ObjectIdSet_upper_bound(self, x)

    def equal_range(self, x):
        return _PyAnyCAD.ObjectIdSet_equal_range(self, x)

    def insert(self, __x):
        return _PyAnyCAD.ObjectIdSet_insert(self, __x)
    __swig_destroy__ = _PyAnyCAD.delete_ObjectIdSet

# Register ObjectIdSet in _PyAnyCAD:
_PyAnyCAD.ObjectIdSet_swigregister(ObjectIdSet)
class ObjectIdList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ObjectIdList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ObjectIdList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ObjectIdList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ObjectIdList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.ObjectIdList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.ObjectIdList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.ObjectIdList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.ObjectIdList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.ObjectIdList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.ObjectIdList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.ObjectIdList_pop(self)

    def append(self, x):
        return _PyAnyCAD.ObjectIdList_append(self, x)

    def empty(self):
        return _PyAnyCAD.ObjectIdList_empty(self)

    def size(self):
        return _PyAnyCAD.ObjectIdList_size(self)

    def swap(self, v):
        return _PyAnyCAD.ObjectIdList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.ObjectIdList_begin(self)

    def end(self):
        return _PyAnyCAD.ObjectIdList_end(self)

    def rbegin(self):
        return _PyAnyCAD.ObjectIdList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ObjectIdList_rend(self)

    def clear(self):
        return _PyAnyCAD.ObjectIdList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.ObjectIdList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.ObjectIdList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.ObjectIdList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.ObjectIdList_swiginit(self, _PyAnyCAD.new_ObjectIdList(*args))

    def push_back(self, x):
        return _PyAnyCAD.ObjectIdList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.ObjectIdList_front(self)

    def back(self):
        return _PyAnyCAD.ObjectIdList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.ObjectIdList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.ObjectIdList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.ObjectIdList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.ObjectIdList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.ObjectIdList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_ObjectIdList

# Register ObjectIdList in _PyAnyCAD:
_PyAnyCAD.ObjectIdList_swigregister(ObjectIdList)
EnumAppEventType_ModelLoaded = _PyAnyCAD.EnumAppEventType_ModelLoaded
EnumAppEventType_ModelCreated = _PyAnyCAD.EnumAppEventType_ModelCreated
r"""新建文档"""
EnumAppEventType_CameraChanged = _PyAnyCAD.EnumAppEventType_CameraChanged
r"""相机变化了"""
EnumAppEventType_CommandStarted = _PyAnyCAD.EnumAppEventType_CommandStarted
r"""开始命令"""
EnumAppEventType_CommandFinished = _PyAnyCAD.EnumAppEventType_CommandFinished
r"""结束命令"""
EnumAppEventType_EditorStared = _PyAnyCAD.EnumAppEventType_EditorStared
r"""开始编辑"""
EnumAppEventType_UpdateEditorParams = _PyAnyCAD.EnumAppEventType_UpdateEditorParams
r"""更新编辑过程中的参数"""
EnumAppEventType_EditorFinished = _PyAnyCAD.EnumAppEventType_EditorFinished
r"""结束编辑"""
EnumAppEventType_EditModeStarted = _PyAnyCAD.EnumAppEventType_EditModeStarted
r"""进入编辑模式"""
EnumAppEventType_EditModeFinished = _PyAnyCAD.EnumAppEventType_EditModeFinished
r"""退出编辑模式"""
EnumAppEventType_SaveElementBegin = _PyAnyCAD.EnumAppEventType_SaveElementBegin
r"""开始保存图元"""
EnumAppEventType_ElementRemoved = _PyAnyCAD.EnumAppEventType_ElementRemoved
r"""移除图元"""
EnumAppEventType_ElementChanged = _PyAnyCAD.EnumAppEventType_ElementChanged
r"""修改图元"""
EnumAppEventType_ElementAdded = _PyAnyCAD.EnumAppEventType_ElementAdded
r"""添加图元"""
EnumAppEventType_SaveElementEnd = _PyAnyCAD.EnumAppEventType_SaveElementEnd
r"""结束保存图元"""
EnumAppEventType_SwitchSketch = _PyAnyCAD.EnumAppEventType_SwitchSketch
r"""切换草图"""
EnumAppEventType_SelectionChanged = _PyAnyCAD.EnumAppEventType_SelectionChanged
r"""选择集发生变化"""
EnumAppEventType_BeginInput = _PyAnyCAD.EnumAppEventType_BeginInput
r"""开始输入"""
EnumAppEventType_PreviewInput = _PyAnyCAD.EnumAppEventType_PreviewInput
r"""预览输入"""
EnumAppEventType_CommitInput = _PyAnyCAD.EnumAppEventType_CommitInput
r"""确定输入"""
EnumAppEventType_EndInput = _PyAnyCAD.EnumAppEventType_EndInput
r"""结束输入"""
class AppEventArgs(object):
    r"""
    Author: Common
    AppEventArgs
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetBuffer(self):
        return _PyAnyCAD.AppEventArgs_GetBuffer(self)

    def SetBuffer(self, val):
        return _PyAnyCAD.AppEventArgs_SetBuffer(self, val)

    def GetContent(self):
        return _PyAnyCAD.AppEventArgs_GetContent(self)

    def ToJSON(self):
        return _PyAnyCAD.AppEventArgs_ToJSON(self)
    __swig_destroy__ = _PyAnyCAD.delete_AppEventArgs

# Register AppEventArgs in _PyAnyCAD:
_PyAnyCAD.AppEventArgs_swigregister(AppEventArgs)
class AppEventListener(object):
    r"""
    Author: Common
    程序级的事件监听器接口。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_AppEventListener

    def OnMessage(self, evt, msg, content):
        r"""
        监听事件
        :type evt: int
        :param evt: 事件类型
        :type msg: string
        :param msg: 消息
        :type content: :py:class:`AppEventArgs`
        :param content: 内容
        """
        return _PyAnyCAD.AppEventListener_OnMessage(self, evt, msg, content)

    def OnDebugMessage(self, msg):
        r"""
        调试信息
        :type msg: string
        :param msg: 信息
        """
        return _PyAnyCAD.AppEventListener_OnDebugMessage(self, msg)

    def __init__(self):
        if self.__class__ == AppEventListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.AppEventListener_swiginit(self, _PyAnyCAD.new_AppEventListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_AppEventListener(self)
        return weakref.proxy(self)

# Register AppEventListener in _PyAnyCAD:
_PyAnyCAD.AppEventListener_swigregister(AppEventListener)
class AppEventListenerManager(object):
    r"""
    Author: Common
    程序级的事件监听器管理器。全局唯一
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.AppEventListenerManager_Instance()

    def Add(self, listener):
        r"""
        添加监听器
        :type listener: :py:class:`AppEventListener`
        :param listener: 监听器实例
        """
        return _PyAnyCAD.AppEventListenerManager_Add(self, listener)

    def Remove(self, listener):
        r"""
        移除监听器
        :type listener: :py:class:`AppEventListener`
        :param listener: 监听器
        """
        return _PyAnyCAD.AppEventListenerManager_Remove(self, listener)

    @staticmethod
    def Message(msg):
        r"""
        发送调试消息
        :type msg: string
        :param msg: 消息
        """
        return _PyAnyCAD.AppEventListenerManager_Message(msg)
    __swig_destroy__ = _PyAnyCAD.delete_AppEventListenerManager

# Register AppEventListenerManager in _PyAnyCAD:
_PyAnyCAD.AppEventListenerManager_swigregister(AppEventListenerManager)
class SystemUnits(object):
    r"""
    Author: Common
    定义系统默认的单位，提供与界面展示互相转换的方法
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.SystemUnits_Instance()

    def Get(self, quantity):
        r"""
        获取单位
        :type quantity: string
        :param quantity: 量纲
        :rtype: string
        :return: 返回单位
        """
        return _PyAnyCAD.SystemUnits_Get(self, quantity)

    def Set(self, quantity, unit):
        r"""
        设置量纲
        :type quantity: string
        :param quantity: 量纲
        :type unit: string
        :param unit: 单位
        """
        return _PyAnyCAD.SystemUnits_Set(self, quantity, unit)

    def ToSystemValue(self, val, unit, quantity):
        r"""
        转换为系统值
        :type val: float
        :param val: 界面展示的值
        :type unit: string
        :param unit: 界面展示的单位
        :type quantity: string
        :param quantity: 量纲
        :rtype: float
        :return: 系统存储的值
        """
        return _PyAnyCAD.SystemUnits_ToSystemValue(self, val, unit, quantity)

    def FromSystemValue(self, val, unit, quantity):
        r"""
        转换为界面展示的值
        :type val: float
        :param val: 系统存储的值
        :type unit: string
        :param unit: 界面展示的单位
        :type quantity: string
        :param quantity: 量纲
        :rtype: float
        :return: 界面展示的值
        """
        return _PyAnyCAD.SystemUnits_FromSystemValue(self, val, unit, quantity)

    def ToSystemLength(self, val, unit):
        r"""
        转成为系统长度值
        :type val: float
        :param val: 界面展示的值
        :type unit: string
        :param unit: 界面展示的单位
        :rtype: float
        :return: 系统存储的值
        """
        return _PyAnyCAD.SystemUnits_ToSystemLength(self, val, unit)

    def FromSystemLength(self, val, unit):
        r"""
        转换为界面展示的长度值
        :type val: float
        :param val: 系统存储的值
        :type unit: string
        :param unit: 界面展示的单位
        :rtype: float
        :return: 界面展示的值
        """
        return _PyAnyCAD.SystemUnits_FromSystemLength(self, val, unit)

    def ToSystemAngle(self, val, unit):
        r"""
        转成为系统角度值
        :type val: float
        :param val: 界面展示的值
        :type unit: string
        :param unit: 界面展示的单位
        :rtype: float
        :return: 系统存储的值
        """
        return _PyAnyCAD.SystemUnits_ToSystemAngle(self, val, unit)

    def FromSystemAngle(self, val, unit):
        r"""
        转换为界面展示的角度值
        :type val: float
        :param val: 系统存储的值
        :type unit: string
        :param unit: 界面展示的单位
        :rtype: float
        :return: 界面展示的值
        """
        return _PyAnyCAD.SystemUnits_FromSystemAngle(self, val, unit)
    __swig_destroy__ = _PyAnyCAD.delete_SystemUnits

# Register SystemUnits in _PyAnyCAD:
_PyAnyCAD.SystemUnits_swigregister(SystemUnits)
class GfxObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.GfxObject_swiginit(self, _PyAnyCAD.new_GfxObject())
    __swig_destroy__ = _PyAnyCAD.delete_GfxObject

    def GetUuid(self):
        return _PyAnyCAD.GfxObject_GetUuid(self)

# Register GfxObject in _PyAnyCAD:
_PyAnyCAD.GfxObject_swigregister(GfxObject)
EnumShapeFilter_Zero = _PyAnyCAD.EnumShapeFilter_Zero
EnumShapeFilter_Vertex = _PyAnyCAD.EnumShapeFilter_Vertex
EnumShapeFilter_Edge = _PyAnyCAD.EnumShapeFilter_Edge
EnumShapeFilter_Face = _PyAnyCAD.EnumShapeFilter_Face
EnumShapeFilter_EdgeVertex = _PyAnyCAD.EnumShapeFilter_EdgeVertex
EnumShapeFilter_EdgeFace = _PyAnyCAD.EnumShapeFilter_EdgeFace
EnumShapeFilter_VertexEdgeFace = _PyAnyCAD.EnumShapeFilter_VertexEdgeFace
EnumShapeFilter_LeafNode = _PyAnyCAD.EnumShapeFilter_LeafNode
EnumShapeFilter_RootNode = _PyAnyCAD.EnumShapeFilter_RootNode
EnumShapeFilter_Object = _PyAnyCAD.EnumShapeFilter_Object
EnumShapeFilter_Group = _PyAnyCAD.EnumShapeFilter_Group
EnumShapeFilter_Node = _PyAnyCAD.EnumShapeFilter_Node
class IntersectPoint(object):
    r"""
    Author: Rendering
    The insersect point.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.IntersectPoint_swiginit(self, _PyAnyCAD.new_IntersectPoint(*args))

    def GetShapeType(self):
        return _PyAnyCAD.IntersectPoint_GetShapeType(self)

    def SetShapeType(self, val):
        return _PyAnyCAD.IntersectPoint_SetShapeType(self, val)

    def GetPrimitiveIndex(self):
        return _PyAnyCAD.IntersectPoint_GetPrimitiveIndex(self)

    def SetPrimitiveIndex(self, val):
        return _PyAnyCAD.IntersectPoint_SetPrimitiveIndex(self, val)

    def GetDistance(self):
        return _PyAnyCAD.IntersectPoint_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.IntersectPoint_SetDistance(self, val)

    def GetPosition(self):
        return _PyAnyCAD.IntersectPoint_GetPosition(self)

    def GetLocalPosition(self):
        return _PyAnyCAD.IntersectPoint_GetLocalPosition(self)

    def SetLocalPosition(self, val):
        return _PyAnyCAD.IntersectPoint_SetLocalPosition(self, val)

    def GetShapeIndex(self):
        return _PyAnyCAD.IntersectPoint_GetShapeIndex(self)

    def SetShapeIndex(self, val):
        return _PyAnyCAD.IntersectPoint_SetShapeIndex(self, val)

    def GetTopoShapeId(self):
        return _PyAnyCAD.IntersectPoint_GetTopoShapeId(self)

    def SetTopoShapeId(self, val):
        return _PyAnyCAD.IntersectPoint_SetTopoShapeId(self, val)

    def GetSubDrawId(self):
        return _PyAnyCAD.IntersectPoint_GetSubDrawId(self)

    def SetSubDrawId(self, val):
        return _PyAnyCAD.IntersectPoint_SetSubDrawId(self, val)

    def IsNull(self):
        return _PyAnyCAD.IntersectPoint_IsNull(self)

    def AlmostEqual(self, other):
        return _PyAnyCAD.IntersectPoint_AlmostEqual(self, other)

    def Transform(self, trf):
        return _PyAnyCAD.IntersectPoint_Transform(self, trf)

    def ApplyPickOrder(self, order):
        return _PyAnyCAD.IntersectPoint_ApplyPickOrder(self, order)
    __swig_destroy__ = _PyAnyCAD.delete_IntersectPoint

# Register IntersectPoint in _PyAnyCAD:
_PyAnyCAD.IntersectPoint_swigregister(IntersectPoint)
EnumPrimitiveType_POINTS = _PyAnyCAD.EnumPrimitiveType_POINTS
EnumPrimitiveType_LINES = _PyAnyCAD.EnumPrimitiveType_LINES
EnumPrimitiveType_LINE_STRIP = _PyAnyCAD.EnumPrimitiveType_LINE_STRIP
EnumPrimitiveType_TRIANGLES = _PyAnyCAD.EnumPrimitiveType_TRIANGLES
EnumAttributeComponents_One = _PyAnyCAD.EnumAttributeComponents_One
EnumAttributeComponents_Two = _PyAnyCAD.EnumAttributeComponents_Two
EnumAttributeComponents_Three = _PyAnyCAD.EnumAttributeComponents_Three
EnumAttributeComponents_Four = _PyAnyCAD.EnumAttributeComponents_Four
EnumBufferDataUsage_STATIC_DRAW = _PyAnyCAD.EnumBufferDataUsage_STATIC_DRAW
EnumBufferDataUsage_STATIC_READ = _PyAnyCAD.EnumBufferDataUsage_STATIC_READ
EnumBufferDataUsage_STATIC_COPY = _PyAnyCAD.EnumBufferDataUsage_STATIC_COPY
EnumBufferDataUsage_DYNAMIC_DRAW = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_DRAW
EnumBufferDataUsage_DYNAMIC_READ = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_READ
EnumBufferDataUsage_DYNAMIC_COPY = _PyAnyCAD.EnumBufferDataUsage_DYNAMIC_COPY
EnumBufferDataUsage_STREAM_DRAW = _PyAnyCAD.EnumBufferDataUsage_STREAM_DRAW
EnumBufferDataUsage_STREAM_READ = _PyAnyCAD.EnumBufferDataUsage_STREAM_READ
EnumBufferDataUsage_STREAM_COPY = _PyAnyCAD.EnumBufferDataUsage_STREAM_COPY
EnumAttributeSemantic_Position = _PyAnyCAD.EnumAttributeSemantic_Position
EnumAttributeSemantic_Normal = _PyAnyCAD.EnumAttributeSemantic_Normal
EnumAttributeSemantic_TextureCoord = _PyAnyCAD.EnumAttributeSemantic_TextureCoord
EnumAttributeSemantic_Color = _PyAnyCAD.EnumAttributeSemantic_Color
EnumAttributeSemantic_TextureCoord2 = _PyAnyCAD.EnumAttributeSemantic_TextureCoord2
EnumAttributeSemantic_MorphTarget0 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget0
EnumAttributeSemantic_MorphTarget1 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget1
EnumAttributeSemantic_MorphTarget2 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget2
EnumAttributeSemantic_MorphTarget3 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget3
EnumAttributeSemantic_MorphTarget4 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget4
EnumAttributeSemantic_MorphTarget5 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget5
EnumAttributeSemantic_MorphTarget6 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget6
EnumAttributeSemantic_MorphTarget7 = _PyAnyCAD.EnumAttributeSemantic_MorphTarget7
EnumAttributeSemantic_MorphNormal0 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal0
EnumAttributeSemantic_MorphNormal1 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal1
EnumAttributeSemantic_MorphNormal2 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal2
EnumAttributeSemantic_MorphNormal3 = _PyAnyCAD.EnumAttributeSemantic_MorphNormal3
EnumAttributeSemantic_SkinIndex = _PyAnyCAD.EnumAttributeSemantic_SkinIndex
EnumAttributeSemantic_SkinWeight = _PyAnyCAD.EnumAttributeSemantic_SkinWeight
EnumAttributeSemantic_InstanceMatrix = _PyAnyCAD.EnumAttributeSemantic_InstanceMatrix
EnumAttributeSemantic_Tangent = _PyAnyCAD.EnumAttributeSemantic_Tangent
EnumAttributeSemantic_Customized1 = _PyAnyCAD.EnumAttributeSemantic_Customized1
EnumAttributeSemantic_Customized2 = _PyAnyCAD.EnumAttributeSemantic_Customized2
EnumAttributeSemantic_Customized3 = _PyAnyCAD.EnumAttributeSemantic_Customized3
EnumAttributeSemantic_LineDistance = _PyAnyCAD.EnumAttributeSemantic_LineDistance
EnumVertexAttributeLayout_SoA = _PyAnyCAD.EnumVertexAttributeLayout_SoA
EnumVertexAttributeLayout_AoSPCPC = _PyAnyCAD.EnumVertexAttributeLayout_AoSPCPC
EnumVertexAttributeLayout_AoSPPCC = _PyAnyCAD.EnumVertexAttributeLayout_AoSPPCC
class BufferAttribute(object):
    r"""
    Author: Rendering
    The attribute of geometry, could be Position, Normal, UV, etc.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.BufferAttribute_GetData(self)

    def SetData(self, val):
        return _PyAnyCAD.BufferAttribute_SetData(self, val)

    def GetSemantic(self):
        return _PyAnyCAD.BufferAttribute_GetSemantic(self)

    def SetSemantic(self, val):
        return _PyAnyCAD.BufferAttribute_SetSemantic(self, val)

    def GetComponents(self):
        return _PyAnyCAD.BufferAttribute_GetComponents(self)

    def SetComponents(self, val):
        return _PyAnyCAD.BufferAttribute_SetComponents(self, val)

    def GetByteStride(self):
        return _PyAnyCAD.BufferAttribute_GetByteStride(self)

    def SetByteStride(self, val):
        return _PyAnyCAD.BufferAttribute_SetByteStride(self, val)

    def GetByteOffset(self):
        return _PyAnyCAD.BufferAttribute_GetByteOffset(self)

    def SetByteOffset(self, val):
        return _PyAnyCAD.BufferAttribute_SetByteOffset(self, val)

    def GetDataUsage(self):
        return _PyAnyCAD.BufferAttribute_GetDataUsage(self)

    def SetDataUsage(self, val):
        return _PyAnyCAD.BufferAttribute_SetDataUsage(self, val)

    def GetDivisor(self):
        return _PyAnyCAD.BufferAttribute_GetDivisor(self)

    def SetDivisor(self, val):
        return _PyAnyCAD.BufferAttribute_SetDivisor(self, val)

    def GetNormalized(self):
        return _PyAnyCAD.BufferAttribute_GetNormalized(self)

    def SetNormalized(self, val):
        return _PyAnyCAD.BufferAttribute_SetNormalized(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.BufferAttribute_GetUpdateVersion(self)

    def GetDataType(self):
        return _PyAnyCAD.BufferAttribute_GetDataType(self)

    def GetCount(self):
        return _PyAnyCAD.BufferAttribute_GetCount(self)

    def GetByteSize(self):
        return _PyAnyCAD.BufferAttribute_GetByteSize(self)

    def RequestUpdate(self):
        return _PyAnyCAD.BufferAttribute_RequestUpdate(self)
    __swig_destroy__ = _PyAnyCAD.delete_BufferAttribute

# Register BufferAttribute in _PyAnyCAD:
_PyAnyCAD.BufferAttribute_swigregister(BufferAttribute)
class ElementAttribute(object):
    r"""
    Author: Rendering
    The index attribute of geometry
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetData(self):
        return _PyAnyCAD.ElementAttribute_GetData(self)

    def SetData(self, val):
        return _PyAnyCAD.ElementAttribute_SetData(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.ElementAttribute_GetUpdateVersion(self)

    def GetCount(self):
        return _PyAnyCAD.ElementAttribute_GetCount(self)

    def GetByteSize(self):
        return _PyAnyCAD.ElementAttribute_GetByteSize(self)

    def GetDataType(self):
        return _PyAnyCAD.ElementAttribute_GetDataType(self)

    def RequestUpdate(self):
        return _PyAnyCAD.ElementAttribute_RequestUpdate(self)
    __swig_destroy__ = _PyAnyCAD.delete_ElementAttribute

# Register ElementAttribute in _PyAnyCAD:
_PyAnyCAD.ElementAttribute_swigregister(ElementAttribute)
class BufferGeometryList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.BufferGeometryList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.BufferGeometryList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.BufferGeometryList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.BufferGeometryList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.BufferGeometryList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.BufferGeometryList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.BufferGeometryList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.BufferGeometryList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.BufferGeometryList_pop(self)

    def append(self, x):
        return _PyAnyCAD.BufferGeometryList_append(self, x)

    def empty(self):
        return _PyAnyCAD.BufferGeometryList_empty(self)

    def size(self):
        return _PyAnyCAD.BufferGeometryList_size(self)

    def swap(self, v):
        return _PyAnyCAD.BufferGeometryList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.BufferGeometryList_begin(self)

    def end(self):
        return _PyAnyCAD.BufferGeometryList_end(self)

    def rbegin(self):
        return _PyAnyCAD.BufferGeometryList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.BufferGeometryList_rend(self)

    def clear(self):
        return _PyAnyCAD.BufferGeometryList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.BufferGeometryList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.BufferGeometryList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.BufferGeometryList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.BufferGeometryList_swiginit(self, _PyAnyCAD.new_BufferGeometryList(*args))

    def push_back(self, x):
        return _PyAnyCAD.BufferGeometryList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.BufferGeometryList_front(self)

    def back(self):
        return _PyAnyCAD.BufferGeometryList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.BufferGeometryList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.BufferGeometryList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.BufferGeometryList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.BufferGeometryList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.BufferGeometryList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_BufferGeometryList

# Register BufferGeometryList in _PyAnyCAD:
_PyAnyCAD.BufferGeometryList_swigregister(BufferGeometryList)
class BufferGeometry(GfxObject):
    r"""
    Author: Rendering
    图元几何对象.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, instanceCount=1):
        _PyAnyCAD.BufferGeometry_swiginit(self, _PyAnyCAD.new_BufferGeometry(type, instanceCount))
    __swig_destroy__ = _PyAnyCAD.delete_BufferGeometry

    def GetPrimitiveType(self):
        return _PyAnyCAD.BufferGeometry_GetPrimitiveType(self)

    def SetPrimitiveType(self, val):
        return _PyAnyCAD.BufferGeometry_SetPrimitiveType(self, val)

    def GetInstanceCount(self):
        return _PyAnyCAD.BufferGeometry_GetInstanceCount(self)

    def SetInstanceCount(self, val):
        return _PyAnyCAD.BufferGeometry_SetInstanceCount(self, val)

    def GetMultiDraw(self):
        return _PyAnyCAD.BufferGeometry_GetMultiDraw(self)

    def SetMultiDraw(self, val):
        return _PyAnyCAD.BufferGeometry_SetMultiDraw(self, val)

    def GetBoundingBox(self):
        return _PyAnyCAD.BufferGeometry_GetBoundingBox(self)

    def GetSubDrawIndex(self):
        return _PyAnyCAD.BufferGeometry_GetSubDrawIndex(self)

    def SetSubDrawIndex(self, val):
        return _PyAnyCAD.BufferGeometry_SetSubDrawIndex(self, val)

    def GetSubDrawCount(self):
        return _PyAnyCAD.BufferGeometry_GetSubDrawCount(self)

    def SetSubDrawCount(self, val):
        return _PyAnyCAD.BufferGeometry_SetSubDrawCount(self, val)

    def GetFlags(self):
        return _PyAnyCAD.BufferGeometry_GetFlags(self)

    def SetFlags(self, val):
        return _PyAnyCAD.BufferGeometry_SetFlags(self, val)

    def GetIndex(self):
        return _PyAnyCAD.BufferGeometry_GetIndex(self)

    def GetUpdateVersion(self):
        return _PyAnyCAD.BufferGeometry_GetUpdateVersion(self)

    def GetVertexCount(self):
        r"""顶点个数"""
        return _PyAnyCAD.BufferGeometry_GetVertexCount(self)

    def SetBoundingBox(self, box):
        r"""
        设置包围盒
        :type box: :py:class:`AABox`
        :param box: 包围盒
        """
        return _PyAnyCAD.BufferGeometry_SetBoundingBox(self, box)

    def IsEmpty(self):
        r"""
        是否为孔对象
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.BufferGeometry_IsEmpty(self)

    def RequestUpdate(self):
        r"""更新"""
        return _PyAnyCAD.BufferGeometry_RequestUpdate(self)

    def GetAttribute(self, idx):
        r"""
        根据索引获取属性
        :type idx: int
        :param idx: the index
        """
        return _PyAnyCAD.BufferGeometry_GetAttribute(self, idx)

    def AddAttribute(self, loc, component, data):
        r"""
        添加属性
        :type loc: int
        :param loc: 位置
        :type component: int
        :param component: 每个顶点对应几个数据
        :type data: :py:class:`ArrayBuffer`
        :param data: 数据
        """
        return _PyAnyCAD.BufferGeometry_AddAttribute(self, loc, component, data)

    def SetIndex(self, *args):
        r"""
        *Overload 1:*

        设置顶点索引
        :type data: :py:class:`Uint32Buffer`
        :param data: 数据


        |

        *Overload 2:*

        设置顶点索引
        :type data: :py:class:`Uint16Buffer`
        :param data: 数据
        """
        return _PyAnyCAD.BufferGeometry_SetIndex(self, *args)

    def FindAttribute(self, location):
        r"""
        根据位置查找属性
        :type location: int
        :param location: 位置
        :rtype: :py:class:`BufferAttribute`
        :return: 属性
        """
        return _PyAnyCAD.BufferGeometry_FindAttribute(self, location)

    def HasColorAttribute(self):
        r"""
        是否有颜色属性
        :rtype: boolean
        :return: true存在
        """
        return _PyAnyCAD.BufferGeometry_HasColorAttribute(self)

    def HasAttribute(self, semantic):
        r"""
        是否存在属性
        :type semantic: int
        :param semantic: 属性类型
        :rtype: boolean
        :return: true存在
        """
        return _PyAnyCAD.BufferGeometry_HasAttribute(self, semantic)

    def ComputeBoundingBox(self):
        r"""计算包围盒"""
        return _PyAnyCAD.BufferGeometry_ComputeBoundingBox(self)

    def GetSafeBoudingBox(self):
        r"""
        获取包围盒。若不存在，则从顶点计算
        :rtype: :py:class:`AABox`
        :return: 包围
        """
        return _PyAnyCAD.BufferGeometry_GetSafeBoudingBox(self)

# Register BufferGeometry in _PyAnyCAD:
_PyAnyCAD.BufferGeometry_swigregister(BufferGeometry)
class Uniform(object):
    r"""
    Author: Rendering
    The basic uniform
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Uniform

# Register Uniform in _PyAnyCAD:
_PyAnyCAD.Uniform_swigregister(Uniform)
class UniformSet(object):
    r"""
    Author: Rendering
    The uniform set.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.UniformSet_swiginit(self, _PyAnyCAD.new_UniformSet())
    __swig_destroy__ = _PyAnyCAD.delete_UniformSet

    def Find(self, name):
        return _PyAnyCAD.UniformSet_Find(self, name)

    def Append(self, uniformSet):
        return _PyAnyCAD.UniformSet_Append(self, uniformSet)

# Register UniformSet in _PyAnyCAD:
_PyAnyCAD.UniformSet_swigregister(UniformSet)
class RawShader(object):
    r"""
    Author: Rendering
    完整的Shader.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, uniqueName, vs, fs):
        r"""
        构造函数
        :type uniqueName: string
        :param uniqueName: 唯一的名称
        :type vs: string
        :param vs: 顶点着色程序
        :type fs: string
        :param fs: 片段着色程序
        """
        _PyAnyCAD.RawShader_swiginit(self, _PyAnyCAD.new_RawShader(uniqueName, vs, fs))
    __swig_destroy__ = _PyAnyCAD.delete_RawShader

    def GetName(self):
        return _PyAnyCAD.RawShader_GetName(self)

    def GetUniqueId(self):
        return _PyAnyCAD.RawShader_GetUniqueId(self)

    def GetUniforms(self):
        return _PyAnyCAD.RawShader_GetUniforms(self)

    def GetVertexShader(self):
        return _PyAnyCAD.RawShader_GetVertexShader(self)

    def GetFragmentShader(self):
        return _PyAnyCAD.RawShader_GetFragmentShader(self)

    def GetStatic(self):
        return _PyAnyCAD.RawShader_GetStatic(self)

    def SetStatic(self, val):
        return _PyAnyCAD.RawShader_SetStatic(self, val)

    def SetUniformBool(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformBool(self, name, val)

    def SetUniformInt(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformInt(self, name, val)

    def SetUniformTextureUnit(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformTextureUnit(self, name, val)

    def SetUniformFloat(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformFloat(self, name, val)

    def SetUniformVec2(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformVec2(self, name, val)

    def SetUniformVec3(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformVec3(self, name, val)

    def SetUniformVec4(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformVec4(self, name, val)

    def SetUniformMat2(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformMat2(self, name, val)

    def SetUniformMat3(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformMat3(self, name, val)

    def SetUniformMat4(self, name, val):
        return _PyAnyCAD.RawShader_SetUniformMat4(self, name, val)

    def BindUniformBlock(self, blockname, bindingPoint):
        return _PyAnyCAD.RawShader_BindUniformBlock(self, blockname, bindingPoint)

    def HasBindingPoint(self, bindingPoint):
        return _PyAnyCAD.RawShader_HasBindingPoint(self, bindingPoint)

    def Dump(self, outdir):
        return _PyAnyCAD.RawShader_Dump(self, outdir)

# Register RawShader in _PyAnyCAD:
_PyAnyCAD.RawShader_swigregister(RawShader)
EnumTextureTarget_TEXTURE_2D = _PyAnyCAD.EnumTextureTarget_TEXTURE_2D
EnumTextureTarget_TEXTURE_3D = _PyAnyCAD.EnumTextureTarget_TEXTURE_3D
EnumTextureTarget_TEXTURE_2D_ARRAY = _PyAnyCAD.EnumTextureTarget_TEXTURE_2D_ARRAY
EnumTextureTarget_TEXTURE_CUBE_MAP = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_X = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_X
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_X = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_X
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Y = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Y
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Y = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Y
EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Z = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_POSITIVE_Z
EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Z = _PyAnyCAD.EnumTextureTarget_TEXTURE_CUBE_MAP_NEGATIVE_Z
EnumEncoding_LinearEncoding = _PyAnyCAD.EnumEncoding_LinearEncoding
EnumEncoding_sRGBEncoding = _PyAnyCAD.EnumEncoding_sRGBEncoding
EnumEncoding_GammaEncoding = _PyAnyCAD.EnumEncoding_GammaEncoding
EnumEncoding_RGBEEncoding = _PyAnyCAD.EnumEncoding_RGBEEncoding
EnumEncoding_LogLuvEncoding = _PyAnyCAD.EnumEncoding_LogLuvEncoding
EnumEncoding_RGBM7Encoding = _PyAnyCAD.EnumEncoding_RGBM7Encoding
EnumEncoding_RGBM16Encoding = _PyAnyCAD.EnumEncoding_RGBM16Encoding
EnumEncoding_RGBDEncoding = _PyAnyCAD.EnumEncoding_RGBDEncoding
EnumDepthPacking_NoPacking = _PyAnyCAD.EnumDepthPacking_NoPacking
EnumDepthPacking_BasicDepthPacking = _PyAnyCAD.EnumDepthPacking_BasicDepthPacking
EnumDepthPacking_RGBADepthPacking = _PyAnyCAD.EnumDepthPacking_RGBADepthPacking
EnumNormalMapType_ObjectSpace = _PyAnyCAD.EnumNormalMapType_ObjectSpace
EnumNormalMapType_TangentSpace = _PyAnyCAD.EnumNormalMapType_TangentSpace
EnumEnvBlendingMode_NoBlend = _PyAnyCAD.EnumEnvBlendingMode_NoBlend
EnumEnvBlendingMode_MultiplyOperation = _PyAnyCAD.EnumEnvBlendingMode_MultiplyOperation
EnumEnvBlendingMode_MixOperation = _PyAnyCAD.EnumEnvBlendingMode_MixOperation
EnumEnvBlendingMode_AddOperation = _PyAnyCAD.EnumEnvBlendingMode_AddOperation
EnumMapping_UVMapping = _PyAnyCAD.EnumMapping_UVMapping
EnumMapping_CubeReflectionMapping = _PyAnyCAD.EnumMapping_CubeReflectionMapping
EnumMapping_CubeRefractionMapping = _PyAnyCAD.EnumMapping_CubeRefractionMapping
EnumMapping_EquirectangularReflectionMapping = _PyAnyCAD.EnumMapping_EquirectangularReflectionMapping
EnumMapping_EquirectangularRefractionMapping = _PyAnyCAD.EnumMapping_EquirectangularRefractionMapping
EnumMapping_CubeUVReflectionMapping = _PyAnyCAD.EnumMapping_CubeUVReflectionMapping
EnumMapping_CubeUVRefractionMapping = _PyAnyCAD.EnumMapping_CubeUVRefractionMapping
EnumTextureFilterType_NEAREST = _PyAnyCAD.EnumTextureFilterType_NEAREST
EnumTextureFilterType_LINEAR = _PyAnyCAD.EnumTextureFilterType_LINEAR
EnumTextureFilterType_NEAREST_MIPMAP_NEAREST = _PyAnyCAD.EnumTextureFilterType_NEAREST_MIPMAP_NEAREST
EnumTextureFilterType_LINEAR_MIPMAP_NEARES = _PyAnyCAD.EnumTextureFilterType_LINEAR_MIPMAP_NEARES
EnumTextureFilterType_NEAREST_MIPMAP_LINEAR = _PyAnyCAD.EnumTextureFilterType_NEAREST_MIPMAP_LINEAR
EnumTextureFilterType_LINEAR_MIPMAP_LINEAR = _PyAnyCAD.EnumTextureFilterType_LINEAR_MIPMAP_LINEAR
EnumTextureWrappingType_REPEAT = _PyAnyCAD.EnumTextureWrappingType_REPEAT
EnumTextureWrappingType_MIRRORED_REPEAT = _PyAnyCAD.EnumTextureWrappingType_MIRRORED_REPEAT
EnumTextureWrappingType_CLAMP_TO_EDGE = _PyAnyCAD.EnumTextureWrappingType_CLAMP_TO_EDGE
EnumTextureWrappingType_CLAMP_TO_BORDER = _PyAnyCAD.EnumTextureWrappingType_CLAMP_TO_BORDER
EnumTextureInternalFormat_RGB8 = _PyAnyCAD.EnumTextureInternalFormat_RGB8
EnumTextureInternalFormat_RGBA8 = _PyAnyCAD.EnumTextureInternalFormat_RGBA8
EnumTextureInternalFormat_R8 = _PyAnyCAD.EnumTextureInternalFormat_R8
EnumTextureInternalFormat_R8_SNORM = _PyAnyCAD.EnumTextureInternalFormat_R8_SNORM
EnumTextureInternalFormat_R16F = _PyAnyCAD.EnumTextureInternalFormat_R16F
EnumTextureInternalFormat_R32F = _PyAnyCAD.EnumTextureInternalFormat_R32F
EnumTextureInternalFormat_RG8 = _PyAnyCAD.EnumTextureInternalFormat_RG8
EnumTextureInternalFormat_RG8_SNORM = _PyAnyCAD.EnumTextureInternalFormat_RG8_SNORM
EnumTextureInternalFormat_RG16F = _PyAnyCAD.EnumTextureInternalFormat_RG16F
EnumTextureInternalFormat_RG32F = _PyAnyCAD.EnumTextureInternalFormat_RG32F
EnumTextureInternalFormat_RGB16F = _PyAnyCAD.EnumTextureInternalFormat_RGB16F
EnumTextureInternalFormat_RGB32F = _PyAnyCAD.EnumTextureInternalFormat_RGB32F
EnumTextureInternalFormat_RGBA16F = _PyAnyCAD.EnumTextureInternalFormat_RGBA16F
EnumTextureInternalFormat_DEPTH_COMPONENT = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT
EnumTextureInternalFormat_DEPTH_COMPONENT16 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT16
EnumTextureInternalFormat_DEPTH_COMPONENT24 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT24
EnumTextureInternalFormat_DEPTH_COMPONENT32F = _PyAnyCAD.EnumTextureInternalFormat_DEPTH_COMPONENT32F
EnumTextureInternalFormat_DEPTH24_STENCIL8 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH24_STENCIL8
EnumTextureInternalFormat_DEPTH32F_STENCIL8 = _PyAnyCAD.EnumTextureInternalFormat_DEPTH32F_STENCIL8
EnumTextureFormat_NOT_USED = _PyAnyCAD.EnumTextureFormat_NOT_USED
EnumTextureFormat_RGB = _PyAnyCAD.EnumTextureFormat_RGB
EnumTextureFormat_RGBA = _PyAnyCAD.EnumTextureFormat_RGBA
EnumTextureFormat_LUMINANCE_ALPHA = _PyAnyCAD.EnumTextureFormat_LUMINANCE_ALPHA
EnumTextureFormat_LUMINANCE = _PyAnyCAD.EnumTextureFormat_LUMINANCE
EnumTextureFormat_ALPHA = _PyAnyCAD.EnumTextureFormat_ALPHA
EnumTextureFormat_RED = _PyAnyCAD.EnumTextureFormat_RED
EnumTextureFormat_RED_INTEGER = _PyAnyCAD.EnumTextureFormat_RED_INTEGER
EnumTextureFormat_RG = _PyAnyCAD.EnumTextureFormat_RG
EnumTextureFormat_RG_INTEGER = _PyAnyCAD.EnumTextureFormat_RG_INTEGER
EnumTextureFormat_DEPTH_COMPONENT = _PyAnyCAD.EnumTextureFormat_DEPTH_COMPONENT
EnumTextureFormat_DEPTH_STENCIL = _PyAnyCAD.EnumTextureFormat_DEPTH_STENCIL
class Image(object):
    r"""
    Author: Rendering
    The Image
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Image

    def GetWidth(self):
        return _PyAnyCAD.Image_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Image_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Image_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Image_SetHeight(self, val)

    def GetChannel(self):
        return _PyAnyCAD.Image_GetChannel(self)

    def SetChannel(self, val):
        return _PyAnyCAD.Image_SetChannel(self, val)

    def GetInternalFormat(self):
        return _PyAnyCAD.Image_GetInternalFormat(self)

    def SetInternalFormat(self, val):
        return _PyAnyCAD.Image_SetInternalFormat(self, val)

    def GetFormat(self):
        return _PyAnyCAD.Image_GetFormat(self)

    def SetFormat(self, val):
        return _PyAnyCAD.Image_SetFormat(self, val)

    def GetDataType(self):
        return _PyAnyCAD.Image_GetDataType(self)

    def SetDataType(self, val):
        return _PyAnyCAD.Image_SetDataType(self, val)

# Register Image in _PyAnyCAD:
_PyAnyCAD.Image_swigregister(Image)
class FileImage(Image):
    r"""
    Author: Rendering
    The image from file
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_FileImage

    def GetFileName(self):
        return _PyAnyCAD.FileImage_GetFileName(self)

    def SetFileName(self, val):
        return _PyAnyCAD.FileImage_SetFileName(self, val)

    @staticmethod
    def Create(fileName):
        return _PyAnyCAD.FileImage_Create(fileName)

    def Load(self):
        return _PyAnyCAD.FileImage_Load(self)

    def Unload(self):
        return _PyAnyCAD.FileImage_Unload(self)

# Register FileImage in _PyAnyCAD:
_PyAnyCAD.FileImage_swigregister(FileImage)
class MemoryImage(Image):
    r"""
    Author: Rendering
    The image in memory
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arrayBuffer, width, height, internalFormat, format, dataType):
        _PyAnyCAD.MemoryImage_swiginit(self, _PyAnyCAD.new_MemoryImage(arrayBuffer, width, height, internalFormat, format, dataType))
    __swig_destroy__ = _PyAnyCAD.delete_MemoryImage

    def GetData(self):
        return _PyAnyCAD.MemoryImage_GetData(self)

# Register MemoryImage in _PyAnyCAD:
_PyAnyCAD.MemoryImage_swigregister(MemoryImage)
class ImageList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.ImageList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.ImageList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.ImageList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.ImageList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.ImageList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.ImageList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.ImageList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.ImageList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.ImageList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.ImageList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.ImageList_pop(self)

    def append(self, x):
        return _PyAnyCAD.ImageList_append(self, x)

    def empty(self):
        return _PyAnyCAD.ImageList_empty(self)

    def size(self):
        return _PyAnyCAD.ImageList_size(self)

    def swap(self, v):
        return _PyAnyCAD.ImageList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.ImageList_begin(self)

    def end(self):
        return _PyAnyCAD.ImageList_end(self)

    def rbegin(self):
        return _PyAnyCAD.ImageList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.ImageList_rend(self)

    def clear(self):
        return _PyAnyCAD.ImageList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.ImageList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.ImageList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.ImageList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.ImageList_swiginit(self, _PyAnyCAD.new_ImageList(*args))

    def push_back(self, x):
        return _PyAnyCAD.ImageList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.ImageList_front(self)

    def back(self):
        return _PyAnyCAD.ImageList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.ImageList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.ImageList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.ImageList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.ImageList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.ImageList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_ImageList

# Register ImageList in _PyAnyCAD:
_PyAnyCAD.ImageList_swigregister(ImageList)
EnumTextureUnit_Null = _PyAnyCAD.EnumTextureUnit_Null
EnumTextureUnit_TU0 = _PyAnyCAD.EnumTextureUnit_TU0
EnumTextureUnit_TU1 = _PyAnyCAD.EnumTextureUnit_TU1
EnumTextureUnit_TU2 = _PyAnyCAD.EnumTextureUnit_TU2
EnumTextureUnit_TU3 = _PyAnyCAD.EnumTextureUnit_TU3
EnumTextureUnit_TU4 = _PyAnyCAD.EnumTextureUnit_TU4
EnumTextureUnit_TU5 = _PyAnyCAD.EnumTextureUnit_TU5
EnumTextureUnit_TU6 = _PyAnyCAD.EnumTextureUnit_TU6
EnumTextureUnit_TU7 = _PyAnyCAD.EnumTextureUnit_TU7
EnumTextureUnit_TU8 = _PyAnyCAD.EnumTextureUnit_TU8
class TextureDesc(object):
    r"""
    Author: Rendering
    The parameters of a Texture.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TextureDesc_swiginit(self, _PyAnyCAD.new_TextureDesc(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextureDesc

    def GetInternalFormat(self):
        return _PyAnyCAD.TextureDesc_GetInternalFormat(self)

    def SetInternalFormat(self, val):
        return _PyAnyCAD.TextureDesc_SetInternalFormat(self, val)

    def GetFormat(self):
        return _PyAnyCAD.TextureDesc_GetFormat(self)

    def SetFormat(self, val):
        return _PyAnyCAD.TextureDesc_SetFormat(self, val)

    def GetDataType(self):
        return _PyAnyCAD.TextureDesc_GetDataType(self)

    def SetDataType(self, val):
        return _PyAnyCAD.TextureDesc_SetDataType(self, val)

    def GetWrapS(self):
        return _PyAnyCAD.TextureDesc_GetWrapS(self)

    def SetWrapS(self, val):
        return _PyAnyCAD.TextureDesc_SetWrapS(self, val)

    def GetWrapT(self):
        return _PyAnyCAD.TextureDesc_GetWrapT(self)

    def SetWrapT(self, val):
        return _PyAnyCAD.TextureDesc_SetWrapT(self, val)

    def GetMinFilter(self):
        return _PyAnyCAD.TextureDesc_GetMinFilter(self)

    def SetMinFilter(self, val):
        return _PyAnyCAD.TextureDesc_SetMinFilter(self, val)

    def GetMagFilter(self):
        return _PyAnyCAD.TextureDesc_GetMagFilter(self)

    def SetMagFilter(self, val):
        return _PyAnyCAD.TextureDesc_SetMagFilter(self, val)

    def GetTarget(self):
        return _PyAnyCAD.TextureDesc_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.TextureDesc_SetTarget(self, val)

    def GetLevel(self):
        return _PyAnyCAD.TextureDesc_GetLevel(self)

    def SetLevel(self, val):
        return _PyAnyCAD.TextureDesc_SetLevel(self, val)

    def GetPixelStorei(self):
        return _PyAnyCAD.TextureDesc_GetPixelStorei(self)

    def SetPixelStorei(self, val):
        return _PyAnyCAD.TextureDesc_SetPixelStorei(self, val)

    @staticmethod
    def GetFormatByChannels(nrChannels):
        return _PyAnyCAD.TextureDesc_GetFormatByChannels(nrChannels)

    @staticmethod
    def GetInternalFormatByChannels(format):
        return _PyAnyCAD.TextureDesc_GetInternalFormatByChannels(format)

# Register TextureDesc in _PyAnyCAD:
_PyAnyCAD.TextureDesc_swigregister(TextureDesc)
class Texture(GfxObject):
    r"""
    Author: Rendering
    The base texture.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Texture_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Texture_swiginit(self, _PyAnyCAD.new_Texture(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Texture

    def GetName(self):
        return _PyAnyCAD.Texture_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Texture_SetName(self, val)

    def GetDesc(self):
        return _PyAnyCAD.Texture_GetDesc(self)

    def SetDesc(self, val):
        return _PyAnyCAD.Texture_SetDesc(self, val)

    def GetUniforms(self):
        return _PyAnyCAD.Texture_GetUniforms(self)

    def GetUpdateVersion(self):
        return _PyAnyCAD.Texture_GetUpdateVersion(self)

    def GetEncoding(self):
        return _PyAnyCAD.Texture_GetEncoding(self)

    def SetEncoding(self, val):
        return _PyAnyCAD.Texture_SetEncoding(self, val)

    def GetMapping(self):
        return _PyAnyCAD.Texture_GetMapping(self)

    def SetMapping(self, val):
        return _PyAnyCAD.Texture_SetMapping(self, val)

    def GetTextureType(self):
        return _PyAnyCAD.Texture_GetTextureType(self)

    def SetUniformBool(self, name, val):
        return _PyAnyCAD.Texture_SetUniformBool(self, name, val)

    def SetUniformInt(self, name, val):
        return _PyAnyCAD.Texture_SetUniformInt(self, name, val)

    def SetUniformTextureUnit(self, name, val):
        return _PyAnyCAD.Texture_SetUniformTextureUnit(self, name, val)

    def SetUniformFloat(self, name, val):
        return _PyAnyCAD.Texture_SetUniformFloat(self, name, val)

    def SetUniformVec2(self, name, val):
        return _PyAnyCAD.Texture_SetUniformVec2(self, name, val)

    def SetUniformVec3(self, name, val):
        return _PyAnyCAD.Texture_SetUniformVec3(self, name, val)

    def SetUniformVec4(self, name, val):
        return _PyAnyCAD.Texture_SetUniformVec4(self, name, val)

    def SetUniformMat2(self, name, val):
        return _PyAnyCAD.Texture_SetUniformMat2(self, name, val)

    def SetUniformMat3(self, name, val):
        return _PyAnyCAD.Texture_SetUniformMat3(self, name, val)

    def SetUniformMat4(self, name, val):
        return _PyAnyCAD.Texture_SetUniformMat4(self, name, val)

    def IsValid(self):
        return _PyAnyCAD.Texture_IsValid(self)

    def RequestUpdate(self):
        return _PyAnyCAD.Texture_RequestUpdate(self)

# Register Texture in _PyAnyCAD:
_PyAnyCAD.Texture_swigregister(Texture)
class Texture2D(Texture):
    r"""
    Author: Rendering
    The 2D texture
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Texture2D_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Texture2D_swiginit(self, _PyAnyCAD.new_Texture2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Texture2D

    def GetWidth(self):
        return _PyAnyCAD.Texture2D_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Texture2D_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Texture2D_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Texture2D_SetHeight(self, val)

    def GetOffset(self):
        return _PyAnyCAD.Texture2D_GetOffset(self)

    def SetOffset(self, val):
        return _PyAnyCAD.Texture2D_SetOffset(self, val)

    def GetAngle(self):
        return _PyAnyCAD.Texture2D_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.Texture2D_SetAngle(self, val)

    def GetRepeat(self):
        return _PyAnyCAD.Texture2D_GetRepeat(self)

    def SetRepeat(self, val):
        return _PyAnyCAD.Texture2D_SetRepeat(self, val)

    def GetCenter(self):
        return _PyAnyCAD.Texture2D_GetCenter(self)

    def SetCenter(self, val):
        return _PyAnyCAD.Texture2D_SetCenter(self, val)

    def GetGenerateMipmap(self):
        return _PyAnyCAD.Texture2D_GetGenerateMipmap(self)

    def SetGenerateMipmap(self, val):
        return _PyAnyCAD.Texture2D_SetGenerateMipmap(self, val)

    def UpdateTransform(self):
        return _PyAnyCAD.Texture2D_UpdateTransform(self)

    def Resize(self, width, height):
        return _PyAnyCAD.Texture2D_Resize(self, width, height)

# Register Texture2D in _PyAnyCAD:
_PyAnyCAD.Texture2D_swigregister(Texture2D)
class TextureCube(Texture):
    r"""
    Author: Rendering
    The cube texture.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextureCube_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.TextureCube_swiginit(self, _PyAnyCAD.new_TextureCube(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextureCube

    def GetWidth(self):
        return _PyAnyCAD.TextureCube_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.TextureCube_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.TextureCube_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.TextureCube_SetHeight(self, val)

    def IsValid(self):
        return _PyAnyCAD.TextureCube_IsValid(self)

# Register TextureCube in _PyAnyCAD:
_PyAnyCAD.TextureCube_swigregister(TextureCube)
class ImageTexture2D(Texture2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ImageTexture2D_swiginit(self, _PyAnyCAD.new_ImageTexture2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ImageTexture2D

    def GetSource(self):
        return _PyAnyCAD.ImageTexture2D_GetSource(self)

    @staticmethod
    def Create(fileName):
        return _PyAnyCAD.ImageTexture2D_Create(fileName)

    def AsyncLoad(self, url):
        return _PyAnyCAD.ImageTexture2D_AsyncLoad(self, url)

    def SetSource(self, image):
        return _PyAnyCAD.ImageTexture2D_SetSource(self, image)

    def IsValid(self):
        return _PyAnyCAD.ImageTexture2D_IsValid(self)

# Register ImageTexture2D in _PyAnyCAD:
_PyAnyCAD.ImageTexture2D_swigregister(ImageTexture2D)
class ImageTextureCube(TextureCube):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ImageTextureCube_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ImageTextureCube_swiginit(self, _PyAnyCAD.new_ImageTextureCube(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ImageTextureCube

    def GetSources(self):
        return _PyAnyCAD.ImageTextureCube_GetSources(self)

    @staticmethod
    def LoadFromFile(fileNames):
        r"""
        Load CubeMap from files.
        :type fileNames: :py:class:`StringList`
        :param fileNames: the files with order [right, left, bottom, top, back, front]
        :rtype: :py:class:`ImageTextureCube`
        :return: the ImageTextureCube
        """
        return _PyAnyCAD.ImageTextureCube_LoadFromFile(fileNames)

    def LoadAsync(self, fileNames):
        return _PyAnyCAD.ImageTextureCube_LoadAsync(self, fileNames)

    def AddSource(self, source):
        return _PyAnyCAD.ImageTextureCube_AddSource(self, source)

    def IsValid(self):
        return _PyAnyCAD.ImageTextureCube_IsValid(self)

# Register ImageTextureCube in _PyAnyCAD:
_PyAnyCAD.ImageTextureCube_swigregister(ImageTextureCube)
EnumFramebufferTarget_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_FRAMEBUFFER
EnumFramebufferTarget_DRAW_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_DRAW_FRAMEBUFFER
EnumFramebufferTarget_READ_FRAMEBUFFER = _PyAnyCAD.EnumFramebufferTarget_READ_FRAMEBUFFER
EnumFramebufferAttachment_COLOR_ATTACHMENT0 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT0
EnumFramebufferAttachment_COLOR_ATTACHMENT1 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT1
EnumFramebufferAttachment_COLOR_ATTACHMENT2 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT2
EnumFramebufferAttachment_COLOR_ATTACHMENT3 = _PyAnyCAD.EnumFramebufferAttachment_COLOR_ATTACHMENT3
EnumFramebufferAttachment_DEPTH_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_DEPTH_ATTACHMENT
EnumFramebufferAttachment_STENCIL_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_STENCIL_ATTACHMENT
EnumFramebufferAttachment_DEPTH_STENCIL_ATTACHMENT = _PyAnyCAD.EnumFramebufferAttachment_DEPTH_STENCIL_ATTACHMENT
EnumFramebufferAttachment_NONE = _PyAnyCAD.EnumFramebufferAttachment_NONE
EnumFramebufferAttachment_BACK = _PyAnyCAD.EnumFramebufferAttachment_BACK
EnumBufferType_ARRAY_BUFFER = _PyAnyCAD.EnumBufferType_ARRAY_BUFFER
EnumBufferType_ELEMENT_ARRAY_BUFFER = _PyAnyCAD.EnumBufferType_ELEMENT_ARRAY_BUFFER
EnumBufferType_COPY_READ_BUFFER = _PyAnyCAD.EnumBufferType_COPY_READ_BUFFER
EnumBufferType_COPY_WRITE_BUFFER = _PyAnyCAD.EnumBufferType_COPY_WRITE_BUFFER
EnumBufferType_PIXEL_PACK_BUFFER = _PyAnyCAD.EnumBufferType_PIXEL_PACK_BUFFER
EnumBufferType_PIXEL_UNPACK_BUFFER = _PyAnyCAD.EnumBufferType_PIXEL_UNPACK_BUFFER
EnumBufferType_TRANSFORM_FEEDBACK_BUFFER = _PyAnyCAD.EnumBufferType_TRANSFORM_FEEDBACK_BUFFER
EnumBufferType_UNIFORM_BUFFER = _PyAnyCAD.EnumBufferType_UNIFORM_BUFFER
EnumBufferType_RENDERBUFFER = _PyAnyCAD.EnumBufferType_RENDERBUFFER
EnumBufferBit_COLOR_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_COLOR_BUFFER_BIT
EnumBufferBit_DEPTH_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_DEPTH_BUFFER_BIT
EnumBufferBit_STENCIL_BUFFER_BIT = _PyAnyCAD.EnumBufferBit_STENCIL_BUFFER_BIT
EnumBufferBit_COLOR_DEPTH_BITS = _PyAnyCAD.EnumBufferBit_COLOR_DEPTH_BITS
EnumBufferBit_COLOR_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_COLOR_STENCIL_BITS
EnumBufferBit_DEPTH_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_DEPTH_STENCIL_BITS
EnumBufferBit_COLOR_DEPTH_STENCIL_BITS = _PyAnyCAD.EnumBufferBit_COLOR_DEPTH_STENCIL_BITS
EnumToneMapping_NoToneMapping = _PyAnyCAD.EnumToneMapping_NoToneMapping
EnumToneMapping_LinearToneMapping = _PyAnyCAD.EnumToneMapping_LinearToneMapping
EnumToneMapping_ReinhardToneMapping = _PyAnyCAD.EnumToneMapping_ReinhardToneMapping
EnumToneMapping_Uncharted2ToneMapping = _PyAnyCAD.EnumToneMapping_Uncharted2ToneMapping
EnumToneMapping_CineonToneMapping = _PyAnyCAD.EnumToneMapping_CineonToneMapping
EnumShadowMapType_BasicShadowMap = _PyAnyCAD.EnumShadowMapType_BasicShadowMap
EnumShadowMapType_PCFShadowMap = _PyAnyCAD.EnumShadowMapType_PCFShadowMap
EnumShadowMapType_PCFSoftShadowMap = _PyAnyCAD.EnumShadowMapType_PCFSoftShadowMap
EnumDepthFunction_Never = _PyAnyCAD.EnumDepthFunction_Never
EnumDepthFunction_LESS = _PyAnyCAD.EnumDepthFunction_LESS
EnumDepthFunction_EQUAL = _PyAnyCAD.EnumDepthFunction_EQUAL
EnumDepthFunction_LEQUAL = _PyAnyCAD.EnumDepthFunction_LEQUAL
EnumDepthFunction_GREATER = _PyAnyCAD.EnumDepthFunction_GREATER
EnumDepthFunction_NOTEQUAL = _PyAnyCAD.EnumDepthFunction_NOTEQUAL
EnumDepthFunction_GEQUAL = _PyAnyCAD.EnumDepthFunction_GEQUAL
EnumDepthFunction_ALWAYS = _PyAnyCAD.EnumDepthFunction_ALWAYS
EnumStencilFunction_NEVER = _PyAnyCAD.EnumStencilFunction_NEVER
EnumStencilFunction_LESS = _PyAnyCAD.EnumStencilFunction_LESS
EnumStencilFunction_EQUAL = _PyAnyCAD.EnumStencilFunction_EQUAL
EnumStencilFunction_LEQUAL = _PyAnyCAD.EnumStencilFunction_LEQUAL
EnumStencilFunction_GREATER = _PyAnyCAD.EnumStencilFunction_GREATER
EnumStencilFunction_NOTEQUAL = _PyAnyCAD.EnumStencilFunction_NOTEQUAL
EnumStencilFunction_GEQUAL = _PyAnyCAD.EnumStencilFunction_GEQUAL
EnumStencilFunction_ALWAYS = _PyAnyCAD.EnumStencilFunction_ALWAYS
EnumStencilOp_Keep = _PyAnyCAD.EnumStencilOp_Keep
EnumStencilOp_Zero = _PyAnyCAD.EnumStencilOp_Zero
EnumStencilOp_Replace = _PyAnyCAD.EnumStencilOp_Replace
EnumStencilOp_Incr = _PyAnyCAD.EnumStencilOp_Incr
EnumStencilOp_IncrWrap = _PyAnyCAD.EnumStencilOp_IncrWrap
EnumStencilOp_Decr = _PyAnyCAD.EnumStencilOp_Decr
EnumStencilOp_DECR_WRAP = _PyAnyCAD.EnumStencilOp_DECR_WRAP
EnumStencilOp_Invert = _PyAnyCAD.EnumStencilOp_Invert
EnumBlendingMode_NoBlending = _PyAnyCAD.EnumBlendingMode_NoBlending
EnumBlendingMode_CustomBlending = _PyAnyCAD.EnumBlendingMode_CustomBlending
EnumBlendingMode_NormalBlending = _PyAnyCAD.EnumBlendingMode_NormalBlending
EnumBlendingMode_AdditiveBlending = _PyAnyCAD.EnumBlendingMode_AdditiveBlending
EnumBlendingMode_SubtractiveBlending = _PyAnyCAD.EnumBlendingMode_SubtractiveBlending
EnumBlendingMode_MultiplyBlending = _PyAnyCAD.EnumBlendingMode_MultiplyBlending
EnumBlendEquation_FUNC_ADD = _PyAnyCAD.EnumBlendEquation_FUNC_ADD
EnumBlendEquation_FUNC_SUBTRACT = _PyAnyCAD.EnumBlendEquation_FUNC_SUBTRACT
EnumBlendEquation_FUNC_REVERSE_SUBTRACT = _PyAnyCAD.EnumBlendEquation_FUNC_REVERSE_SUBTRACT
EnumBlendEquation_MIN = _PyAnyCAD.EnumBlendEquation_MIN
EnumBlendEquation_MAX = _PyAnyCAD.EnumBlendEquation_MAX
EnumBlendFactor_ZERO = _PyAnyCAD.EnumBlendFactor_ZERO
EnumBlendFactor_ONE = _PyAnyCAD.EnumBlendFactor_ONE
EnumBlendFactor_SRC_COLOR = _PyAnyCAD.EnumBlendFactor_SRC_COLOR
EnumBlendFactor_ONE_MINUS_SRC_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_SRC_COLOR
EnumBlendFactor_SRC_ALPHA = _PyAnyCAD.EnumBlendFactor_SRC_ALPHA
EnumBlendFactor_ONE_MINUS_SRC_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_SRC_ALPHA
EnumBlendFactor_DST_COLOR = _PyAnyCAD.EnumBlendFactor_DST_COLOR
EnumBlendFactor_ONE_MINUS_DST_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_DST_COLOR
EnumBlendFactor_DST_ALPHA = _PyAnyCAD.EnumBlendFactor_DST_ALPHA
EnumBlendFactor_ONE_MINUS_DST_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_DST_ALPHA
EnumBlendFactor_CONSTANT_COLOR = _PyAnyCAD.EnumBlendFactor_CONSTANT_COLOR
EnumBlendFactor_ONE_MINUS_CONSTANT_COLOR = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_CONSTANT_COLOR
EnumBlendFactor_CONSTANT_ALPHA = _PyAnyCAD.EnumBlendFactor_CONSTANT_ALPHA
EnumBlendFactor_ONE_MINUS_CONSTANT_ALPHA = _PyAnyCAD.EnumBlendFactor_ONE_MINUS_CONSTANT_ALPHA
EnumBlendFactor_SRC_ALPHA_SATURATE = _PyAnyCAD.EnumBlendFactor_SRC_ALPHA_SATURATE
EnumFaceSide_FrontSide = _PyAnyCAD.EnumFaceSide_FrontSide
EnumFaceSide_BackSide = _PyAnyCAD.EnumFaceSide_BackSide
EnumFaceSide_DoubleSide = _PyAnyCAD.EnumFaceSide_DoubleSide
EnumFontType_SHX = _PyAnyCAD.EnumFontType_SHX
EnumFontType_TTF = _PyAnyCAD.EnumFontType_TTF
class MaterialTemplate(GfxObject):
    r"""
    Author: Rendering
    材质模板.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialTemplate_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MaterialTemplate

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialTemplate_GetUpdateVersion(self)

    def GetName(self):
        return _PyAnyCAD.MaterialTemplate_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.MaterialTemplate_SetName(self, val)

    def GetShaderTemplateName(self):
        return _PyAnyCAD.MaterialTemplate_GetShaderTemplateName(self)

    def SetShaderTemplateName(self, val):
        return _PyAnyCAD.MaterialTemplate_SetShaderTemplateName(self, val)

    def GetRawShader(self):
        return _PyAnyCAD.MaterialTemplate_GetRawShader(self)

    def SetRawShader(self, val):
        return _PyAnyCAD.MaterialTemplate_SetRawShader(self, val)

    def SetNormalMapType(self, type):
        return _PyAnyCAD.MaterialTemplate_SetNormalMapType(self, type)

    def GetNormalMapType(self):
        return _PyAnyCAD.MaterialTemplate_GetNormalMapType(self)

    def SetEnvBlendingMode(self, type):
        return _PyAnyCAD.MaterialTemplate_SetEnvBlendingMode(self, type)

    def GetEnvBlendingMode(self):
        return _PyAnyCAD.MaterialTemplate_GetEnvBlendingMode(self)

    def GetFaceSide(self):
        return _PyAnyCAD.MaterialTemplate_GetFaceSide(self)

    def SetFaceSide(self, val):
        return _PyAnyCAD.MaterialTemplate_SetFaceSide(self, val)

    def GetDepthPacking(self):
        return _PyAnyCAD.MaterialTemplate_GetDepthPacking(self)

    def SetDepthPacking(self, val):
        return _PyAnyCAD.MaterialTemplate_SetDepthPacking(self, val)

    def SetAlphaTest(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetAlphaTest(self, enable)

    def GetAlphaTest(self):
        return _PyAnyCAD.MaterialTemplate_GetAlphaTest(self)

    def SetDithering(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetDithering(self, enable)

    def GetDithering(self):
        return _PyAnyCAD.MaterialTemplate_GetDithering(self)

    def SetVertexColors(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexColors(self, enable)

    def GetVertexColors(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexColors(self)

    def SetVertexColors4(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexColors4(self, enable)

    def GetVertexColors4(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexColors4(self)

    def SetVertexTangents(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetVertexTangents(self, enable)

    def GetVertexTangents(self):
        return _PyAnyCAD.MaterialTemplate_GetVertexTangents(self)

    def SetFlatShading(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetFlatShading(self, enable)

    def GetFlatShading(self):
        return _PyAnyCAD.MaterialTemplate_GetFlatShading(self)

    def SetFlipSided(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetFlipSided(self, enable)

    def GetFlipSided(self):
        return _PyAnyCAD.MaterialTemplate_GetFlipSided(self)

    def SetSkinning(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetSkinning(self, enable)

    def GetSkinning(self):
        return _PyAnyCAD.MaterialTemplate_GetSkinning(self)

    def SetMorphTargets(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetMorphTargets(self, enable)

    def GetMorphTargets(self):
        return _PyAnyCAD.MaterialTemplate_GetMorphTargets(self)

    def SetMorphNormals(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetMorphNormals(self, enable)

    def GetMorphNormals(self):
        return _PyAnyCAD.MaterialTemplate_GetMorphNormals(self)

    def SetSizeAttenuation(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetSizeAttenuation(self, enable)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.MaterialTemplate_GetSizeAttenuation(self)

    def SetReceiveShadow(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetReceiveShadow(self, enable)

    def GetReceiveShadow(self):
        return _PyAnyCAD.MaterialTemplate_GetReceiveShadow(self)

    def SetClipping(self, enable):
        return _PyAnyCAD.MaterialTemplate_SetClipping(self, enable)

    def GetClipping(self):
        return _PyAnyCAD.MaterialTemplate_GetClipping(self)

    def AddDefine(self, key, value):
        return _PyAnyCAD.MaterialTemplate_AddDefine(self, key, value)

    def RemoveDefine(self, key):
        return _PyAnyCAD.MaterialTemplate_RemoveDefine(self, key)

    def HasDefine(self, key):
        return _PyAnyCAD.MaterialTemplate_HasDefine(self, key)

    def AddMap(self, mapId, encodeing, mapping):
        return _PyAnyCAD.MaterialTemplate_AddMap(self, mapId, encodeing, mapping)

    def HasMap(self, mapId):
        return _PyAnyCAD.MaterialTemplate_HasMap(self, mapId)

    def RemoveMap(self, mapId):
        return _PyAnyCAD.MaterialTemplate_RemoveMap(self, mapId)

    def RequestUpdate(self):
        return _PyAnyCAD.MaterialTemplate_RequestUpdate(self)

    def ComputeHashCode(self):
        return _PyAnyCAD.MaterialTemplate_ComputeHashCode(self)

# Register MaterialTemplate in _PyAnyCAD:
_PyAnyCAD.MaterialTemplate_swigregister(MaterialTemplate)
class MaterialInstance(GfxObject):
    r"""
    Author: Rendering
    材质实例
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialInstance_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MaterialInstance

    def GetName(self):
        return _PyAnyCAD.MaterialInstance_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.MaterialInstance_SetName(self, val)

    def GetHashCodeId(self):
        return _PyAnyCAD.MaterialInstance_GetHashCodeId(self)

    def GetTemplate(self):
        return _PyAnyCAD.MaterialInstance_GetTemplate(self)

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialInstance_GetUpdateVersion(self)

    def GetLineWidth(self):
        return _PyAnyCAD.MaterialInstance_GetLineWidth(self)

    def SetLineWidth(self, val):
        return _PyAnyCAD.MaterialInstance_SetLineWidth(self, val)

    def GetDepthTest(self):
        return _PyAnyCAD.MaterialInstance_GetDepthTest(self)

    def SetDepthTest(self, val):
        return _PyAnyCAD.MaterialInstance_SetDepthTest(self, val)

    def GetDepthWrite(self):
        return _PyAnyCAD.MaterialInstance_GetDepthWrite(self)

    def SetDepthWrite(self, val):
        return _PyAnyCAD.MaterialInstance_SetDepthWrite(self, val)

    def GetUniforms(self):
        return _PyAnyCAD.MaterialInstance_GetUniforms(self)

    def GetBlending(self):
        return _PyAnyCAD.MaterialInstance_GetBlending(self)

    def SetBlending(self, val):
        return _PyAnyCAD.MaterialInstance_SetBlending(self, val)

    def GetRenderOrder(self):
        return _PyAnyCAD.MaterialInstance_GetRenderOrder(self)

    def SetRenderOrder(self, val):
        return _PyAnyCAD.MaterialInstance_SetRenderOrder(self, val)

    def GetColor(self):
        return _PyAnyCAD.MaterialInstance_GetColor(self)

    def SetOpacity(self, val):
        r"""不透明度。配合SetTransparent使用。"""
        return _PyAnyCAD.MaterialInstance_SetOpacity(self, val)

    def GetOpacity(self):
        return _PyAnyCAD.MaterialInstance_GetOpacity(self)

    def SetAlphaTest(self, val):
        r"""Alpha测试的值"""
        return _PyAnyCAD.MaterialInstance_SetAlphaTest(self, val)

    def GetAlphaTest(self):
        return _PyAnyCAD.MaterialInstance_GetAlphaTest(self)

    def SetFaceSide(self, val):
        r"""单面、背面、双面渲染设置"""
        return _PyAnyCAD.MaterialInstance_SetFaceSide(self, val)

    def GetFaceSide(self):
        return _PyAnyCAD.MaterialInstance_GetFaceSide(self)

    def SetVertexColors(self, val):
        r"""是否启用顶点颜色（Vector3）"""
        return _PyAnyCAD.MaterialInstance_SetVertexColors(self, val)

    def GetVertexColors(self):
        return _PyAnyCAD.MaterialInstance_GetVertexColors(self)

    def SetVertexColors4(self, val):
        r"""是否启用顶点颜色（Vector4）"""
        return _PyAnyCAD.MaterialInstance_SetVertexColors4(self, val)

    def GetVertexColors4(self):
        return _PyAnyCAD.MaterialInstance_GetVertexColors4(self)

    def SetRGB(self, r, g, b):
        r"""
        Set Color by R,G,B
        :type r: uint8_t
        :param r: [0,255]
        :type g: uint8_t
        :param g: [0,255]
        :type b: uint8_t
        :param b: [0,255]
        """
        return _PyAnyCAD.MaterialInstance_SetRGB(self, r, g, b)

    def SetColor(self, *args):
        r"""
        *Overload 1:*

        颜色


        |

        *Overload 2:*

        Set Color by R,G,B
        :type r: float
        :param r: [0,1]
        :type g: float
        :param g: [0,1]
        :type b: float
        :param b: [0,1]
        """
        return _PyAnyCAD.MaterialInstance_SetColor(self, *args)

    def SetTransparent(self, enabled):
        r"""
        是否启用透明
        :type enabled: boolean
        :param enabled: true启用
        """
        return _PyAnyCAD.MaterialInstance_SetTransparent(self, enabled)

    def GetTransparent(self):
        r"""
        判断是否启用透明
        :rtype: boolean
        :return: true启用
        """
        return _PyAnyCAD.MaterialInstance_GetTransparent(self)

    def GetReceiveShadow(self):
        r"""
        是否接收阴影
        :rtype: boolean
        :return: true接收
        """
        return _PyAnyCAD.MaterialInstance_GetReceiveShadow(self)

    def GetStatic(self):
        r"""
        是否是静态的Shader，无需要编译。
        :rtype: boolean
        :return: true则为静态shader。
        """
        return _PyAnyCAD.MaterialInstance_GetStatic(self)

    def GetMorphTargetCount(self):
        r"""
        MorphTarget数量
        :rtype: int
        :return: 数量
        """
        return _PyAnyCAD.MaterialInstance_GetMorphTargetCount(self)

    def RequestUpdate(self):
        r"""请求更新。材质参数修改后调用。"""
        return _PyAnyCAD.MaterialInstance_RequestUpdate(self)

    def ComputeHashCode(self):
        r"""计算哈希值，内部使用。"""
        return _PyAnyCAD.MaterialInstance_ComputeHashCode(self)

    def AddDefine(self, key, value):
        r"""
        定义宏，在Shader使用
        :type key: string
        :param key: 名称
        :type value: string
        :param value: 值
        """
        return _PyAnyCAD.MaterialInstance_AddDefine(self, key, value)

    def AddTexture(self, name, texture):
        r"""
        添加材质通道
        :type name: string
        :param name: map名称
        :type texture: :py:class:`Texture`
        :param texture: 贴图
        """
        return _PyAnyCAD.MaterialInstance_AddTexture(self, name, texture)

    def GetTexture(self, name):
        return _PyAnyCAD.MaterialInstance_GetTexture(self, name)

    def SetUniformBool(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformBool(self, name, val)

    def SetUniformInt(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformInt(self, name, val)

    def SetUniformTextureUnit(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformTextureUnit(self, name, val)

    def SetUniformFloat(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformFloat(self, name, val)

    def SetUniformVec2(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformVec2(self, name, val)

    def SetUniformVec3(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformVec3(self, name, val)

    def SetUniformVec4(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformVec4(self, name, val)

    def SetUniformMat2(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformMat2(self, name, val)

    def SetUniformMat3(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformMat3(self, name, val)

    def SetUniformMat4(self, name, val):
        return _PyAnyCAD.MaterialInstance_SetUniformMat4(self, name, val)

# Register MaterialInstance in _PyAnyCAD:
_PyAnyCAD.MaterialInstance_swigregister(MaterialInstance)
class BasicMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The basic material
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.BasicMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_BasicMaterial

    def SetMorphTargets(self, val):
        return _PyAnyCAD.BasicMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.BasicMaterial_GetMorphTargets(self)

    def SetColorMap(self, map):
        return _PyAnyCAD.BasicMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.BasicMaterial_GetColorMap(self)

    def GetBillboard(self):
        return _PyAnyCAD.BasicMaterial_GetBillboard(self)

    def SetBillboard(self, bEnabled):
        return _PyAnyCAD.BasicMaterial_SetBillboard(self, bEnabled)

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.BasicMaterial_Create(templateName)

# Register BasicMaterial in _PyAnyCAD:
_PyAnyCAD.BasicMaterial_swigregister(BasicMaterial)
class FontMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The font material
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.FontMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_FontMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.FontMaterial_Create(templateName)

    def SetText(self, *args):
        r"""
        Set the text string to display.
        :type text: anycore::StringW
        :param text: the string
        :type height: float
        :param height: the resolution of the texture.
            #param fontName the font name.
        :rtype: :py:class:`vec2`
        :return: the width and height of the texture.
        """
        return _PyAnyCAD.FontMaterial_SetText(self, *args)

    def SetBillboard(self, bEnabled):
        return _PyAnyCAD.FontMaterial_SetBillboard(self, bEnabled)

    def ClearBackground(self):
        return _PyAnyCAD.FontMaterial_ClearBackground(self)

    def SetBackground(self, val):
        return _PyAnyCAD.FontMaterial_SetBackground(self, val)

    def GetBackground(self):
        return _PyAnyCAD.FontMaterial_GetBackground(self)

    def SetAlphaTest(self, val):
        return _PyAnyCAD.FontMaterial_SetAlphaTest(self, val)

    def GetAlphaTest(self):
        return _PyAnyCAD.FontMaterial_GetAlphaTest(self)

    def GetBillboard(self):
        return _PyAnyCAD.FontMaterial_GetBillboard(self)

# Register FontMaterial in _PyAnyCAD:
_PyAnyCAD.FontMaterial_swigregister(FontMaterial)
class LineMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The basic material
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LineMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_LineMaterial

    def SetColorMap(self, map):
        return _PyAnyCAD.LineMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.LineMaterial_GetColorMap(self)

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.LineMaterial_Create(templateName)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.LineMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.LineMaterial_GetMorphTargets(self)

# Register LineMaterial in _PyAnyCAD:
_PyAnyCAD.LineMaterial_swigregister(LineMaterial)
class LineDashedMaterial(LineMaterial):
    r"""
    Author: Rendering
    The dashed line material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LineDashedMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_LineDashedMaterial

    def EnableDashed(self, enable):
        return _PyAnyCAD.LineDashedMaterial_EnableDashed(self, enable)

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.LineDashedMaterial_Create(templateName)

    def SetScale(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetScale(self, val)

    def GetScale(self):
        return _PyAnyCAD.LineDashedMaterial_GetScale(self)

    def SetDashSize(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetDashSize(self, val)

    def GetDashSize(self):
        return _PyAnyCAD.LineDashedMaterial_GetDashSize(self)

    def SetTotalSize(self, val):
        return _PyAnyCAD.LineDashedMaterial_SetTotalSize(self, val)

    def GetTotalSize(self):
        return _PyAnyCAD.LineDashedMaterial_GetTotalSize(self)

# Register LineDashedMaterial in _PyAnyCAD:
_PyAnyCAD.LineDashedMaterial_swigregister(LineDashedMaterial)
class MeshMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The mesh material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MeshMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MeshMaterial

    def SetColorMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.MeshMaterial_GetColorMap(self)

    def SetEnviornmentMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetEnviornmentMap(self, map)

    def GetEnviornmentMap(self):
        return _PyAnyCAD.MeshMaterial_GetEnviornmentMap(self)

    def SetRefractionRatio(self, val):
        return _PyAnyCAD.MeshMaterial_SetRefractionRatio(self, val)

    def GetRefractionRatio(self):
        return _PyAnyCAD.MeshMaterial_GetRefractionRatio(self)

    def SetAoMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetAoMap(self, map)

    def GetAoMap(self):
        return _PyAnyCAD.MeshMaterial_GetAoMap(self)

    def SetAoMapIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetAoMapIntensity(self, val)

    def GetAoMapIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetAoMapIntensity(self)

    def SetLightMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetLightMap(self, map)

    def GetLightMap(self):
        return _PyAnyCAD.MeshMaterial_GetLightMap(self)

    def SetLightMapIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetLightMapIntensity(self, val)

    def GetLightMapIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetLightMapIntensity(self)

    def SetEmissive(self, val):
        return _PyAnyCAD.MeshMaterial_SetEmissive(self, val)

    def GetEmissive(self):
        return _PyAnyCAD.MeshMaterial_GetEmissive(self)

    def SetEmissiveIntensity(self, val):
        return _PyAnyCAD.MeshMaterial_SetEmissiveIntensity(self, val)

    def GetEmissiveIntensity(self):
        return _PyAnyCAD.MeshMaterial_GetEmissiveIntensity(self)

    def SetEmissiveMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetEmissiveMap(self, map)

    def GetEmissiveMap(self):
        return _PyAnyCAD.MeshMaterial_GetEmissiveMap(self)

    def SetBumpMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetBumpMap(self, map)

    def GetBumpMap(self):
        return _PyAnyCAD.MeshMaterial_GetBumpMap(self)

    def SetBumpScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetBumpScale(self, val)

    def GetBumpScale(self):
        return _PyAnyCAD.MeshMaterial_GetBumpScale(self)

    def SetNormalMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetNormalMap(self, map)

    def GetNormalMap(self):
        return _PyAnyCAD.MeshMaterial_GetNormalMap(self)

    def SetNormalScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetNormalScale(self, val)

    def GetNormalScale(self):
        return _PyAnyCAD.MeshMaterial_GetNormalScale(self)

    def SetNormalMapType(self, val):
        return _PyAnyCAD.MeshMaterial_SetNormalMapType(self, val)

    def GetNormalMapType(self):
        return _PyAnyCAD.MeshMaterial_GetNormalMapType(self)

    def SetDisplacementMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetDisplacementMap(self, map)

    def GetDisplacementMap(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementMap(self)

    def SetDisplacementScale(self, val):
        return _PyAnyCAD.MeshMaterial_SetDisplacementScale(self, val)

    def GetDisplacementScale(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementScale(self)

    def SetDisplacementBias(self, val):
        return _PyAnyCAD.MeshMaterial_SetDisplacementBias(self, val)

    def GetDisplacementBias(self):
        return _PyAnyCAD.MeshMaterial_GetDisplacementBias(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.MeshMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.MeshMaterial_GetAlphaMap(self)

    def SetSkinning(self, val):
        return _PyAnyCAD.MeshMaterial_SetSkinning(self, val)

    def GetSkinning(self):
        return _PyAnyCAD.MeshMaterial_GetSkinning(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.MeshMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.MeshMaterial_GetMorphTargets(self)

    def SetMorphNormals(self, val):
        return _PyAnyCAD.MeshMaterial_SetMorphNormals(self, val)

    def GetMorphNormals(self):
        return _PyAnyCAD.MeshMaterial_GetMorphNormals(self)

# Register MeshMaterial in _PyAnyCAD:
_PyAnyCAD.MeshMaterial_swigregister(MeshMaterial)
class MeshPhongMaterial(MeshMaterial):
    r"""
    Author: Rendering
    The mesh material with phong lighting model.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_MeshPhongMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshPhongMaterial_Create(templateName)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.MeshPhongMaterial_Cast(*args)

    def SetSpecular(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetSpecular(self, val)

    def GetSpecular(self):
        return _PyAnyCAD.MeshPhongMaterial_GetSpecular(self)

    def SetSpecularMap(self, map):
        return _PyAnyCAD.MeshPhongMaterial_SetSpecularMap(self, map)

    def GetSpecularMap(self):
        return _PyAnyCAD.MeshPhongMaterial_GetSpecularMap(self)

    def SetShininess(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetShininess(self, val)

    def GetShininess(self):
        return _PyAnyCAD.MeshPhongMaterial_GetShininess(self)

    def SetEnvBlendingMode(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetEnvBlendingMode(self, val)

    def GetEnvBlendingMode(self):
        return _PyAnyCAD.MeshPhongMaterial_GetEnvBlendingMode(self)

    def SetReflectivity(self, val):
        return _PyAnyCAD.MeshPhongMaterial_SetReflectivity(self, val)

    def GetReflectivity(self):
        return _PyAnyCAD.MeshPhongMaterial_GetReflectivity(self)

# Register MeshPhongMaterial in _PyAnyCAD:
_PyAnyCAD.MeshPhongMaterial_swigregister(MeshPhongMaterial)
class MeshStandardMaterial(MeshMaterial):
    r"""
    Author: Rendering
    The standard PBR material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_MeshStandardMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshStandardMaterial_Create(templateName)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.MeshStandardMaterial_Cast(*args)

    def SetRoughness(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetRoughness(self, val)

    def GetRoughness(self):
        return _PyAnyCAD.MeshStandardMaterial_GetRoughness(self)

    def SetRoughnessMap(self, map):
        return _PyAnyCAD.MeshStandardMaterial_SetRoughnessMap(self, map)

    def GetRoughnessMap(self):
        return _PyAnyCAD.MeshStandardMaterial_GetRoughnessMap(self)

    def SetMetalness(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetMetalness(self, val)

    def GetMetalness(self):
        return _PyAnyCAD.MeshStandardMaterial_GetMetalness(self)

    def SetMetalnessMap(self, map):
        return _PyAnyCAD.MeshStandardMaterial_SetMetalnessMap(self, map)

    def GetMetalnessMap(self):
        return _PyAnyCAD.MeshStandardMaterial_GetMetalnessMap(self)

    def SetEnvMapIntensity(self, val):
        return _PyAnyCAD.MeshStandardMaterial_SetEnvMapIntensity(self, val)

    def GetEnvMapIntensity(self):
        return _PyAnyCAD.MeshStandardMaterial_GetEnvMapIntensity(self)

# Register MeshStandardMaterial in _PyAnyCAD:
_PyAnyCAD.MeshStandardMaterial_swigregister(MeshStandardMaterial)
EnumPointStyle_Plus = _PyAnyCAD.EnumPointStyle_Plus
EnumPointStyle_Cross = _PyAnyCAD.EnumPointStyle_Cross
EnumPointStyle_Dot = _PyAnyCAD.EnumPointStyle_Dot
EnumPointStyle_Rect = _PyAnyCAD.EnumPointStyle_Rect
EnumPointStyle_Triangle = _PyAnyCAD.EnumPointStyle_Triangle
EnumPointStyle_Arrow = _PyAnyCAD.EnumPointStyle_Arrow
r"""显示为箭头"""
EnumPointStyle_Axis = _PyAnyCAD.EnumPointStyle_Axis
r"""显示为轴"""
class PointsMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The point material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointsMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_PointsMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.PointsMaterial_Create(templateName)

    def SetPointStyle(self, style):
        return _PyAnyCAD.PointsMaterial_SetPointStyle(self, style)

    def SetPointTexture(self, fileName):
        return _PyAnyCAD.PointsMaterial_SetPointTexture(self, fileName)

    def SetColorMap(self, map):
        return _PyAnyCAD.PointsMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.PointsMaterial_GetColorMap(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.PointsMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.PointsMaterial_GetAlphaMap(self)

    def SetPointSize(self, val):
        return _PyAnyCAD.PointsMaterial_SetPointSize(self, val)

    def GetPointSize(self):
        return _PyAnyCAD.PointsMaterial_GetPointSize(self)

    def SetSizeAttenuation(self, val):
        return _PyAnyCAD.PointsMaterial_SetSizeAttenuation(self, val)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.PointsMaterial_GetSizeAttenuation(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.PointsMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.PointsMaterial_GetMorphTargets(self)

# Register PointsMaterial in _PyAnyCAD:
_PyAnyCAD.PointsMaterial_swigregister(PointsMaterial)
class SpriteMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The sprite material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SpriteMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_SpriteMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.SpriteMaterial_Create(templateName)

    def SetColorMap(self, map):
        return _PyAnyCAD.SpriteMaterial_SetColorMap(self, map)

    def GetColorMap(self):
        return _PyAnyCAD.SpriteMaterial_GetColorMap(self)

    def SetAlphaMap(self, map):
        return _PyAnyCAD.SpriteMaterial_SetAlphaMap(self, map)

    def GetAlphaMap(self):
        return _PyAnyCAD.SpriteMaterial_GetAlphaMap(self)

    def SetRotation(self, val):
        return _PyAnyCAD.SpriteMaterial_SetRotation(self, val)

    def GetRotation(self):
        return _PyAnyCAD.SpriteMaterial_GetRotation(self)

    def SetSizeAttenuation(self, val):
        return _PyAnyCAD.SpriteMaterial_SetSizeAttenuation(self, val)

    def GetSizeAttenuation(self):
        return _PyAnyCAD.SpriteMaterial_GetSizeAttenuation(self)

    def SetMorphTargets(self, val):
        return _PyAnyCAD.SpriteMaterial_SetMorphTargets(self, val)

    def GetMorphTargets(self):
        return _PyAnyCAD.SpriteMaterial_GetMorphTargets(self)

# Register SpriteMaterial in _PyAnyCAD:
_PyAnyCAD.SpriteMaterial_swigregister(SpriteMaterial)
class MeshNormalMaterial(MaterialInstance):
    r"""
    Author: Rendering
    The mesh normal material.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MeshNormalMaterial_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MeshNormalMaterial

    @staticmethod
    def Create(templateName):
        return _PyAnyCAD.MeshNormalMaterial_Create(templateName)

# Register MeshNormalMaterial in _PyAnyCAD:
_PyAnyCAD.MeshNormalMaterial_swigregister(MeshNormalMaterial)
class ShaderTemplate(GfxObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShaderTemplate_Cast(obj)

    def __init__(self):
        _PyAnyCAD.ShaderTemplate_swiginit(self, _PyAnyCAD.new_ShaderTemplate())
    __swig_destroy__ = _PyAnyCAD.delete_ShaderTemplate

    def GetName(self):
        return _PyAnyCAD.ShaderTemplate_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ShaderTemplate_SetName(self, val)

    def AddDefine(self, name, value):
        return _PyAnyCAD.ShaderTemplate_AddDefine(self, name, value)

# Register ShaderTemplate in _PyAnyCAD:
_PyAnyCAD.ShaderTemplate_swigregister(ShaderTemplate)
class ShaderTemplateManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.ShaderTemplateManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_ShaderTemplateManager

    def Create(self, name, vs, fs, uniforms):
        return _PyAnyCAD.ShaderTemplateManager_Create(self, name, vs, fs, uniforms)

    def Find(self, name):
        return _PyAnyCAD.ShaderTemplateManager_Find(self, name)

    def IsExist(self, name):
        return _PyAnyCAD.ShaderTemplateManager_IsExist(self, name)

    def Clear(self):
        return _PyAnyCAD.ShaderTemplateManager_Clear(self)

    def AddSemantic(self, name, val):
        return _PyAnyCAD.ShaderTemplateManager_AddSemantic(self, name, val)

    def GetSemantic(self, name):
        return _PyAnyCAD.ShaderTemplateManager_GetSemantic(self, name)

# Register ShaderTemplateManager in _PyAnyCAD:
_PyAnyCAD.ShaderTemplateManager_swigregister(ShaderTemplateManager)
class MaterialManager(object):
    r"""
    Author: Rendering
    The material manager
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.MaterialManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_MaterialManager

    def GetUpdateVersion(self):
        return _PyAnyCAD.MaterialManager_GetUpdateVersion(self)

    def RequestUpdate(self):
        return _PyAnyCAD.MaterialManager_RequestUpdate(self)

    def CreateTemplate(self, name, shader):
        return _PyAnyCAD.MaterialManager_CreateTemplate(self, name, shader)

    def CreateTemplateByName(self, name, shaderTemplateName):
        return _PyAnyCAD.MaterialManager_CreateTemplateByName(self, name, shaderTemplateName)

    def FindTemplate(self, name):
        return _PyAnyCAD.MaterialManager_FindTemplate(self, name)

    def Create(self, *args):
        return _PyAnyCAD.MaterialManager_Create(self, *args)

    def FindInstance(self, name):
        return _PyAnyCAD.MaterialManager_FindInstance(self, name)

    def Clear(self):
        return _PyAnyCAD.MaterialManager_Clear(self)

# Register MaterialManager in _PyAnyCAD:
_PyAnyCAD.MaterialManager_swigregister(MaterialManager)
class MaterialStore(object):
    r"""
    Author: Rendering

    内置材质管理，方便按照名称/颜色获取.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.MaterialStore_Instance()

    def GetPhongMaterial(self, name):
        r"""获取标准的Phong材质"""
        return _PyAnyCAD.MaterialStore_GetPhongMaterial(self, name)
    __swig_destroy__ = _PyAnyCAD.delete_MaterialStore

# Register MaterialStore in _PyAnyCAD:
_PyAnyCAD.MaterialStore_swigregister(MaterialStore)
EnumProjectionType_Orthographic = _PyAnyCAD.EnumProjectionType_Orthographic
EnumProjectionType_Perspective = _PyAnyCAD.EnumProjectionType_Perspective
EnumPositionType_Relative = _PyAnyCAD.EnumPositionType_Relative
EnumPositionType_Absolute = _PyAnyCAD.EnumPositionType_Absolute
EnumPositionType_Window = _PyAnyCAD.EnumPositionType_Window
class ViewPosition(object):
    r"""
    Author: Rendering
    The View position
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ViewPosition_swiginit(self, _PyAnyCAD.new_ViewPosition(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ViewPosition

    def GetValue(self):
        return _PyAnyCAD.ViewPosition_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ViewPosition_SetValue(self, val)

    def GetPositionType(self):
        return _PyAnyCAD.ViewPosition_GetPositionType(self)

    def SetPositionType(self, val):
        return _PyAnyCAD.ViewPosition_SetPositionType(self, val)

    def GetAbsoluteValue(self, winWidth, winHeight):
        return _PyAnyCAD.ViewPosition_GetAbsoluteValue(self, winWidth, winHeight)

# Register ViewPosition in _PyAnyCAD:
_PyAnyCAD.ViewPosition_swigregister(ViewPosition)
class Camera(object):
    r"""
    Author: Rendering

    相机信息
    相机视口坐标系
    1. Orgion [left, bottom]
          h
          ^---------
          |        |
          |        |
          O---------> w
      Origon and Size can be Absolute or Relative mode. See also: EnumPositionType
    2. Camera can be shared among viewports.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Camera_swiginit(self, _PyAnyCAD.new_Camera(*args))

    def GetPosition(self):
        return _PyAnyCAD.Camera_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.Camera_SetPosition(self, val)

    def GetPositionf(self):
        return _PyAnyCAD.Camera_GetPositionf(self)

    def GetUp(self):
        return _PyAnyCAD.Camera_GetUp(self)

    def SetUp(self, val):
        return _PyAnyCAD.Camera_SetUp(self, val)

    def GetUpf(self):
        return _PyAnyCAD.Camera_GetUpf(self)

    def GetTarget(self):
        return _PyAnyCAD.Camera_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.Camera_SetTarget(self, val)

    def GetTargetf(self):
        return _PyAnyCAD.Camera_GetTargetf(self)

    def GetPageOffset(self):
        return _PyAnyCAD.Camera_GetPageOffset(self)

    def SetPageOffset(self, val):
        return _PyAnyCAD.Camera_SetPageOffset(self, val)

    def GetPageOffsetf(self):
        return _PyAnyCAD.Camera_GetPageOffsetf(self)

    def GetViewMatrix(self):
        return _PyAnyCAD.Camera_GetViewMatrix(self)

    def GetViewMatrixf(self):
        return _PyAnyCAD.Camera_GetViewMatrixf(self)

    def GetNear(self):
        return _PyAnyCAD.Camera_GetNear(self)

    def SetNear(self, val):
        return _PyAnyCAD.Camera_SetNear(self, val)

    def GetFar(self):
        return _PyAnyCAD.Camera_GetFar(self)

    def SetFar(self, val):
        return _PyAnyCAD.Camera_SetFar(self, val)

    def GetFovy(self):
        return _PyAnyCAD.Camera_GetFovy(self)

    def SetFovy(self, val):
        return _PyAnyCAD.Camera_SetFovy(self, val)

    def GetOrigin(self):
        return _PyAnyCAD.Camera_GetOrigin(self)

    def SetOrigin(self, val):
        return _PyAnyCAD.Camera_SetOrigin(self, val)

    def GetSize(self):
        return _PyAnyCAD.Camera_GetSize(self)

    def SetSize(self, val):
        return _PyAnyCAD.Camera_SetSize(self, val)

    def GetWidth(self):
        return _PyAnyCAD.Camera_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.Camera_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.Camera_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.Camera_SetHeight(self, val)

    def GetOrthoZoomFactor(self):
        return _PyAnyCAD.Camera_GetOrthoZoomFactor(self)

    def GetOrthoZoomFactorf(self):
        return _PyAnyCAD.Camera_GetOrthoZoomFactorf(self)

    def GetProjectionType(self):
        return _PyAnyCAD.Camera_GetProjectionType(self)

    def SetProjectionType(self, val):
        return _PyAnyCAD.Camera_SetProjectionType(self, val)

    def GetProjectionMatrix(self):
        return _PyAnyCAD.Camera_GetProjectionMatrix(self)

    def GetProjectionMatrixf(self):
        return _PyAnyCAD.Camera_GetProjectionMatrixf(self)

    def GetLockNearFar(self):
        return _PyAnyCAD.Camera_GetLockNearFar(self)

    def SetLockNearFar(self, val):
        return _PyAnyCAD.Camera_SetLockNearFar(self, val)

    def GetDirection(self):
        r"""获取相机朝向，单位向量"""
        return _PyAnyCAD.Camera_GetDirection(self)

    def GetDirectionf(self):
        return _PyAnyCAD.Camera_GetDirectionf(self)

    def GetRight(self):
        r"""
        获取右向量
        :rtype: :py:class:`Vector3d`
        :return: 
        """
        return _PyAnyCAD.Camera_GetRight(self)

    def GetRightf(self):
        return _PyAnyCAD.Camera_GetRightf(self)

    def GetDistance(self):
        r"""
        获取相机位置距离观察位置的距离
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.Camera_GetDistance(self)

    def GetDistancef(self):
        return _PyAnyCAD.Camera_GetDistancef(self)

    def LookAt(self, position, target, up):
        r"""
        设置相机姿态
        :type position: :py:class:`Vector3d`
        :param position: 位置
        :type target: :py:class:`Vector3d`
        :param target: 观察位置
        :type up: :py:class:`Vector3d`
        :param up: 向上向量
        """
        return _PyAnyCAD.Camera_LookAt(self, position, target, up)

    def LookByDirection(self, target, dir, up):
        r"""
        设置相机姿态
        :type target: :py:class:`Vector3d`
        :param target: 目标位置
        :type dir: :py:class:`Vector3d`
        :param dir: 观察方向
        :type up: :py:class:`Vector3d`
        :param up: 向上向量
        """
        return _PyAnyCAD.Camera_LookByDirection(self, target, dir, up)

    def UpdateNearFar(self, sceneBox):
        r"""
        根据包围盒设置远近距离
        :type sceneBox: :py:class:`AABox`
        :param sceneBox: 包围盒
        """
        return _PyAnyCAD.Camera_UpdateNearFar(self, sceneBox)

    def GetViewportSize(self):
        r"""
        获取视口大小.
        :rtype: :py:class:`Vector2d`
        :return: the width and heigth.
        """
        return _PyAnyCAD.Camera_GetViewportSize(self)

    def GetViewportOrigin(self):
        r"""
        获取视口起始位置.
        :rtype: :py:class:`Vector2d`
        :return: the origin.
        """
        return _PyAnyCAD.Camera_GetViewportOrigin(self)

    def GetViewport(self):
        r"""
        获取视口
        :rtype: :py:class:`Vector4d`
        :return: {位置,大小}
        """
        return _PyAnyCAD.Camera_GetViewport(self)

    def GetViewportCenter(self):
        r"""
        获取视口中心位置
        :rtype: :py:class:`Vector2d`
        :return: 中心点
        """
        return _PyAnyCAD.Camera_GetViewportCenter(self)

    def Resize(self, width, height):
        r"""
        设置视口大小
        :type width: int
        :param width:
        :type height: int
        :param height:
        """
        return _PyAnyCAD.Camera_Resize(self, width, height)

    def SetOrthoZoomFactor(self, zoomFactor):
        r"""
        设置缩放系数
        :type zoomFactor: float
        :param zoomFactor: 缩放系数
        """
        return _PyAnyCAD.Camera_SetOrthoZoomFactor(self, zoomFactor)

    def Zoom(self, ratio, distance):
        r"""
        按照比例设置缩放系数
        :type ratio: float
        :param ratio: 缩放比例( > 0) （正交投影）
        :type distance: float
        :param distance: 移动的距离（透视投影）
        """
        return _PyAnyCAD.Camera_Zoom(self, ratio, distance)

    def SetZoomFactorRange(self, minV, maxV):
        r"""
        设置缩放系统范围
        :type minV: float
        :param minV: 最小值
        :type maxV: float
        :param maxV: 最大值
        """
        return _PyAnyCAD.Camera_SetZoomFactorRange(self, minV, maxV)

    def ClearZoomFactorRange(self):
        r"""清除缩放限制"""
        return _PyAnyCAD.Camera_ClearZoomFactorRange(self)

    def ComputeOrthoMatrix(self, zoomFactor):
        r"""
        根据缩放系数计算正交投影矩阵
        :type zoomFactor: float
        :param zoomFactor: 缩放系数
        :rtype: :py:class:`Matrix4d`
        :return: 矩阵
        """
        return _PyAnyCAD.Camera_ComputeOrthoMatrix(self, zoomFactor)

    def Contain(self, winX, winY):
        r"""
        Test if window point is in camera
        :type winX: int
        :param winX: the x value
        :type winY: int
        :param winY: the y value
        :rtype: boolean
        :return: true if in camera.
        """
        return _PyAnyCAD.Camera_Contain(self, winX, winY)

    def UpdateViewMatrix(self):
        r"""更新视图矩阵"""
        return _PyAnyCAD.Camera_UpdateViewMatrix(self)

    def UpdateProjectionMatrix(self):
        r"""更新投影矩阵"""
        return _PyAnyCAD.Camera_UpdateProjectionMatrix(self)

    def Dump(self):
        r"""输出相机信息"""
        return _PyAnyCAD.Camera_Dump(self)
    __swig_destroy__ = _PyAnyCAD.delete_Camera

# Register Camera in _PyAnyCAD:
_PyAnyCAD.Camera_swigregister(Camera)
EnumStandardView_VertexNxPyPz = _PyAnyCAD.EnumStandardView_VertexNxPyPz
EnumStandardView_VertexNxNyPz = _PyAnyCAD.EnumStandardView_VertexNxNyPz
EnumStandardView_VertexPxNyPz = _PyAnyCAD.EnumStandardView_VertexPxNyPz
EnumStandardView_VertexPxPyPz = _PyAnyCAD.EnumStandardView_VertexPxPyPz
EnumStandardView_VertexNxPyNz = _PyAnyCAD.EnumStandardView_VertexNxPyNz
EnumStandardView_VertexNxNyNz = _PyAnyCAD.EnumStandardView_VertexNxNyNz
EnumStandardView_VertexPxNyNz = _PyAnyCAD.EnumStandardView_VertexPxNyNz
EnumStandardView_VertexPxPyNz = _PyAnyCAD.EnumStandardView_VertexPxPyNz
EnumStandardView_EdgeDxPyPz = _PyAnyCAD.EnumStandardView_EdgeDxPyPz
EnumStandardView_EdgeDxNyPz = _PyAnyCAD.EnumStandardView_EdgeDxNyPz
EnumStandardView_EdgeDxNyNz = _PyAnyCAD.EnumStandardView_EdgeDxNyNz
EnumStandardView_EdgeDxPyNz = _PyAnyCAD.EnumStandardView_EdgeDxPyNz
EnumStandardView_EdgePxDyPz = _PyAnyCAD.EnumStandardView_EdgePxDyPz
EnumStandardView_EdgeNxDyPz = _PyAnyCAD.EnumStandardView_EdgeNxDyPz
EnumStandardView_EdgeNxDyNz = _PyAnyCAD.EnumStandardView_EdgeNxDyNz
EnumStandardView_EdgePxDyNz = _PyAnyCAD.EnumStandardView_EdgePxDyNz
EnumStandardView_EdgePxPyDz = _PyAnyCAD.EnumStandardView_EdgePxPyDz
EnumStandardView_EdgeNxPyDz = _PyAnyCAD.EnumStandardView_EdgeNxPyDz
EnumStandardView_EdgeNxNyDz = _PyAnyCAD.EnumStandardView_EdgeNxNyDz
EnumStandardView_EdgePxNyDz = _PyAnyCAD.EnumStandardView_EdgePxNyDz
EnumStandardView_FacePx = _PyAnyCAD.EnumStandardView_FacePx
EnumStandardView_FaceNx = _PyAnyCAD.EnumStandardView_FaceNx
EnumStandardView_FacePy = _PyAnyCAD.EnumStandardView_FacePy
EnumStandardView_FaceNy = _PyAnyCAD.EnumStandardView_FaceNy
EnumStandardView_FacePz = _PyAnyCAD.EnumStandardView_FacePz
EnumStandardView_FaceNz = _PyAnyCAD.EnumStandardView_FaceNz
EnumStandardView_DefaultView = _PyAnyCAD.EnumStandardView_DefaultView
EnumStandardView_X_Positive = _PyAnyCAD.EnumStandardView_X_Positive
EnumStandardView_X_Negative = _PyAnyCAD.EnumStandardView_X_Negative
EnumStandardView_Y_Positive = _PyAnyCAD.EnumStandardView_Y_Positive
EnumStandardView_Y_Negative = _PyAnyCAD.EnumStandardView_Y_Negative
EnumStandardView_Z_Positive = _PyAnyCAD.EnumStandardView_Z_Positive
EnumStandardView_Z_Negative = _PyAnyCAD.EnumStandardView_Z_Negative
EnumStandardView_Front = _PyAnyCAD.EnumStandardView_Front
EnumStandardView_Back = _PyAnyCAD.EnumStandardView_Back
EnumStandardView_Left = _PyAnyCAD.EnumStandardView_Left
EnumStandardView_Right = _PyAnyCAD.EnumStandardView_Right
EnumStandardView_Top = _PyAnyCAD.EnumStandardView_Top
EnumStandardView_Bottom = _PyAnyCAD.EnumStandardView_Bottom
class CameraDriver(object):
    r"""
    Author: Rendering
    计算相机信息
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CameraDriver:
            _self = None
        else:
            _self = self
        _PyAnyCAD.CameraDriver_swiginit(self, _PyAnyCAD.new_CameraDriver(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_CameraDriver

    def GetDirection(self):
        return _PyAnyCAD.CameraDriver_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.CameraDriver_SetDirection(self, val)

    def GetUp(self):
        return _PyAnyCAD.CameraDriver_GetUp(self)

    def SetUp(self, val):
        return _PyAnyCAD.CameraDriver_SetUp(self, val)

    def ComputeCameraDirection(self, iDir):
        r"""
        计算标准位置相机的方向。计算结果存放在Direction和Up中。
        :type iDir: int
        :param iDir: 标准位置
        """
        return _PyAnyCAD.CameraDriver_ComputeCameraDirection(self, iDir)

    def GetStandardView(self, direction):
        return _PyAnyCAD.CameraDriver_GetStandardView(self, direction)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_CameraDriver(self)
        return weakref.proxy(self)

# Register CameraDriver in _PyAnyCAD:
_PyAnyCAD.CameraDriver_swigregister(CameraDriver)
class PrimitiveShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PrimitiveShapeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PrimitiveShapeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PrimitiveShapeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PrimitiveShapeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PrimitiveShapeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PrimitiveShapeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PrimitiveShapeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PrimitiveShapeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PrimitiveShapeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PrimitiveShapeList_empty(self)

    def size(self):
        return _PyAnyCAD.PrimitiveShapeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PrimitiveShapeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PrimitiveShapeList_begin(self)

    def end(self):
        return _PyAnyCAD.PrimitiveShapeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PrimitiveShapeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PrimitiveShapeList_rend(self)

    def clear(self):
        return _PyAnyCAD.PrimitiveShapeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PrimitiveShapeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PrimitiveShapeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveShapeList_swiginit(self, _PyAnyCAD.new_PrimitiveShapeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PrimitiveShapeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PrimitiveShapeList_front(self)

    def back(self):
        return _PyAnyCAD.PrimitiveShapeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PrimitiveShapeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PrimitiveShapeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PrimitiveShapeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PrimitiveShapeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveShapeList

# Register PrimitiveShapeList in _PyAnyCAD:
_PyAnyCAD.PrimitiveShapeList_swigregister(PrimitiveShapeList)
class PrimitiveShape(object):
    r"""
    Author: Rendering
    带材质的基本图元
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveShape_swiginit(self, _PyAnyCAD.new_PrimitiveShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveShape
    NullPtr = property(_PyAnyCAD.PrimitiveShape_NullPtr_get, _PyAnyCAD.PrimitiveShape_NullPtr_set)

    def GetUserId(self):
        return _PyAnyCAD.PrimitiveShape_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.PrimitiveShape_SetUserId(self, val)

    def GetDrawCount(self):
        return _PyAnyCAD.PrimitiveShape_GetDrawCount(self)

    def SetDrawCount(self, val):
        return _PyAnyCAD.PrimitiveShape_SetDrawCount(self, val)

    def GetGeometry(self):
        return _PyAnyCAD.PrimitiveShape_GetGeometry(self)

    def SetGeometry(self, val):
        return _PyAnyCAD.PrimitiveShape_SetGeometry(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.PrimitiveShape_GetMaterial(self)

    def SetMaterial(self, val):
        return _PyAnyCAD.PrimitiveShape_SetMaterial(self, val)

    def Clone(self):
        r"""复制对象"""
        return _PyAnyCAD.PrimitiveShape_Clone(self)

    def GetPrimitiveType(self):
        r"""
        图元类型
        :rtype: int
        :return: 类型
        """
        return _PyAnyCAD.PrimitiveShape_GetPrimitiveType(self)

    def GetPositions(self):
        r"""
        顶点位置属性
        :rtype: :py:class:`BufferAttribute`
        :return: 位置属性
        """
        return _PyAnyCAD.PrimitiveShape_GetPositions(self)

    def GetNormals(self):
        r"""
        顶点法向属性。可选
        :rtype: :py:class:`BufferAttribute`
        :return: 法向
        """
        return _PyAnyCAD.PrimitiveShape_GetNormals(self)

    def GetTexCoords(self):
        r"""
        顶点UV坐标。可选
        :rtype: :py:class:`BufferAttribute`
        :return: UV坐标
        """
        return _PyAnyCAD.PrimitiveShape_GetTexCoords(self)

    def GetColors(self):
        r"""
        顶点颜色。可选
        :rtype: :py:class:`BufferAttribute`
        :return: 
        """
        return _PyAnyCAD.PrimitiveShape_GetColors(self)

    def GetIndex(self):
        r"""
        顶点索引。可选
        :rtype: :py:class:`ElementAttribute`
        :return: 顶点索引属性
        """
        return _PyAnyCAD.PrimitiveShape_GetIndex(self)

    def GetBoundingBox(self):
        r"""
        获取包围盒
        :rtype: :py:class:`AABox`
        :return: 
        """
        return _PyAnyCAD.PrimitiveShape_GetBoundingBox(self)

    def UpdateBoundingBox(self):
        r"""更新包围盒"""
        return _PyAnyCAD.PrimitiveShape_UpdateBoundingBox(self)

    def HasColorAttribute(self):
        r"""
        判断是否存在颜色属性
        :rtype: boolean
        :return: true则存在
        """
        return _PyAnyCAD.PrimitiveShape_HasColorAttribute(self)

    def Transform(self, trf):
        r"""
        变换顶点属性
        :type trf: :py:class:`mat4`
        :param trf:
        """
        return _PyAnyCAD.PrimitiveShape_Transform(self, trf)

    def RequestUpdate(self):
        r"""请求更新"""
        return _PyAnyCAD.PrimitiveShape_RequestUpdate(self)

# Register PrimitiveShape in _PyAnyCAD:
_PyAnyCAD.PrimitiveShape_swigregister(PrimitiveShape)
class CompoundShape(object):
    r"""
    Author: Rendering
    The compound shape.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.CompoundShape_swiginit(self, _PyAnyCAD.new_CompoundShape())
    __swig_destroy__ = _PyAnyCAD.delete_CompoundShape

    def GetName(self):
        return _PyAnyCAD.CompoundShape_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.CompoundShape_SetName(self, val)

    def GetShapes(self):
        return _PyAnyCAD.CompoundShape_GetShapes(self)

    def GetBoundingBox(self):
        return _PyAnyCAD.CompoundShape_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.CompoundShape_SetBoundingBox(self, val)

    def Clone(self):
        return _PyAnyCAD.CompoundShape_Clone(self)

    def SetMaterial(self, material):
        return _PyAnyCAD.CompoundShape_SetMaterial(self, material)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.CompoundShape_UpdateBoundingBox(self)

    def AddTargetName(self, name, id):
        return _PyAnyCAD.CompoundShape_AddTargetName(self, name, id)

    def UpdateMorphTargets(self):
        return _PyAnyCAD.CompoundShape_UpdateMorphTargets(self)

    def Clear(self):
        return _PyAnyCAD.CompoundShape_Clear(self)

    def Add(self, *args):
        return _PyAnyCAD.CompoundShape_Add(self, *args)

    def GetCount(self):
        return _PyAnyCAD.CompoundShape_GetCount(self)

    def GetPrimitive(self, idx):
        return _PyAnyCAD.CompoundShape_GetPrimitive(self, idx)

    def GetPrimitiveCount(self):
        return _PyAnyCAD.CompoundShape_GetPrimitiveCount(self)

# Register CompoundShape in _PyAnyCAD:
_PyAnyCAD.CompoundShape_swigregister(CompoundShape)
class GeometryBuilder(object):
    r"""
    Author: Rendering
    创建显示用的几何对象
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CreateGeometry(*args):
        r"""
        *Overload 1:*

        创建通用的几何对象
        :type type: int
        :param type: 类型
        :type vb: :py:class:`Float32Array`
        :param vb: 位置数组
        :type nb: :py:class:`Float32Array`
        :param nb: 法向数组
        :type uv: :py:class:`Float32Array`
        :param uv: 纹理坐标数组
        :type ib: :py:class:`Uint32Array`
        :param ib: 索引数组
        :rtype: :py:class:`BufferGeometry`
        :return: 对象


        |

        *Overload 2:*

        创建通用的几何对象
        :type type: int
        :param type: 类型
        :type vb: :py:class:`Float32Buffer`
        :param vb: 位置数组
        :type nb: :py:class:`Float32Buffer`
        :param nb: 法向数组
        :type uv: :py:class:`Float32Buffer`
        :param uv: 纹理坐标数组
        :type ib: :py:class:`Uint32Buffer`
        :param ib: 索引数组
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateGeometry(*args)

    @staticmethod
    def CreateBox(widthX, widthY, heightZ, widthSegments=1, heightSegments=1, depthSegments=1):
        r"""
        创建盒体
        :type widthX: float
        :param widthX: X方向宽度
        :type widthY: float
        :param widthY: Y方向宽度
        :type heightZ: float
        :param heightZ: Z方向高度
        :type widthSegments: int, optional
        :param widthSegments: X切分的份数
        :type heightSegments: int, optional
        :param heightSegments: Y切分的份数
        :type depthSegments: int, optional
        :param depthSegments: Z切分的份数
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateBox(widthX, widthY, heightZ, widthSegments, heightSegments, depthSegments)

    @staticmethod
    def CreateSphere(*args):
        r"""
        创建球体、半球体
        :type radius: float
        :param radius: 半径
        :type widthSegments: int, optional
        :param widthSegments: 经度方向的份数
        :type heightSegments: int, optional
        :param heightSegments: 维度方向的份数
        :type phiStart: float, optional
        :param phiStart: 经度方向起始角度
        :type phiLength: float, optional
        :param phiLength: 角度大小
        :type thetaStart: float, optional
        :param thetaStart: 维度方向起始角度
        :type thetaLength: float, optional
        :param thetaLength: 角度大小
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateSphere(*args)

    @staticmethod
    def CreateCylinder(*args):
        r"""
        创建圆柱体、圆台体
        :type radiusTop: float
        :param radiusTop:  顶部半径
        :type radiusBottom: float
        :param radiusBottom: 顶部半径
        :type height: float
        :param height: 高度
        :type radialSegments: int, optional
        :param radialSegments: 圆的分割份数
        :type heightSegments: int, optional
        :param heightSegments: 高度分割份数
        :type openEnded: boolean, optional
        :param openEnded: 端部是否封闭
        :type thetaStart: float, optional
        :param thetaStart: 起始角度
        :type thetaLength: float, optional
        :param thetaLength: 角度大小
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateCylinder(*args)

    @staticmethod
    def CreatePlane(width, height, widthSegments=1, heightSegments=1):
        r"""
        创建平面
        :type width: float
        :param width: 宽度
        :type height: float
        :param height: 高度
        :type widthSegments: int, optional
        :param widthSegments: X方向分割份数
        :type heightSegments: int, optional
        :param heightSegments: Y方向风格份数
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreatePlane(width, height, widthSegments, heightSegments)

    @staticmethod
    def CreatePoints(positions, color3, normals):
        r"""
        创建点的集合
        :type positions: :py:class:`Float32Array`
        :param positions: 点的数组
        :type color3: :py:class:`Float32Array`
        :param color3: 点的颜色，可为null
        :type normals: :py:class:`Float32Array`
        :param normals: 点法向，可为null
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreatePoints(positions, color3, normals)

    @staticmethod
    def CreateLines(positions, ib, color3):
        r"""
        创建线段
        :type positions: :py:class:`Float32Array`
        :param positions: 顶点数组
        :type ib: :py:class:`Uint32Array`
        :param ib: 组成边的顶点索引
        :type color3: :py:class:`Float32Array`
        :param color3: 颜色
        :rtype: :py:class:`BufferGeometry`
        :return: 
        """
        return _PyAnyCAD.GeometryBuilder_CreateLines(positions, ib, color3)

    @staticmethod
    def CreatePoint(position):
        r"""
        创建点
        :type position: :py:class:`vec3`
        :param position: 位置
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreatePoint(position)

    @staticmethod
    def UpdatePoint(geometry, pt):
        r"""
        更新点对象
        :type geometry: :py:class:`BufferGeometry`
        :param geometry: 对象
        :type pt: :py:class:`vec3`
        :param pt: 位置
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.GeometryBuilder_UpdatePoint(geometry, pt)

    @staticmethod
    def ParsePoint(geometry):
        r"""
        获取点
        :type geometry: :py:class:`BufferGeometry`
        :param geometry: 几何对象
        :rtype: :py:class:`vec3`
        :return: 位置
        """
        return _PyAnyCAD.GeometryBuilder_ParsePoint(geometry)

    @staticmethod
    def CreateLine(start, end):
        r"""
        创建线段
        :type start: :py:class:`vec3`
        :param start: 起始点
        :type end: :py:class:`vec3`
        :param end: 终止点
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateLine(start, end)

    @staticmethod
    def UpdateLine(line, start, end):
        r"""
        更新线的坐标
        :type line: :py:class:`BufferGeometry`
        :param line: 线对象
        :type start: :py:class:`vec3`
        :param start: 起点
        :type end: :py:class:`vec3`
        :param end: 终点
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.GeometryBuilder_UpdateLine(line, start, end)

    @staticmethod
    def CreateRectangle():
        r"""
        创建 1 x 1单位大小的矩阵
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateRectangle()

    @staticmethod
    def CreateUnitCircle():
        r"""
        创建单位大小的圆
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateUnitCircle()

    @staticmethod
    def CreateArc(center, start, end, offset):
        r"""
        创建圆弧
        :type center: :py:class:`vec3`
        :param center: 中心点
        :type start: :py:class:`vec3`
        :param start: 起始点
        :type end: :py:class:`vec3`
        :param end: 终止点
        :type offset: float
        :param offset: 终点偏移长度
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateArc(center, start, end, offset)

    @staticmethod
    def CreateFrustumOutline(*args):
        return _PyAnyCAD.GeometryBuilder_CreateFrustumOutline(*args)

    @staticmethod
    def CreateBoxOutline(*args):
        r"""
        *Overload 1:*

        创建包围盒轮廓线对象
        :type box: :py:class:`AABox`
        :param box: 包围盒
        :rtype: :py:class:`BufferGeometry`
        :return: 对象


        |

        *Overload 2:*

        创建盒子的轮廓线
        :type length: float
        :param length: 长度
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateBoxOutline(*args)

    @staticmethod
    def UpdateBoxOutline(*args):
        return _PyAnyCAD.GeometryBuilder_UpdateBoxOutline(*args)

    @staticmethod
    def Transform(pGeometry, trf):
        r"""
        根据矩阵更新对象的顶点位置
        :type pGeometry: :py:class:`BufferGeometry`
        :param pGeometry: 对象
        :type trf: :py:class:`mat4`
        :param trf: 矩阵
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.GeometryBuilder_Transform(pGeometry, trf)

    @staticmethod
    def CreateLineArrow(height, headHeight, radius):
        r"""
        创建线框箭头 Z方向
        :type height: float
        :param height: 柄的高度
        :type headHeight: float
        :param headHeight: 头的高度
        :type radius: float
        :param radius: 半径
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateLineArrow(height, headHeight, radius)

    @staticmethod
    def CreateArrow(heightHand, heightHead, radius, material):
        r"""
        创建实体箭头
        :type heightHand: float
        :param heightHand: 柄的高度
        :type heightHead: float
        :param heightHead: 头的高度
        :type radius: float
        :param radius: 半径
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        :rtype: :py:class:`CompoundShape`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_CreateArrow(heightHand, heightHead, radius, material)

    @staticmethod
    def AtomCone():
        r"""
        单位大小的圆锥
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomCone()

    @staticmethod
    def AtomBox():
        r"""
        单位的盒体
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomBox()

    @staticmethod
    def AtomBoxOutline():
        r"""
        单位盒体的轮廓线
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomBoxOutline()

    @staticmethod
    def AtomCylinder():
        r"""
        单位圆柱体
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomCylinder()

    @staticmethod
    def AtomSphere():
        r"""
        单位球体
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomSphere()

    @staticmethod
    def AtomQuadShape():
        r"""
        单位矩形面
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomQuadShape()

    @staticmethod
    def AtomPoint():
        r"""
        点（0，0，0）
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomPoint()

    @staticmethod
    def AtomLine():
        r"""
        单位线（1，0，0）
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomLine()

    @staticmethod
    def AtomMLine():
        r"""
        单位虚线
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomMLine()

    @staticmethod
    def AtomCircle():
        r"""
        单位圆形
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomCircle()

    @staticmethod
    def AtomArc90():
        r"""
        1/4圆弧，第一象限
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomArc90()

    @staticmethod
    def AtomMCircle():
        r"""
        单位虚线圆
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomMCircle()

    @staticmethod
    def AtomArrow():
        r"""
        单位箭头
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomArrow()

    @staticmethod
    def AtomRectangle():
        r"""
        单位矩形
        :rtype: :py:class:`BufferGeometry`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomRectangle()

    @staticmethod
    def UnitArrowTemplate():
        r"""
        单位的实体箭头
        :rtype: :py:class:`CompoundShape`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_UnitArrowTemplate()

    @staticmethod
    def AtomPointShape():
        r"""
        单位点
        :rtype: :py:class:`PrimitiveShape`
        :return: 对象
        """
        return _PyAnyCAD.GeometryBuilder_AtomPointShape()

    def __init__(self):
        _PyAnyCAD.GeometryBuilder_swiginit(self, _PyAnyCAD.new_GeometryBuilder())
    __swig_destroy__ = _PyAnyCAD.delete_GeometryBuilder

# Register GeometryBuilder in _PyAnyCAD:
_PyAnyCAD.GeometryBuilder_swigregister(GeometryBuilder)
EnumTextAlignment_LEFT_TOP = _PyAnyCAD.EnumTextAlignment_LEFT_TOP
EnumTextAlignment_LEFT_CENTER = _PyAnyCAD.EnumTextAlignment_LEFT_CENTER
EnumTextAlignment_LEFT_BOTTOM = _PyAnyCAD.EnumTextAlignment_LEFT_BOTTOM
EnumTextAlignment_CENTER_TOP = _PyAnyCAD.EnumTextAlignment_CENTER_TOP
EnumTextAlignment_CENTER_CENTER = _PyAnyCAD.EnumTextAlignment_CENTER_CENTER
EnumTextAlignment_CENTER_BOTTOM = _PyAnyCAD.EnumTextAlignment_CENTER_BOTTOM
EnumTextAlignment_RIGHT_TOP = _PyAnyCAD.EnumTextAlignment_RIGHT_TOP
EnumTextAlignment_RIGHT_CENTER = _PyAnyCAD.EnumTextAlignment_RIGHT_CENTER
EnumTextAlignment_RIGHT_BOTTOM = _PyAnyCAD.EnumTextAlignment_RIGHT_BOTTOM
class TextConfig(object):
    r"""
     Author: Rendering
    文字配置
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def GetHeight(self):
        return _PyAnyCAD.TextConfig_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.TextConfig_SetHeight(self, val)

    def GetAlignment(self):
        return _PyAnyCAD.TextConfig_GetAlignment(self)

    def SetAlignment(self, val):
        return _PyAnyCAD.TextConfig_SetAlignment(self, val)

    def GetPosition(self):
        return _PyAnyCAD.TextConfig_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.TextConfig_SetPosition(self, val)

    def GetRotation(self):
        return _PyAnyCAD.TextConfig_GetRotation(self)

    def SetRotation(self, val):
        return _PyAnyCAD.TextConfig_SetRotation(self, val)

    def GetWidthFactor(self):
        return _PyAnyCAD.TextConfig_GetWidthFactor(self)

    def SetWidthFactor(self, val):
        return _PyAnyCAD.TextConfig_SetWidthFactor(self, val)

    def GetMirroredInX(self):
        return _PyAnyCAD.TextConfig_GetMirroredInX(self)

    def SetMirroredInX(self, val):
        return _PyAnyCAD.TextConfig_SetMirroredInX(self, val)

    def GetMirroredInY(self):
        return _PyAnyCAD.TextConfig_GetMirroredInY(self)

    def SetMirroredInY(self, val):
        return _PyAnyCAD.TextConfig_SetMirroredInY(self, val)

    def GetFontType(self):
        return _PyAnyCAD.TextConfig_GetFontType(self)

    def SetFontType(self, val):
        return _PyAnyCAD.TextConfig_SetFontType(self, val)

    def __init__(self):
        _PyAnyCAD.TextConfig_swiginit(self, _PyAnyCAD.new_TextConfig())
    __swig_destroy__ = _PyAnyCAD.delete_TextConfig

# Register TextConfig in _PyAnyCAD:
_PyAnyCAD.TextConfig_swigregister(TextConfig)
class FontManager(object):
    r"""
    Author: Rendering
    The font manager
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.FontManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_FontManager

    def GetDefaultFont(self):
        return _PyAnyCAD.FontManager_GetDefaultFont(self)

    def CreateTexture(self, *args):
        return _PyAnyCAD.FontManager_CreateTexture(self, *args)

    def CreateMesh(self, *args):
        return _PyAnyCAD.FontManager_CreateMesh(self, *args)

    def CreateGeometry(self, *args):
        return _PyAnyCAD.FontManager_CreateGeometry(self, *args)

    def AddFont(self, fontName, fontPath):
        return _PyAnyCAD.FontManager_AddFont(self, fontName, fontPath)

    def SetDefaultFont(self, fontName):
        return _PyAnyCAD.FontManager_SetDefaultFont(self, fontName)

# Register FontManager in _PyAnyCAD:
_PyAnyCAD.FontManager_swigregister(FontManager)
class RenderSettings(object):
    r"""
    Author: Rendering
    The settings
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RenderSettings_swiginit(self, _PyAnyCAD.new_RenderSettings())
    __swig_destroy__ = _PyAnyCAD.delete_RenderSettings

    def GetId(self):
        return _PyAnyCAD.RenderSettings_GetId(self)

    def GetGammaFactor(self):
        return _PyAnyCAD.RenderSettings_GetGammaFactor(self)

    def SetGammaFactor(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaFactor(self, val)

    def GetGammaOutput(self):
        return _PyAnyCAD.RenderSettings_GetGammaOutput(self)

    def SetGammaOutput(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaOutput(self, val)

    def GetGammaInput(self):
        return _PyAnyCAD.RenderSettings_GetGammaInput(self)

    def SetGammaInput(self, val):
        return _PyAnyCAD.RenderSettings_SetGammaInput(self, val)

    def GetOutputEncoding(self):
        return _PyAnyCAD.RenderSettings_GetOutputEncoding(self)

    def SetOutputEncoding(self, val):
        return _PyAnyCAD.RenderSettings_SetOutputEncoding(self, val)

    def GetSupportsVertexTextures(self):
        return _PyAnyCAD.RenderSettings_GetSupportsVertexTextures(self)

    def SetSupportsVertexTextures(self, val):
        return _PyAnyCAD.RenderSettings_SetSupportsVertexTextures(self, val)

    def GetFloatVertexTextures(self):
        return _PyAnyCAD.RenderSettings_GetFloatVertexTextures(self)

    def SetFloatVertexTextures(self, val):
        return _PyAnyCAD.RenderSettings_SetFloatVertexTextures(self, val)

    def GetMaxVertexUniforms(self):
        return _PyAnyCAD.RenderSettings_GetMaxVertexUniforms(self)

    def SetMaxVertexUniforms(self, val):
        return _PyAnyCAD.RenderSettings_SetMaxVertexUniforms(self, val)

    def GetLogarithmicDepthBuffer(self):
        return _PyAnyCAD.RenderSettings_GetLogarithmicDepthBuffer(self)

    def SetLogarithmicDepthBuffer(self, val):
        return _PyAnyCAD.RenderSettings_SetLogarithmicDepthBuffer(self, val)

    def GetFog(self):
        return _PyAnyCAD.RenderSettings_GetFog(self)

    def SetFog(self, val):
        return _PyAnyCAD.RenderSettings_SetFog(self, val)

    def GetFogExp2(self):
        return _PyAnyCAD.RenderSettings_GetFogExp2(self)

    def SetFogExp2(self, val):
        return _PyAnyCAD.RenderSettings_SetFogExp2(self, val)

    def GetShadowMapEnabled(self):
        return _PyAnyCAD.RenderSettings_GetShadowMapEnabled(self)

    def SetShadowMapEnabled(self, val):
        return _PyAnyCAD.RenderSettings_SetShadowMapEnabled(self, val)

    def GetShadowMapType(self):
        return _PyAnyCAD.RenderSettings_GetShadowMapType(self)

    def SetShadowMapType(self, val):
        return _PyAnyCAD.RenderSettings_SetShadowMapType(self, val)

    def GetContactShadow(self):
        return _PyAnyCAD.RenderSettings_GetContactShadow(self)

    def SetContactShadow(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadow(self, val)

    def GetContactShadowBlur(self):
        return _PyAnyCAD.RenderSettings_GetContactShadowBlur(self)

    def SetContactShadowBlur(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadowBlur(self, val)

    def GetContactShadowZ(self):
        return _PyAnyCAD.RenderSettings_GetContactShadowZ(self)

    def SetContactShadowZ(self, val):
        return _PyAnyCAD.RenderSettings_SetContactShadowZ(self, val)

    def GetPhysicallyCorrectLights(self):
        return _PyAnyCAD.RenderSettings_GetPhysicallyCorrectLights(self)

    def SetPhysicallyCorrectLights(self, val):
        return _PyAnyCAD.RenderSettings_SetPhysicallyCorrectLights(self, val)

    def GetToneMapping(self):
        return _PyAnyCAD.RenderSettings_GetToneMapping(self)

    def SetToneMapping(self, val):
        return _PyAnyCAD.RenderSettings_SetToneMapping(self, val)

    def GetToneMappingExposure(self):
        return _PyAnyCAD.RenderSettings_GetToneMappingExposure(self)

    def SetToneMappingExposure(self, val):
        return _PyAnyCAD.RenderSettings_SetToneMappingExposure(self, val)

    def GetDiretionalLightCount(self):
        return _PyAnyCAD.RenderSettings_GetDiretionalLightCount(self)

    def SetDiretionalLightCount(self, val):
        return _PyAnyCAD.RenderSettings_SetDiretionalLightCount(self, val)

    def GetDiretionalLightShadowCount(self):
        return _PyAnyCAD.RenderSettings_GetDiretionalLightShadowCount(self)

    def SetDiretionalLightShadowCount(self, val):
        return _PyAnyCAD.RenderSettings_SetDiretionalLightShadowCount(self, val)

    def GetHemisphereLight(self):
        return _PyAnyCAD.RenderSettings_GetHemisphereLight(self)

    def SetHemisphereLight(self, val):
        return _PyAnyCAD.RenderSettings_SetHemisphereLight(self, val)

    def GetClippingPlanesNum(self):
        return _PyAnyCAD.RenderSettings_GetClippingPlanesNum(self)

    def SetClippingPlanesNum(self, val):
        return _PyAnyCAD.RenderSettings_SetClippingPlanesNum(self, val)

    def GetClippingIntersection(self):
        return _PyAnyCAD.RenderSettings_GetClippingIntersection(self)

    def SetClippingIntersection(self, val):
        return _PyAnyCAD.RenderSettings_SetClippingIntersection(self, val)

# Register RenderSettings in _PyAnyCAD:
_PyAnyCAD.RenderSettings_swigregister(RenderSettings)
EnumUpdateFlags_Model = _PyAnyCAD.EnumUpdateFlags_Model
r"""局部变化"""
EnumUpdateFlags_Scene = _PyAnyCAD.EnumUpdateFlags_Scene
r"""矩阵变化"""
EnumUpdateFlags_Material = _PyAnyCAD.EnumUpdateFlags_Material
r"""材质变化"""
EnumUpdateFlags_Camera = _PyAnyCAD.EnumUpdateFlags_Camera
r"""相机变化"""
EnumUpdateFlags_Viewport = _PyAnyCAD.EnumUpdateFlags_Viewport
EnumUpdateFlags_ZoomToFit = _PyAnyCAD.EnumUpdateFlags_ZoomToFit
r"""缩放相机"""
EnumUpdateFlags_Dynamic = _PyAnyCAD.EnumUpdateFlags_Dynamic
r"""临时对象"""
EnumUpdateFlags_Selection = _PyAnyCAD.EnumUpdateFlags_Selection
r"""选择"""
EnumUpdateFlags_Scene2D = _PyAnyCAD.EnumUpdateFlags_Scene2D
r"""2D图元"""
EnumViewCoordinateType_Empty = _PyAnyCAD.EnumViewCoordinateType_Empty
EnumViewCoordinateType_Axis = _PyAnyCAD.EnumViewCoordinateType_Axis
EnumViewCoordinateType_Cube = _PyAnyCAD.EnumViewCoordinateType_Cube
EnumViewCoordinateType_AxisAndCube = _PyAnyCAD.EnumViewCoordinateType_AxisAndCube
EnumRulerWidgetType_Empty = _PyAnyCAD.EnumRulerWidgetType_Empty
EnumRulerWidgetType_Default = _PyAnyCAD.EnumRulerWidgetType_Default
EnumDisplayMode_Color = _PyAnyCAD.EnumDisplayMode_Color
EnumDisplayMode_Realistic = _PyAnyCAD.EnumDisplayMode_Realistic
EnumDisplayMode_HLR = _PyAnyCAD.EnumDisplayMode_HLR
EnumDisplayMode_Wireframe = _PyAnyCAD.EnumDisplayMode_Wireframe
class SceneNode(GfxObject):
    r"""
    Author: Rendering

    SceneNode用来表示场景中可绘制对象的节点.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SceneNode_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_SceneNode

    def GetUserId(self):
        return _PyAnyCAD.SceneNode_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.SceneNode_SetUserId(self, val)

    def GetName(self):
        return _PyAnyCAD.SceneNode_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.SceneNode_SetName(self, val)

    def GetTransform(self):
        return _PyAnyCAD.SceneNode_GetTransform(self)

    def GetBoundingBox(self):
        return _PyAnyCAD.SceneNode_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.SceneNode_SetBoundingBox(self, val)

    def GetWorldTransform(self):
        return _PyAnyCAD.SceneNode_GetWorldTransform(self)

    def GetWorldBBox(self):
        return _PyAnyCAD.SceneNode_GetWorldBBox(self)

    def GetState(self):
        return _PyAnyCAD.SceneNode_GetState(self)

    def GetParent(self):
        return _PyAnyCAD.SceneNode_GetParent(self)

    def SetParent(self, val):
        return _PyAnyCAD.SceneNode_SetParent(self, val)

    def GetPickOrder(self):
        return _PyAnyCAD.SceneNode_GetPickOrder(self)

    def SetPickOrder(self, val):
        return _PyAnyCAD.SceneNode_SetPickOrder(self, val)

    def GetUpdateVersion(self):
        return _PyAnyCAD.SceneNode_GetUpdateVersion(self)

    def SetUpdateVersion(self, val):
        return _PyAnyCAD.SceneNode_SetUpdateVersion(self, val)

    def GetOverrideFaceMaterial(self):
        return _PyAnyCAD.SceneNode_GetOverrideFaceMaterial(self)

    def SetOverrideFaceMaterial(self, val):
        return _PyAnyCAD.SceneNode_SetOverrideFaceMaterial(self, val)

    def GetOverrideEdgeMaterial(self):
        return _PyAnyCAD.SceneNode_GetOverrideEdgeMaterial(self)

    def SetOverrideEdgeMaterial(self, val):
        return _PyAnyCAD.SceneNode_SetOverrideEdgeMaterial(self, val)

    def GetCastShadow(self):
        r"""是否投射阴影"""
        return _PyAnyCAD.SceneNode_GetCastShadow(self)

    def SetCastShadow(self, bEnabled):
        r"""
        设置投射阴影
        :type bEnabled: boolean
        :param bEnabled: true
        """
        return _PyAnyCAD.SceneNode_SetCastShadow(self, bEnabled)

    def GetPickable(self):
        r"""
        是否可被选
        :rtype: boolean
        :return: true可以被选择
        """
        return _PyAnyCAD.SceneNode_GetPickable(self)

    def SetPickable(self, bEnabled):
        r"""
        设置是否可选
        :type bEnabled: boolean
        :param bEnabled: true可选
        """
        return _PyAnyCAD.SceneNode_SetPickable(self, bEnabled)

    def GetCulling(self):
        r"""
        是否参与场景剔除
        :rtype: boolean
        :return: true参与剔除
        """
        return _PyAnyCAD.SceneNode_GetCulling(self)

    def SetCulling(self, bEnabled):
        r"""
        设置是否可被剔除
        :type bEnabled: boolean
        :param bEnabled: true可以被剔除
        """
        return _PyAnyCAD.SceneNode_SetCulling(self, bEnabled)

    def GetVisible(self):
        r"""
        是否可见
        :rtype: boolean
        :return: true可见
        """
        return _PyAnyCAD.SceneNode_GetVisible(self)

    def SetVisible(self, bEnabled):
        r"""
        设置可见性
        :type bEnabled: boolean
        :param bEnabled: true可见
        """
        return _PyAnyCAD.SceneNode_SetVisible(self, bEnabled)

    def GetChildrenPickable(self):
        r"""
        子节点是否可选
        :rtype: boolean
        :return: true可选
        """
        return _PyAnyCAD.SceneNode_GetChildrenPickable(self)

    def SetChildrenPickable(self, bEnabled):
        r"""
        设置子节点是否可选
        :type bEnabled: boolean
        :param bEnabled: true可选
        """
        return _PyAnyCAD.SceneNode_SetChildrenPickable(self, bEnabled)

    def GetContainer(self):
        r"""
        是否为根节点容器
        :rtype: boolean
        :return: true是
        """
        return _PyAnyCAD.SceneNode_GetContainer(self)

    def SetContainer(self, bEnabled):
        r"""
        设置是否为根节点容器
        :type bEnabled: boolean
        :param bEnabled:  true是
        """
        return _PyAnyCAD.SceneNode_SetContainer(self, bEnabled)

    def GetFixedSize(self):
        r"""
        是否屏幕固定大小，不随相机缩放而缩放
        :rtype: boolean
        :return: true固定大小
        """
        return _PyAnyCAD.SceneNode_GetFixedSize(self)

    def SetFixedSize(self, bEnabled):
        r"""
        设置相对屏幕显示固定大小
        :type bEnabled: boolean
        :param bEnabled: true固定大小
        """
        return _PyAnyCAD.SceneNode_SetFixedSize(self, bEnabled)

    def GetInfiniteSize(self):
        r"""
        设置是否为无限大，无限大则不影响场景包围盒大小。
        :rtype: boolean
        :return: true无限大。
        """
        return _PyAnyCAD.SceneNode_GetInfiniteSize(self)

    def SetInfiniteSize(self, bEnabled):
        r"""
        设置是否为无限大
        :type bEnabled: boolean
        :param bEnabled: true无限大。
        """
        return _PyAnyCAD.SceneNode_SetInfiniteSize(self, bEnabled)

    def GetPhysics(self):
        r"""
        是否参与物理引擎计算。默认为否
        :rtype: boolean
        :return: true 是
        """
        return _PyAnyCAD.SceneNode_GetPhysics(self)

    def SetPhysics(self, bEnabled):
        r"""
        设置是否参与物理计算。
        :type bEnabled: boolean
        :param bEnabled: true则参与
        """
        return _PyAnyCAD.SceneNode_SetPhysics(self, bEnabled)

    def SetTransform(self, *args):
        return _PyAnyCAD.SceneNode_SetTransform(self, *args)

    def GetRootNode(self):
        return _PyAnyCAD.SceneNode_GetRootNode(self)

    def Clone(self):
        return _PyAnyCAD.SceneNode_Clone(self)

    def RequestUpdate(self):
        r"""请求更新"""
        return _PyAnyCAD.SceneNode_RequestUpdate(self)

    def AddTransform(self, trf):
        r"""
        multiply the transform to the existing one
        :type trf: :py:class:`mat4`
        :param trf: the transform to multiply.
        """
        return _PyAnyCAD.SceneNode_AddTransform(self, trf)

    def SetWorldTransform(self, world):
        return _PyAnyCAD.SceneNode_SetWorldTransform(self, world)

    def UpdateTransform(self, parent):
        r"""
        Update the local transform.
        :type parent: :py:class:`mat4`
        :param parent: the parent node transform.
        """
        return _PyAnyCAD.SceneNode_UpdateTransform(self, parent)

    def ComputeBoundingBox(self, parent):
        return _PyAnyCAD.SceneNode_ComputeBoundingBox(self, parent)

    def IsVisiblePath(self):
        return _PyAnyCAD.SceneNode_IsVisiblePath(self)

# Register SceneNode in _PyAnyCAD:
_PyAnyCAD.SceneNode_swigregister(SceneNode)
class SceneNodeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.SceneNodeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.SceneNodeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.SceneNodeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.SceneNodeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.SceneNodeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.SceneNodeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.SceneNodeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.SceneNodeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.SceneNodeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.SceneNodeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.SceneNodeList_empty(self)

    def size(self):
        return _PyAnyCAD.SceneNodeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.SceneNodeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.SceneNodeList_begin(self)

    def end(self):
        return _PyAnyCAD.SceneNodeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.SceneNodeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.SceneNodeList_rend(self)

    def clear(self):
        return _PyAnyCAD.SceneNodeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.SceneNodeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.SceneNodeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.SceneNodeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.SceneNodeList_swiginit(self, _PyAnyCAD.new_SceneNodeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.SceneNodeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.SceneNodeList_front(self)

    def back(self):
        return _PyAnyCAD.SceneNodeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.SceneNodeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.SceneNodeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.SceneNodeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.SceneNodeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.SceneNodeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_SceneNodeList

# Register SceneNodeList in _PyAnyCAD:
_PyAnyCAD.SceneNodeList_swigregister(SceneNodeList)
class PickedId(object):
    r"""
    Author: DataManage
    PickedId
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickedId_swiginit(self, _PyAnyCAD.new_PickedId(*args))

    def GetId(self):
        return _PyAnyCAD.PickedId_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.PickedId_SetId(self, val)

    def GetTag(self):
        return _PyAnyCAD.PickedId_GetTag(self)

    def SetTag(self, val):
        return _PyAnyCAD.PickedId_SetTag(self, val)

    def GetRootId(self):
        return _PyAnyCAD.PickedId_GetRootId(self)

    def SetRootId(self, val):
        return _PyAnyCAD.PickedId_SetRootId(self, val)

    def GetSubDoc(self):
        return _PyAnyCAD.PickedId_GetSubDoc(self)

    def SetSubDoc(self, val):
        return _PyAnyCAD.PickedId_SetSubDoc(self, val)

    def IsNull(self):
        return _PyAnyCAD.PickedId_IsNull(self)

    def IsEqual(self, other):
        return _PyAnyCAD.PickedId_IsEqual(self, other)
    __swig_destroy__ = _PyAnyCAD.delete_PickedId

# Register PickedId in _PyAnyCAD:
_PyAnyCAD.PickedId_swigregister(PickedId)
class PickedIdList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.PickedIdList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.PickedIdList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.PickedIdList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.PickedIdList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.PickedIdList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.PickedIdList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.PickedIdList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.PickedIdList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.PickedIdList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.PickedIdList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.PickedIdList_pop(self)

    def append(self, x):
        return _PyAnyCAD.PickedIdList_append(self, x)

    def empty(self):
        return _PyAnyCAD.PickedIdList_empty(self)

    def size(self):
        return _PyAnyCAD.PickedIdList_size(self)

    def swap(self, v):
        return _PyAnyCAD.PickedIdList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.PickedIdList_begin(self)

    def end(self):
        return _PyAnyCAD.PickedIdList_end(self)

    def rbegin(self):
        return _PyAnyCAD.PickedIdList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.PickedIdList_rend(self)

    def clear(self):
        return _PyAnyCAD.PickedIdList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.PickedIdList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.PickedIdList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.PickedIdList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.PickedIdList_swiginit(self, _PyAnyCAD.new_PickedIdList(*args))

    def push_back(self, x):
        return _PyAnyCAD.PickedIdList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.PickedIdList_front(self)

    def back(self):
        return _PyAnyCAD.PickedIdList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.PickedIdList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.PickedIdList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.PickedIdList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.PickedIdList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.PickedIdList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_PickedIdList

# Register PickedIdList in _PyAnyCAD:
_PyAnyCAD.PickedIdList_swigregister(PickedIdList)
class PickedItem(object):
    r"""
    Author: Rendering
    Picked item
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickedItem_swiginit(self, _PyAnyCAD.new_PickedItem(*args))

    def GetPoint(self):
        return _PyAnyCAD.PickedItem_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.PickedItem_SetPoint(self, val)

    def GetNode(self):
        return _PyAnyCAD.PickedItem_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.PickedItem_SetNode(self, val)

    def GetId(self):
        return _PyAnyCAD.PickedItem_GetId(self)

    def SetId(self, *args):
        return _PyAnyCAD.PickedItem_SetId(self, *args)

    def IsNull(self):
        return _PyAnyCAD.PickedItem_IsNull(self)

    def SetNull(self):
        return _PyAnyCAD.PickedItem_SetNull(self)

    def GetNodeId(self):
        r"""
        The id of the node.
        :rtype: int
        :return: the id
        """
        return _PyAnyCAD.PickedItem_GetNodeId(self)

    def GetRootNode(self):
        r"""
        The root node of the current node.
        :rtype: :py:class:`SceneNode`
        :return: the SceneNode
        """
        return _PyAnyCAD.PickedItem_GetRootNode(self)

    def GetUserId(self):
        r"""
        Get the user id in Node.
        :rtype: int
        :return: the user id.
        """
        return _PyAnyCAD.PickedItem_GetUserId(self)

    def GetPosition(self):
        return _PyAnyCAD.PickedItem_GetPosition(self)

    def IsEqual(self, other):
        return _PyAnyCAD.PickedItem_IsEqual(self, other)

    def GetShapeType(self):
        r"""
        Get the shape type.
        :rtype: int
        :return: EnumShapeFilter
        """
        return _PyAnyCAD.PickedItem_GetShapeType(self)

    def SetShapeType(self, filter):
        return _PyAnyCAD.PickedItem_SetShapeType(self, filter)

    def GetShapeIndex(self):
        r"""
        Get the sub renderable shape index.
        :rtype: int
        :return: the index
        """
        return _PyAnyCAD.PickedItem_GetShapeIndex(self)

    def GetTopoShapeId(self):
        r"""
        Get the sub index of in the TopoShape
        :rtype: int
        :return: the index.
        """
        return _PyAnyCAD.PickedItem_GetTopoShapeId(self)

    def GetPrimitiveIndex(self):
        r"""
        Get the primitive index in the sub renderable shape.
        :rtype: int
        :return: the index.
        """
        return _PyAnyCAD.PickedItem_GetPrimitiveIndex(self)

    def ResetByFilter(self, filter):
        return _PyAnyCAD.PickedItem_ResetByFilter(self, filter)
    __swig_destroy__ = _PyAnyCAD.delete_PickedItem

# Register PickedItem in _PyAnyCAD:
_PyAnyCAD.PickedItem_swigregister(PickedItem)
class PickedItemIterator(object):
    r"""
    Author: Rendering

    The iterator to get picked item in selection.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PickedItemIterator

    def Next(self):
        return _PyAnyCAD.PickedItemIterator_Next(self)

    def More(self):
        return _PyAnyCAD.PickedItemIterator_More(self)

    def Current(self):
        return _PyAnyCAD.PickedItemIterator_Current(self)

# Register PickedItemIterator in _PyAnyCAD:
_PyAnyCAD.PickedItemIterator_swigregister(PickedItemIterator)
class PickedResult(object):
    r"""
    Author: Rendering
    Picked result.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickedResult_swiginit(self, _PyAnyCAD.new_PickedResult(*args))

    def GetByApp(self):
        return _PyAnyCAD.PickedResult_GetByApp(self)

    def SetByApp(self, val):
        return _PyAnyCAD.PickedResult_SetByApp(self, val)

    def GetItem(self):
        return _PyAnyCAD.PickedResult_GetItem(self)

    def SetItem(self, val):
        return _PyAnyCAD.PickedResult_SetItem(self, val)

    def GetCount(self):
        return _PyAnyCAD.PickedResult_GetCount(self)

    def SetCount(self, val):
        return _PyAnyCAD.PickedResult_SetCount(self, val)

    def GetMulitPick(self):
        return _PyAnyCAD.PickedResult_GetMulitPick(self)

    def GetSelectionManager(self):
        return _PyAnyCAD.PickedResult_GetSelectionManager(self)

    def GetX(self):
        return _PyAnyCAD.PickedResult_GetX(self)

    def GetY(self):
        return _PyAnyCAD.PickedResult_GetY(self)

    def IsEmpty(self):
        return _PyAnyCAD.PickedResult_IsEmpty(self)

    def CreateIterator(self):
        return _PyAnyCAD.PickedResult_CreateIterator(self)
    __swig_destroy__ = _PyAnyCAD.delete_PickedResult

# Register PickedResult in _PyAnyCAD:
_PyAnyCAD.PickedResult_swigregister(PickedResult)
class SceneNodeIterator(object):
    r"""
    Author: Rendering

    The iterator to get SceneNodes in Group or Scene.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_SceneNodeIterator

    def Next(self):
        return _PyAnyCAD.SceneNodeIterator_Next(self)

    def More(self):
        return _PyAnyCAD.SceneNodeIterator_More(self)

    def Current(self):
        return _PyAnyCAD.SceneNodeIterator_Current(self)

# Register SceneNodeIterator in _PyAnyCAD:
_PyAnyCAD.SceneNodeIterator_swigregister(SceneNodeIterator)
class Scene(GfxObject):
    r"""
    Author: Rendering

    The container to manage the SceneNode.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Scene_Cast(obj)

    def __init__(self):
        _PyAnyCAD.Scene_swiginit(self, _PyAnyCAD.new_Scene())
    __swig_destroy__ = _PyAnyCAD.delete_Scene

    def GetWorldBBox(self):
        return _PyAnyCAD.Scene_GetWorldBBox(self)

    def GetWorldTransform(self):
        return _PyAnyCAD.Scene_GetWorldTransform(self)

    def SetWorldTransform(self, val):
        return _PyAnyCAD.Scene_SetWorldTransform(self, val)

    def GetPickable(self):
        return _PyAnyCAD.Scene_GetPickable(self)

    def SetPickable(self, val):
        return _PyAnyCAD.Scene_SetPickable(self, val)

    def GetUserId(self):
        return _PyAnyCAD.Scene_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.Scene_SetUserId(self, val)

    def CreateIterator(self):
        r"""
        Create iterator to get all the scene node.
        :rtype: :py:class:`SceneNodeIterator`
        :return: the SceneNodeIterator
        """
        return _PyAnyCAD.Scene_CreateIterator(self)

    def AddNode(self, node):
        r"""
        Add new scene node to show.
        :type node: :py:class:`SceneNode`
        :param node: the node.
        :rtype: int
        :return: return the uuid of the node.
        """
        return _PyAnyCAD.Scene_AddNode(self, node)

    def RemoveNode(self, *args):
        return _PyAnyCAD.Scene_RemoveNode(self, *args)

    def FindNode(self, nodeId):
        r"""
        Find the node by Uuid of the node.
        :type nodeId: int
        :param nodeId: the Uuid
        :rtype: :py:class:`SceneNode`
        :return: the node.
        """
        return _PyAnyCAD.Scene_FindNode(self, nodeId)

    def FindNodeByUserId(self, userId):
        r"""
        Find the node by UserId of the node.
        :type userId: int
        :param userId: the userId
        :rtype: :py:class:`SceneNode`
        :return: the node.
        """
        return _PyAnyCAD.Scene_FindNodeByUserId(self, userId)

    def Clear(self):
        r"""Clear all the nodes."""
        return _PyAnyCAD.Scene_Clear(self)

    def UpdateWorld(self, viewScale):
        r"""Update the world transfom and bounding box of the scene nodes."""
        return _PyAnyCAD.Scene_UpdateWorld(self, viewScale)

# Register Scene in _PyAnyCAD:
_PyAnyCAD.Scene_swigregister(Scene)
class GroupSceneNode(SceneNode):
    r"""
    Author: Rendering

    The group of many SceneNodes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GroupSceneNode_Cast(obj)

    def __init__(self):
        _PyAnyCAD.GroupSceneNode_swiginit(self, _PyAnyCAD.new_GroupSceneNode())
    __swig_destroy__ = _PyAnyCAD.delete_GroupSceneNode

    def CreateIterator(self):
        return _PyAnyCAD.GroupSceneNode_CreateIterator(self)

    def AddNode(self, node):
        return _PyAnyCAD.GroupSceneNode_AddNode(self, node)

    def RemoveNode(self, nodeId):
        return _PyAnyCAD.GroupSceneNode_RemoveNode(self, nodeId)

    def FindNode(self, nodeId):
        return _PyAnyCAD.GroupSceneNode_FindNode(self, nodeId)

    def Clear(self):
        return _PyAnyCAD.GroupSceneNode_Clear(self)

    def FindNodeByUserId(self, userId):
        return _PyAnyCAD.GroupSceneNode_FindNodeByUserId(self, userId)

    def GetCount(self):
        return _PyAnyCAD.GroupSceneNode_GetCount(self)

    def UpdateTransform(self, parent):
        return _PyAnyCAD.GroupSceneNode_UpdateTransform(self, parent)

    def Clone(self):
        return _PyAnyCAD.GroupSceneNode_Clone(self)

# Register GroupSceneNode in _PyAnyCAD:
_PyAnyCAD.GroupSceneNode_swigregister(GroupSceneNode)
class PrimitiveSceneNode(SceneNode):
    r"""
    Author: Rendering

    The SceneNode to contain basic shapes: pints, lines and triangles.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PrimitiveSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.PrimitiveSceneNode_swiginit(self, _PyAnyCAD.new_PrimitiveSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PrimitiveSceneNode

    def GetPrimitive(self):
        return _PyAnyCAD.PrimitiveSceneNode_GetPrimitive(self)

    @staticmethod
    def Create(shape, material):
        return _PyAnyCAD.PrimitiveSceneNode_Create(shape, material)

    def GetMaterial(self):
        return _PyAnyCAD.PrimitiveSceneNode_GetMaterial(self)

    def SetMaterial(self, material):
        return _PyAnyCAD.PrimitiveSceneNode_SetMaterial(self, material)

    def SetPrimitive(self, shape):
        return _PyAnyCAD.PrimitiveSceneNode_SetPrimitive(self, shape)

    def SetGeometry(self, geometry):
        return _PyAnyCAD.PrimitiveSceneNode_SetGeometry(self, geometry)

    def Clone(self):
        return _PyAnyCAD.PrimitiveSceneNode_Clone(self)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.PrimitiveSceneNode_UpdateBoundingBox(self)

# Register PrimitiveSceneNode in _PyAnyCAD:
_PyAnyCAD.PrimitiveSceneNode_swigregister(PrimitiveSceneNode)
class TextSceneNode(PrimitiveSceneNode):
    r"""
    Author: Rendering

    The SceneNode to manage Text.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.TextSceneNode_swiginit(self, _PyAnyCAD.new_TextSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TextSceneNode

    def GetFontHeight(self):
        return _PyAnyCAD.TextSceneNode_GetFontHeight(self)

    def GetScale(self):
        return _PyAnyCAD.TextSceneNode_GetScale(self)

    def SetText(self, text):
        return _PyAnyCAD.TextSceneNode_SetText(self, text)

    def SetPosition(self, position):
        return _PyAnyCAD.TextSceneNode_SetPosition(self, position)

    def CloneTextSceneNode(self):
        return _PyAnyCAD.TextSceneNode_CloneTextSceneNode(self)

    def Clone(self):
        return _PyAnyCAD.TextSceneNode_Clone(self)

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        创建朝向固定不变的文字
        :type text: anycore::StringW
        :param text: 文字
        :type color: :py:class:`vec3`
        :param color: 颜色
        :type fontHeight: float
        :param fontHeight: 高度
        :type autoScale: boolean
        :param autoScale: 根据高度自动设置缩放矩阵
        :rtype: :py:class:`TextSceneNode`
        :return: 显示对象


        |

        *Overload 2:*

        创建贴图文字
        :type text: anycore::StringW
        :param text: 文本
        :type color: :py:class:`vec3`
        :param color: 颜色
        :type fontHeight: float
        :param fontHeight: 高度
        :type background: :py:class:`vec3`
        :param background: 背景色。若小于0，则透明
        :type alwaysFacingFront: boolean
        :param alwaysFacingFront: 是否永远朝向屏幕
        :rtype: :py:class:`TextSceneNode`
        :return: 
        """
        return _PyAnyCAD.TextSceneNode_Create(*args)

# Register TextSceneNode in _PyAnyCAD:
_PyAnyCAD.TextSceneNode_swigregister(TextSceneNode)
class ShapeSceneNode(SceneNode):
    r"""
    Author: Rendering

    管理多个PrimtiveShape对象的SceneNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShapeSceneNode_Cast(obj)

    def __init__(self, shape):
        r"""
        构造函数
        :type shape: :py:class:`CompoundShape`
        :param shape: CompoundShape对象
        """
        _PyAnyCAD.ShapeSceneNode_swiginit(self, _PyAnyCAD.new_ShapeSceneNode(shape))
    __swig_destroy__ = _PyAnyCAD.delete_ShapeSceneNode

    def GetShape(self):
        return _PyAnyCAD.ShapeSceneNode_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.ShapeSceneNode_SetShape(self, val)

    def GetPrimitives(self):
        r"""
        获取PrimitiveShape列表
        :rtype: :py:class:`PrimitiveShapeList`
        :return: PrimitiveShape的列表
        """
        return _PyAnyCAD.ShapeSceneNode_GetPrimitives(self)

    def GetPrimitive(self, idx):
        r"""
        获取第idx个基本对象
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`PrimitiveShape`
        :return: PrimitiveShape对象
        """
        return _PyAnyCAD.ShapeSceneNode_GetPrimitive(self, idx)

    def GetPrimitiveCount(self):
        r"""
        获取PrimitiveShape的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.ShapeSceneNode_GetPrimitiveCount(self)

    def SetMaterial(self, pMaterial):
        r"""
        设置为相同的材质
        :type pMaterial: :py:class:`MaterialInstance`
        :param pMaterial: 材质
        """
        return _PyAnyCAD.ShapeSceneNode_SetMaterial(self, pMaterial)

# Register ShapeSceneNode in _PyAnyCAD:
_PyAnyCAD.ShapeSceneNode_swigregister(ShapeSceneNode)
class GeneralSceneNode(SceneNode):
    r"""
    Author: Rendering

    The general SceneNode.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GeneralSceneNode_Cast(obj)

    def __init__(self):
        _PyAnyCAD.GeneralSceneNode_swiginit(self, _PyAnyCAD.new_GeneralSceneNode())
    __swig_destroy__ = _PyAnyCAD.delete_GeneralSceneNode

    def IsDocumentNode(self):
        return _PyAnyCAD.GeneralSceneNode_IsDocumentNode(self)

# Register GeneralSceneNode in _PyAnyCAD:
_PyAnyCAD.GeneralSceneNode_swigregister(GeneralSceneNode)
class ParticleSceneNode(PrimitiveSceneNode):
    r"""
    Author: Simulate

    The particle SceneNode to manage many point sprites.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParticleSceneNode_Cast(obj)

    def __init__(self, seedCount, color, pointSize):
        _PyAnyCAD.ParticleSceneNode_swiginit(self, _PyAnyCAD.new_ParticleSceneNode(seedCount, color, pointSize))
    __swig_destroy__ = _PyAnyCAD.delete_ParticleSceneNode

    def GetSeedCount(self):
        return _PyAnyCAD.ParticleSceneNode_GetSeedCount(self)

    @staticmethod
    def Create(seedCount, color, pointSize):
        return _PyAnyCAD.ParticleSceneNode_Create(seedCount, color, pointSize)

    def SetPosition(self, seedId, position):
        return _PyAnyCAD.ParticleSceneNode_SetPosition(self, seedId, position)

    def GetPosition(self, seedId):
        return _PyAnyCAD.ParticleSceneNode_GetPosition(self, seedId)

    def ResetPositions(self, pt):
        return _PyAnyCAD.ParticleSceneNode_ResetPositions(self, pt)

    def ResetColors(self, color):
        return _PyAnyCAD.ParticleSceneNode_ResetColors(self, color)

    def SetColor(self, seedId, color):
        return _PyAnyCAD.ParticleSceneNode_SetColor(self, seedId, color)

    def GetColor(self, seedId):
        return _PyAnyCAD.ParticleSceneNode_GetColor(self, seedId)

    def SetPointStyle(self, style):
        return _PyAnyCAD.ParticleSceneNode_SetPointStyle(self, style)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.ParticleSceneNode_UpdateBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.ParticleSceneNode_Clone(self)

# Register ParticleSceneNode in _PyAnyCAD:
_PyAnyCAD.ParticleSceneNode_swigregister(ParticleSceneNode)
class SegmentsSceneNode(PrimitiveSceneNode):
    r"""
    Author: Rendering

    The SceneNode to manage many line segments.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SegmentsSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.SegmentsSceneNode_swiginit(self, _PyAnyCAD.new_SegmentsSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SegmentsSceneNode

    def GetSegmentCount(self):
        return _PyAnyCAD.SegmentsSceneNode_GetSegmentCount(self)

    def SetPositions(self, idx, start, end):
        return _PyAnyCAD.SegmentsSceneNode_SetPositions(self, idx, start, end)

    def SetColors(self, idx, color1, color2):
        return _PyAnyCAD.SegmentsSceneNode_SetColors(self, idx, color1, color2)

    def Update(self):
        return _PyAnyCAD.SegmentsSceneNode_Update(self)

    def UpdateBoundingBox(self):
        return _PyAnyCAD.SegmentsSceneNode_UpdateBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.SegmentsSceneNode_Clone(self)

# Register SegmentsSceneNode in _PyAnyCAD:
_PyAnyCAD.SegmentsSceneNode_swigregister(SegmentsSceneNode)
class ImageSceneNode(PrimitiveSceneNode):
    r"""
    Author: Rendering

    ImageSceneNode. 显示图片
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ImageSceneNode_Cast(obj)

    def __init__(self, shape):
        _PyAnyCAD.ImageSceneNode_swiginit(self, _PyAnyCAD.new_ImageSceneNode(shape))
    __swig_destroy__ = _PyAnyCAD.delete_ImageSceneNode

    @staticmethod
    def Create(fileName):
        r"""
        创建图像Image
        :type fileName: string
        :param fileName:
        :rtype: :py:class:`ImageSceneNode`
        :return: 
        """
        return _PyAnyCAD.ImageSceneNode_Create(fileName)

    def Clone(self):
        return _PyAnyCAD.ImageSceneNode_Clone(self)

# Register ImageSceneNode in _PyAnyCAD:
_PyAnyCAD.ImageSceneNode_swigregister(ImageSceneNode)
class ArrowWidget(ShapeSceneNode):
    r"""
    Author: Rendering

    The Arrow object.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ArrowWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_ArrowWidget

    def GetTargetId(self):
        return _PyAnyCAD.ArrowWidget_GetTargetId(self)

    def GetRadius(self):
        return _PyAnyCAD.ArrowWidget_GetRadius(self)

    def SetRadius(self, val):
        return _PyAnyCAD.ArrowWidget_SetRadius(self, val)

    def GetLength(self):
        return _PyAnyCAD.ArrowWidget_GetLength(self)

    def SetLength(self, val):
        return _PyAnyCAD.ArrowWidget_SetLength(self, val)

    def GetPosition(self):
        return _PyAnyCAD.ArrowWidget_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.ArrowWidget_SetPosition(self, val)

    def GetDirection(self):
        return _PyAnyCAD.ArrowWidget_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.ArrowWidget_SetDirection(self, val)

    def GetOrigin(self):
        return _PyAnyCAD.ArrowWidget_GetOrigin(self)

    def SetOrigin(self, val):
        return _PyAnyCAD.ArrowWidget_SetOrigin(self, val)

    @staticmethod
    def Create(radius, length, material):
        return _PyAnyCAD.ArrowWidget_Create(radius, length, material)

    def SetLocation(self, position, direction):
        return _PyAnyCAD.ArrowWidget_SetLocation(self, position, direction)

    def UpdateByOrigin(self):
        return _PyAnyCAD.ArrowWidget_UpdateByOrigin(self)

    def Update(self, scale=1.0):
        return _PyAnyCAD.ArrowWidget_Update(self, scale)

    def Clone(self):
        return _PyAnyCAD.ArrowWidget_Clone(self)

# Register ArrowWidget in _PyAnyCAD:
_PyAnyCAD.ArrowWidget_swigregister(ArrowWidget)
class AxisWidget(GeneralSceneNode):
    r"""
    Author: Rendering

    坐标轴对象。每个轴的ID使用字符：'x','y', 'z'表示。
    AxisWidget aw = ...;
    aw.ShowArrow('z', false); //隐藏z轴
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AxisWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_AxisWidget

    def GetTargetId(self):
        return _PyAnyCAD.AxisWidget_GetTargetId(self)

    def GetRadius(self):
        return _PyAnyCAD.AxisWidget_GetRadius(self)

    def GetLength(self):
        return _PyAnyCAD.AxisWidget_GetLength(self)

    def GetNodes(self):
        return _PyAnyCAD.AxisWidget_GetNodes(self)

    @staticmethod
    def Create(radius, length, rightHand=True):
        r"""创建坐标轴对象"""
        return _PyAnyCAD.AxisWidget_Create(radius, length, rightHand)

    def ShowText(self, *args):
        r"""
        *Overload 1:*

        设置是否显示文字
        :type bShow: boolean
        :param bShow:


        |

        *Overload 2:*

        指定某个轴的文字显示
        :type arrowId: char
        :param arrowId: 轴的ID： 'x', 'y', 'z'
        :type show: boolean
        :param show: 是否显示
        """
        return _PyAnyCAD.AxisWidget_ShowText(self, *args)

    def SetText(self, arrowId, text):
        r"""
        指定某个轴的文字
        :type arrowId: char
        :param arrowId: 轴的ID： 'x', 'y', 'z'
        :type text: anycore::StringW
        :param text: 文本
        """
        return _PyAnyCAD.AxisWidget_SetText(self, arrowId, text)

    def SetTextForAxisX(self, text):
        r"""
        设置X轴的文字
        :type text: anycore::StringW
        :param text: 文本
        """
        return _PyAnyCAD.AxisWidget_SetTextForAxisX(self, text)

    def SetTextForAxisY(self, text):
        r"""
        设置Y轴的文字
        :type text: anycore::StringW
        :param text: 文本
        """
        return _PyAnyCAD.AxisWidget_SetTextForAxisY(self, text)

    def SetTextForAxisZ(self, text):
        r"""
        设置Z轴的文字
        :type text: anycore::StringW
        :param text: 文本
        """
        return _PyAnyCAD.AxisWidget_SetTextForAxisZ(self, text)

    def ShowArrow(self, *args):
        r"""
        *Overload 1:*

        仅显示某个轴，其他的都隐藏
        :type arrow: char
        :param arrow: 轴的ID：'x', 'y', 'z'


        |

        *Overload 2:*

        设置指定轴的可见性
        :type arrow: char
        :param arrow: 轴的ID：'x', 'y', 'z'
        :type show: boolean
        :param show: 是否可见
        """
        return _PyAnyCAD.AxisWidget_ShowArrow(self, *args)

    def CloneAxisWidget(self):
        return _PyAnyCAD.AxisWidget_CloneAxisWidget(self)

    def Clone(self):
        return _PyAnyCAD.AxisWidget_Clone(self)

# Register AxisWidget in _PyAnyCAD:
_PyAnyCAD.AxisWidget_swigregister(AxisWidget)
class AxWidget(GeneralSceneNode):
    r"""
    Author: Rendering

    The simple Axis object.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AxWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_AxWidget

    def GetTargetId(self):
        return _PyAnyCAD.AxWidget_GetTargetId(self)

    def SetTargetId(self, val):
        return _PyAnyCAD.AxWidget_SetTargetId(self, val)

    def GetLength(self):
        return _PyAnyCAD.AxWidget_GetLength(self)

    def GetNodes(self):
        return _PyAnyCAD.AxWidget_GetNodes(self)

    @staticmethod
    def Create(length, lineWidth, depthTest=True):
        return _PyAnyCAD.AxWidget_Create(length, lineWidth, depthTest)

    def ShowArrow(self, userId):
        r"""
        只显示指定的轴, 0则显示所有的轴
        :type userId: int
        :param userId: 'x', 'y', 'z'
        """
        return _PyAnyCAD.AxWidget_ShowArrow(self, userId)

    def CloneAxWidget(self):
        return _PyAnyCAD.AxWidget_CloneAxWidget(self)

    def Clone(self):
        return _PyAnyCAD.AxWidget_Clone(self)

# Register AxWidget in _PyAnyCAD:
_PyAnyCAD.AxWidget_swigregister(AxWidget)
class SceneNode2D(SceneNode):
    r"""
    Author: Rendering

    二维显示对象容器.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SceneNode2D_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.SceneNode2D_swiginit(self, _PyAnyCAD.new_SceneNode2D(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SceneNode2D

    def GetNode(self):
        return _PyAnyCAD.SceneNode2D_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.SceneNode2D_SetNode(self, val)

# Register SceneNode2D in _PyAnyCAD:
_PyAnyCAD.SceneNode2D_swigregister(SceneNode2D)
class WindowNode2D(SceneNode2D):
    r"""
    Author: Rendering

    相对Window坐标二维显示对象容器.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.WindowNode2D_Cast(obj)

    def __init__(self, node, cx, cy):
        r"""
        构造
        :type node: :py:class:`SceneNode`
        :param node: 节点
        :type cx: float
        :param cx: 相对屏幕x的坐标
        :type cy: float
        :param cy: 相对屏幕y的坐标
        """
        _PyAnyCAD.WindowNode2D_swiginit(self, _PyAnyCAD.new_WindowNode2D(node, cx, cy))
    __swig_destroy__ = _PyAnyCAD.delete_WindowNode2D

    def GetPosition(self):
        return _PyAnyCAD.WindowNode2D_GetPosition(self)

    def SetPosition(self, *args):
        r"""
        设置位置
        :type cx: float
        :param cx: x坐标
        :type cy: float
        :param cy: y坐标
        """
        return _PyAnyCAD.WindowNode2D_SetPosition(self, *args)

# Register WindowNode2D in _PyAnyCAD:
_PyAnyCAD.WindowNode2D_swigregister(WindowNode2D)
class TagNode2D(SceneNode2D):
    r"""
    Author: Rendering

    2D引线标签：显示文字和引线.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, text, handle):
        _PyAnyCAD.TagNode2D_swiginit(self, _PyAnyCAD.new_TagNode2D(text, handle))
    __swig_destroy__ = _PyAnyCAD.delete_TagNode2D

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        创建带引线的Tag
        :type text: :py:class:`TextSceneNode`
        :param text: 文本
        :type position: :py:class:`vec3`
        :param position: 文本在三维空间的位置
        :type target: :py:class:`vec3`
        :param target: 指向的位置
        :rtype: :py:class:`TagNode2D`
        :return: 显示对象


        |

        *Overload 2:*

        创建不带引线的Tag
        :type text: :py:class:`TextSceneNode`
        :param text: 文本
        :type position: :py:class:`vec3`
        :param position: 文本在三维空间的位置
        :rtype: :py:class:`TagNode2D`
        :return: 显示对象
        """
        return _PyAnyCAD.TagNode2D_Create(*args)

    def GetPosition(self):
        return _PyAnyCAD.TagNode2D_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.TagNode2D_SetPosition(self, val)

    def GetFixedOnScreen(self):
        return _PyAnyCAD.TagNode2D_GetFixedOnScreen(self)

    def SetFixedOnScreen(self, val):
        return _PyAnyCAD.TagNode2D_SetFixedOnScreen(self, val)

    def GetTarget(self):
        return _PyAnyCAD.TagNode2D_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.TagNode2D_SetTarget(self, val)

    def GetTextNode(self):
        return _PyAnyCAD.TagNode2D_GetTextNode(self)

    def GetHandleNode(self):
        return _PyAnyCAD.TagNode2D_GetHandleNode(self)

    def SetLineWidth(self, width):
        return _PyAnyCAD.TagNode2D_SetLineWidth(self, width)

    def SetLineColor(self, color):
        return _PyAnyCAD.TagNode2D_SetLineColor(self, color)

    @staticmethod
    def Cast(*args):
        return _PyAnyCAD.TagNode2D_Cast(*args)

# Register TagNode2D in _PyAnyCAD:
_PyAnyCAD.TagNode2D_swigregister(TagNode2D)
class CoordinateGridWidget(ShapeSceneNode):
    r"""
    Author: Rendering
    CoordinateGridWidget.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CoordinateGridWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_CoordinateGridWidget

    def GetSnapGrid(self):
        return _PyAnyCAD.CoordinateGridWidget_GetSnapGrid(self)

    def SetSnapGrid(self, val):
        return _PyAnyCAD.CoordinateGridWidget_SetSnapGrid(self, val)

    def GetScaleFactor(self):
        return _PyAnyCAD.CoordinateGridWidget_GetScaleFactor(self)

    def SetScaleFactor(self, val):
        return _PyAnyCAD.CoordinateGridWidget_SetScaleFactor(self, val)

    def GetAutoAdaptive(self):
        return _PyAnyCAD.CoordinateGridWidget_GetAutoAdaptive(self)

    def SetAutoAdaptive(self, val):
        return _PyAnyCAD.CoordinateGridWidget_SetAutoAdaptive(self, val)

    def GetCoordinate(self):
        return _PyAnyCAD.CoordinateGridWidget_GetCoordinate(self)

    def FitToBoundingBox(self, bbox):
        return _PyAnyCAD.CoordinateGridWidget_FitToBoundingBox(self, bbox)

    def SetCoordinate(self, ax):
        return _PyAnyCAD.CoordinateGridWidget_SetCoordinate(self, ax)

    def Clone(self):
        return _PyAnyCAD.CoordinateGridWidget_Clone(self)

# Register CoordinateGridWidget in _PyAnyCAD:
_PyAnyCAD.CoordinateGridWidget_swigregister(CoordinateGridWidget)
class PlanarGridWidget(CoordinateGridWidget):
    r"""
    Author: Rendering
    PlanarGridWidget. 平面网格控件
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PlanarGridWidget_Cast(obj)

    def __init__(self, cellSize, cellCountX, cellCountY, innerCellCount=5):
        r"""
        构造函数
        :type cellSize: float
        :param cellSize: 大格的大小
        :type cellCountX: int
        :param cellCountX: X方向格子的数量
        :type cellCountY: int
        :param cellCountY: Y方向格子的数量
        :type innerCellCount: int, optional
        :param innerCellCount: 小格子的数量，默认5个
        """
        _PyAnyCAD.PlanarGridWidget_swiginit(self, _PyAnyCAD.new_PlanarGridWidget(cellSize, cellCountX, cellCountY, innerCellCount))
    __swig_destroy__ = _PyAnyCAD.delete_PlanarGridWidget

    def GetCellSize(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellSize(self)

    def SetCellSize(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellSize(self, val)

    def GetCellCountX(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellCountX(self)

    def SetCellCountX(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellCountX(self, val)

    def GetCellCountY(self):
        return _PyAnyCAD.PlanarGridWidget_GetCellCountY(self)

    def SetCellCountY(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetCellCountY(self, val)

    def GetInnerCellCount(self):
        return _PyAnyCAD.PlanarGridWidget_GetInnerCellCount(self)

    def SetInnerCellCount(self, val):
        return _PyAnyCAD.PlanarGridWidget_SetInnerCellCount(self, val)

    def Clone(self):
        return _PyAnyCAD.PlanarGridWidget_Clone(self)

    def Update(self):
        r"""更改参数后，更新重新生成。"""
        return _PyAnyCAD.PlanarGridWidget_Update(self)

    def SetPrimaryColor(self, color):
        r"""
        修改大格的颜色
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.PlanarGridWidget_SetPrimaryColor(self, color)

    def SetSecondaryColor(self, color):
        r"""
        修改小格的颜色
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.PlanarGridWidget_SetSecondaryColor(self, color)

    def FitToBoundingBox(self, bbox):
        r"""
        根据包围盒来计算格子的个数
        :type bbox: :py:class:`AABox`
        :param bbox: 包围盒
        """
        return _PyAnyCAD.PlanarGridWidget_FitToBoundingBox(self, bbox)

    @staticmethod
    def PrimaryColor():
        return _PyAnyCAD.PlanarGridWidget_PrimaryColor()

    @staticmethod
    def SecondaryColor():
        return _PyAnyCAD.PlanarGridWidget_SecondaryColor()

# Register PlanarGridWidget in _PyAnyCAD:
_PyAnyCAD.PlanarGridWidget_swigregister(PlanarGridWidget)
class LineCoordinateWidget(CoordinateGridWidget):
    r"""
    Author: Rendering
    LineCoordinateWidget. 简单的坐标轴控件
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LineCoordinateWidget_Cast(obj)

    def __init__(self, axisSize):
        _PyAnyCAD.LineCoordinateWidget_swiginit(self, _PyAnyCAD.new_LineCoordinateWidget(axisSize))
    __swig_destroy__ = _PyAnyCAD.delete_LineCoordinateWidget

    def GetAxisSize(self):
        return _PyAnyCAD.LineCoordinateWidget_GetAxisSize(self)

    def SetAxisSize(self, val):
        return _PyAnyCAD.LineCoordinateWidget_SetAxisSize(self, val)

    def GetAxisRadius(self):
        return _PyAnyCAD.LineCoordinateWidget_GetAxisRadius(self)

    def SetAxisRadius(self, val):
        return _PyAnyCAD.LineCoordinateWidget_SetAxisRadius(self, val)

    def Update(self):
        return _PyAnyCAD.LineCoordinateWidget_Update(self)

    def Clone(self):
        return _PyAnyCAD.LineCoordinateWidget_Clone(self)

# Register LineCoordinateWidget in _PyAnyCAD:
_PyAnyCAD.LineCoordinateWidget_swigregister(LineCoordinateWidget)
class CursorWidget(object):
    r"""
    Author: Rendering
    CursorWidget. 鼠标光标控件
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.CursorWidget_swiginit(self, _PyAnyCAD.new_CursorWidget())
    __swig_destroy__ = _PyAnyCAD.delete_CursorWidget

    def GetEnabled(self):
        return _PyAnyCAD.CursorWidget_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.CursorWidget_SetEnabled(self, val)

    def GetPosition(self):
        return _PyAnyCAD.CursorWidget_GetPosition(self)

    def SetPosition(self, val):
        return _PyAnyCAD.CursorWidget_SetPosition(self, val)

    def GetShapeStyle(self):
        return _PyAnyCAD.CursorWidget_GetShapeStyle(self)

    def SetShapeStyle(self, val):
        return _PyAnyCAD.CursorWidget_SetShapeStyle(self, val)

    def SetSize(self, radius):
        return _PyAnyCAD.CursorWidget_SetSize(self, radius)

# Register CursorWidget in _PyAnyCAD:
_PyAnyCAD.CursorWidget_swigregister(CursorWidget)
class PickedItemSet(object):
    r"""
    Author: Rendering
    Picked item set
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.PickedItemSet_swiginit(self, _PyAnyCAD.new_PickedItemSet())
    __swig_destroy__ = _PyAnyCAD.delete_PickedItemSet

    def CreateIterator(self):
        return _PyAnyCAD.PickedItemSet_CreateIterator(self)

    def Set(self, item):
        return _PyAnyCAD.PickedItemSet_Set(self, item)

    def Add(self, item, removeExisting):
        return _PyAnyCAD.PickedItemSet_Add(self, item, removeExisting)

    def IsEmpty(self):
        return _PyAnyCAD.PickedItemSet_IsEmpty(self)

    def GetCount(self):
        return _PyAnyCAD.PickedItemSet_GetCount(self)

    def GetItem(self, idx):
        return _PyAnyCAD.PickedItemSet_GetItem(self, idx)

    def GetObjectIdList(self):
        return _PyAnyCAD.PickedItemSet_GetObjectIdList(self)

    def Clear(self):
        return _PyAnyCAD.PickedItemSet_Clear(self)

    def IsExsiting(self, item):
        return _PyAnyCAD.PickedItemSet_IsExsiting(self, item)

    def Remove(self, id):
        return _PyAnyCAD.PickedItemSet_Remove(self, id)

    def RemoveById(self, *args):
        return _PyAnyCAD.PickedItemSet_RemoveById(self, *args)

# Register PickedItemSet in _PyAnyCAD:
_PyAnyCAD.PickedItemSet_swigregister(PickedItemSet)
class PickCaster(object):
    r"""
    Author: Rendering
    拾取基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PickCaster_swiginit(self, _PyAnyCAD.new_PickCaster(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PickCaster

    def GetId(self):
        return _PyAnyCAD.PickCaster_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.PickCaster_SetId(self, val)

    def Initialize(self, camera, pickFilter):
        r"""
        初始化
        :type camera: :py:class:`Camera`
        :param camera: 相机
        :type pickFilter: int
        :param pickFilter: 过滤条件
        """
        return _PyAnyCAD.PickCaster_Initialize(self, camera, pickFilter)

    def FilterByClipPlane(self, plane):
        r"""
        基于平面过滤
        :type plane: :py:class:`Plane`
        :param plane: 平面
        :rtype: boolean
        :return: true 被过滤掉了
        """
        return _PyAnyCAD.PickCaster_FilterByClipPlane(self, plane)

    def Clear(self):
        r"""清空"""
        return _PyAnyCAD.PickCaster_Clear(self)

    def GetCount(self):
        r"""
        获取个数
        :rtype: std::size_t
        :return: 个数
        """
        return _PyAnyCAD.PickCaster_GetCount(self)

# Register PickCaster in _PyAnyCAD:
_PyAnyCAD.PickCaster_swigregister(PickCaster)
class Raycaster(PickCaster):
    r"""
    Author: Rendering
    Raycaster
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.Raycaster_swiginit(self, _PyAnyCAD.new_Raycaster(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Raycaster

    def GetRay(self):
        return _PyAnyCAD.Raycaster_GetRay(self)

    def SetRay(self, val):
        return _PyAnyCAD.Raycaster_SetRay(self, val)

    def GetRayBox(self):
        return _PyAnyCAD.Raycaster_GetRayBox(self)

    def SetRayBox(self, val):
        return _PyAnyCAD.Raycaster_SetRayBox(self, val)

    def GetXY(self):
        return _PyAnyCAD.Raycaster_GetXY(self)

    def SetXY(self, val):
        return _PyAnyCAD.Raycaster_SetXY(self, val)

    def GetTabOrder(self):
        return _PyAnyCAD.Raycaster_GetTabOrder(self)

    def SetTabOrder(self, val):
        return _PyAnyCAD.Raycaster_SetTabOrder(self, val)

    def FilterByClipPlane(self, plane):
        return _PyAnyCAD.Raycaster_FilterByClipPlane(self, plane)

    def Initialize(self, camera, pickFilter, x, y):
        return _PyAnyCAD.Raycaster_Initialize(self, camera, pickFilter, x, y)

    def Sort(self):
        return _PyAnyCAD.Raycaster_Sort(self)

    def GetTopItem(self):
        return _PyAnyCAD.Raycaster_GetTopItem(self)

    def TestThreshold(self, pt):
        return _PyAnyCAD.Raycaster_TestThreshold(self, pt)

    def HitTest(self, *args):
        return _PyAnyCAD.Raycaster_HitTest(self, *args)

# Register Raycaster in _PyAnyCAD:
_PyAnyCAD.Raycaster_swigregister(Raycaster)
class PickListener(object):
    r"""
    Author: Rendering
    Listener when picked objects.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PickListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PickListener_swiginit(self, _PyAnyCAD.new_PickListener(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_PickListener

    def BeforeSelect(self, item):
        return _PyAnyCAD.PickListener_BeforeSelect(self, item)

    def AfterSelect(self, item):
        return _PyAnyCAD.PickListener_AfterSelect(self, item)

    def HilightFilter(self, caster):
        return _PyAnyCAD.PickListener_HilightFilter(self, caster)

    def BeforeHilight(self, item):
        return _PyAnyCAD.PickListener_BeforeHilight(self, item)

    def AfterHilight(self, item):
        return _PyAnyCAD.PickListener_AfterHilight(self, item)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PickListener(self)
        return weakref.proxy(self)

# Register PickListener in _PyAnyCAD:
_PyAnyCAD.PickListener_swigregister(PickListener)
class SelectionManager(object):
    r"""
    Author: Rendering
    选择集管理器
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SelectionManager_swiginit(self, _PyAnyCAD.new_SelectionManager())
    __swig_destroy__ = _PyAnyCAD.delete_SelectionManager

    def GetDepthTest(self):
        return _PyAnyCAD.SelectionManager_GetDepthTest(self)

    def SetDepthTest(self, val):
        return _PyAnyCAD.SelectionManager_SetDepthTest(self, val)

    def GetHilighting(self):
        return _PyAnyCAD.SelectionManager_GetHilighting(self)

    def SetHilighting(self, val):
        return _PyAnyCAD.SelectionManager_SetHilighting(self, val)

    def GetAllowPickNull(self):
        return _PyAnyCAD.SelectionManager_GetAllowPickNull(self)

    def SetAllowPickNull(self, val):
        return _PyAnyCAD.SelectionManager_SetAllowPickNull(self, val)

    def GetMultiPick(self):
        return _PyAnyCAD.SelectionManager_GetMultiPick(self)

    def SetMultiPick(self, val):
        return _PyAnyCAD.SelectionManager_SetMultiPick(self, val)

    def GetSelection(self):
        return _PyAnyCAD.SelectionManager_GetSelection(self)

    def GetHilight(self):
        return _PyAnyCAD.SelectionManager_GetHilight(self)

    def GetOverride(self):
        return _PyAnyCAD.SelectionManager_GetOverride(self)

    def GetPickFilter(self):
        return _PyAnyCAD.SelectionManager_GetPickFilter(self)

    def SetPickFilter(self, val):
        return _PyAnyCAD.SelectionManager_SetPickFilter(self, val)

    def AddListener(self, listener):
        return _PyAnyCAD.SelectionManager_AddListener(self, listener)

    def RemoveListener(self, listener):
        return _PyAnyCAD.SelectionManager_RemoveListener(self, listener)

    def GetPickedItem(self):
        r"""获取选择的对象，可能为空"""
        return _PyAnyCAD.SelectionManager_GetPickedItem(self)

    def GetHilightedItem(self):
        r"""获取高亮的对象，可能为空"""
        return _PyAnyCAD.SelectionManager_GetHilightedItem(self)

    def GetSelectedIds(self):
        r"""
        获取选择的对象ID
        :rtype: :py:class:`PickedIdList`
        :return: ID列表
        """
        return _PyAnyCAD.SelectionManager_GetSelectedIds(self)

    def SelectSubShape(self, *args):
        r"""
        *Overload 1:*

        Selet the sub shape by NodeId
        :type pScene: :py:class:`Scene`
        :param pScene: the scene
        :type nodeId: int
        :param nodeId: the Node UUID
        :type type: int
        :param type: the sub type
        :type shapeIndex: int
        :param shapeIndex: the index
        :rtype: boolean
        :return: true if picked successfully.


        |

        *Overload 2:*

        Selet the sub shape by element id
        :type pScene: :py:class:`Scene`
        :param pScene: the scene
        :type id: :py:class:`ObjectId`
        :param id: the Element id
        :type type: int
        :param type: the sub type.
        :type shapeIndex: int
        :param shapeIndex: the index
        :rtype: boolean
        :return: true if picked successfully .


        |

        *Overload 3:*

        Selet the sub shape by element id
        :type pScene: :py:class:`Scene`
        :param pScene: the scene
        :type id: :py:class:`ObjectId`
        :param id: the Element id
        :type type: int
        :param type: the sub type.
        :type shapeIndex: int
        :param shapeIndex: the index
        :rtype: boolean
        :return: true if picked successfully .
        """
        return _PyAnyCAD.SelectionManager_SelectSubShape(self, *args)

    def SelectSubTopo(self, *args):
        return _PyAnyCAD.SelectionManager_SelectSubTopo(self, *args)

    def OverrideSubTopo(self, *args):
        return _PyAnyCAD.SelectionManager_OverrideSubTopo(self, *args)

    def RemoveOverride(self, id, type, topoIdx):
        return _PyAnyCAD.SelectionManager_RemoveOverride(self, id, type, topoIdx)

    def DeSelectById(self, nodeId):
        return _PyAnyCAD.SelectionManager_DeSelectById(self, nodeId)

    def DeSelect(self, id):
        return _PyAnyCAD.SelectionManager_DeSelect(self, id)

    def Clear(self, bNotify=True):
        r"""
        清空选择集合
        :type bNotify: boolean, optional
        :param bNotify: 是否触发消息通知
        """
        return _PyAnyCAD.SelectionManager_Clear(self, bNotify)

    def ClearOverride(self):
        return _PyAnyCAD.SelectionManager_ClearOverride(self)

    def ClearPickFilters(self):
        return _PyAnyCAD.SelectionManager_ClearPickFilters(self)

    def ResetPickFilters(self):
        return _PyAnyCAD.SelectionManager_ResetPickFilters(self)

    def AddPickFilter(self, filter):
        return _PyAnyCAD.SelectionManager_AddPickFilter(self, filter)

    def ClearPickFilter(self, filter):
        return _PyAnyCAD.SelectionManager_ClearPickFilter(self, filter)

    def SetSelectionColor(self, color):
        r"""
        设置选择的颜色
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.SelectionManager_SetSelectionColor(self, color)

    def GetSelectionColor(self):
        return _PyAnyCAD.SelectionManager_GetSelectionColor(self)

    def SetHilightingColor(self, color):
        r"""
        设置Hover高亮的颜色
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.SelectionManager_SetHilightingColor(self, color)

    def GetHilightingColor(self):
        return _PyAnyCAD.SelectionManager_GetHilightingColor(self)

    def SetOverrideColor(self, color):
        r"""
        设置Override高亮的颜色
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.SelectionManager_SetOverrideColor(self, color)

    def GetOverrideColor(self):
        return _PyAnyCAD.SelectionManager_GetOverrideColor(self)

    def SetLineWidth(self, width):
        r"""
        设置选择线宽
        :type width: uint8_t
        :param width:
        """
        return _PyAnyCAD.SelectionManager_SetLineWidth(self, width)

    def GetLineWidth(self):
        return _PyAnyCAD.SelectionManager_GetLineWidth(self)

    def SetPointSize(self, size):
        r"""
        设置点的大小
        :type size: float
        :param size: 大小
        """
        return _PyAnyCAD.SelectionManager_SetPointSize(self, size)

    def GetPointSize(self):
        return _PyAnyCAD.SelectionManager_GetPointSize(self)

    def SetPointStyle(self, style):
        return _PyAnyCAD.SelectionManager_SetPointStyle(self, style)

    def Hilight(self, id, x, y):
        return _PyAnyCAD.SelectionManager_Hilight(self, id, x, y)

    def Select(self, *args):
        return _PyAnyCAD.SelectionManager_Select(self, *args)

    def IsSelected(self, id):
        return _PyAnyCAD.SelectionManager_IsSelected(self, id)

    def IsHilighted(self, id):
        return _PyAnyCAD.SelectionManager_IsHilighted(self, id)

# Register SelectionManager in _PyAnyCAD:
_PyAnyCAD.SelectionManager_swigregister(SelectionManager)
EnumBackgroundTheme_DarkBlue = _PyAnyCAD.EnumBackgroundTheme_DarkBlue
EnumBackgroundTheme_LightBlue = _PyAnyCAD.EnumBackgroundTheme_LightBlue
EnumBackgroundTheme_LightGray = _PyAnyCAD.EnumBackgroundTheme_LightGray
class Background(object):
    r"""
    Author: Rendering
    Background
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Background

    @staticmethod
    def Create(theme):
        return _PyAnyCAD.Background_Create(theme)

# Register Background in _PyAnyCAD:
_PyAnyCAD.Background_swigregister(Background)
class ColorBackground(Background):
    r"""
    Author: Rendering
    ColorBackground
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ColorBackground_swiginit(self, _PyAnyCAD.new_ColorBackground(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ColorBackground

    def GetColor(self):
        return _PyAnyCAD.ColorBackground_GetColor(self)

    def SetColor(self, val):
        return _PyAnyCAD.ColorBackground_SetColor(self, val)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.ColorBackground_Cast(object)

# Register ColorBackground in _PyAnyCAD:
_PyAnyCAD.ColorBackground_swigregister(ColorBackground)
class ImageBackground(Background):
    r"""
    Author: Rendering
    ImageBackground
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, texture):
        _PyAnyCAD.ImageBackground_swiginit(self, _PyAnyCAD.new_ImageBackground(texture))
    __swig_destroy__ = _PyAnyCAD.delete_ImageBackground

    def GetTexture(self):
        return _PyAnyCAD.ImageBackground_GetTexture(self)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.ImageBackground_Cast(object)

    def SetTexture(self, texture):
        return _PyAnyCAD.ImageBackground_SetTexture(self, texture)

# Register ImageBackground in _PyAnyCAD:
_PyAnyCAD.ImageBackground_swigregister(ImageBackground)
class SkyboxBackground(Background):
    r"""
    Author: Rendering
    SkyboxBackground
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, texture):
        _PyAnyCAD.SkyboxBackground_swiginit(self, _PyAnyCAD.new_SkyboxBackground(texture))
    __swig_destroy__ = _PyAnyCAD.delete_SkyboxBackground

    def GetTexture(self):
        return _PyAnyCAD.SkyboxBackground_GetTexture(self)

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.SkyboxBackground_Cast(object)

    @staticmethod
    def Create(name):
        return _PyAnyCAD.SkyboxBackground_Create(name)

    def SetTexture(self, texture):
        return _PyAnyCAD.SkyboxBackground_SetTexture(self, texture)

# Register SkyboxBackground in _PyAnyCAD:
_PyAnyCAD.SkyboxBackground_swigregister(SkyboxBackground)
class GradientColorBackground(Background):
    r"""
    Author: Rendering
    渐变背景色
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, top, bottom):
        _PyAnyCAD.GradientColorBackground_swiginit(self, _PyAnyCAD.new_GradientColorBackground(top, bottom))
    __swig_destroy__ = _PyAnyCAD.delete_GradientColorBackground

    @staticmethod
    def Cast(object):
        return _PyAnyCAD.GradientColorBackground_Cast(object)

    def SetColors(self, *args):
        r"""
        *Overload 1:*

        设置颜色
        :type top: :py:class:`vec3`
        :param top: 顶部颜色
        :type bottom: :py:class:`vec3`
        :param bottom: 底部颜色


        |

        *Overload 2:*

        设置四个角的颜色
        :type color1: :py:class:`vec3`
        :param color1: 1
        :type color2: :py:class:`vec3`
        :param color2: 2
        :type color3: :py:class:`vec3`
        :param color3: 3
        :type color4: :py:class:`vec3`
        :param color4: 4
        """
        return _PyAnyCAD.GradientColorBackground_SetColors(self, *args)

# Register GradientColorBackground in _PyAnyCAD:
_PyAnyCAD.GradientColorBackground_swigregister(GradientColorBackground)
class SceneManager(object):
    r"""
    Author: Rendering

    场景管理器.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, width, height):
        _PyAnyCAD.SceneManager_swiginit(self, _PyAnyCAD.new_SceneManager(width, height))
    __swig_destroy__ = _PyAnyCAD.delete_SceneManager

    def GetCamera(self):
        return _PyAnyCAD.SceneManager_GetCamera(self)

    def GetCropCamera(self):
        return _PyAnyCAD.SceneManager_GetCropCamera(self)

    def GetSelectionManager(self):
        return _PyAnyCAD.SceneManager_GetSelectionManager(self)

    def GetWorldBBox(self):
        return _PyAnyCAD.SceneManager_GetWorldBBox(self)

    def GetSceneBBox(self):
        return _PyAnyCAD.SceneManager_GetSceneBBox(self)

    def GetCoodinateGrid(self):
        return _PyAnyCAD.SceneManager_GetCoodinateGrid(self)

    def SetCoodinateGrid(self, val):
        return _PyAnyCAD.SceneManager_SetCoodinateGrid(self, val)

    def GetBackground(self):
        return _PyAnyCAD.SceneManager_GetBackground(self)

    def SetBackground(self, val):
        return _PyAnyCAD.SceneManager_SetBackground(self, val)

    def GetDisplayFilter(self):
        return _PyAnyCAD.SceneManager_GetDisplayFilter(self)

    def AddScene(self, scene):
        r"""
        添加场景
        :type scene: :py:class:`Scene`
        :param scene: 场景对象
        :rtype: int
        :return: 返回ID
        """
        return _PyAnyCAD.SceneManager_AddScene(self, scene)

    def RemoveScene(self, sceneId):
        r"""
        移除场景
        :type sceneId: int
        :param sceneId: 场景ID
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.SceneManager_RemoveScene(self, sceneId)

    def FindScene(self, sceneId):
        r"""
        查找场景
        :type sceneId: int
        :param sceneId: ID
        :rtype: :py:class:`Scene`
        :return: 是否成功
        """
        return _PyAnyCAD.SceneManager_FindScene(self, sceneId)

    def GetScene(self):
        r"""
        获取默认的场景
        :rtype: :py:class:`Scene`
        :return: 场景
        """
        return _PyAnyCAD.SceneManager_GetScene(self)

    def GetTempScene(self):
        r"""
        获取临时对象的场景
        :rtype: :py:class:`Scene`
        :return: 场景
        """
        return _PyAnyCAD.SceneManager_GetTempScene(self)

    def GetScene2D(self):
        r"""
        获取二维场景
        :rtype: :py:class:`Scene`
        :return: 场景
        """
        return _PyAnyCAD.SceneManager_GetScene2D(self)

    def ResetDisplayFilters(self):
        r"""重置显示过滤器"""
        return _PyAnyCAD.SceneManager_ResetDisplayFilters(self)

    def AddDisplayFilter(self, filter):
        r"""
        添加显示过滤器
        :type filter: int
        :param filter: 过滤条件
        """
        return _PyAnyCAD.SceneManager_AddDisplayFilter(self, filter)

    def ClearDisplayFilter(self, filter):
        r"""
        清空选择过滤器
        :type filter: int
        :param filter: 过滤条件
        """
        return _PyAnyCAD.SceneManager_ClearDisplayFilter(self, filter)

    def SetDisplayFilter(self, *args):
        return _PyAnyCAD.SceneManager_SetDisplayFilter(self, *args)

    def ClearSelection(self, bNotify):
        r"""
        清空选择集
        :type bNotify: boolean
        :param bNotify: 是否通知
        """
        return _PyAnyCAD.SceneManager_ClearSelection(self, bNotify)

    def ClearOverride(self):
        r"""清除覆盖色"""
        return _PyAnyCAD.SceneManager_ClearOverride(self)

    def Select(self, *args):
        r"""
        *Overload 1:*

        根据Node来选择
        :type pNode: :py:class:`SceneNode`
        :param pNode: Node对象
        :rtype: boolean
        :return: 是否成功


        |

        *Overload 2:*

        根据对象ID选择
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.SceneManager_Select(self, *args)

    def SelectSubShape(self, *args):
        r"""
        *Overload 1:*

        根据NodeID选择其子元素
        :type nodeId: int
        :param nodeId: the Node UUID
        :type type: int
        :param type: 子类型
        :type shapeIndex: int
        :param shapeIndex: 索引
        :rtype: boolean
        :return: true if picked successfully.


        |

        *Overload 2:*

        根据对ID选择其子元素
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        :type type: int
        :param type: 子类型
        :type shapeIndex: int
        :param shapeIndex: 类型索引
        :rtype: boolean
        :return: true if picked successfully .


        |

        *Overload 3:*

        根据对ID选择其子元素
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        :type type: int
        :param type: 子类型
        :type shapeIndex: int
        :param shapeIndex: 类型索引
        :rtype: boolean
        :return: true if picked successfully .
        """
        return _PyAnyCAD.SceneManager_SelectSubShape(self, *args)

    def SelectSubTopo(self, *args):
        return _PyAnyCAD.SceneManager_SelectSubTopo(self, *args)

    def OverrideSubTopo(self, *args):
        return _PyAnyCAD.SceneManager_OverrideSubTopo(self, *args)

    def UpdateWorld(self, forced):
        return _PyAnyCAD.SceneManager_UpdateWorld(self, forced)

    def UpdateFixedSizeWorld(self):
        return _PyAnyCAD.SceneManager_UpdateFixedSizeWorld(self)

    def HitCropBox(self, x, y):
        return _PyAnyCAD.SceneManager_HitCropBox(self, x, y)

    def HitCropBoxGrip(self, x, y):
        return _PyAnyCAD.SceneManager_HitCropBoxGrip(self, x, y)

    def WindowPointToCropWorldPoint(self, x, y):
        return _PyAnyCAD.SceneManager_WindowPointToCropWorldPoint(self, x, y)

    def Clear(self):
        return _PyAnyCAD.SceneManager_Clear(self)

# Register SceneManager in _PyAnyCAD:
_PyAnyCAD.SceneManager_swigregister(SceneManager)
EnumDimensionArrowStyle_DOT_SMALL = _PyAnyCAD.EnumDimensionArrowStyle_DOT_SMALL
EnumDimensionArrowStyle_DOT = _PyAnyCAD.EnumDimensionArrowStyle_DOT
EnumDimensionArrowStyle_ARCHTICK = _PyAnyCAD.EnumDimensionArrowStyle_ARCHTICK
EnumDimensionArrowStyle_ARROW = _PyAnyCAD.EnumDimensionArrowStyle_ARROW
EnumDimensionArrowStyle_ARROW_BLANK = _PyAnyCAD.EnumDimensionArrowStyle_ARROW_BLANK
EnumDimensionArrowStyle_ARROW_FILLED = _PyAnyCAD.EnumDimensionArrowStyle_ARROW_FILLED
class DimensionNode(GroupSceneNode):
    r"""
    Author: Interaction
    DimensionNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DimensionNode_Cast(obj)

    def __init__(self):
        _PyAnyCAD.DimensionNode_swiginit(self, _PyAnyCAD.new_DimensionNode())
    __swig_destroy__ = _PyAnyCAD.delete_DimensionNode

    def GetFontHeight(self):
        return _PyAnyCAD.DimensionNode_GetFontHeight(self)

    def SetFontHeight(self, val):
        return _PyAnyCAD.DimensionNode_SetFontHeight(self, val)

    def GetFontType(self):
        return _PyAnyCAD.DimensionNode_GetFontType(self)

    def SetFontType(self, val):
        return _PyAnyCAD.DimensionNode_SetFontType(self, val)

    def GetExtensionBeyond(self):
        return _PyAnyCAD.DimensionNode_GetExtensionBeyond(self)

    def SetExtensionBeyond(self, val):
        return _PyAnyCAD.DimensionNode_SetExtensionBeyond(self, val)

    def GetExtensionOffset(self):
        return _PyAnyCAD.DimensionNode_GetExtensionOffset(self)

    def SetExtensionOffset(self, val):
        return _PyAnyCAD.DimensionNode_SetExtensionOffset(self, val)

    def GetArrowStyle(self):
        return _PyAnyCAD.DimensionNode_GetArrowStyle(self)

    def SetArrowStyle(self, val):
        return _PyAnyCAD.DimensionNode_SetArrowStyle(self, val)

    def GetArrowLength(self):
        return _PyAnyCAD.DimensionNode_GetArrowLength(self)

    def SetArrowLength(self, val):
        return _PyAnyCAD.DimensionNode_SetArrowLength(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.DimensionNode_GetMaterial(self)

    def SetMaterial(self, val):
        return _PyAnyCAD.DimensionNode_SetMaterial(self, val)

    def GetOrigin(self):
        return _PyAnyCAD.DimensionNode_GetOrigin(self)

    def SetOrigin(self, val):
        return _PyAnyCAD.DimensionNode_SetOrigin(self, val)

    def GetAxisX(self):
        return _PyAnyCAD.DimensionNode_GetAxisX(self)

    def SetAxisX(self, val):
        return _PyAnyCAD.DimensionNode_SetAxisX(self, val)

    def GetAxisZ(self):
        return _PyAnyCAD.DimensionNode_GetAxisZ(self)

    def SetAxisZ(self, val):
        return _PyAnyCAD.DimensionNode_SetAxisZ(self, val)

    def GetColor(self):
        return _PyAnyCAD.DimensionNode_GetColor(self)

    def SetColor(self, val):
        return _PyAnyCAD.DimensionNode_SetColor(self, val)

    def GetBillboardText(self):
        return _PyAnyCAD.DimensionNode_GetBillboardText(self)

    def SetBillboardText(self, val):
        return _PyAnyCAD.DimensionNode_SetBillboardText(self, val)

    def SetText(self, text):
        return _PyAnyCAD.DimensionNode_SetText(self, text)

    def GetText(self):
        return _PyAnyCAD.DimensionNode_GetText(self)

    def ToGlobalTrf(self):
        return _PyAnyCAD.DimensionNode_ToGlobalTrf(self)

    def Clone(self):
        return _PyAnyCAD.DimensionNode_Clone(self)

    def Update(self):
        return _PyAnyCAD.DimensionNode_Update(self)

# Register DimensionNode in _PyAnyCAD:
_PyAnyCAD.DimensionNode_swigregister(DimensionNode)
class AlignedDimensionNode(DimensionNode):
    r"""
    Author: Interaction
    AlignedDimensionNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AlignedDimensionNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.AlignedDimensionNode_swiginit(self, _PyAnyCAD.new_AlignedDimensionNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_AlignedDimensionNode

    def GetStartPoint(self):
        return _PyAnyCAD.AlignedDimensionNode_GetStartPoint(self)

    def GetEndPoint(self):
        return _PyAnyCAD.AlignedDimensionNode_GetEndPoint(self)

    def GetDistance(self):
        return _PyAnyCAD.AlignedDimensionNode_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetDistance(self, val)

    def GetShowLine(self):
        return _PyAnyCAD.AlignedDimensionNode_GetShowLine(self)

    def SetShowLine(self, val):
        return _PyAnyCAD.AlignedDimensionNode_SetShowLine(self, val)

    def SetStartPoint(self, *args):
        return _PyAnyCAD.AlignedDimensionNode_SetStartPoint(self, *args)

    def SetEndPoint(self, *args):
        return _PyAnyCAD.AlignedDimensionNode_SetEndPoint(self, *args)

    def Update(self):
        return _PyAnyCAD.AlignedDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.AlignedDimensionNode_Clone(self)

# Register AlignedDimensionNode in _PyAnyCAD:
_PyAnyCAD.AlignedDimensionNode_swigregister(AlignedDimensionNode)
class LinearDimensionNode(DimensionNode):
    r"""
    Author: Interaction
    LinearDimensionNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LinearDimensionNode_Cast(obj)

    def __init__(self, start, end, location, angle, text):
        _PyAnyCAD.LinearDimensionNode_swiginit(self, _PyAnyCAD.new_LinearDimensionNode(start, end, location, angle, text))
    __swig_destroy__ = _PyAnyCAD.delete_LinearDimensionNode

    def GetStartPoint(self):
        return _PyAnyCAD.LinearDimensionNode_GetStartPoint(self)

    def SetStartPoint(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetStartPoint(self, val)

    def GetEndPoint(self):
        return _PyAnyCAD.LinearDimensionNode_GetEndPoint(self)

    def SetEndPoint(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetEndPoint(self, val)

    def GetLocation(self):
        return _PyAnyCAD.LinearDimensionNode_GetLocation(self)

    def SetLocation(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetLocation(self, val)

    def GetAngle(self):
        return _PyAnyCAD.LinearDimensionNode_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetAngle(self, val)

    def GetOnPlane(self):
        return _PyAnyCAD.LinearDimensionNode_GetOnPlane(self)

    def SetOnPlane(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetOnPlane(self, val)

    def GetTextLocation(self):
        return _PyAnyCAD.LinearDimensionNode_GetTextLocation(self)

    def SetTextLocation(self, val):
        return _PyAnyCAD.LinearDimensionNode_SetTextLocation(self, val)

    def Update(self):
        return _PyAnyCAD.LinearDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.LinearDimensionNode_Clone(self)

    @staticmethod
    def Create(start, end, location, angle, text):
        r"""
        在平面上创建尺寸标注
        :type start: :py:class:`vec2`
        :param start: 标注起点
        :type end: :py:class:`vec2`
        :param end: 标注终点
        :type location: :py:class:`vec2`
        :param location: 标签位置
        :type angle: float
        :param angle: 角度
        :type text: anycore::StringW
        :param text: 文字
        :rtype: :py:class:`LinearDimensionNode`
        :return: 对象
        """
        return _PyAnyCAD.LinearDimensionNode_Create(start, end, location, angle, text)

# Register LinearDimensionNode in _PyAnyCAD:
_PyAnyCAD.LinearDimensionNode_swigregister(LinearDimensionNode)
class AngularDimensionNode(DimensionNode):
    r"""
    Author: Interaction
    AngularDimensionNode
    角度测量显示
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AngularDimensionNode_Cast(obj)

    def __init__(self, center, startPoint, endPoint, text):
        _PyAnyCAD.AngularDimensionNode_swiginit(self, _PyAnyCAD.new_AngularDimensionNode(center, startPoint, endPoint, text))
    __swig_destroy__ = _PyAnyCAD.delete_AngularDimensionNode

    def GetCenter(self):
        return _PyAnyCAD.AngularDimensionNode_GetCenter(self)

    def GetStartPoint(self):
        return _PyAnyCAD.AngularDimensionNode_GetStartPoint(self)

    def GetEndPoint(self):
        return _PyAnyCAD.AngularDimensionNode_GetEndPoint(self)

    def GetShowHandle(self):
        return _PyAnyCAD.AngularDimensionNode_GetShowHandle(self)

    def SetShowHandle(self, val):
        return _PyAnyCAD.AngularDimensionNode_SetShowHandle(self, val)

    def SetStartPoint(self, *args):
        return _PyAnyCAD.AngularDimensionNode_SetStartPoint(self, *args)

    def SetEndPoint(self, *args):
        return _PyAnyCAD.AngularDimensionNode_SetEndPoint(self, *args)

    def SetCenter(self, *args):
        return _PyAnyCAD.AngularDimensionNode_SetCenter(self, *args)

    def SetTextPosition(self, pt):
        return _PyAnyCAD.AngularDimensionNode_SetTextPosition(self, pt)

    def Update(self):
        return _PyAnyCAD.AngularDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.AngularDimensionNode_Clone(self)

    @staticmethod
    def Create(center, start, end, text):
        r"""
        在平面上创建角度标注
        :type center: :py:class:`vec2`
        :param center: 圆心
        :type start: :py:class:`vec2`
        :param start: 标注起点
        :type end: :py:class:`vec2`
        :param end: 标注终点
        :type text: anycore::StringW
        :param text: 文字
        :rtype: :py:class:`AngularDimensionNode`
        :return: 角度标注对象
        """
        return _PyAnyCAD.AngularDimensionNode_Create(center, start, end, text)

# Register AngularDimensionNode in _PyAnyCAD:
_PyAnyCAD.AngularDimensionNode_swigregister(AngularDimensionNode)
class MeasureDistanceNode(ShapeSceneNode):
    r"""
    Author: Interaction
    MeasureDistanceNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MeasureDistanceNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.MeasureDistanceNode_swiginit(self, _PyAnyCAD.new_MeasureDistanceNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_MeasureDistanceNode

    def GetStart(self):
        return _PyAnyCAD.MeasureDistanceNode_GetStart(self)

    def SetStart(self, val):
        return _PyAnyCAD.MeasureDistanceNode_SetStart(self, val)

    def GetEnd(self):
        return _PyAnyCAD.MeasureDistanceNode_GetEnd(self)

    def SetEnd(self, val):
        return _PyAnyCAD.MeasureDistanceNode_SetEnd(self, val)

    def GetPointMaterial(self):
        return _PyAnyCAD.MeasureDistanceNode_GetPointMaterial(self)

    def SetPointMaterial(self, val):
        return _PyAnyCAD.MeasureDistanceNode_SetPointMaterial(self, val)

    def GetLineMaterial(self):
        return _PyAnyCAD.MeasureDistanceNode_GetLineMaterial(self)

    def SetLineMaterial(self, val):
        return _PyAnyCAD.MeasureDistanceNode_SetLineMaterial(self, val)

    def Update(self):
        return _PyAnyCAD.MeasureDistanceNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.MeasureDistanceNode_Clone(self)

# Register MeasureDistanceNode in _PyAnyCAD:
_PyAnyCAD.MeasureDistanceNode_swigregister(MeasureDistanceNode)
class RadiusDimensionNode(DimensionNode):
    r"""
    Author: Interaction
    RadiusDimensionNode
    半径显示
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RadiusDimensionNode_Cast(obj)

    def __init__(self, center, startPoint, endPtPoint, text):
        _PyAnyCAD.RadiusDimensionNode_swiginit(self, _PyAnyCAD.new_RadiusDimensionNode(center, startPoint, endPtPoint, text))
    __swig_destroy__ = _PyAnyCAD.delete_RadiusDimensionNode

    def GetCenter(self):
        return _PyAnyCAD.RadiusDimensionNode_GetCenter(self)

    def SetCenter(self, val):
        return _PyAnyCAD.RadiusDimensionNode_SetCenter(self, val)

    def GetStartPoint(self):
        return _PyAnyCAD.RadiusDimensionNode_GetStartPoint(self)

    def SetStartPoint(self, val):
        return _PyAnyCAD.RadiusDimensionNode_SetStartPoint(self, val)

    def GetEndPoint(self):
        return _PyAnyCAD.RadiusDimensionNode_GetEndPoint(self)

    def SetEndPoint(self, val):
        return _PyAnyCAD.RadiusDimensionNode_SetEndPoint(self, val)

    def GetShowArcLine(self):
        return _PyAnyCAD.RadiusDimensionNode_GetShowArcLine(self)

    def SetShowArcLine(self, val):
        return _PyAnyCAD.RadiusDimensionNode_SetShowArcLine(self, val)

    def GetValue(self):
        return _PyAnyCAD.RadiusDimensionNode_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.RadiusDimensionNode_SetValue(self, val)

    def Update(self):
        return _PyAnyCAD.RadiusDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.RadiusDimensionNode_Clone(self)

    @staticmethod
    def Create(center, startPoint, endPoint, text):
        return _PyAnyCAD.RadiusDimensionNode_Create(center, startPoint, endPoint, text)

# Register RadiusDimensionNode in _PyAnyCAD:
_PyAnyCAD.RadiusDimensionNode_swigregister(RadiusDimensionNode)
class TagDimensionNode(DimensionNode):
    r"""
    Author: Interaction
    TagDimensionNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TagDimensionNode_Cast(obj)

    def __init__(self, target, location, text):
        _PyAnyCAD.TagDimensionNode_swiginit(self, _PyAnyCAD.new_TagDimensionNode(target, location, text))
    __swig_destroy__ = _PyAnyCAD.delete_TagDimensionNode

    def GetLocation(self):
        return _PyAnyCAD.TagDimensionNode_GetLocation(self)

    def SetLocation(self, val):
        return _PyAnyCAD.TagDimensionNode_SetLocation(self, val)

    def GetTarget(self):
        return _PyAnyCAD.TagDimensionNode_GetTarget(self)

    def SetTarget(self, val):
        return _PyAnyCAD.TagDimensionNode_SetTarget(self, val)

    def Update(self):
        return _PyAnyCAD.TagDimensionNode_Update(self)

    def Clone(self):
        return _PyAnyCAD.TagDimensionNode_Clone(self)

# Register TagDimensionNode in _PyAnyCAD:
_PyAnyCAD.TagDimensionNode_swigregister(TagDimensionNode)
class SceneIO(object):
    r"""
    Author: Exchange
    SceneIO.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Load(*args):
        return _PyAnyCAD.SceneIO_Load(*args)

    @staticmethod
    def Save(*args):
        r"""
        *Overload 1:*

        保存场景为glTF格式
        :type scene: :py:class:`Scene`
        :param scene: 场景
        :type fileName: string
        :param fileName: 文件名
        :rtype: boolean
        :return: 是否成功


        |

        *Overload 2:*

        保存节点为glTF文件
        :type node: :py:class:`SceneNode`
        :param node: 节点
        :type fileName: string
        :param fileName: 文件名称
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.SceneIO_Save(*args)

    @staticmethod
    def FormatFilters():
        return _PyAnyCAD.SceneIO_FormatFilters()

    def __init__(self):
        _PyAnyCAD.SceneIO_swiginit(self, _PyAnyCAD.new_SceneIO())
    __swig_destroy__ = _PyAnyCAD.delete_SceneIO

# Register SceneIO in _PyAnyCAD:
_PyAnyCAD.SceneIO_swigregister(SceneIO)
class SceneReader(object):
    r"""
    Author: Exchange
    SceneIO.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SceneReader_swiginit(self, _PyAnyCAD.new_SceneReader())
    __swig_destroy__ = _PyAnyCAD.delete_SceneReader

    def Load(self, fileName, pFaceMaterial=None):
        return _PyAnyCAD.SceneReader_Load(self, fileName, pFaceMaterial)

    def Support(self, extention):
        return _PyAnyCAD.SceneReader_Support(self, extention)

# Register SceneReader in _PyAnyCAD:
_PyAnyCAD.SceneReader_swigregister(SceneReader)
class STLReader(SceneReader):
    r"""
    Author: Exchange
    SceneIO.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.STLReader_swiginit(self, _PyAnyCAD.new_STLReader())
    __swig_destroy__ = _PyAnyCAD.delete_STLReader

    def Support(self, extention):
        return _PyAnyCAD.STLReader_Support(self, extention)

    def Load(self, *args):
        return _PyAnyCAD.STLReader_Load(self, *args)

# Register STLReader in _PyAnyCAD:
_PyAnyCAD.STLReader_swigregister(STLReader)
class SceneReaderManager(object):
    r"""场景IO管理器"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.SceneReaderManager_Instance()

    def AddReader(self, reader):
        return _PyAnyCAD.SceneReaderManager_AddReader(self, reader)

    def FindReader(self, ext):
        return _PyAnyCAD.SceneReaderManager_FindReader(self, ext)

    def Load(self, fileName, pFaceMaterial=None):
        r"""
        加载文件到场景
        :type fileName: anycore::StringW
        :param fileName: 文件名
        :type pFaceMaterial: :py:class:`MaterialInstance`, optional
        :param pFaceMaterial: 覆盖的材质，可以为空
        :rtype: :py:class:`SceneNode`
        :return: SceneNode
        """
        return _PyAnyCAD.SceneReaderManager_Load(self, fileName, pFaceMaterial)
    __swig_destroy__ = _PyAnyCAD.delete_SceneReaderManager

# Register SceneReaderManager in _PyAnyCAD:
_PyAnyCAD.SceneReaderManager_swigregister(SceneReaderManager)
class GXYZ(object):
    r""" This class describes a cartesian coordinate entity in 3D space {X,Y,Z}. This entity is used for algebraic calculation. This entity can be transformed with a "Trsf" or a  "GTrsf" from package "gp". It is used in vectorial computations or for holding this type of information in data structures."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an XYZ object with zero coordinates (0,0,0)

        |

        *Overload 2:*
        creates an XYZ with given coordinates
        """
        _PyAnyCAD.GXYZ_swiginit(self, _PyAnyCAD.new_GXYZ(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        For this XYZ object, assigns the values theX, theY and theZ to its three coordinates

        |

        *Overload 2:*
        modifies the coordinate of range theIndex theIndex = 1 => X is modified theIndex = 2 => Y is modified theIndex = 3 => Z is modified Raises OutOfRange if theIndex != {1, 2, 3}.
        """
        return _PyAnyCAD.GXYZ_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate"""
        return _PyAnyCAD.GXYZ_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y coordinate"""
        return _PyAnyCAD.GXYZ_SetY(self, theY)

    def SetZ(self, theZ):
        r""" Assigns the given value to the Z coordinate"""
        return _PyAnyCAD.GXYZ_SetZ(self, theZ)

    def Coord(self, *args):
        return _PyAnyCAD.GXYZ_Coord(self, *args)

    def X(self):
        r""" Returns the X coordinate"""
        return _PyAnyCAD.GXYZ_X(self)

    def Y(self):
        r""" Returns the Y coordinate"""
        return _PyAnyCAD.GXYZ_Y(self)

    def Z(self):
        r""" Returns the Z coordinate"""
        return _PyAnyCAD.GXYZ_Z(self)

    def Modulus(self):
        r""" computes Sqrt (X*X + Y*Y + Z*Z) where X, Y and Z are the three coordinates of this XYZ object."""
        return _PyAnyCAD.GXYZ_Modulus(self)

    def SquareModulus(self):
        r""" Computes X*X + Y*Y + Z*Z where X, Y and Z are the three coordinates of this XYZ object."""
        return _PyAnyCAD.GXYZ_SquareModulus(self)

    def IsEqual(self, theOther, theTolerance):
        r""" Returns True if he coordinates of this XYZ object are equal to the respective coordinates Other, within the specified tolerance theTolerance. I.e.: abs(<me>.X() - theOther.X()) <= theTolerance and abs(<me>.Y() - theOther.Y()) <= theTolerance and abs(<me>.Z() - theOther.Z()) <= theTolerance."""
        return _PyAnyCAD.GXYZ_IsEqual(self, theOther, theTolerance)

    def Add(self, theOther):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.X() + theOther.X() <me>.Y() = <me>.Y() + theOther.Y() <me>.Z() = <me>.Z() + theOther.Z()
        """
        return _PyAnyCAD.GXYZ_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GXYZ___iadd__(self, theOther)

    def Added(self, theOther):
        r"""
        .. code-block:: c++

           new.X() = <me>.X() + theOther.X() new.Y() = <me>.Y() + theOther.Y() new.Z() = <me>.Z() + theOther.Z()
        """
        return _PyAnyCAD.GXYZ_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GXYZ___add__(self, theOther)

    def Cross(self, theOther):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.Y() * theOther.Z() - <me>.Z() * theOther.Y() <me>.Y() = <me>.Z() * theOther.X() - <me>.X() * theOther.Z() <me>.Z() = <me>.X() * theOther.Y() - <me>.Y() * theOther.X()
        """
        return _PyAnyCAD.GXYZ_Cross(self, theOther)

    def __ixor__(self, theOther):
        return _PyAnyCAD.GXYZ___ixor__(self, theOther)

    def Crossed(self, theOther):
        r"""
        .. code-block:: c++

           new.X() = <me>.Y() * theOther.Z() - <me>.Z() * theOther.Y() new.Y() = <me>.Z() * theOther.X() - <me>.X() * theOther.Z() new.Z() = <me>.X() * theOther.Y() - <me>.Y() * theOther.X()
        """
        return _PyAnyCAD.GXYZ_Crossed(self, theOther)

    def __xor__(self, theOther):
        return _PyAnyCAD.GXYZ___xor__(self, theOther)

    def CrossMagnitude(self, theRight):
        r""" Computes the magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||"""
        return _PyAnyCAD.GXYZ_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        r""" Computes the square magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||**2"""
        return _PyAnyCAD.GXYZ_CrossSquareMagnitude(self, theRight)

    def CrossCross(self, theCoord1, theCoord2):
        r""" Triple vector product Computes <me> = <me>.Cross(theCoord1.Cross(theCoord2))"""
        return _PyAnyCAD.GXYZ_CrossCross(self, theCoord1, theCoord2)

    def CrossCrossed(self, theCoord1, theCoord2):
        r""" Triple vector product computes New = <me>.Cross(theCoord1.Cross(theCoord2))"""
        return _PyAnyCAD.GXYZ_CrossCrossed(self, theCoord1, theCoord2)

    def Divide(self, theScalar):
        r""" divides <me> by a real."""
        return _PyAnyCAD.GXYZ_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GXYZ___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" divides <me> by a real."""
        return _PyAnyCAD.GXYZ_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GXYZ___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        r""" computes the scalar product between <me> and theOther"""
        return _PyAnyCAD.GXYZ_Dot(self, theOther)

    def DotCross(self, theCoord1, theCoord2):
        r""" computes the triple scalar product"""
        return _PyAnyCAD.GXYZ_DotCross(self, theCoord1, theCoord2)

    def Multiply(self, *args):
        r"""
        *Overload 1:*

        .. code-block:: c++

           <me>.X() = <me>.X() * theScalar; <me>.Y() = <me>.Y() * theScalar; <me>.Z() = <me>.Z() * theScalar;

        |

        *Overload 2:*

        .. code-block:: c++

           <me>.X() = <me>.X() * theOther.X(); <me>.Y() = <me>.Y() * theOther.Y(); <me>.Z() = <me>.Z() * theOther.Z();

        |

        *Overload 3:*
        <me> = theMatrix * <me>
        """
        return _PyAnyCAD.GXYZ_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GXYZ___imul__(self, *args)

    def Multiplied(self, *args):
        r"""
        *Overload 1:*

        .. code-block:: c++

           New.X() = <me>.X() * theScalar; New.Y() = <me>.Y() * theScalar; New.Z() = <me>.Z() * theScalar;

        |

        *Overload 2:*

        .. code-block:: c++

           new.X() = <me>.X() * theOther.X(); new.Y() = <me>.Y() * theOther.Y(); new.Z() = <me>.Z() * theOther.Z();

        |

        *Overload 3:*
        New = theMatrix * <me>
        """
        return _PyAnyCAD.GXYZ_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GXYZ___mul__(self, *args)

    def Normalize(self):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.X()/ <me>.Modulus() <me>.Y() = <me>.Y()/ <me>.Modulus() <me>.Z() = <me>.Z()/ <me>.Modulus() Raised if <me>.Modulus() <= Resolution from gp
        """
        return _PyAnyCAD.GXYZ_Normalize(self)

    def Normalized(self):
        r"""
        .. code-block:: c++

           New.X() = <me>.X()/ <me>.Modulus() New.Y() = <me>.Y()/ <me>.Modulus() New.Z() = <me>.Z()/ <me>.Modulus() Raised if <me>.Modulus() <= Resolution from gp
        """
        return _PyAnyCAD.GXYZ_Normalized(self)

    def Reverse(self):
        r"""
        .. code-block:: c++

           <me>.X() = -<me>.X() <me>.Y() = -<me>.Y() <me>.Z() = -<me>.Z()
        """
        return _PyAnyCAD.GXYZ_Reverse(self)

    def Reversed(self):
        r"""
        .. code-block:: c++

           New.X() = -<me>.X() New.Y() = -<me>.Y() New.Z() = -<me>.Z()
        """
        return _PyAnyCAD.GXYZ_Reversed(self)

    def Subtract(self, theOther):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.X() - theOther.X() <me>.Y() = <me>.Y() - theOther.Y() <me>.Z() = <me>.Z() - theOther.Z()
        """
        return _PyAnyCAD.GXYZ_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GXYZ___isub__(self, theOther)

    def Subtracted(self, theOther):
        r"""
        .. code-block:: c++

           new.X() = <me>.X() - theOther.X() new.Y() = <me>.Y() - theOther.Y() new.Z() = <me>.Z() - theOther.Z()
        """
        return _PyAnyCAD.GXYZ_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GXYZ___sub__(self, theOther)

    def SetLinearForm(self, *args):
        r"""
        *Overload 1:*
        <me> is set to the following linear form :.. code-block:: c++

           theA1 * theXYZ1 + theA2 * theXYZ2 + theA3 * theXYZ3 + theXYZ4

        |

        *Overload 2:*
        <me> is set to the following linear form :.. code-block:: c++

           theA1 * theXYZ1 + theA2 * theXYZ2 + theA3 * theXYZ3

        |

        *Overload 3:*
        <me> is set to the following linear form :.. code-block:: c++

           theA1 * theXYZ1 + theA2 * theXYZ2 + theXYZ3

        |

        *Overload 4:*
        <me> is set to the following linear form :.. code-block:: c++

           theA1 * theXYZ1 + theA2 * theXYZ2

        |

        *Overload 5:*
        <me> is set to the following linear form :.. code-block:: c++

           theA1 * theXYZ1 + theXYZ2

        |

        *Overload 6:*
        <me> is set to the following linear form :.. code-block:: c++

           theXYZ1 + theXYZ2
        """
        return _PyAnyCAD.GXYZ_SetLinearForm(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GXYZ

# Register GXYZ in _PyAnyCAD:
_PyAnyCAD.GXYZ_swigregister(GXYZ)
class GPnt(object):
    r""" Defines a 3D cartesian point."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a point with zero coordinates.

        |

        *Overload 2:*
        Creates a point from a XYZ object.

        |

        *Overload 3:*
        Creates a  point with its 3 cartesian's coordinates : theXp, theYp, theZp.
        """
        _PyAnyCAD.GPnt_swiginit(self, _PyAnyCAD.new_GPnt(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        Changes the coordinate of range theIndex : theIndex = 1 => X is modified theIndex = 2 => Y is modified theIndex = 3 => Z is modified Raised if theIndex != {1, 2, 3}.

        |

        *Overload 2:*
        For this point, assigns  the values theXp, theYp and theZp to its three coordinates.
        """
        return _PyAnyCAD.GPnt_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this point."""
        return _PyAnyCAD.GPnt_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y coordinate of this point."""
        return _PyAnyCAD.GPnt_SetY(self, theY)

    def SetZ(self, theZ):
        r""" Assigns the given value to the Z coordinate of this point."""
        return _PyAnyCAD.GPnt_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        r""" Assigns the three coordinates of theCoord to this point."""
        return _PyAnyCAD.GPnt_SetXYZ(self, theCoord)

    def X(self):
        r""" For this point, returns its X coordinate."""
        return _PyAnyCAD.GPnt_X(self)

    def Y(self):
        r""" For this point, returns its Y coordinate."""
        return _PyAnyCAD.GPnt_Y(self)

    def Z(self):
        r""" For this point, returns its Z coordinate."""
        return _PyAnyCAD.GPnt_Z(self)

    def XYZ(self):
        r""" For this point, returns its three coordinates as a XYZ object."""
        return _PyAnyCAD.GPnt_XYZ(self)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        Returns the coordinate of corresponding to the value of theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned theIndex = 3 => Z is returned Raises OutOfRange if theIndex != {1, 2, 3}. Raised if theIndex != {1, 2, 3}.

        |

        *Overload 2:*
        For this point gives its three coordinates theXp, theYp and theZp.

        |

        *Overload 3:*
        For this point, returns its three coordinates as a XYZ object.
        """
        return _PyAnyCAD.GPnt_Coord(self, *args)

    def ChangeCoord(self):
        r""" Returns the coordinates of this point. Note: This syntax allows direct modification of the returned value."""
        return _PyAnyCAD.GPnt_ChangeCoord(self)

    def BaryCenter(self, theAlpha, theP, theBeta):
        r""" Assigns the result of the following expression to this point (theAlpha*this + theBeta*theP) / (theAlpha + theBeta)"""
        return _PyAnyCAD.GPnt_BaryCenter(self, theAlpha, theP, theBeta)

    def IsEqual(self, theOther, theLinearTolerance):
        r""" Comparison Returns True if the distance between the two points is lower or equal to theLinearTolerance."""
        return _PyAnyCAD.GPnt_IsEqual(self, theOther, theLinearTolerance)

    def Distance(self, theOther):
        r""" Computes the distance between two points."""
        return _PyAnyCAD.GPnt_Distance(self, theOther)

    def SquareDistance(self, theOther):
        r""" Computes the square distance between two points."""
        return _PyAnyCAD.GPnt_SquareDistance(self, theOther)

    def Mirror(self, *args):
        return _PyAnyCAD.GPnt_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a point with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a point with respect to a plane. The axis placement theA2 locates the plane of the symmetry : (Location, XDirection, YDirection).

        |

        *Overload 3:*
        Rotates a point. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians.
        """
        return _PyAnyCAD.GPnt_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GPnt_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        return _PyAnyCAD.GPnt_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        r""" Scales a point. theS is the scaling value."""
        return _PyAnyCAD.GPnt_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GPnt_Scaled(self, theP, theS)

    def Transform(self, theT):
        r""" Transforms a point with the transformation T."""
        return _PyAnyCAD.GPnt_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GPnt_Transformed(self, theT)

    def Translate(self, *args):
        r"""
        *Overload 1:*
        Translates a point in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a point from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GPnt_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GPnt_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt

# Register GPnt in _PyAnyCAD:
_PyAnyCAD.GPnt_swigregister(GPnt)
class GDir(object):
    r""" Describes a unit vector in 3D space. This unit vector is also called "Direction". See Also gce_MakeDir which provides functions for more complex unit vector constructions Geom_Direction which provides additional functions for constructing unit vectors and works, in particular, with the parametric equations of unit vectors."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a direction corresponding to X axis.

        |

        *Overload 2:*
        Normalizes the vector theV and creates a direction. Raises ConstructionError if theV.Magnitude() <= Resolution.

        |

        *Overload 3:*
        Creates a direction from a triplet of coordinates. Raises ConstructionError if theCoord.Modulus() <= Resolution from gp.

        |

        *Overload 4:*
        Creates a direction with its 3 cartesian coordinates. Raises ConstructionError if Sqrt(theXv*theXv + theYv*theYv + theZv*theZv) <= Resolution Modification of the direction's coordinates If Sqrt (theXv*theXv + theYv*theYv + theZv*theZv) <= Resolution from gp where theXv, theYv ,theZv are the new coordinates it is not possible to construct the direction and the method raises the exception ConstructionError.
        """
        _PyAnyCAD.GDir_swiginit(self, _PyAnyCAD.new_GDir(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        For this unit vector,  assigns the value Xi to: -   the X coordinate if theIndex is 1, or -   the Y coordinate if theIndex is 2, or -   the Z coordinate if theIndex is 3, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if theIndex is not 1, 2, or 3. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   Sqrt(Xv*Xv + Yv*Yv + Zv*Zv), or -   the modulus of the number triple formed by the new value theXi and the two other coordinates of this vector that were not directly modified.

        |

        *Overload 2:*
        For this unit vector,  assigns the values theXv, theYv and theZv to its three coordinates. Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly.
        """
        return _PyAnyCAD.GDir_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this   unit vector."""
        return _PyAnyCAD.GDir_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y coordinate of this   unit vector."""
        return _PyAnyCAD.GDir_SetY(self, theY)

    def SetZ(self, theZ):
        r""" Assigns the given value to the Z  coordinate of this   unit vector."""
        return _PyAnyCAD.GDir_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        r""" Assigns the three coordinates of theCoord to this unit vector."""
        return _PyAnyCAD.GDir_SetXYZ(self, theCoord)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        Returns the coordinate of range theIndex : theIndex = 1 => X is returned Ithendex = 2 => Y is returned theIndex = 3 => Z is returned Exceptions Standard_OutOfRange if theIndex is not 1, 2, or 3.

        |

        *Overload 2:*
        Returns for the  unit vector  its three coordinates theXv, theYv, and theZv.
        """
        return _PyAnyCAD.GDir_Coord(self, *args)

    def X(self):
        r""" Returns the X coordinate for a  unit vector."""
        return _PyAnyCAD.GDir_X(self)

    def Y(self):
        r""" Returns the Y coordinate for a  unit vector."""
        return _PyAnyCAD.GDir_Y(self)

    def Z(self):
        r""" Returns the Z coordinate for a  unit vector."""
        return _PyAnyCAD.GDir_Z(self)

    def XYZ(self):
        r""" for this unit vector, returns  its three coordinates as a number triplea."""
        return _PyAnyCAD.GDir_XYZ(self)

    def IsEqual(self, theOther, theAngularTolerance):
        r""" Returns True if the angle between the two directions is lower or equal to theAngularTolerance."""
        return _PyAnyCAD.GDir_IsEqual(self, theOther, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns True if  the angle between this unit vector and the unit vector theOther is equal to Pi/2 (normal)."""
        return _PyAnyCAD.GDir_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns True if  the angle between this unit vector and the unit vector theOther is equal to  Pi (opposite)."""
        return _PyAnyCAD.GDir_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" Returns true if the angle between this unit vector and the unit vector theOther is equal to 0 or to Pi. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GDir_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angular value in radians between <me> and <theOther>. This value is always positive in 3D space. Returns the angle in the range [0, PI]"""
        return _PyAnyCAD.GDir_Angle(self, theOther)

    def AngleWithRef(self, theOther, theVRef):
        r""" Computes the angular value between <me> and <theOther>. <theVRef> is the direction of reference normal to <me> and <theOther> and its orientation gives the positive sense of rotation. If the cross product <me> ^ <theOther> has the same orientation as <theVRef> the angular value is positive else negative. Returns the angular value in the range -PI and PI (in radians). Raises  DomainError if <me> and <theOther> are not parallel this exception is raised when <theVRef> is in the same plane as <me> and <theOther> The tolerance criterion is Resolution from package gp."""
        return _PyAnyCAD.GDir_AngleWithRef(self, theOther, theVRef)

    def Cross(self, theRight):
        r""" Computes the cross product between two directions Raises the exception ConstructionError if the two directions are parallel because the computed vector cannot be normalized to create a direction."""
        return _PyAnyCAD.GDir_Cross(self, theRight)

    def __ixor__(self, theRight):
        return _PyAnyCAD.GDir___ixor__(self, theRight)

    def Crossed(self, theRight):
        r""" Computes the triple vector product. <me> ^ (V1 ^ V2) Raises the exception ConstructionError if V1 and V2 are parallel or <me> and (V1^V2) are parallel because the computed vector can't be normalized to create a direction."""
        return _PyAnyCAD.GDir_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GDir___xor__(self, theRight)

    def CrossCross(self, theV1, theV2):
        return _PyAnyCAD.GDir_CrossCross(self, theV1, theV2)

    def CrossCrossed(self, theV1, theV2):
        r""" Computes the double vector product this ^ (theV1 ^ theV2). -   CrossCrossed creates a new unit vector. Exceptions Standard_ConstructionError if: -   theV1 and theV2 are parallel, or -   this unit vector and (theV1 ^ theV2) are parallel. This is because, in these conditions, the computed vector is null and cannot be normalized."""
        return _PyAnyCAD.GDir_CrossCrossed(self, theV1, theV2)

    def Dot(self, theOther):
        r""" Computes the scalar product"""
        return _PyAnyCAD.GDir_Dot(self, theOther)

    def __mul__(self, theOther):
        return _PyAnyCAD.GDir___mul__(self, theOther)

    def DotCross(self, theV1, theV2):
        r""" Computes the triple scalar product <me> * (theV1 ^ theV2). Warnings : The computed vector theV1' = theV1 ^ theV2 is not normalized to create a unitary vector. So this method never raises an exception even if theV1 and theV2 are parallel."""
        return _PyAnyCAD.GDir_DotCross(self, theV1, theV2)

    def Reverse(self):
        return _PyAnyCAD.GDir_Reverse(self)

    def Reversed(self):
        r""" Reverses the orientation of a direction geometric transformations Performs the symmetrical transformation of a direction with respect to the direction V which is the center of the  symmetry.]"""
        return _PyAnyCAD.GDir_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GDir___neg__(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GDir_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a direction with respect to the direction theV which is the center of the  symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a direction with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a direction with respect to a plane. The axis placement theA2 locates the plane of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GDir_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GDir_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a direction. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GDir_Rotated(self, theA1, theAng)

    def Transform(self, theT):
        return _PyAnyCAD.GDir_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a direction with a "Trsf" from gp. Warnings : If the scale factor of the "Trsf" theT is negative then the direction <me> is reversed."""
        return _PyAnyCAD.GDir_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GDir

# Register GDir in _PyAnyCAD:
_PyAnyCAD.GDir_swigregister(GDir)
class GVec(object):
    r""" Defines a non-persistent vector in 3D space."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a zero vector.

        |

        *Overload 2:*
        Creates a unitary vector from a direction theV.

        |

        *Overload 3:*
        Creates a vector with a triplet of coordinates.

        |

        *Overload 4:*
        Creates a point with its three cartesian coordinates.

        |

        *Overload 5:*
        Creates a vector from two points. The length of the vector is the distance between theP1 and theP2
        """
        _PyAnyCAD.GVec_swiginit(self, _PyAnyCAD.new_GVec(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        Changes the coordinate of range theIndex theIndex = 1 => X is modified theIndex = 2 => Y is modified theIndex = 3 => Z is modified Raised if theIndex != {1, 2, 3}.

        |

        *Overload 2:*
        For this vector, assigns -   the values theXv, theYv and theZv to its three coordinates.
        """
        return _PyAnyCAD.GVec_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this vector."""
        return _PyAnyCAD.GVec_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the X coordinate of this vector."""
        return _PyAnyCAD.GVec_SetY(self, theY)

    def SetZ(self, theZ):
        r""" Assigns the given value to the X coordinate of this vector."""
        return _PyAnyCAD.GVec_SetZ(self, theZ)

    def SetXYZ(self, theCoord):
        r""" Assigns the three coordinates of theCoord to this vector."""
        return _PyAnyCAD.GVec_SetXYZ(self, theCoord)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        Returns the coordinate of range theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned theIndex = 3 => Z is returned Raised if theIndex != {1, 2, 3}.

        |

        *Overload 2:*
        For this vector returns its three coordinates theXv, theYv, and theZv inline
        """
        return _PyAnyCAD.GVec_Coord(self, *args)

    def X(self):
        r""" For this vector, returns its X coordinate."""
        return _PyAnyCAD.GVec_X(self)

    def Y(self):
        r""" For this vector, returns its Y coordinate."""
        return _PyAnyCAD.GVec_Y(self)

    def Z(self):
        r""" For this vector, returns its Z  coordinate."""
        return _PyAnyCAD.GVec_Z(self)

    def XYZ(self):
        r""" For this vector, returns -   its three coordinates as a number triple"""
        return _PyAnyCAD.GVec_XYZ(self)

    def IsEqual(self, theOther, theLinearTolerance, theAngularTolerance):
        r""" Returns True if the two vectors have the same magnitude value and the same direction. The precision values are theLinearTolerance for the magnitude and theAngularTolerance for the direction."""
        return _PyAnyCAD.GVec_IsEqual(self, theOther, theLinearTolerance, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns True if abs(<me>.Angle(theOther) - PI/2.) <= theAngularTolerance Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or theOther.Magnitude() <= Resolution from gp"""
        return _PyAnyCAD.GVec_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns True if PI - <me>.Angle(theOther) <= theAngularTolerance Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp"""
        return _PyAnyCAD.GVec_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" Returns True if Angle(<me>, theOther) <= theAngularTolerance or PI - Angle(<me>, theOther) <= theAngularTolerance This definition means that two parallel vectors cannot define a plane but two vectors with opposite directions are considered as parallel. Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or Other.Magnitude() <= Resolution from gp"""
        return _PyAnyCAD.GVec_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angular value between <me> and <theOther> Returns the angle value between 0 and PI in radian. Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution from gp or theOther.Magnitude() <= Resolution because the angular value is indefinite if one of the vectors has a null magnitude."""
        return _PyAnyCAD.GVec_Angle(self, theOther)

    def AngleWithRef(self, theOther, theVRef):
        r""" Computes the angle, in radians, between this vector and vector theOther. The result is a value between -Pi and Pi. For this, theVRef defines the positive sense of rotation: the angular value is positive, if the cross product this ^ theOther has the same orientation as theVRef relative to the plane defined by the vectors this and theOther. Otherwise, the angular value is negative. Exceptions gp_VectorWithNullMagnitude if the magnitude of this vector, the vector theOther, or the vector theVRef is less than or equal to gp::Resolution(). Standard_DomainError if this vector, the vector theOther, and the vector theVRef are coplanar, unless this vector and the vector theOther are parallel."""
        return _PyAnyCAD.GVec_AngleWithRef(self, theOther, theVRef)

    def Magnitude(self):
        r""" Computes the magnitude of this vector."""
        return _PyAnyCAD.GVec_Magnitude(self)

    def SquareMagnitude(self):
        r""" Computes the square magnitude of this vector."""
        return _PyAnyCAD.GVec_SquareMagnitude(self)

    def Add(self, theOther):
        r""" Adds two vectors"""
        return _PyAnyCAD.GVec_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GVec___iadd__(self, theOther)

    def Added(self, theOther):
        r""" Adds two vectors"""
        return _PyAnyCAD.GVec_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GVec___add__(self, theOther)

    def Subtract(self, theRight):
        r""" Subtracts two vectors"""
        return _PyAnyCAD.GVec_Subtract(self, theRight)

    def __isub__(self, theRight):
        return _PyAnyCAD.GVec___isub__(self, theRight)

    def Subtracted(self, theRight):
        r""" Subtracts two vectors"""
        return _PyAnyCAD.GVec_Subtracted(self, theRight)

    def __sub__(self, theRight):
        return _PyAnyCAD.GVec___sub__(self, theRight)

    def Multiply(self, theScalar):
        r""" Multiplies a vector by a scalar"""
        return _PyAnyCAD.GVec_Multiply(self, theScalar)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GVec___imul__(self, theScalar)

    def Multiplied(self, theScalar):
        r""" Multiplies a vector by a scalar"""
        return _PyAnyCAD.GVec_Multiplied(self, theScalar)

    def Divide(self, theScalar):
        r""" Divides a vector by a scalar"""
        return _PyAnyCAD.GVec_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GVec___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" Divides a vector by a scalar"""
        return _PyAnyCAD.GVec_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GVec___truediv__(self, *args)
    __div__ = __truediv__



    def Cross(self, theRight):
        r""" computes the cross product between two vectors"""
        return _PyAnyCAD.GVec_Cross(self, theRight)

    def __ixor__(self, theRight):
        return _PyAnyCAD.GVec___ixor__(self, theRight)

    def Crossed(self, theRight):
        r""" computes the cross product between two vectors"""
        return _PyAnyCAD.GVec_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GVec___xor__(self, theRight)

    def CrossMagnitude(self, theRight):
        r""" Computes the magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||"""
        return _PyAnyCAD.GVec_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        r""" Computes the square magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||**2"""
        return _PyAnyCAD.GVec_CrossSquareMagnitude(self, theRight)

    def CrossCross(self, theV1, theV2):
        r""" Computes the triple vector product. <me> ^= (theV1 ^ theV2)"""
        return _PyAnyCAD.GVec_CrossCross(self, theV1, theV2)

    def CrossCrossed(self, theV1, theV2):
        r""" Computes the triple vector product. <me> ^ (theV1 ^ theV2)"""
        return _PyAnyCAD.GVec_CrossCrossed(self, theV1, theV2)

    def Dot(self, theOther):
        r""" computes the scalar product"""
        return _PyAnyCAD.GVec_Dot(self, theOther)

    def __mul__(self, *args):
        return _PyAnyCAD.GVec___mul__(self, *args)

    def DotCross(self, theV1, theV2):
        r""" Computes the triple scalar product <me> * (theV1 ^ theV2)."""
        return _PyAnyCAD.GVec_DotCross(self, theV1, theV2)

    def Normalize(self):
        r""" normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from gp."""
        return _PyAnyCAD.GVec_Normalize(self)

    def Normalized(self):
        r""" normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from gp."""
        return _PyAnyCAD.GVec_Normalized(self)

    def Reverse(self):
        r""" Reverses the direction of a vector"""
        return _PyAnyCAD.GVec_Reverse(self)

    def Reversed(self):
        r""" Reverses the direction of a vector"""
        return _PyAnyCAD.GVec_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GVec___neg__(self)

    def SetLinearForm(self, *args):
        r"""
        *Overload 1:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2 + theA3 * theV3 + theV4

        |

        *Overload 2:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2 + theA3 * theV3

        |

        *Overload 3:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2 + theV3

        |

        *Overload 4:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2

        |

        *Overload 5:*
        <me> is set to the following linear form : theA1 * theV1 + theV2

        |

        *Overload 6:*
        <me> is set to the following linear form : theV1 + theV2
        """
        return _PyAnyCAD.GVec_SetLinearForm(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GVec_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a vector with respect to the vector theV which is the center of the  symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a vector with respect to a plane. The axis placement theA2 locates the plane of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GVec_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GVec_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a vector. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GVec_Rotated(self, theA1, theAng)

    def Scale(self, theS):
        return _PyAnyCAD.GVec_Scale(self, theS)

    def Scaled(self, theS):
        r""" Scales a vector. theS is the scaling value."""
        return _PyAnyCAD.GVec_Scaled(self, theS)

    def Transform(self, theT):
        r""" Transforms a vector with the transformation theT."""
        return _PyAnyCAD.GVec_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a vector with the transformation theT."""
        return _PyAnyCAD.GVec_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GVec

# Register GVec in _PyAnyCAD:
_PyAnyCAD.GVec_swigregister(GVec)
class GQuaternion(object):
    r""" Represents operation of rotation in 3d space as quaternion and implements operations with rotations basing on quaternion mathematics. In addition, provides methods for conversion to and from other representations of rotation (3*3 matrix, vector and angle, Euler angles)"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an identity quaternion

        |

        *Overload 2:*
        Creates quaternion directly from component values

        |

        *Overload 3:*
        Creates quaternion representing shortest-arc rotation operator producing vector theVecTo from vector theVecFrom.

        |

        *Overload 4:*
        Creates quaternion representing shortest-arc rotation operator producing vector theVecTo from vector theVecFrom. Additional vector theHelpCrossVec defines preferred direction for rotation and is used when theVecTo and theVecFrom are directed oppositely.

        |

        *Overload 5:*
        Creates quaternion representing rotation on angle theAngle around vector theAxis

        |

        *Overload 6:*
        Creates quaternion from rotation matrix 3*3 (which should be orthonormal skew-symmetric matrix)
        """
        _PyAnyCAD.GQuaternion_swiginit(self, _PyAnyCAD.new_GQuaternion(*args))

    def IsEqual(self, theOther):
        r""" Simple equal test without precision"""
        return _PyAnyCAD.GQuaternion_IsEqual(self, theOther)

    def SetRotation(self, *args):
        r"""
        *Overload 1:*
        Sets quaternion to shortest-arc rotation producing vector theVecTo from vector theVecFrom. If vectors theVecFrom and theVecTo are opposite then rotation axis is computed as theVecFrom ^ (1,0,0) or theVecFrom ^ (0,0,1).

        |

        *Overload 2:*
        Sets quaternion to shortest-arc rotation producing vector theVecTo from vector theVecFrom. If vectors theVecFrom and theVecTo are opposite then rotation axis is computed as theVecFrom ^ theHelpCrossVec.
        """
        return _PyAnyCAD.GQuaternion_SetRotation(self, *args)

    def SetVectorAndAngle(self, theAxis, theAngle):
        r""" Create a unit quaternion from Axis+Angle representation"""
        return _PyAnyCAD.GQuaternion_SetVectorAndAngle(self, theAxis, theAngle)

    def GetVectorAndAngle(self, theAxis, theAngle):
        r""" Convert a quaternion to Axis+Angle representation, preserve the axis direction and angle from -PI to +PI"""
        return _PyAnyCAD.GQuaternion_GetVectorAndAngle(self, theAxis, theAngle)

    def SetMatrix(self, theMat):
        r""" Create a unit quaternion by rotation matrix matrix must contain only rotation (not scale or shear) For numerical stability we find first the greatest component of quaternion and than search others from this one"""
        return _PyAnyCAD.GQuaternion_SetMatrix(self, theMat)

    def GetMatrix(self):
        r""" Returns rotation operation as 3*3 matrix"""
        return _PyAnyCAD.GQuaternion_GetMatrix(self)

    def SetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma):
        r""" Create a unit quaternion representing rotation defined by generalized Euler angles"""
        return _PyAnyCAD.GQuaternion_SetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma)

    def GetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma):
        r""" Returns Euler angles describing current rotation"""
        return _PyAnyCAD.GQuaternion_GetEulerAngles(self, theOrder, theAlpha, theBeta, theGamma)

    def Set(self, *args):
        return _PyAnyCAD.GQuaternion_Set(self, *args)

    def X(self):
        return _PyAnyCAD.GQuaternion_X(self)

    def Y(self):
        return _PyAnyCAD.GQuaternion_Y(self)

    def Z(self):
        return _PyAnyCAD.GQuaternion_Z(self)

    def W(self):
        return _PyAnyCAD.GQuaternion_W(self)

    def SetIdent(self):
        r""" Make identity quaternion (zero-rotation)"""
        return _PyAnyCAD.GQuaternion_SetIdent(self)

    def Reverse(self):
        r""" Reverse direction of rotation (conjugate quaternion)"""
        return _PyAnyCAD.GQuaternion_Reverse(self)

    def Reversed(self):
        r""" Return rotation with reversed direction (conjugated quaternion)"""
        return _PyAnyCAD.GQuaternion_Reversed(self)

    def Invert(self):
        r""" Inverts quaternion (both rotation direction and norm)"""
        return _PyAnyCAD.GQuaternion_Invert(self)

    def Inverted(self):
        r""" Return inversed quaternion q^-1"""
        return _PyAnyCAD.GQuaternion_Inverted(self)

    def SquareNorm(self):
        r""" Returns square norm of quaternion"""
        return _PyAnyCAD.GQuaternion_SquareNorm(self)

    def Norm(self):
        r""" Returns norm of quaternion"""
        return _PyAnyCAD.GQuaternion_Norm(self)

    def Scale(self, theScale):
        r""" Scale all components by quaternion by theScale; note that rotation is not changed by this operation (except 0-scaling)"""
        return _PyAnyCAD.GQuaternion_Scale(self, theScale)

    def Scaled(self, theScale):
        r""" Returns scaled quaternion"""
        return _PyAnyCAD.GQuaternion_Scaled(self, theScale)

    def StabilizeLength(self):
        r""" Stabilize quaternion length within 1 - 1/4. This operation is a lot faster than normalization and preserve length goes to 0 or infinity"""
        return _PyAnyCAD.GQuaternion_StabilizeLength(self)

    def Normalize(self):
        r""" Scale quaternion that its norm goes to 1. The appearing of 0 magnitude or near is a error, so we can be sure that can divide by magnitude"""
        return _PyAnyCAD.GQuaternion_Normalize(self)

    def Normalized(self):
        r""" Returns quaternion scaled so that its norm goes to 1."""
        return _PyAnyCAD.GQuaternion_Normalized(self)

    def Negated(self):
        r""" Returns quaternion with all components negated. Note that this operation does not affect neither rotation operator defined by quaternion nor its norm."""
        return _PyAnyCAD.GQuaternion_Negated(self)

    def __neg__(self):
        return _PyAnyCAD.GQuaternion___neg__(self)

    def Added(self, theOther):
        r''' Makes sum of quaternion components; result is "rotations mix"'''
        return _PyAnyCAD.GQuaternion_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GQuaternion___add__(self, theOther)

    def Subtracted(self, theOther):
        r''' Makes difference of quaternion components; result is "rotations mix"'''
        return _PyAnyCAD.GQuaternion_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GQuaternion___sub__(self, theOther)

    def Multiplied(self, theOther):
        r"""
        Multiply function - work the same as Matrices multiplying... code-block:: c++

           qq' = (cross(v,v') + wv' + w'v, ww' - dot(v,v')) Result is rotation combination: q' than q (here q=this, q'=theQ). Notices that:.. code-block:: c++

           qq' != q'q; qq^-1 = q;
        """
        return _PyAnyCAD.GQuaternion_Multiplied(self, theOther)

    def Add(self, theOther):
        r''' Adds components of other quaternion; result is "rotations mix"'''
        return _PyAnyCAD.GQuaternion_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GQuaternion___iadd__(self, theOther)

    def Subtract(self, theOther):
        r''' Subtracts components of other quaternion; result is "rotations mix"'''
        return _PyAnyCAD.GQuaternion_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GQuaternion___isub__(self, theOther)

    def __imul__(self, *args):
        return _PyAnyCAD.GQuaternion___imul__(self, *args)

    def Dot(self, theOther):
        r""" Computes inner product / scalar product / Dot"""
        return _PyAnyCAD.GQuaternion_Dot(self, theOther)

    def GetRotationAngle(self):
        r""" Return rotation angle from -PI to PI"""
        return _PyAnyCAD.GQuaternion_GetRotationAngle(self)

    def Multiply(self, *args):
        r"""
        *Overload 1:*
        Adds rotation by multiplication

        |

        *Overload 2:*
        Rotates vector by quaternion as rotation operator
        """
        return _PyAnyCAD.GQuaternion_Multiply(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GQuaternion___mul__(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GQuaternion

# Register GQuaternion in _PyAnyCAD:
_PyAnyCAD.GQuaternion_swigregister(GQuaternion)
gp_EulerAngles = _PyAnyCAD.gp_EulerAngles
r""" Classic Euler angles, alias to Intrinsic_ZXZ"""
gp_YawPitchRoll = _PyAnyCAD.gp_YawPitchRoll
r""" Yaw Pitch Roll (or nautical) angles, alias to Intrinsic_ZYX"""
gp_Extrinsic_XYZ = _PyAnyCAD.gp_Extrinsic_XYZ
gp_Extrinsic_XZY = _PyAnyCAD.gp_Extrinsic_XZY
gp_Extrinsic_YZX = _PyAnyCAD.gp_Extrinsic_YZX
gp_Extrinsic_YXZ = _PyAnyCAD.gp_Extrinsic_YXZ
gp_Extrinsic_ZXY = _PyAnyCAD.gp_Extrinsic_ZXY
gp_Extrinsic_ZYX = _PyAnyCAD.gp_Extrinsic_ZYX
gp_Intrinsic_XYZ = _PyAnyCAD.gp_Intrinsic_XYZ
gp_Intrinsic_XZY = _PyAnyCAD.gp_Intrinsic_XZY
gp_Intrinsic_YZX = _PyAnyCAD.gp_Intrinsic_YZX
gp_Intrinsic_YXZ = _PyAnyCAD.gp_Intrinsic_YXZ
gp_Intrinsic_ZXY = _PyAnyCAD.gp_Intrinsic_ZXY
gp_Intrinsic_ZYX = _PyAnyCAD.gp_Intrinsic_ZYX
gp_Extrinsic_XYX = _PyAnyCAD.gp_Extrinsic_XYX
gp_Extrinsic_XZX = _PyAnyCAD.gp_Extrinsic_XZX
gp_Extrinsic_YZY = _PyAnyCAD.gp_Extrinsic_YZY
gp_Extrinsic_YXY = _PyAnyCAD.gp_Extrinsic_YXY
gp_Extrinsic_ZYZ = _PyAnyCAD.gp_Extrinsic_ZYZ
gp_Extrinsic_ZXZ = _PyAnyCAD.gp_Extrinsic_ZXZ
gp_Intrinsic_XYX = _PyAnyCAD.gp_Intrinsic_XYX
gp_Intrinsic_XZX = _PyAnyCAD.gp_Intrinsic_XZX
gp_Intrinsic_YZY = _PyAnyCAD.gp_Intrinsic_YZY
gp_Intrinsic_YXY = _PyAnyCAD.gp_Intrinsic_YXY
gp_Intrinsic_ZXZ = _PyAnyCAD.gp_Intrinsic_ZXZ
gp_Intrinsic_ZYZ = _PyAnyCAD.gp_Intrinsic_ZYZ
class GPln(object):
    r""" Describes a plane. A plane is positioned in space with a coordinate system (a gp_Ax3 object), such that the plane is defined by the origin, "X Direction" and "Y Direction" of this coordinate system, which is the "local coordinate system" of the plane. The "main Direction" of the coordinate system is a vector normal to the plane. It gives the plane an implicit orientation such that the plane is said to be "direct", if the coordinate system is right-handed, or "indirect" in the other case. Note: when a gp_Pln plane is converted into a Geom_Plane plane, some implicit properties of its local coordinate system are used explicitly: -   its origin defines the origin of the two parameters of the planar surface, -   its implicit orientation is also that of the Geom_Plane. See Also gce_MakePln which provides functions for more complex plane constructions Geom_Plane which provides additional functions for constructing planes and works, in particular, with the parametric equations of planes"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a plane coincident with OXY plane of the reference coordinate system.

        |

        *Overload 2:*
        The coordinate system of the plane is defined with the axis placement theA3. The "Direction" of theA3 defines the normal to the plane. The "Location" of theA3 defines the location (origin) of the plane. The "XDirection" and "YDirection" of theA3 define the "XAxis" and the "YAxis" of the plane used to parametrize the plane.

        |

        *Overload 3:*
        Creates a plane with the  "Location" point <theP> and the normal direction <theV>.

        |

        *Overload 4:*
        Creates a plane from its cartesian equation :.. code-block:: c++

           theA * X + theB * Y + theC * Z + theD = 0.0 Raises ConstructionError if Sqrt (theA*theA + theB*theB + theC*theC) <= Resolution from gp.
        """
        _PyAnyCAD.GPln_swiginit(self, _PyAnyCAD.new_GPln(*args))

    def Coefficients(self, theA, theB, theC, theD):
        r"""
        Returns the coefficients of the plane's cartesian equation :.. code-block:: c++

           theA * X + theB * Y + theC * Z + theD = 0.
        """
        return _PyAnyCAD.GPln_Coefficients(self, theA, theB, theC, theD)

    def SetAxis(self, theA1):
        r""" Modifies this plane, by redefining its local coordinate system so that -   its origin and "main Direction" become those of the axis theA1 (the "X Direction" and "Y Direction" are then recomputed). Raises ConstructionError if the theA1 is parallel to the "XAxis" of the plane."""
        return _PyAnyCAD.GPln_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        r""" Changes the origin of the plane."""
        return _PyAnyCAD.GPln_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        r""" Changes the local coordinate system of the plane."""
        return _PyAnyCAD.GPln_SetPosition(self, theA3)

    def UReverse(self):
        r""" Reverses the   U   parametrization of   the  plane reversing the XAxis."""
        return _PyAnyCAD.GPln_UReverse(self)

    def VReverse(self):
        r""" Reverses the   V   parametrization of   the  plane reversing the YAxis."""
        return _PyAnyCAD.GPln_VReverse(self)

    def Direct(self):
        r""" returns true if the Ax3 is right handed."""
        return _PyAnyCAD.GPln_Direct(self)

    def Axis(self):
        r""" Returns the plane's normal Axis."""
        return _PyAnyCAD.GPln_Axis(self)

    def Location(self):
        r""" Returns the plane's location (origin)."""
        return _PyAnyCAD.GPln_Location(self)

    def Position(self):
        r""" Returns the local coordinate system of the plane ."""
        return _PyAnyCAD.GPln_Position(self)

    def Distance(self, *args):
        r"""
        *Overload 1:*
        Computes the distance between <me> and the point <theP>.

        |

        *Overload 2:*
        Computes the distance between <me> and the line <theL>.

        |

        *Overload 3:*
        Computes the distance between two planes.
        """
        return _PyAnyCAD.GPln_Distance(self, *args)

    def SquareDistance(self, *args):
        r"""
        *Overload 1:*
        Computes the square distance between <me> and the point <theP>.

        |

        *Overload 2:*
        Computes the square distance between <me> and the line <theL>.

        |

        *Overload 3:*
        Computes the square distance between two planes.
        """
        return _PyAnyCAD.GPln_SquareDistance(self, *args)

    def XAxis(self):
        r""" Returns the X axis of the plane."""
        return _PyAnyCAD.GPln_XAxis(self)

    def YAxis(self):
        r""" Returns the Y axis  of the plane."""
        return _PyAnyCAD.GPln_YAxis(self)

    def Contains(self, *args):
        r"""
        *Overload 1:*
        Returns true if this plane contains the point theP. This means that -   the distance between point theP and this plane is less than or equal to theLinearTolerance, or -   line L is normal to the "main Axis" of the local coordinate system of this plane, within the tolerance AngularTolerance, and the distance between the origin of line L and this plane is less than or equal to theLinearTolerance.

        |

        *Overload 2:*
        Returns true if this plane contains the line theL. This means that -   the distance between point P and this plane is less than or equal to LinearTolerance, or -   line theL is normal to the "main Axis" of the local coordinate system of this plane, within the tolerance theAngularTolerance, and the distance between the origin of line theL and this plane is less than or equal to theLinearTolerance.
        """
        return _PyAnyCAD.GPln_Contains(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GPln_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a plane with respect to the point <theP> which is the center of the symmetry Warnings : The normal direction to the plane is not changed. The "XAxis" and the "YAxis" are reversed.

        |

        *Overload 2:*
        Performs   the symmetrical transformation  of a plane with respect to an axis placement  which is the axis of  the symmetry.  The  transformation is performed on the "Location" point, on  the "XAxis"  and the "YAxis".    The resulting normal  direction  is  the cross product between the "XDirection" and the "YDirection" after transformation if  the  initial plane was right  handed,  else  it is the opposite.

        |

        *Overload 3:*
        Performs the  symmetrical transformation  of  a plane    with respect to    an axis  placement.   The axis placement  <A2> locates the plane  of  the symmetry.   The transformation is performed  on  the  "Location" point, on the  "XAxis" and  the    "YAxis".  The resulting    normal direction is the cross  product between   the "XDirection" and the "YDirection"  after  transformation if the initial plane was right handed, else it is the opposite.
        """
        return _PyAnyCAD.GPln_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GPln_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" rotates a plane. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GPln_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GPln_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a plane. theS is the scaling value."""
        return _PyAnyCAD.GPln_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GPln_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a plane with the transformation theT from class Trsf. The transformation is performed on the "Location" point, on the "XAxis" and the "YAxis". The resulting normal direction is the cross product between the "XDirection" and the "YDirection" after transformation."""
        return _PyAnyCAD.GPln_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GPln_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a plane in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a plane from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GPln_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPln

# Register GPln in _PyAnyCAD:
_PyAnyCAD.GPln_swigregister(GPln)
class GLin(object):
    r""" Describes a line in 3D space. A line is positioned in space with an axis (a gp_Ax1 object) which gives it an origin and a unit vector. A line and an axis are similar objects, thus, we can convert one into the other. A line provides direct access to the majority of the edit and query functions available on its positioning axis. In addition, however, a line has specific functions for computing distances and positions. See Also gce_MakeLin which provides functions for more complex line constructions Geom_Line which provides additional functions for constructing lines and works, in particular, with the parametric equations of lines"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a Line corresponding to Z axis of the reference coordinate system.

        |

        *Overload 2:*
        Creates a line defined by axis theA1.

        |

        *Overload 3:*
        Creates a line passing through point theP and parallel to vector theV (theP and theV are, respectively, the origin and the unit vector of the positioning axis of the line).
        """
        _PyAnyCAD.GLin_swiginit(self, _PyAnyCAD.new_GLin(*args))

    def Reverse(self):
        return _PyAnyCAD.GLin_Reverse(self)

    def Reversed(self):
        r""" Reverses the direction of the line. Note: -   Reverse assigns the result to this line, while -   Reversed creates a new one."""
        return _PyAnyCAD.GLin_Reversed(self)

    def SetDirection(self, theV):
        r""" Changes the direction of the line."""
        return _PyAnyCAD.GLin_SetDirection(self, theV)

    def SetLocation(self, theP):
        r""" Changes the location point (origin) of the line."""
        return _PyAnyCAD.GLin_SetLocation(self, theP)

    def SetPosition(self, theA1):
        r""" Complete redefinition of the line. The "Location" point of <theA1> is the origin of the line. The "Direction" of <theA1> is  the direction of the line."""
        return _PyAnyCAD.GLin_SetPosition(self, theA1)

    def Direction(self):
        r""" Returns the direction of the line."""
        return _PyAnyCAD.GLin_Direction(self)

    def Location(self):
        r""" Returns the location point (origin) of the line."""
        return _PyAnyCAD.GLin_Location(self)

    def Position(self):
        r""" Returns the axis placement one axis with the same location and direction as <me>."""
        return _PyAnyCAD.GLin_Position(self)

    def Angle(self, theOther):
        r""" Computes the angle between two lines in radians."""
        return _PyAnyCAD.GLin_Angle(self, theOther)

    def Contains(self, theP, theLinearTolerance):
        r""" Returns true if this line contains the point theP, that is, if the distance between point theP and this line is less than or equal to theLinearTolerance.."""
        return _PyAnyCAD.GLin_Contains(self, theP, theLinearTolerance)

    def Distance(self, *args):
        r"""
        *Overload 1:*
        Computes the distance between <me> and the point theP.

        |

        *Overload 2:*
        Computes the distance between two lines.
        """
        return _PyAnyCAD.GLin_Distance(self, *args)

    def SquareDistance(self, *args):
        r"""
        *Overload 1:*
        Computes the square distance between <me> and the point theP.

        |

        *Overload 2:*
        Computes the square distance between two lines.
        """
        return _PyAnyCAD.GLin_SquareDistance(self, *args)

    def Normal(self, theP):
        r""" Computes the line normal to the direction of <me>, passing through the point theP.  Raises ConstructionError if the distance between <me> and the point theP is lower or equal to Resolution from gp because there is an infinity of solutions in 3D space."""
        return _PyAnyCAD.GLin_Normal(self, theP)

    def Mirror(self, *args):
        return _PyAnyCAD.GLin_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a line with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a line with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a line with respect to a plane. The axis placement  <theA2> locates the plane of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GLin_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GLin_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a line. A1 is the axis of the rotation. Ang is the angular value of the rotation in radians."""
        return _PyAnyCAD.GLin_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GLin_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a line. theS is the scaling value. The "Location" point (origin) of the line is modified. The "Direction" is reversed if the scale is negative."""
        return _PyAnyCAD.GLin_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GLin_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a line with the transformation theT from class Trsf."""
        return _PyAnyCAD.GLin_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GLin_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a line in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a line from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GLin_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GLin

# Register GLin in _PyAnyCAD:
_PyAnyCAD.GLin_swigregister(GLin)
class GDir2d(object):
    r""" Describes a unit vector in the plane (2D space). This unit vector is also called "Direction". See Also gce_MakeDir2d which provides functions for more complex unit vector constructions Geom2d_Direction which provides additional functions for constructing unit vectors and works, in particular, with the parametric equations of unit vectors"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a direction corresponding to X axis.

        |

        *Overload 2:*
        Normalizes the vector theV and creates a Direction. Raises ConstructionError if theV.Magnitude() <= Resolution from gp.

        |

        *Overload 3:*
        Creates a Direction from a doublet of coordinates. Raises ConstructionError if theCoord.Modulus() <= Resolution from gp.

        |

        *Overload 4:*
        Creates a Direction with its 2 cartesian coordinates. Raises ConstructionError if Sqrt(theXv*theXv + theYv*theYv) <= Resolution from gp.
        """
        _PyAnyCAD.GDir2d_swiginit(self, _PyAnyCAD.new_GDir2d(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        For this unit vector, assigns: the value theXi to: -   the X coordinate if theIndex is 1, or -   the Y coordinate if theIndex is 2, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if theIndex is not 1 or 2. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   Sqrt(theXv*theXv + theYv*theYv), or -   the modulus of the number pair formed by the new value theXi and the other coordinate of this vector that was not directly modified. Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this unit vector, assigns: -   the values theXv and theYv to its two coordinates, Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_OutOfRange if theIndex is not 1 or 2. Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   Sqrt(theXv*theXv + theYv*theYv), or -   the modulus of the number pair formed by the new value Xi and the other coordinate of this vector that was not directly modified. Raises OutOfRange if theIndex != {1, 2}.
        """
        return _PyAnyCAD.GDir2d_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this unit   vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   the modulus of Coord, or -   the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified."""
        return _PyAnyCAD.GDir2d_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns  the given value to the Y coordinate of this unit   vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   the modulus of Coord, or -   the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified."""
        return _PyAnyCAD.GDir2d_SetY(self, theY)

    def SetXY(self, theCoord):
        r""" Assigns: -   the two coordinates of theCoord to this unit vector, and then normalizes it. Warning Remember that all the coordinates of a unit vector are implicitly modified when any single one is changed directly. Exceptions Standard_ConstructionError if either of the following is less than or equal to gp::Resolution(): -   the modulus of theCoord, or -   the modulus of the number pair formed from the new X or Y coordinate and the other coordinate of this vector that was not directly modified."""
        return _PyAnyCAD.GDir2d_SetXY(self, theCoord)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        For this unit vector returns the coordinate of range theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this unit vector returns its two coordinates theXv and theYv. Raises OutOfRange if theIndex != {1, 2}.
        """
        return _PyAnyCAD.GDir2d_Coord(self, *args)

    def X(self):
        r""" For this unit vector, returns its X coordinate."""
        return _PyAnyCAD.GDir2d_X(self)

    def Y(self):
        r""" For this unit vector, returns its Y coordinate."""
        return _PyAnyCAD.GDir2d_Y(self)

    def XY(self):
        r""" For this unit vector, returns its two coordinates as a number pair. Comparison between Directions The precision value is an input data."""
        return _PyAnyCAD.GDir2d_XY(self)

    def IsEqual(self, theOther, theAngularTolerance):
        r""" Returns True if the two vectors have the same direction i.e. the angle between this unit vector and the unit vector theOther is less than or equal to theAngularTolerance."""
        return _PyAnyCAD.GDir2d_IsEqual(self, theOther, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns True if the angle between this unit vector and the unit vector theOther is equal to Pi/2 or -Pi/2 (normal) i.e. Abs(Abs(<me>.Angle(theOther)) - PI/2.) <= theAngularTolerance"""
        return _PyAnyCAD.GDir2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns True if the angle between this unit vector and the unit vector theOther is equal to Pi or -Pi (opposite). i.e.  PI - Abs(<me>.Angle(theOther)) <= theAngularTolerance"""
        return _PyAnyCAD.GDir2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" returns true if the angle between this unit vector and unit vector theOther is equal to 0, Pi or -Pi. i.e.  Abs(Angle(<me>, theOther)) <= theAngularTolerance or PI - Abs(Angle(<me>, theOther)) <= theAngularTolerance"""
        return _PyAnyCAD.GDir2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angular value in radians between <me> and <theOther>. Returns the angle in the range [-PI, PI]."""
        return _PyAnyCAD.GDir2d_Angle(self, theOther)

    def Crossed(self, theRight):
        r""" Computes the cross product between two directions."""
        return _PyAnyCAD.GDir2d_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GDir2d___xor__(self, theRight)

    def Dot(self, theOther):
        r""" Computes the scalar product"""
        return _PyAnyCAD.GDir2d_Dot(self, theOther)

    def __mul__(self, theOther):
        return _PyAnyCAD.GDir2d___mul__(self, theOther)

    def Reverse(self):
        return _PyAnyCAD.GDir2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the orientation of a direction"""
        return _PyAnyCAD.GDir2d_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GDir2d___neg__(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GDir2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a direction with respect to the direction theV which is the center of the  symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a direction with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GDir2d_Mirrored(self, *args)

    def Rotate(self, Ang):
        return _PyAnyCAD.GDir2d_Rotate(self, Ang)

    def Rotated(self, theAng):
        r""" Rotates a direction.  theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GDir2d_Rotated(self, theAng)

    def Transform(self, theT):
        return _PyAnyCAD.GDir2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a direction with the "Trsf" theT. Warnings : If the scale factor of the "Trsf" theT is negative then the direction <me> is reversed."""
        return _PyAnyCAD.GDir2d_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GDir2d

# Register GDir2d in _PyAnyCAD:
_PyAnyCAD.GDir2d_swigregister(GDir2d)
class GPnt2d(object):
    r""" Defines  a non-persistent 2D cartesian point."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a point with zero coordinates.

        |

        *Overload 2:*
        Creates a point with a doublet of coordinates.

        |

        *Overload 3:*
        Creates a  point with its 2 cartesian's coordinates : theXp, theYp.
        """
        _PyAnyCAD.GPnt2d_swiginit(self, _PyAnyCAD.new_GPnt2d(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        Assigns the value Xi to the coordinate that corresponds to theIndex: theIndex = 1 => X is modified theIndex = 2 => Y is modified Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this point, assigns the values theXp and theYp to its two coordinates
        """
        return _PyAnyCAD.GPnt2d_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X  coordinate of this point."""
        return _PyAnyCAD.GPnt2d_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y  coordinate of this point."""
        return _PyAnyCAD.GPnt2d_SetY(self, theY)

    def SetXY(self, theCoord):
        r""" Assigns the two coordinates of Coord to this point."""
        return _PyAnyCAD.GPnt2d_SetXY(self, theCoord)

    def X(self):
        r""" For this point, returns its X  coordinate."""
        return _PyAnyCAD.GPnt2d_X(self)

    def Y(self):
        r""" For this point, returns its Y coordinate."""
        return _PyAnyCAD.GPnt2d_Y(self)

    def XY(self):
        r""" For this point, returns its two coordinates as a number pair."""
        return _PyAnyCAD.GPnt2d_XY(self)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        Returns the coordinate of range theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this point returns its two coordinates as a number pair.

        |

        *Overload 3:*
        For this point, returns its two coordinates as a number pair.
        """
        return _PyAnyCAD.GPnt2d_Coord(self, *args)

    def ChangeCoord(self):
        r""" Returns the coordinates of this point. Note: This syntax allows direct modification of the returned value."""
        return _PyAnyCAD.GPnt2d_ChangeCoord(self)

    def IsEqual(self, theOther, theLinearTolerance):
        r""" Comparison Returns True if the distance between the two points is lower or equal to theLinearTolerance."""
        return _PyAnyCAD.GPnt2d_IsEqual(self, theOther, theLinearTolerance)

    def Distance(self, theOther):
        r""" Computes the distance between two points."""
        return _PyAnyCAD.GPnt2d_Distance(self, theOther)

    def SquareDistance(self, theOther):
        r""" Computes the square distance between two points."""
        return _PyAnyCAD.GPnt2d_SquareDistance(self, theOther)

    def Mirror(self, *args):
        return _PyAnyCAD.GPnt2d_Mirror(self, *args)

    def Mirrored(self, *args):
        return _PyAnyCAD.GPnt2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        r""" Rotates a point. theA1 is the axis of the rotation. Ang is the angular value of the rotation in radians."""
        return _PyAnyCAD.GPnt2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GPnt2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        r""" Scales a point. theS is the scaling value."""
        return _PyAnyCAD.GPnt2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        return _PyAnyCAD.GPnt2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        r""" Transforms a point with the transformation theT."""
        return _PyAnyCAD.GPnt2d_Transform(self, theT)

    def Transformed(self, theT):
        return _PyAnyCAD.GPnt2d_Transformed(self, theT)

    def Translate(self, *args):
        r"""
        *Overload 1:*
        Translates a point in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a point from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GPnt2d_Translate(self, *args)

    def Translated(self, *args):
        return _PyAnyCAD.GPnt2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt2d

# Register GPnt2d in _PyAnyCAD:
_PyAnyCAD.GPnt2d_swigregister(GPnt2d)
class GVec2d(object):
    r""" Defines a non-persistent vector in 2D space."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a zero vector.

        |

        *Overload 2:*
        Creates a unitary vector from a direction theV.

        |

        *Overload 3:*
        Creates a vector with a doublet of coordinates.

        |

        *Overload 4:*
        Creates a point with its two Cartesian coordinates.

        |

        *Overload 5:*
        Creates a vector from two points. The length of the vector is the distance between theP1 and theP2
        """
        _PyAnyCAD.GVec2d_swiginit(self, _PyAnyCAD.new_GVec2d(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        Changes the coordinate of range theIndex theIndex = 1 => X is modified theIndex = 2 => Y is modified Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this vector, assigns the values theXv and theYv to its two coordinates
        """
        return _PyAnyCAD.GVec2d_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this vector."""
        return _PyAnyCAD.GVec2d_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y coordinate of this vector."""
        return _PyAnyCAD.GVec2d_SetY(self, theY)

    def SetXY(self, theCoord):
        r""" Assigns the two coordinates of theCoord to this vector."""
        return _PyAnyCAD.GVec2d_SetXY(self, theCoord)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        Returns the coordinate of range theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned Raised if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this vector, returns  its two coordinates theXv and theYv
        """
        return _PyAnyCAD.GVec2d_Coord(self, *args)

    def X(self):
        r""" For this vector, returns its X  coordinate."""
        return _PyAnyCAD.GVec2d_X(self)

    def Y(self):
        r""" For this vector, returns its Y  coordinate."""
        return _PyAnyCAD.GVec2d_Y(self)

    def XY(self):
        r""" For this vector, returns its two coordinates as a number pair"""
        return _PyAnyCAD.GVec2d_XY(self)

    def IsEqual(self, theOther, theLinearTolerance, theAngularTolerance):
        r""" Returns True if the two vectors have the same magnitude value and the same direction. The precision values are theLinearTolerance for the magnitude and theAngularTolerance for the direction."""
        return _PyAnyCAD.GVec2d_IsEqual(self, theOther, theLinearTolerance, theAngularTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns True if abs(Abs(<me>.Angle(theOther)) - PI/2.) <= theAngularTolerance Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or theOther.Magnitude() <= Resolution from gp."""
        return _PyAnyCAD.GVec2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns True if PI - Abs(<me>.Angle(theOther)) <= theAngularTolerance Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or theOther.Magnitude() <= Resolution from gp."""
        return _PyAnyCAD.GVec2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" Returns true if Abs(Angle(<me>, theOther)) <= theAngularTolerance or PI - Abs(Angle(<me>, theOther)) <= theAngularTolerance Two vectors with opposite directions are considered as parallel. Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution or theOther.Magnitude() <= Resolution from gp"""
        return _PyAnyCAD.GVec2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angular value between <me> and <theOther> returns the angle value between -PI and PI in radian. The orientation is from <me> to theOther. The positive sense is the trigonometric sense. Raises VectorWithNullMagnitude if <me>.Magnitude() <= Resolution from gp or theOther.Magnitude() <= Resolution because the angular value is indefinite if one of the vectors has a null magnitude."""
        return _PyAnyCAD.GVec2d_Angle(self, theOther)

    def Magnitude(self):
        r""" Computes the magnitude of this vector."""
        return _PyAnyCAD.GVec2d_Magnitude(self)

    def SquareMagnitude(self):
        r""" Computes the square magnitude of this vector."""
        return _PyAnyCAD.GVec2d_SquareMagnitude(self)

    def Add(self, theOther):
        return _PyAnyCAD.GVec2d_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GVec2d___iadd__(self, theOther)

    def Added(self, theOther):
        r""" Adds two vectors"""
        return _PyAnyCAD.GVec2d_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GVec2d___add__(self, theOther)

    def Crossed(self, theRight):
        r""" Computes the crossing product between two vectors"""
        return _PyAnyCAD.GVec2d_Crossed(self, theRight)

    def __xor__(self, theRight):
        return _PyAnyCAD.GVec2d___xor__(self, theRight)

    def CrossMagnitude(self, theRight):
        r""" Computes the magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||"""
        return _PyAnyCAD.GVec2d_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        r""" Computes the square magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||**2"""
        return _PyAnyCAD.GVec2d_CrossSquareMagnitude(self, theRight)

    def Divide(self, theScalar):
        return _PyAnyCAD.GVec2d_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GVec2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" divides a vector by a scalar"""
        return _PyAnyCAD.GVec2d_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GVec2d___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        r""" Computes the scalar product"""
        return _PyAnyCAD.GVec2d_Dot(self, theOther)

    def GetNormal(self):
        return _PyAnyCAD.GVec2d_GetNormal(self)

    def Multiply(self, theScalar):
        return _PyAnyCAD.GVec2d_Multiply(self, theScalar)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GVec2d___imul__(self, theScalar)

    def Multiplied(self, theScalar):
        r""" Normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from package gp."""
        return _PyAnyCAD.GVec2d_Multiplied(self, theScalar)

    def __mul__(self, *args):
        return _PyAnyCAD.GVec2d___mul__(self, *args)

    def Normalize(self):
        return _PyAnyCAD.GVec2d_Normalize(self)

    def Normalized(self):
        r""" Normalizes a vector Raises an exception if the magnitude of the vector is lower or equal to Resolution from package gp. Reverses the direction of a vector"""
        return _PyAnyCAD.GVec2d_Normalized(self)

    def Reverse(self):
        return _PyAnyCAD.GVec2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the direction of a vector"""
        return _PyAnyCAD.GVec2d_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GVec2d___neg__(self)

    def Subtract(self, theRight):
        r""" Subtracts two vectors"""
        return _PyAnyCAD.GVec2d_Subtract(self, theRight)

    def __isub__(self, theRight):
        return _PyAnyCAD.GVec2d___isub__(self, theRight)

    def Subtracted(self, theRight):
        r""" Subtracts two vectors"""
        return _PyAnyCAD.GVec2d_Subtracted(self, theRight)

    def __sub__(self, theRight):
        return _PyAnyCAD.GVec2d___sub__(self, theRight)

    def SetLinearForm(self, *args):
        r"""
        *Overload 1:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2 + theV3

        |

        *Overload 2:*
        <me> is set to the following linear form : theA1 * theV1 + theA2 * theV2

        |

        *Overload 3:*
        <me> is set to the following linear form : theA1 * theV1 + theV2

        |

        *Overload 4:*
        <me> is set to the following linear form : theV1 + theV2
        """
        return _PyAnyCAD.GVec2d_SetLinearForm(self, *args)

    def Mirror(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a vector with respect to the vector theV which is the center of the  symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GVec2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a vector with respect to the vector theV which is the center of the  symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a vector with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GVec2d_Mirrored(self, *args)

    def Rotate(self, theAng):
        return _PyAnyCAD.GVec2d_Rotate(self, theAng)

    def Rotated(self, theAng):
        r""" Rotates a vector. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GVec2d_Rotated(self, theAng)

    def Scale(self, theS):
        return _PyAnyCAD.GVec2d_Scale(self, theS)

    def Scaled(self, theS):
        r""" Scales a vector. theS is the scaling value."""
        return _PyAnyCAD.GVec2d_Scaled(self, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GVec2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a vector with a Trsf from gp."""
        return _PyAnyCAD.GVec2d_Transformed(self, theT)
    __swig_destroy__ = _PyAnyCAD.delete_GVec2d

# Register GVec2d in _PyAnyCAD:
_PyAnyCAD.GVec2d_swigregister(GVec2d)
class GAx22d(object):
    r""" Describes a coordinate system in a plane (2D space). A coordinate system is defined by: -   its origin (also referred to as its "Location point"), and -   two orthogonal unit vectors, respectively, called the "X Direction" and the "Y Direction". A gp_Ax22d may be right-handed ("direct sense") or left-handed ("inverse" or "indirect sense"). You use a gp_Ax22d to: - describe 2D geometric entities, in particular to position them. The local coordinate system of a geometric entity serves for the same purpose as the STEP function "axis placement two axes", or -   define geometric transformations. Note: we refer to the "X Axis" and "Y Axis" as the axes having: -   the origin of the coordinate system as their origin, and -   the unit vectors "X Direction" and "Y Direction", respectively, as their unit vectors."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an object representing the reference coordinate system (OXY).

        |

        *Overload 2:*
        Creates a coordinate system with origin theP and where: -   theVx is the "X Direction", and -   the "Y Direction" is orthogonal to theVx and oriented so that the cross products theVx^"Y Direction" and theVx^theVy have the same sign. Raises ConstructionError if theVx and theVy are parallel (same or opposite orientation).

        |

        *Overload 3:*
        Creates -   a coordinate system with origin theP and "X Direction" theV, which is: -   right-handed if theIsSense is true (default value), or -   left-handed if theIsSense is false

        |

        *Overload 4:*
        Creates -   a coordinate system with origin theP and "X Direction" theV, which is: -   right-handed if theIsSense is true (default value), or -   left-handed if theIsSense is false

        |

        *Overload 5:*
        Creates -   a coordinate system where its origin is the origin of theA and its "X Direction" is the unit vector of theA, which   is: -   right-handed if theIsSense is true (default value), or -   left-handed if theIsSense is false.

        |

        *Overload 6:*
        Creates -   a coordinate system where its origin is the origin of theA and its "X Direction" is the unit vector of theA, which   is: -   right-handed if theIsSense is true (default value), or -   left-handed if theIsSense is false.
        """
        _PyAnyCAD.GAx22d_swiginit(self, _PyAnyCAD.new_GAx22d(*args))

    def SetAxis(self, theA1):
        r""" Assigns the origin and the two unit vectors of the coordinate system theA1 to this coordinate system."""
        return _PyAnyCAD.GAx22d_SetAxis(self, theA1)

    def SetXAxis(self, theA1):
        r""" Changes the XAxis and YAxis ("Location" point and "Direction") of <me>. The "YDirection" is recomputed in the same sense as before."""
        return _PyAnyCAD.GAx22d_SetXAxis(self, theA1)

    def SetYAxis(self, theA1):
        r""" Changes the XAxis and YAxis ("Location" point and "Direction") of <me>. The "XDirection" is recomputed in the same sense as before."""
        return _PyAnyCAD.GAx22d_SetYAxis(self, theA1)

    def SetLocation(self, theP):
        r""" Changes the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx22d_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        r""" Assigns theVx to the "X Direction"  of this coordinate system. The other unit vector of this coordinate system is recomputed, normal to theVx , without modifying the orientation (right-handed or left-handed) of this coordinate system."""
        return _PyAnyCAD.GAx22d_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        r""" Assignsr theVy to the  "Y Direction" of this coordinate system. The other unit vector of this coordinate system is recomputed, normal to theVy, without modifying the orientation (right-handed or left-handed) of this coordinate system."""
        return _PyAnyCAD.GAx22d_SetYDirection(self, theVy)

    def XAxis(self):
        r""" Returns an axis, for which -   the origin is that of this coordinate system, and -   the unit vector is either the "X Direction"  of this coordinate system. Note: the result is the "X Axis" of this coordinate system."""
        return _PyAnyCAD.GAx22d_XAxis(self)

    def YAxis(self):
        r""" Returns an axis, for which -   the origin is that of this coordinate system, and - the unit vector is either the  "Y Direction" of this coordinate system. Note: the result is the "Y Axis" of this coordinate system."""
        return _PyAnyCAD.GAx22d_YAxis(self)

    def Location(self):
        r""" Returns the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx22d_Location(self)

    def XDirection(self):
        r""" Returns the "XDirection" of <me>."""
        return _PyAnyCAD.GAx22d_XDirection(self)

    def YDirection(self):
        r""" Returns the "YDirection" of <me>."""
        return _PyAnyCAD.GAx22d_YDirection(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx22d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an axis placement with respect to the point theP which is the center of the symmetry. Warnings : The main direction of the axis placement is not changed. The "XDirection" and the "YDirection" are reversed. So the axis placement stay right handed.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry. The transformation is performed on the "Location" point, on the "XDirection" and "YDirection". The resulting main "Direction" is the cross product between the "XDirection" and the "YDirection" after transformation.
        """
        return _PyAnyCAD.GAx22d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GAx22d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates an axis placement. <theA1> is the axis of the rotation . theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GAx22d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx22d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Applies a scaling transformation on the axis placement. The "Location" point of the axisplacement is modified. Warnings : If the scale <theS> is negative : . the main direction of the axis placement is not changed. . The "XDirection" and the "YDirection" are reversed. So the axis placement stay right handed."""
        return _PyAnyCAD.GAx22d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx22d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an axis placement with a Trsf. The "Location" point, the "XDirection" and the "YDirection" are transformed with theT.  The resulting main "Direction" of <me> is the cross product between the "XDirection" and the "YDirection" after transformation."""
        return _PyAnyCAD.GAx22d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx22d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an axis plaxement in the direction of the vector <theV>. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an axis placement from the point <theP1> to the point <theP2>.
        """
        return _PyAnyCAD.GAx22d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx22d

# Register GAx22d in _PyAnyCAD:
_PyAnyCAD.GAx22d_swigregister(GAx22d)
class GXY(object):
    r""" This class describes a cartesian coordinate entity in 2D space {X,Y}. This class is non persistent. This entity used for algebraic calculation. An XY can be transformed with a Trsf2d or a  GTrsf2d from package gp. It is used in vectorial computations or for holding this type of information in data structures."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates XY object with zero coordinates (0,0).

        |

        *Overload 2:*
        a number pair defined by the XY coordinates
        """
        _PyAnyCAD.GXY_swiginit(self, _PyAnyCAD.new_GXY(*args))

    def SetCoord(self, *args):
        r"""
        *Overload 1:*
        modifies the coordinate of range theIndex theIndex = 1 => X is modified theIndex = 2 => Y is modified Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this number pair, assigns the values theX and theY to its coordinates
        """
        return _PyAnyCAD.GXY_SetCoord(self, *args)

    def SetX(self, theX):
        r""" Assigns the given value to the X coordinate of this number pair."""
        return _PyAnyCAD.GXY_SetX(self, theX)

    def SetY(self, theY):
        r""" Assigns the given value to the Y  coordinate of this number pair."""
        return _PyAnyCAD.GXY_SetY(self, theY)

    def Coord(self, *args):
        r"""
        *Overload 1:*
        returns the coordinate of range theIndex : theIndex = 1 => X is returned theIndex = 2 => Y is returned Raises OutOfRange if theIndex != {1, 2}.

        |

        *Overload 2:*
        For this number pair, returns its coordinates X and Y.
        """
        return _PyAnyCAD.GXY_Coord(self, *args)

    def X(self):
        r""" Returns the X coordinate of this number pair."""
        return _PyAnyCAD.GXY_X(self)

    def Y(self):
        r""" Returns the Y coordinate of this number pair."""
        return _PyAnyCAD.GXY_Y(self)

    def Modulus(self):
        r""" Computes Sqrt (X*X + Y*Y) where X and Y are the two coordinates of this number pair."""
        return _PyAnyCAD.GXY_Modulus(self)

    def SquareModulus(self):
        r""" Computes X*X + Y*Y where X and Y are the two coordinates of this number pair."""
        return _PyAnyCAD.GXY_SquareModulus(self)

    def IsEqual(self, theOther, theTolerance):
        r""" Returns true if the coordinates of this number pair are equal to the respective coordinates of the number pair theOther, within the specified tolerance theTolerance. I.e.: abs(<me>.X() - theOther.X()) <= theTolerance and abs(<me>.Y() - theOther.Y()) <= theTolerance and computations"""
        return _PyAnyCAD.GXY_IsEqual(self, theOther, theTolerance)

    def Add(self, theOther):
        r"""
        Computes the sum of this number pair and number pair theOther.. code-block:: c++

           <me>.X() = <me>.X() + theOther.X() <me>.Y() = <me>.Y() + theOther.Y()
        """
        return _PyAnyCAD.GXY_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GXY___iadd__(self, theOther)

    def Added(self, theOther):
        r"""
        Computes the sum of this number pair and number pair theOther.. code-block:: c++

           new.X() = <me>.X() + theOther.X() new.Y() = <me>.Y() + theOther.Y()
        """
        return _PyAnyCAD.GXY_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GXY___add__(self, theOther)

    def Crossed(self, theOther):
        r"""
        .. code-block:: c++

           double D = <me>.X() * theOther.Y() - <me>.Y() * theOther.X()
        """
        return _PyAnyCAD.GXY_Crossed(self, theOther)

    def __xor__(self, theOther):
        return _PyAnyCAD.GXY___xor__(self, theOther)

    def CrossMagnitude(self, theRight):
        r""" computes the magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||"""
        return _PyAnyCAD.GXY_CrossMagnitude(self, theRight)

    def CrossSquareMagnitude(self, theRight):
        r""" computes the square magnitude of the cross product between <me> and theRight. Returns || <me> ^ theRight ||**2"""
        return _PyAnyCAD.GXY_CrossSquareMagnitude(self, theRight)

    def Divide(self, theScalar):
        r""" divides <me> by a real."""
        return _PyAnyCAD.GXY_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GXY___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" Divides <me> by a real."""
        return _PyAnyCAD.GXY_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GXY___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, theOther):
        r""" Computes the scalar product between <me> and theOther"""
        return _PyAnyCAD.GXY_Dot(self, theOther)

    def Multiply(self, *args):
        r"""
        *Overload 1:*

        .. code-block:: c++

           <me>.X() = <me>.X() * theScalar; <me>.Y() = <me>.Y() * theScalar;

        |

        *Overload 2:*

        .. code-block:: c++

           <me>.X() = <me>.X() * theOther.X(); <me>.Y() = <me>.Y() * theOther.Y();

        |

        *Overload 3:*
        <me> = theMatrix * <me>
        """
        return _PyAnyCAD.GXY_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GXY___imul__(self, *args)

    def Multiplied(self, *args):
        r"""
        *Overload 1:*

        .. code-block:: c++

           New.X() = <me>.X() * theScalar; New.Y() = <me>.Y() * theScalar;

        |

        *Overload 2:*

        .. code-block:: c++

           new.X() = <me>.X() * theOther.X(); new.Y() = <me>.Y() * theOther.Y();

        |

        *Overload 3:*
        New = theMatrix * <me>
        """
        return _PyAnyCAD.GXY_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GXY___mul__(self, *args)

    def Normalize(self):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.X()/ <me>.Modulus() <me>.Y() = <me>.Y()/ <me>.Modulus() Raises ConstructionError if <me>.Modulus() <= Resolution from gp
        """
        return _PyAnyCAD.GXY_Normalize(self)

    def Normalized(self):
        r"""
        .. code-block:: c++

           New.X() = <me>.X()/ <me>.Modulus() New.Y() = <me>.Y()/ <me>.Modulus() Raises ConstructionError if <me>.Modulus() <= Resolution from gp
        """
        return _PyAnyCAD.GXY_Normalized(self)

    def Reverse(self):
        r"""
        .. code-block:: c++

           <me>.X() = -<me>.X() <me>.Y() = -<me>.Y()
        """
        return _PyAnyCAD.GXY_Reverse(self)

    def Reversed(self):
        r"""
        .. code-block:: c++

           New.X() = -<me>.X() New.Y() = -<me>.Y()
        """
        return _PyAnyCAD.GXY_Reversed(self)

    def __neg__(self):
        return _PyAnyCAD.GXY___neg__(self)

    def SetLinearForm(self, *args):
        r"""
        *Overload 1:*
        Computes  the following linear combination and assigns the result to this number pair:.. code-block:: c++

           theA1 * theXY1 + theA2 * theXY2

        |

        *Overload 2:*
        --  Computes  the following linear combination and assigns the result to this number pair:.. code-block:: c++

           theA1 * theXY1 + theA2 * theXY2 + theXY3

        |

        *Overload 3:*
        Computes  the following linear combination and assigns the result to this number pair:.. code-block:: c++

           theA1 * theXY1 + theXY2

        |

        *Overload 4:*
        Computes  the following linear combination and assigns the result to this number pair:.. code-block:: c++

           theXY1 + theXY2
        """
        return _PyAnyCAD.GXY_SetLinearForm(self, *args)

    def Subtract(self, theOther):
        r"""
        .. code-block:: c++

           <me>.X() = <me>.X() - theOther.X() <me>.Y() = <me>.Y() - theOther.Y()
        """
        return _PyAnyCAD.GXY_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GXY___isub__(self, theOther)

    def Subtracted(self, theOther):
        r"""
        .. code-block:: c++

           new.X() = <me>.X() - theOther.X() new.Y() = <me>.Y() - theOther.Y()
        """
        return _PyAnyCAD.GXY_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GXY___sub__(self, theOther)
    __swig_destroy__ = _PyAnyCAD.delete_GXY

# Register GXY in _PyAnyCAD:
_PyAnyCAD.GXY_swigregister(GXY)
class GMat2d(object):
    r""" Describes a two column, two row matrix. This sort of object is used in various vectorial or matrix computations."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates  a matrix with null coefficients.

        |

        *Overload 2:*
        theCol1, theCol2 are the 2 columns of the matrix.
        """
        _PyAnyCAD.GMat2d_swiginit(self, _PyAnyCAD.new_GMat2d(*args))

    def SetCol(self, theCol, theValue):
        r""" Assigns the two coordinates of theValue to the column of range theCol of this matrix Raises OutOfRange if theCol < 1 or theCol > 2."""
        return _PyAnyCAD.GMat2d_SetCol(self, theCol, theValue)

    def SetCols(self, theCol1, theCol2):
        r""" Assigns the number pairs theCol1, theCol2 to the two columns of   this matrix"""
        return _PyAnyCAD.GMat2d_SetCols(self, theCol1, theCol2)

    def SetDiagonal(self, theX1, theX2):
        r"""
        Modifies the main diagonal of the matrix... code-block:: c++

           <me>.Value (1, 1) = theX1 <me>.Value (2, 2) = theX2 The other coefficients of the matrix are not modified.
        """
        return _PyAnyCAD.GMat2d_SetDiagonal(self, theX1, theX2)

    def SetIdentity(self):
        r""" Modifies this matrix, so that it represents the Identity matrix."""
        return _PyAnyCAD.GMat2d_SetIdentity(self)

    def SetRotation(self, theAng):
        r""" Modifies this matrix, so that it represents a rotation. theAng is the angular value in radian of the rotation."""
        return _PyAnyCAD.GMat2d_SetRotation(self, theAng)

    def SetRow(self, theRow, theValue):
        r""" Assigns the two coordinates of theValue to the row of index theRow of this matrix. Raises OutOfRange if theRow < 1 or theRow > 2."""
        return _PyAnyCAD.GMat2d_SetRow(self, theRow, theValue)

    def SetRows(self, theRow1, theRow2):
        r""" Assigns the number pairs theRow1, theRow2 to the two rows of this matrix."""
        return _PyAnyCAD.GMat2d_SetRows(self, theRow1, theRow2)

    def SetScale(self, theS):
        r"""
        Modifies the matrix such that it represents a scaling transformation, where theS is the scale   factor :.. code-block:: c++

           | theS    0.0 | <me> =  | 0.0   theS  |
        """
        return _PyAnyCAD.GMat2d_SetScale(self, theS)

    def SetValue(self, theRow, theCol, theValue):
        r""" Assigns <theValue> to the coefficient of row theRow, column theCol of this matrix. Raises OutOfRange if theRow < 1 or theRow > 2 or theCol < 1 or theCol > 2"""
        return _PyAnyCAD.GMat2d_SetValue(self, theRow, theCol, theValue)

    def Column(self, theCol):
        r""" Returns the column of theCol index. Raises OutOfRange if theCol < 1 or theCol > 2"""
        return _PyAnyCAD.GMat2d_Column(self, theCol)

    def Determinant(self):
        r""" Computes the determinant of the matrix."""
        return _PyAnyCAD.GMat2d_Determinant(self)

    def Diagonal(self):
        r""" Returns the main diagonal of the matrix."""
        return _PyAnyCAD.GMat2d_Diagonal(self)

    def Row(self, theRow):
        r""" Returns the row of index theRow. Raised if theRow < 1 or theRow > 2"""
        return _PyAnyCAD.GMat2d_Row(self, theRow)

    def Value(self, theRow, theCol):
        r""" Returns the coefficient of range (ttheheRow, theCol) Raises OutOfRange if theRow < 1 or theRow > 2 or theCol < 1 or theCol > 2"""
        return _PyAnyCAD.GMat2d_Value(self, theRow, theCol)

    def __call__(self, *args):
        return _PyAnyCAD.GMat2d___call__(self, *args)

    def IsSingular(self):
        r""" Returns true if this matrix is singular (and therefore, cannot be inverted). The Gauss LU decomposition is used to invert the matrix so the matrix is considered as singular if the largest pivot found is lower or equal to Resolution from gp."""
        return _PyAnyCAD.GMat2d_IsSingular(self)

    def Add(self, Other):
        return _PyAnyCAD.GMat2d_Add(self, Other)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GMat2d___iadd__(self, theOther)

    def Added(self, theOther):
        r"""
        Computes the sum of this matrix and the matrix theOther.for each coefficient of the matrix :.. code-block:: c++

           <me>.Coef(i,j) + <theOther>.Coef(i,j) Note: -   operator += assigns the result to this matrix, while -   operator + creates a new one.
        """
        return _PyAnyCAD.GMat2d_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GMat2d___add__(self, theOther)

    def Divide(self, theScalar):
        return _PyAnyCAD.GMat2d_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GMat2d___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" Divides all the coefficients of the matrix by a scalar."""
        return _PyAnyCAD.GMat2d_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GMat2d___truediv__(self, *args)
    __div__ = __truediv__



    def Invert(self):
        return _PyAnyCAD.GMat2d_Invert(self)

    def Inverted(self):
        r""" Inverses the matrix and raises exception if the matrix is singular."""
        return _PyAnyCAD.GMat2d_Inverted(self)

    def PreMultiply(self, theOther):
        r""" Modifies this matrix by premultiplying it by the matrix Other <me> = theOther * <me>."""
        return _PyAnyCAD.GMat2d_PreMultiply(self, theOther)

    def Multiplied(self, *args):
        return _PyAnyCAD.GMat2d_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GMat2d___mul__(self, *args)

    def Multiply(self, *args):
        r"""
        *Overload 1:*
        Computes the product of two matrices <me> * <theOther>

        |

        *Overload 2:*
        Multiplies all the coefficients of the matrix by a scalar.
        """
        return _PyAnyCAD.GMat2d_Multiply(self, *args)

    def __imul__(self, theScalar):
        return _PyAnyCAD.GMat2d___imul__(self, theScalar)

    def Power(self, theN):
        return _PyAnyCAD.GMat2d_Power(self, theN)

    def Powered(self, theN):
        r""" computes <me> = <me> * <me> * .......* <me>, theN time. if theN = 0 <me> = Identity if theN < 0 <me> = <me>.Invert() *...........* <me>.Invert(). If theN < 0 an exception can be raised if the matrix is not inversible"""
        return _PyAnyCAD.GMat2d_Powered(self, theN)

    def Subtract(self, theOther):
        return _PyAnyCAD.GMat2d_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GMat2d___isub__(self, theOther)

    def Subtracted(self, theOther):
        r"""
        Computes for each coefficient of the matrix :.. code-block:: c++

           <me>.Coef(i,j) - <theOther>.Coef(i,j)
        """
        return _PyAnyCAD.GMat2d_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GMat2d___sub__(self, theOther)

    def Transpose(self):
        return _PyAnyCAD.GMat2d_Transpose(self)

    def Transposed(self):
        r""" Transposes the matrix. A(j, i) -> A (i, j)"""
        return _PyAnyCAD.GMat2d_Transposed(self)
    __swig_destroy__ = _PyAnyCAD.delete_GMat2d

# Register GMat2d in _PyAnyCAD:
_PyAnyCAD.GMat2d_swigregister(GMat2d)
class GAx2d(object):
    r""" Describes an axis in the plane (2D space). An axis is defined by: -   its origin (also referred to as its "Location point"),   and -   its unit vector (referred to as its "Direction"). An axis implicitly defines a direct, right-handed coordinate system in 2D space by: -   its origin, - its "Direction" (giving the "X Direction" of the coordinate system), and -   the unit vector normal to "Direction" (positive angle measured in the trigonometric sense). An axis is used: -   to describe 2D geometric entities (for example, the axis which defines angular coordinates on a circle). It serves for the same purpose as the STEP function "axis placement one axis", or -   to define geometric transformations (axis of symmetry, axis of rotation, and so on). Note: to define a left-handed 2D coordinate system, use gp_Ax22d."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an axis object representing X axis of the reference co-ordinate system.

        |

        *Overload 2:*
        Creates an Ax2d. <theP> is the "Location" point of the axis placement and theV is the "Direction" of the axis placement.
        """
        _PyAnyCAD.GAx2d_swiginit(self, _PyAnyCAD.new_GAx2d(*args))

    def SetLocation(self, theP):
        r""" Changes the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx2d_SetLocation(self, theP)

    def SetDirection(self, theV):
        r""" Changes the direction of <me>."""
        return _PyAnyCAD.GAx2d_SetDirection(self, theV)

    def Location(self):
        r""" Returns the origin of <me>."""
        return _PyAnyCAD.GAx2d_Location(self)

    def Direction(self):
        r""" Returns the direction of <me>."""
        return _PyAnyCAD.GAx2d_Direction(self)

    def IsCoaxial(self, Other, AngularTolerance, LinearTolerance):
        r""" Returns True if  : . the angle between <me> and <Other> is lower or equal to <AngularTolerance> and . the distance between <me>.Location() and <Other> is lower or equal to <LinearTolerance> and . the distance between <Other>.Location() and <me> is lower or equal to LinearTolerance."""
        return _PyAnyCAD.GAx2d_IsCoaxial(self, Other, AngularTolerance, LinearTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns true if this axis and the axis theOther are normal to each other. That is, if the angle between the two axes is equal to Pi/2 or -Pi/2. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx2d_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns true if this axis and the axis theOther are parallel, and have opposite orientations.  That is, if the angle between the two axes is equal to Pi or -Pi. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx2d_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" Returns true if this axis and the axis theOther are parallel, and have either the same or opposite orientations. That is, if the angle between the two axes is equal to 0, Pi or -Pi. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx2d_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angle, in radians, between this axis and the axis theOther. The value of the angle is between -Pi and Pi."""
        return _PyAnyCAD.GAx2d_Angle(self, theOther)

    def Reverse(self):
        r""" Reverses the direction of <me> and assigns the result to this axis."""
        return _PyAnyCAD.GAx2d_Reverse(self)

    def Reversed(self):
        r""" Computes a new axis placement with a direction opposite to the direction of <me>."""
        return _PyAnyCAD.GAx2d_Reversed(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GAx2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GAx2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates an axis placement. <theP> is the center of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GAx2d_Rotated(self, theP, theAng)

    def Scale(self, P, S):
        return _PyAnyCAD.GAx2d_Scale(self, P, S)

    def Scaled(self, theP, theS):
        r""" Applies a scaling transformation on the axis placement. The "Location" point of the axisplacement is modified. The "Direction" is reversed if the scale is negative."""
        return _PyAnyCAD.GAx2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an axis placement with a Trsf."""
        return _PyAnyCAD.GAx2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an axis placement in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an axis placement from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GAx2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx2d

# Register GAx2d in _PyAnyCAD:
_PyAnyCAD.GAx2d_swigregister(GAx2d)
class GAx1(object):
    r""" Describes an axis in 3D space. An axis is defined by: -   its origin (also referred to as its "Location point"), and -   its unit vector (referred to as its "Direction" or "main   Direction"). An axis is used: -   to describe 3D geometric entities (for example, the axis of a revolution entity). It serves the same purpose as the STEP function "axis placement one axis", or -   to define geometric transformations (axis of symmetry, axis of rotation, and so on). For example, this entity can be used to locate a geometric entity or to define a symmetry axis."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an axis object representing Z axis of the reference coordinate system.

        |

        *Overload 2:*
        P is the location point and V is the direction of <me>.
        """
        _PyAnyCAD.GAx1_swiginit(self, _PyAnyCAD.new_GAx1(*args))

    def SetDirection(self, theV):
        r""" Assigns V as the "Direction"  of this axis."""
        return _PyAnyCAD.GAx1_SetDirection(self, theV)

    def SetLocation(self, theP):
        r""" Assigns  P as the origin of this axis."""
        return _PyAnyCAD.GAx1_SetLocation(self, theP)

    def Direction(self):
        r""" Returns the direction of <me>."""
        return _PyAnyCAD.GAx1_Direction(self)

    def Location(self):
        r""" Returns the location point of <me>."""
        return _PyAnyCAD.GAx1_Location(self)

    def IsCoaxial(self, Other, AngularTolerance, LinearTolerance):
        r""" Returns True if  : . the angle between <me> and <Other> is lower or equal to <AngularTolerance> and . the distance between <me>.Location() and <Other> is lower or equal to <LinearTolerance> and . the distance between <Other>.Location() and <me> is lower or equal to LinearTolerance."""
        return _PyAnyCAD.GAx1_IsCoaxial(self, Other, AngularTolerance, LinearTolerance)

    def IsNormal(self, theOther, theAngularTolerance):
        r""" Returns True if the direction of this and another axis are normal to each other. That is, if the angle between the two axes is equal to Pi/2. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx1_IsNormal(self, theOther, theAngularTolerance)

    def IsOpposite(self, theOther, theAngularTolerance):
        r""" Returns True if the direction of this and another axis are parallel with opposite orientation. That is, if the angle between the two axes is equal to Pi. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx1_IsOpposite(self, theOther, theAngularTolerance)

    def IsParallel(self, theOther, theAngularTolerance):
        r""" Returns True if the direction of this and another axis are parallel with same orientation or opposite orientation. That is, if the angle between the two axes is equal to 0 or Pi. Note: the tolerance criterion is given by theAngularTolerance."""
        return _PyAnyCAD.GAx1_IsParallel(self, theOther, theAngularTolerance)

    def Angle(self, theOther):
        r""" Computes the angular value, in radians, between this.Direction() and theOther.Direction(). Returns the angle between 0 and 2*PI radians."""
        return _PyAnyCAD.GAx1_Angle(self, theOther)

    def Reverse(self):
        r""" Reverses the unit vector of this axis and assigns the result to this axis."""
        return _PyAnyCAD.GAx1_Reverse(self)

    def Reversed(self):
        r""" Reverses the unit vector of this axis and creates a new one."""
        return _PyAnyCAD.GAx1_Reversed(self)

    def Mirror(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry and assigns the result to this axis.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry and assigns the result to this axis.

        |

        *Overload 3:*
        Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection) and assigns the result to this axis.
        """
        return _PyAnyCAD.GAx1_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an axis placement with respect to the point P which is the center of the symmetry and creates a new axis.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry and creates a new axis.

        |

        *Overload 3:*
        Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement <A2> locates the plane of the symmetry : (Location, XDirection, YDirection) and creates a new axis.
        """
        return _PyAnyCAD.GAx1_Mirrored(self, *args)

    def Rotate(self, theA1, theAngRad):
        r""" Rotates this axis at an angle theAngRad (in radians) about the axis theA1 and assigns the result to this axis."""
        return _PyAnyCAD.GAx1_Rotate(self, theA1, theAngRad)

    def Rotated(self, theA1, theAngRad):
        r""" Rotates this axis at an angle theAngRad (in radians) about the axis theA1 and creates a new one."""
        return _PyAnyCAD.GAx1_Rotated(self, theA1, theAngRad)

    def Scale(self, theP, theS):
        r""" Applies a scaling transformation to this axis with: - scale factor theS, and - center theP and assigns the result to this axis."""
        return _PyAnyCAD.GAx1_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Applies a scaling transformation to this axis with: - scale factor theS, and - center theP and creates a new axis."""
        return _PyAnyCAD.GAx1_Scaled(self, theP, theS)

    def Transform(self, theT):
        r""" Applies the transformation theT to this axis and assigns the result to this axis."""
        return _PyAnyCAD.GAx1_Transform(self, theT)

    def Transformed(self, theT):
        r""" Applies the transformation theT to this axis and creates a new one. Translates an axis plaxement in the direction of the vector <V>. The magnitude of the translation is the vector's magnitude."""
        return _PyAnyCAD.GAx1_Transformed(self, theT)

    def Translate(self, *args):
        r"""
        *Overload 1:*
        Translates this axis by the vector theV, and assigns the result to this axis.

        |

        *Overload 2:*
        Translates this axis by: the vector (theP1, theP2) defined from point theP1 to point theP2. and assigns the result to this axis.
        """
        return _PyAnyCAD.GAx1_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates this axis by the vector theV, and creates a new one.

        |

        *Overload 2:*
        Translates this axis by: the vector (theP1, theP2) defined from point theP1 to point theP2. and creates a new one.
        """
        return _PyAnyCAD.GAx1_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx1

# Register GAx1 in _PyAnyCAD:
_PyAnyCAD.GAx1_swigregister(GAx1)
class GAx2(object):
    r""" Describes a right-handed coordinate system in 3D space. A coordinate system is defined by: -   its origin (also referred to as its "Location point"), and -   three orthogonal unit vectors, termed respectively the "X Direction", the "Y Direction" and the "Direction" (also referred to as the "main Direction"). The "Direction" of the coordinate system is called its "main Direction" because whenever this unit vector is modified, the "X Direction" and the "Y Direction" are recomputed. However, when we modify either the "X Direction" or the "Y Direction", "Direction" is not modified. The "main Direction" is also the "Z Direction". Since an Ax2 coordinate system is right-handed, its "main Direction" is always equal to the cross product of its "X Direction" and "Y Direction". (To define a left-handed coordinate system, use gp_Ax3.) A coordinate system is used: -   to describe geometric entities, in particular to position them. The local coordinate system of a geometric entity serves the same purpose as the STEP function "axis placement two axes", or -   to define geometric transformations. Note: we refer to the "X Axis", "Y Axis" and "Z Axis", respectively, as to axes having: - the origin of the coordinate system as their origin, and -   the unit vectors "X Direction", "Y Direction" and "main Direction", respectively, as their unit vectors. The "Z Axis" is also the "main Axis"."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an object corresponding to the reference coordinate system (OXYZ).

        |

        *Overload 2:*
        Creates an axis placement with an origin P such that: -   N is the Direction, and -   the "X Direction" is normal to N, in the plane defined by the vectors (N, Vx): "X Direction" = (N ^ Vx) ^ N, Exception: raises ConstructionError if N and Vx are parallel (same or opposite orientation).

        |

        *Overload 3:*
        Creates -   a coordinate system with an origin P, where V gives the "main Direction" (here, "X Direction" and "Y Direction" are defined automatically).
        """
        _PyAnyCAD.GAx2_swiginit(self, _PyAnyCAD.new_GAx2(*args))

    def SetAxis(self, A1):
        r""" Assigns the origin and "main Direction" of the axis A1 to this coordinate system, then recomputes its "X Direction" and "Y Direction". Note: The new "X Direction" is computed as follows: new "X Direction" = V1 ^(previous "X Direction" ^ V) where V is the "Direction" of A1. Exceptions Standard_ConstructionError if A1 is parallel to the "X Direction" of this coordinate system."""
        return _PyAnyCAD.GAx2_SetAxis(self, A1)

    def SetDirection(self, V):
        r""" Changes the "main Direction" of this coordinate system, then recomputes its "X Direction" and "Y Direction". Note: the new "X Direction" is computed as follows: new "X Direction" = V ^ (previous "X Direction" ^ V) Exceptions Standard_ConstructionError if V is parallel to the "X Direction" of this coordinate system."""
        return _PyAnyCAD.GAx2_SetDirection(self, V)

    def SetLocation(self, theP):
        r""" Changes the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx2_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        r""" Changes the "Xdirection" of <me>. The main direction "Direction" is not modified, the "Ydirection" is modified. If <Vx> is not normal to the main direction then <XDirection> is computed as follows XDirection = Direction ^ (Vx ^ Direction). Exceptions Standard_ConstructionError if Vx or Vy is parallel to the "main Direction" of this coordinate system."""
        return _PyAnyCAD.GAx2_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        r""" Changes the "Ydirection" of <me>. The main direction is not modified but the "Xdirection" is changed. If <Vy> is not normal to the main direction then "YDirection" is computed as  follows YDirection = Direction ^ (<Vy> ^ Direction). Exceptions Standard_ConstructionError if Vx or Vy is parallel to the "main Direction" of this coordinate system."""
        return _PyAnyCAD.GAx2_SetYDirection(self, theVy)

    def Angle(self, theOther):
        r""" Computes the angular value, in radians, between the main direction of <me> and the main direction of <theOther>. Returns the angle between 0 and PI in radians."""
        return _PyAnyCAD.GAx2_Angle(self, theOther)

    def Axis(self):
        r""" Returns the main axis of <me>. It is the "Location" point and the main "Direction"."""
        return _PyAnyCAD.GAx2_Axis(self)

    def Direction(self):
        r""" Returns the main direction of <me>."""
        return _PyAnyCAD.GAx2_Direction(self)

    def Location(self):
        r""" Returns the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx2_Location(self)

    def XDirection(self):
        r""" Returns the "XDirection" of <me>."""
        return _PyAnyCAD.GAx2_XDirection(self)

    def YDirection(self):
        r""" Returns the "YDirection" of <me>."""
        return _PyAnyCAD.GAx2_YDirection(self)

    def IsCoplanar(self, *args):
        r""" Returns True if . the distance between <me> and the "Location" point of A1 is lower of equal to LinearTolerance and . the main direction of <me> and the direction of A1 are normal. Note: the tolerance criterion for angular equality is given by AngularTolerance."""
        return _PyAnyCAD.GAx2_IsCoplanar(self, *args)

    def Mirror(self, *args):
        r"""
        *Overload 1:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the point P, and assigns the result to this coordinate system. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.

        |

        *Overload 2:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the axis A1, and assigns the result to this coordinate systeme. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.

        |

        *Overload 3:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the plane defined by the origin, "X Direction" and "Y Direction" of coordinate system A2 and  assigns the result to this coordinate systeme. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.
        """
        return _PyAnyCAD.GAx2_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the point P, and creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.

        |

        *Overload 2:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the axis A1, and  creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.

        |

        *Overload 3:*
        Performs a symmetrical transformation of this coordinate system with respect to: -   the plane defined by the origin, "X Direction" and "Y Direction" of coordinate system A2 and creates a new one. Warning This transformation is always performed on the origin. In case of a reflection with respect to a point: - the main direction of the coordinate system is not changed, and - the "X Direction" and the "Y Direction" are simply reversed In case of a reflection with respect to an axis or a plane: -   the transformation is applied to the "X Direction" and the "Y Direction", then -   the "main Direction" is recomputed as the cross product "X Direction" ^ "Y   Direction". This maintains the right-handed property of the coordinate system.
        """
        return _PyAnyCAD.GAx2_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GAx2_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates an axis placement. <theA1> is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GAx2_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx2_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Applies a scaling transformation on the axis placement. The "Location" point of the axisplacement is modified. Warnings : If the scale <S> is negative : . the main direction of the axis placement is not changed. . The "XDirection" and the "YDirection" are reversed. So the axis placement stay right handed."""
        return _PyAnyCAD.GAx2_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx2_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an axis placement with a Trsf. The "Location" point, the "XDirection" and the "YDirection" are transformed with theT. The resulting main "Direction" of <me> is the cross product between the "XDirection" and the "YDirection" after transformation."""
        return _PyAnyCAD.GAx2_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx2_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an axis plaxement in the direction of the vector <theV>. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an axis placement from the point <theP1> to the point <theP2>.
        """
        return _PyAnyCAD.GAx2_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx2

# Register GAx2 in _PyAnyCAD:
_PyAnyCAD.GAx2_swigregister(GAx2)
class GAx3(object):
    r""" Describes a coordinate system in 3D space. Unlike a gp_Ax2 coordinate system, a gp_Ax3 can be right-handed ("direct sense") or left-handed ("indirect sense"). A coordinate system is defined by: -   its origin (also referred to as its "Location point"), and -   three orthogonal unit vectors, termed the "X Direction", the "Y Direction" and the "Direction" (also referred to as the "main Direction"). The "Direction" of the coordinate system is called its "main Direction" because whenever this unit vector is modified, the "X Direction" and the "Y Direction" are recomputed. However, when we modify either the "X Direction" or the "Y Direction", "Direction" is not modified. "Direction" is also the "Z Direction". The "main Direction" is always parallel to the cross product of its "X Direction" and "Y Direction". If the coordinate system is right-handed, it satisfies the equation: "main Direction" = "X Direction" ^ "Y Direction" and if it is left-handed, it satisfies the equation: "main Direction" = -"X Direction" ^ "Y Direction" A coordinate system is used: -   to describe geometric entities, in particular to position them. The local coordinate system of a geometric entity serves the same purpose as the STEP function "axis placement three axes", or -   to define geometric transformations. Note: -   We refer to the "X Axis", "Y Axis" and "Z Axis", respectively, as the axes having: -   the origin of the coordinate system as their origin, and -   the unit vectors "X Direction", "Y Direction" and "main Direction", respectively, as their unit vectors. -   The "Z Axis" is also the "main Axis". -   gp_Ax2 is used to define a coordinate system that must be always right-handed."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an object corresponding to the reference coordinate system (OXYZ).

        |

        *Overload 2:*
        Creates  a  coordinate  system from a right-handed coordinate system.

        |

        *Overload 3:*
        Creates a  right handed axis placement with the "Location" point theP and  two directions, theN gives the "Direction" and theVx gives the "XDirection". Raises ConstructionError if theN and theVx are parallel (same or opposite orientation).

        |

        *Overload 4:*
        Creates an axis placement with the "Location" point <theP> and the normal direction <theV>.
        """
        _PyAnyCAD.GAx3_swiginit(self, _PyAnyCAD.new_GAx3(*args))

    def XReverse(self):
        r""" Reverses the X direction of <me>."""
        return _PyAnyCAD.GAx3_XReverse(self)

    def YReverse(self):
        r""" Reverses the Y direction of <me>."""
        return _PyAnyCAD.GAx3_YReverse(self)

    def ZReverse(self):
        r""" Reverses the Z direction of <me>."""
        return _PyAnyCAD.GAx3_ZReverse(self)

    def SetAxis(self, theA1):
        r""" Assigns the origin and "main Direction" of the axis theA1 to this coordinate system, then recomputes its "X Direction" and "Y Direction". Note: -   The new "X Direction" is computed as follows: new "X Direction" = V1 ^(previous "X Direction" ^ V) where V is the "Direction" of theA1. -   The orientation of this coordinate system (right-handed or left-handed) is not modified. Raises ConstructionError  if the "Direction" of <theA1> and the "XDirection" of <me> are parallel (same or opposite orientation) because it is impossible to calculate the new "XDirection" and the new "YDirection"."""
        return _PyAnyCAD.GAx3_SetAxis(self, theA1)

    def SetDirection(self, theV):
        r""" Changes the main direction of this coordinate system, then recomputes its "X Direction" and "Y Direction". Note: -   The new "X Direction" is computed as follows: new "X Direction" = theV ^ (previous "X Direction" ^ theV). -   The orientation of this coordinate system (left- or right-handed) is not modified. Raises ConstructionError if <theV> and the previous "XDirection" are parallel because it is impossible to calculate the new "XDirection" and the new "YDirection"."""
        return _PyAnyCAD.GAx3_SetDirection(self, theV)

    def SetLocation(self, theP):
        r""" Changes the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx3_SetLocation(self, theP)

    def SetXDirection(self, theVx):
        r""" Changes the "Xdirection" of <me>. The main direction "Direction" is not modified, the "Ydirection" is modified. If <theVx> is not normal to the main direction then <XDirection> is computed as follows XDirection = Direction ^ (theVx ^ Direction). Raises ConstructionError if <theVx> is parallel (same or opposite orientation) to the main direction of <me>"""
        return _PyAnyCAD.GAx3_SetXDirection(self, theVx)

    def SetYDirection(self, theVy):
        r""" Changes the "Ydirection" of <me>. The main direction is not modified but the "Xdirection" is changed. If <theVy> is not normal to the main direction then "YDirection" is computed as  follows YDirection = Direction ^ (<theVy> ^ Direction). Raises ConstructionError if <theVy> is parallel to the main direction of <me>"""
        return _PyAnyCAD.GAx3_SetYDirection(self, theVy)

    def Angle(self, theOther):
        r""" Computes the angular value between the main direction of <me> and the main direction of <theOther>. Returns the angle between 0 and PI in radians."""
        return _PyAnyCAD.GAx3_Angle(self, theOther)

    def Axis(self):
        r""" Returns the main axis of <me>. It is the "Location" point and the main "Direction"."""
        return _PyAnyCAD.GAx3_Axis(self)

    def Ax2(self):
        r""" Computes a right-handed coordinate system with the same "X Direction" and "Y Direction" as those of this coordinate system, then recomputes the "main Direction". If this coordinate system is right-handed, the result returned is the same coordinate system. If this coordinate system is left-handed, the result is reversed."""
        return _PyAnyCAD.GAx3_Ax2(self)

    def Direction(self):
        r""" Returns the main direction of <me>."""
        return _PyAnyCAD.GAx3_Direction(self)

    def Location(self):
        r""" Returns the "Location" point (origin) of <me>."""
        return _PyAnyCAD.GAx3_Location(self)

    def XDirection(self):
        r""" Returns the "XDirection" of <me>."""
        return _PyAnyCAD.GAx3_XDirection(self)

    def YDirection(self):
        r""" Returns the "YDirection" of <me>."""
        return _PyAnyCAD.GAx3_YDirection(self)

    def Direct(self):
        r""" Returns  True if  the  coordinate  system is right-handed. i.e. XDirection().Crossed(YDirection()).Dot(Direction()) > 0"""
        return _PyAnyCAD.GAx3_Direct(self)

    def IsCoplanar(self, *args):
        r"""
        *Overload 1:*
        Returns True if . the distance between the "Location" point of <me> and <theOther> is lower or equal to theLinearTolerance and . the distance between the "Location" point of <theOther> and <me> is lower or equal to theLinearTolerance and . the main direction of <me> and the main direction of <theOther> are parallel (same or opposite orientation).

        |

        *Overload 2:*
        Returns True if . the distance between <me> and the "Location" point of theA1 is lower of equal to theLinearTolerance and . the distance between theA1 and the "Location" point of <me> is lower or equal to theLinearTolerance and . the main direction of <me> and the direction of theA1 are normal.
        """
        return _PyAnyCAD.GAx3_IsCoplanar(self, *args)

    def Mirror(self, *args):
        return _PyAnyCAD.GAx3_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an axis placement with respect to the point theP which is the center of the symmetry. Warnings : The main direction of the axis placement is not changed. The "XDirection" and the "YDirection" are reversed. So the axis placement stay right handed.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an axis placement with respect to an axis placement which is the axis of the symmetry. The transformation is performed on the "Location" point, on the "XDirection" and "YDirection". The resulting main "Direction" is the cross product between the "XDirection" and the "YDirection" after transformation.

        |

        *Overload 3:*
        Performs the symmetrical transformation of an axis placement with respect to a plane. The axis placement  <theA2> locates the plane of the symmetry : (Location, XDirection, YDirection). The transformation is performed on the "Location" point, on the "XDirection" and "YDirection". The resulting main "Direction" is the cross product between the "XDirection" and the "YDirection" after transformation.
        """
        return _PyAnyCAD.GAx3_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GAx3_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates an axis placement. <theA1> is the axis of the rotation . theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GAx3_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GAx3_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Applies a scaling transformation on the axis placement. The "Location" point of the axisplacement is modified. Warnings : If the scale <theS> is negative : . the main direction of the axis placement is not changed. . The "XDirection" and the "YDirection" are reversed. So the axis placement stay right handed."""
        return _PyAnyCAD.GAx3_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GAx3_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an axis placement with a Trsf. The "Location" point, the "XDirection" and the "YDirection" are transformed with theT.  The resulting main "Direction" of <me> is the cross product between the "XDirection" and the "YDirection" after transformation."""
        return _PyAnyCAD.GAx3_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GAx3_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an axis plaxement in the direction of the vector <theV>. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an axis placement from the point <theP1> to the point <theP2>.
        """
        return _PyAnyCAD.GAx3_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GAx3

# Register GAx3 in _PyAnyCAD:
_PyAnyCAD.GAx3_swigregister(GAx3)
class GMat(object):
    r""" Describes a three column, three row matrix. This sort of object is used in various vectorial or matrix computations."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        creates  a matrix with null coefficients.

        |

        *Overload 2:*
        Creates a matrix. theCol1, theCol2, theCol3 are the 3 columns of the matrix.
        """
        _PyAnyCAD.GMat_swiginit(self, _PyAnyCAD.new_GMat(*args))

    def SetCol(self, theCol, theValue):
        r""" Assigns the three coordinates of theValue to the column of index theCol of this matrix. Raises OutOfRange if theCol < 1 or theCol > 3."""
        return _PyAnyCAD.GMat_SetCol(self, theCol, theValue)

    def SetCols(self, theCol1, theCol2, theCol3):
        r""" Assigns the number triples theCol1, theCol2, theCol3 to the three columns of this matrix."""
        return _PyAnyCAD.GMat_SetCols(self, theCol1, theCol2, theCol3)

    def SetCross(self, theRef):
        r""" Modifies the matrix  M so that applying it to any number triple (X, Y, Z) produces the same result as the cross product of theRef and the number triple (X, Y, Z): i.e.: M * {X,Y,Z}t = theRef.Cross({X, Y ,Z}) this matrix is anti symmetric. To apply this matrix to the triplet  {XYZ} is the same as to do the cross product between the triplet theRef and the triplet {XYZ}. Note: this matrix is anti-symmetric."""
        return _PyAnyCAD.GMat_SetCross(self, theRef)

    def SetDiagonal(self, theX1, theX2, theX3):
        r"""
        Modifies the main diagonal of the matrix... code-block:: c++

           <me>.Value (1, 1) = theX1 <me>.Value (2, 2) = theX2 <me>.Value (3, 3) = theX3 The other coefficients of the matrix are not modified.
        """
        return _PyAnyCAD.GMat_SetDiagonal(self, theX1, theX2, theX3)

    def SetDot(self, theRef):
        r""" Modifies this matrix so that applying it to any number triple (X, Y, Z) produces the same result as the scalar product of theRef and the number triple (X, Y, Z): this * (X,Y,Z) = theRef.(X,Y,Z) Note: this matrix is symmetric."""
        return _PyAnyCAD.GMat_SetDot(self, theRef)

    def SetIdentity(self):
        r""" Modifies this matrix so that it represents the Identity matrix."""
        return _PyAnyCAD.GMat_SetIdentity(self)

    def SetRotation(self, theAxis, theAng):
        r""" Modifies this matrix so that it represents a rotation. theAng is the angular value in radians and the XYZ axis gives the direction of the rotation. Raises ConstructionError if XYZ.Modulus() <= Resolution()"""
        return _PyAnyCAD.GMat_SetRotation(self, theAxis, theAng)

    def SetRow(self, theRow, theValue):
        r""" Assigns the three coordinates of Value to the row of index theRow of this matrix. Raises OutOfRange if theRow < 1 or theRow > 3."""
        return _PyAnyCAD.GMat_SetRow(self, theRow, theValue)

    def SetRows(self, theRow1, theRow2, theRow3):
        r""" Assigns the number triples theRow1, theRow2, theRow3 to the three rows of this matrix."""
        return _PyAnyCAD.GMat_SetRows(self, theRow1, theRow2, theRow3)

    def SetScale(self, theS):
        r"""
        Modifies the matrix so that it represents a scaling transformation, where theS is the scale factor. :.. code-block:: c++

           | theS    0.0  0.0 | <me> =  | 0.0   theS   0.0 |         | 0.0  0.0   theS  |
        """
        return _PyAnyCAD.GMat_SetScale(self, theS)

    def SetValue(self, theRow, theCol, theValue):
        r""" Assigns <theValue> to the coefficient of row theRow, column theCol of   this matrix. Raises OutOfRange if theRow < 1 or theRow > 3 or theCol < 1 or theCol > 3"""
        return _PyAnyCAD.GMat_SetValue(self, theRow, theCol, theValue)

    def Column(self, theCol):
        r""" Returns the column of theCol index. Raises OutOfRange if theCol < 1 or theCol > 3"""
        return _PyAnyCAD.GMat_Column(self, theCol)

    def Determinant(self):
        r""" Computes the determinant of the matrix."""
        return _PyAnyCAD.GMat_Determinant(self)

    def Diagonal(self):
        r""" Returns the main diagonal of the matrix."""
        return _PyAnyCAD.GMat_Diagonal(self)

    def Row(self, theRow):
        r""" returns the row of theRow index. Raises OutOfRange if theRow < 1 or theRow > 3"""
        return _PyAnyCAD.GMat_Row(self, theRow)

    def Value(self, theRow, theCol):
        r""" Returns the coefficient of range (theRow, theCol) Raises OutOfRange if theRow < 1 or theRow > 3 or theCol < 1 or theCol > 3"""
        return _PyAnyCAD.GMat_Value(self, theRow, theCol)

    def __call__(self, *args):
        return _PyAnyCAD.GMat___call__(self, *args)

    def IsSingular(self):
        r""" The Gauss LU decomposition is used to invert the matrix (see Math package) so the matrix is considered as singular if the largest pivot found is lower or equal to Resolution from gp."""
        return _PyAnyCAD.GMat_IsSingular(self)

    def Add(self, theOther):
        return _PyAnyCAD.GMat_Add(self, theOther)

    def __iadd__(self, theOther):
        return _PyAnyCAD.GMat___iadd__(self, theOther)

    def Added(self, theOther):
        r""" Computes the sum of this matrix and the matrix theOther for each coefficient of the matrix : <me>.Coef(i,j) + <theOther>.Coef(i,j)"""
        return _PyAnyCAD.GMat_Added(self, theOther)

    def __add__(self, theOther):
        return _PyAnyCAD.GMat___add__(self, theOther)

    def Divide(self, theScalar):
        return _PyAnyCAD.GMat_Divide(self, theScalar)

    def __itruediv__(self, *args):
        return _PyAnyCAD.GMat___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def Divided(self, theScalar):
        r""" Divides all the coefficients of the matrix by Scalar"""
        return _PyAnyCAD.GMat_Divided(self, theScalar)

    def __truediv__(self, *args):
        return _PyAnyCAD.GMat___truediv__(self, *args)
    __div__ = __truediv__



    def Invert(self):
        return _PyAnyCAD.GMat_Invert(self)

    def Inverted(self):
        r""" Inverses the matrix and raises if the matrix is singular. -   Invert assigns the result to this matrix, while -   Inverted creates a new one. Warning The Gauss LU decomposition is used to invert the matrix. Consequently, the matrix is considered as singular if the largest pivot found is less than or equal to gp::Resolution(). Exceptions Standard_ConstructionError if this matrix is singular, and therefore cannot be inverted."""
        return _PyAnyCAD.GMat_Inverted(self)

    def PreMultiply(self, theOther):
        return _PyAnyCAD.GMat_PreMultiply(self, theOther)

    def Multiplied(self, *args):
        return _PyAnyCAD.GMat_Multiplied(self, *args)

    def __mul__(self, *args):
        return _PyAnyCAD.GMat___mul__(self, *args)

    def Multiply(self, *args):
        r"""
        *Overload 1:*
        Computes the product of two matrices <me> = <Other> * <me>.

        |

        *Overload 2:*
        Multiplies all the coefficients of the matrix by Scalar
        """
        return _PyAnyCAD.GMat_Multiply(self, *args)

    def __imul__(self, *args):
        return _PyAnyCAD.GMat___imul__(self, *args)

    def Power(self, N):
        return _PyAnyCAD.GMat_Power(self, N)

    def Powered(self, theN):
        r""" Computes <me> = <me> * <me> * .......* <me>,   theN time. if theN = 0 <me> = Identity if theN < 0 <me> = <me>.Invert() *...........* <me>.Invert(). If theN < 0 an exception will be raised if the matrix is not inversible"""
        return _PyAnyCAD.GMat_Powered(self, theN)

    def Subtract(self, theOther):
        return _PyAnyCAD.GMat_Subtract(self, theOther)

    def __isub__(self, theOther):
        return _PyAnyCAD.GMat___isub__(self, theOther)

    def Subtracted(self, theOther):
        r""" cOmputes for each coefficient of the matrix : <me>.Coef(i,j) - <theOther>.Coef(i,j)"""
        return _PyAnyCAD.GMat_Subtracted(self, theOther)

    def __sub__(self, theOther):
        return _PyAnyCAD.GMat___sub__(self, theOther)

    def Transpose(self):
        return _PyAnyCAD.GMat_Transpose(self)

    def Transposed(self):
        r""" Transposes the matrix. A(j, i) -> A (i, j)"""
        return _PyAnyCAD.GMat_Transposed(self)
    __swig_destroy__ = _PyAnyCAD.delete_GMat

# Register GMat in _PyAnyCAD:
_PyAnyCAD.GMat_swigregister(GMat)
gp_Identity = _PyAnyCAD.gp_Identity
r""" No transformation (matrix is identity)"""
gp_Rotation = _PyAnyCAD.gp_Rotation
r""" Rotation"""
gp_Translation = _PyAnyCAD.gp_Translation
r""" Translation"""
gp_PntMirror = _PyAnyCAD.gp_PntMirror
r""" Central symmetry"""
gp_Ax1Mirror = _PyAnyCAD.gp_Ax1Mirror
r""" Rotational symmetry"""
gp_Ax2Mirror = _PyAnyCAD.gp_Ax2Mirror
r""" Bilateral symmetry"""
gp_Scale = _PyAnyCAD.gp_Scale
r""" Scale"""
gp_CompoundTrsf = _PyAnyCAD.gp_CompoundTrsf
r""" Combination of the above transformations"""
gp_Other = _PyAnyCAD.gp_Other
r""" Transformation with not-orthogonal matrix"""
class GTrsf2d(object):
    r"""
    Defines a non-persistent transformation in 2D space. The following transformations are implemented : - Translation, Rotation, Scale - Symmetry with respect to a point and a line. Complex transformations can be obtained by combining the previous elementary transformations using the method Multiply. The transformations can be represented as follow :.. code-block:: c++

       V1   V2   T       XY        XY | a11  a12  a13 |   | x |     | x'| | a21  a22  a23 |   | y |     | y'| |  0    0    1  |   | 1 |     | 1 | where {V1, V2} defines the vectorial part of the transformation and T defines the translation part of the transformation. This transformation never change the nature of the objects.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Returns identity transformation.

        |

        *Overload 2:*
        Creates a 2d transformation in the XY plane from a 3d transformation .
        """
        _PyAnyCAD.GTrsf2d_swiginit(self, _PyAnyCAD.new_GTrsf2d(*args))

    def SetMirror(self, *args):
        r"""
        *Overload 1:*
        Changes the transformation into a symmetrical transformation. theP is the center of the symmetry.

        |

        *Overload 2:*
        Changes the transformation into a symmetrical transformation. theA is the center of the axial symmetry.
        """
        return _PyAnyCAD.GTrsf2d_SetMirror(self, *args)

    def SetRotation(self, theP, theAng):
        r""" Changes the transformation into a rotation. theP is the rotation's center and theAng is the angular value of the rotation in radian."""
        return _PyAnyCAD.GTrsf2d_SetRotation(self, theP, theAng)

    def SetScale(self, theP, theS):
        r""" Changes the transformation into a scale. theP is the center of the scale and theS is the scaling value."""
        return _PyAnyCAD.GTrsf2d_SetScale(self, theP, theS)

    def SetTransformation(self, *args):
        r"""
        *Overload 1:*
        Changes a transformation allowing passage from the coordinate system "theFromSystem1" to the coordinate system "theToSystem2".

        |

        *Overload 2:*
        Changes the transformation allowing passage from the basic coordinate system {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.)} to the local coordinate system defined with the Ax2d theToSystem.
        """
        return _PyAnyCAD.GTrsf2d_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        r"""
        *Overload 1:*
        Changes the transformation into a translation. theV is the vector of the translation.

        |

        *Overload 2:*
        Makes the transformation into a translation from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GTrsf2d_SetTranslation(self, *args)

    def SetTranslationPart(self, theV):
        r""" Replaces the translation vector with theV."""
        return _PyAnyCAD.GTrsf2d_SetTranslationPart(self, theV)

    def SetScaleFactor(self, theS):
        r""" Modifies the scale factor."""
        return _PyAnyCAD.GTrsf2d_SetScaleFactor(self, theS)

    def IsNegative(self):
        r""" Returns true if the determinant of the vectorial part of this transformation is negative.."""
        return _PyAnyCAD.GTrsf2d_IsNegative(self)

    def Form(self):
        r""" Returns the nature of the transformation. It can be  an identity transformation, a rotation, a translation, a mirror (relative to a point or an axis), a scaling transformation, or a compound transformation."""
        return _PyAnyCAD.GTrsf2d_Form(self)

    def ScaleFactor(self):
        r""" Returns the scale factor."""
        return _PyAnyCAD.GTrsf2d_ScaleFactor(self)

    def TranslationPart(self):
        r""" Returns the translation part of the transformation's matrix"""
        return _PyAnyCAD.GTrsf2d_TranslationPart(self)

    def VectorialPart(self):
        r""" Returns the vectorial part of the transformation. It is a 2*2 matrix which includes the scale factor."""
        return _PyAnyCAD.GTrsf2d_VectorialPart(self)

    def HVectorialPart(self):
        r""" Returns the homogeneous vectorial part of the transformation. It is a 2*2 matrix which doesn't include the scale factor. The coefficients of this matrix must be multiplied by the scale factor to obtain the coefficients of the transformation."""
        return _PyAnyCAD.GTrsf2d_HVectorialPart(self)

    def RotationPart(self):
        r""" Returns the angle corresponding to the rotational component of the transformation matrix (operation opposite to SetRotation())."""
        return _PyAnyCAD.GTrsf2d_RotationPart(self)

    def Value(self, theRow, theCol):
        r""" Returns the coefficients of the transformation's matrix. It is a 2 rows * 3 columns matrix. Raises OutOfRange if theRow < 1 or theRow > 2 or theCol < 1 or theCol > 3"""
        return _PyAnyCAD.GTrsf2d_Value(self, theRow, theCol)

    def Invert(self):
        return _PyAnyCAD.GTrsf2d_Invert(self)

    def Inverted(self):
        r""" Computes the reverse transformation. Raises an exception if the matrix of the transformation is not inversible, it means that the scale factor is lower or equal to Resolution from package gp."""
        return _PyAnyCAD.GTrsf2d_Inverted(self)

    def Multiplied(self, theT):
        return _PyAnyCAD.GTrsf2d_Multiplied(self, theT)

    def __mul__(self, theT):
        return _PyAnyCAD.GTrsf2d___mul__(self, theT)

    def Multiply(self, theT):
        r""" Computes the transformation composed from <me> and theT. <me> = <me> * theT"""
        return _PyAnyCAD.GTrsf2d_Multiply(self, theT)

    def __imul__(self, theT):
        return _PyAnyCAD.GTrsf2d___imul__(self, theT)

    def PreMultiply(self, theT):
        r""" Computes the transformation composed from <me> and theT. <me> = theT * <me>"""
        return _PyAnyCAD.GTrsf2d_PreMultiply(self, theT)

    def Power(self, theN):
        return _PyAnyCAD.GTrsf2d_Power(self, theN)

    def Powered(self, theN):
        r""" Computes the following composition of transformations <me> * <me> * .......* <me>,  theN time. if theN = 0 <me> = Identity if theN < 0 <me> = <me>.Inverse() *...........* <me>.Inverse(). Raises if theN < 0 and if the matrix of the transformation not inversible."""
        return _PyAnyCAD.GTrsf2d_Powered(self, theN)

    def Transforms(self, *args):
        r""" Transforms  a doublet XY with a Trsf2d"""
        return _PyAnyCAD.GTrsf2d_Transforms(self, *args)

    def SetValues(self, a11, a12, a13, a21, a22, a23):
        r"""
        Sets the coefficients  of the transformation. The transformation  of the  point  x,y is  the point x',y' with :.. code-block:: c++

           x' = a11 x + a12 y + a13 y' = a21 x + a22 y + a23 The method Value(i,j) will return aij. Raises ConstructionError if the determinant of the aij is null. If the matrix as not a uniform scale it will be orthogonalized before future using.
        """
        return _PyAnyCAD.GTrsf2d_SetValues(self, a11, a12, a13, a21, a22, a23)
    __swig_destroy__ = _PyAnyCAD.delete_GTrsf2d

# Register GTrsf2d in _PyAnyCAD:
_PyAnyCAD.GTrsf2d_swigregister(GTrsf2d)
class GTrsf(object):
    r"""
    Defines a non-persistent transformation in 3D space. The following transformations are implemented : . Translation, Rotation, Scale . Symmetry with respect to a point, a line, a plane. Complex transformations can be obtained by combining the previous elementary transformations using the method Multiply. The transformations can be represented as follow :.. code-block:: c++

       V1   V2   V3    T       XYZ        XYZ | a11  a12  a13   a14 |   | x |      | x'| | a21  a22  a23   a24 |   | y |      | y'| | a31  a32  a33   a34 |   | z |   =  | z'| |  0    0    0     1  |   | 1 |      | 1 | where {V1, V2, V3} defines the vectorial part of the transformation and T defines the translation part of the transformation. This transformation never change the nature of the objects.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Returns the identity transformation.

        |

        *Overload 2:*
        Creates  a 3D transformation from the 2D transformation theT. The resulting transformation has a homogeneous vectorial part, V3, and a translation part, T3, built from theT: a11    a12 0             a13 V3 =    a21    a22    0       T3 =   a23 0    0    1. 0 It also has the same scale factor as theT. This guarantees (by projection) that the transformation which would be performed by theT in a plane (2D space) is performed by the resulting transformation in the xOy plane of the 3D space, (i.e. in the plane defined by the origin (0., 0., 0.) and the vectors DX (1., 0., 0.), and DY (0., 1., 0.)). The scale factor is applied to the entire space.
        """
        _PyAnyCAD.GTrsf_swiginit(self, _PyAnyCAD.new_GTrsf(*args))

    def SetMirror(self, *args):
        r"""
        *Overload 1:*
        Makes the transformation into a symmetrical transformation. theP is the center of the symmetry.

        |

        *Overload 2:*
        Makes the transformation into a symmetrical transformation. theA1 is the center of the axial symmetry.

        |

        *Overload 3:*
        Makes the transformation into a symmetrical transformation. theA2 is the center of the planar symmetry and defines the plane of symmetry by its origin, "X Direction" and "Y Direction".
        """
        return _PyAnyCAD.GTrsf_SetMirror(self, *args)

    def SetRotation(self, *args):
        r"""
        *Overload 1:*
        Changes the transformation into a rotation. theA1 is the rotation axis and theAng is the angular value of the rotation in radians.

        |

        *Overload 2:*
        Changes the transformation into a rotation defined by quaternion. Note that rotation is performed around origin, i.e. no translation is involved.
        """
        return _PyAnyCAD.GTrsf_SetRotation(self, *args)

    def SetRotationPart(self, theR):
        r""" Replaces the rotation part with specified quaternion."""
        return _PyAnyCAD.GTrsf_SetRotationPart(self, theR)

    def SetScale(self, theP, theS):
        r""" Changes the transformation into a scale. theP is the center of the scale and theS is the scaling value. Raises ConstructionError  If <theS> is null."""
        return _PyAnyCAD.GTrsf_SetScale(self, theP, theS)

    def SetDisplacement(self, theFromSystem1, theToSystem2):
        r""" Modifies this transformation so that it transforms the coordinate system defined by theFromSystem1 into the one defined by theToSystem2. After this modification, this transformation transforms: -   the origin of theFromSystem1 into the origin of theToSystem2, -   the "X Direction" of theFromSystem1 into the "X Direction" of theToSystem2, -   the "Y Direction" of theFromSystem1 into the "Y Direction" of theToSystem2, and -   the "main Direction" of theFromSystem1 into the "main Direction" of theToSystem2. Warning When you know the coordinates of a point in one coordinate system and you want to express these coordinates in another one, do not use the transformation resulting from this function. Use the transformation that results from SetTransformation instead. SetDisplacement and SetTransformation create related transformations: the vectorial part of one is the inverse of the vectorial part of the other."""
        return _PyAnyCAD.GTrsf_SetDisplacement(self, theFromSystem1, theToSystem2)

    def SetTransformation(self, *args):
        r"""
        *Overload 1:*
        Modifies this transformation so that it transforms the coordinates of any point, (x, y, z), relative to a source coordinate system into the coordinates (x', y', z') which are relative to a target coordinate system, but which represent the same point The transformation is from the coordinate system "theFromSystem1" to the coordinate system "theToSystem2". Example :.. code-block:: c++

           gp_Ax3 theFromSystem1, theToSystem2; double x1, y1, z1;  // are the coordinates of a point in the local system theFromSystem1 double x2, y2, z2;  // are the coordinates of a point in the local system theToSystem2 gp_Pnt P1 (x1, y1, z1) gp_Trsf T; T.SetTransformation (theFromSystem1, theToSystem2); gp_Pnt P2 = P1.Transformed (T); P2.Coord (x2, y2, z2);

        |

        *Overload 2:*
        Modifies this transformation so that it transforms the coordinates of any point, (x, y, z), relative to a source coordinate system into the coordinates (x', y', z') which are relative to a target coordinate system, but which represent the same point The transformation is from the default coordinate system.. code-block:: c++

           {P(0.,0.,0.), VX (1.,0.,0.), VY (0.,1.,0.), VZ (0., 0. ,1.) } to the local coordinate system defined with the Ax3 theToSystem. Use in the same way  as the previous method. FromSystem1 is defaulted to the absolute coordinate system.

        |

        *Overload 3:*
        Sets transformation by directly specified rotation and translation.
        """
        return _PyAnyCAD.GTrsf_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        r"""
        *Overload 1:*
        Changes the transformation into a translation. theV is the vector of the translation.

        |

        *Overload 2:*
        Makes the transformation into a translation where the translation vector is the vector (theP1, theP2) defined from point theP1 to point theP2.
        """
        return _PyAnyCAD.GTrsf_SetTranslation(self, *args)

    def SetTranslationPart(self, theV):
        r""" Replaces the translation vector with the vector theV."""
        return _PyAnyCAD.GTrsf_SetTranslationPart(self, theV)

    def SetScaleFactor(self, theS):
        r""" Modifies the scale factor. Raises ConstructionError  If theS is null."""
        return _PyAnyCAD.GTrsf_SetScaleFactor(self, theS)

    def SetForm(self, theP):
        return _PyAnyCAD.GTrsf_SetForm(self, theP)

    def SetValues(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34):
        r"""
        Sets the coefficients  of the transformation.  The transformation  of the  point  x,y,z is  the point x',y',z' with :.. code-block:: c++

           x' = a11 x + a12 y + a13 z + a14 y' = a21 x + a22 y + a23 z + a24 z' = a31 x + a32 y + a33 z + a34 The method Value(i,j) will return aij. Raises ConstructionError if the determinant of  the aij is null. The matrix is orthogonalized before future using.
        """
        return _PyAnyCAD.GTrsf_SetValues(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34)

    def IsNegative(self):
        r""" Returns true if the determinant of the vectorial part of this transformation is negative."""
        return _PyAnyCAD.GTrsf_IsNegative(self)

    def Form(self):
        r""" Returns the nature of the transformation. It can be: an identity transformation, a rotation, a translation, a mirror transformation (relative to a point, an axis or a plane), a scaling transformation, or a compound transformation."""
        return _PyAnyCAD.GTrsf_Form(self)

    def ScaleFactor(self):
        r""" Returns the scale factor."""
        return _PyAnyCAD.GTrsf_ScaleFactor(self)

    def TranslationPart(self):
        r""" Returns the translation part of the transformation's matrix"""
        return _PyAnyCAD.GTrsf_TranslationPart(self)

    def GetRotation(self, *args):
        r"""
        *Overload 1:*
        Returns the boolean True if there is non-zero rotation. In the presence of rotation, the output parameters store the axis and the angle of rotation. The method always returns positive value "theAngle", i.e., 0. < theAngle <= PI. Note that this rotation is defined only by the vectorial part of the transformation; generally you would need to check also the translational part to obtain the axis (gp_Ax1) of rotation.

        |

        *Overload 2:*
        Returns quaternion representing rotational part of the transformation.
        """
        return _PyAnyCAD.GTrsf_GetRotation(self, *args)

    def VectorialPart(self):
        r""" Returns the vectorial part of the transformation. It is a 3*3 matrix which includes the scale factor."""
        return _PyAnyCAD.GTrsf_VectorialPart(self)

    def HVectorialPart(self):
        r""" Computes the homogeneous vectorial part of the transformation. It is a 3*3 matrix which doesn't include the scale factor. In other words, the vectorial part of this transformation is equal to its homogeneous vectorial part, multiplied by the scale factor. The coefficients of this matrix must be multiplied by the scale factor to obtain the coefficients of the transformation."""
        return _PyAnyCAD.GTrsf_HVectorialPart(self)

    def Value(self, theRow, theCol):
        r""" Returns the coefficients of the transformation's matrix. It is a 3 rows * 4 columns matrix. This coefficient includes the scale factor. Raises OutOfRanged if theRow < 1 or theRow > 3 or theCol < 1 or theCol > 4"""
        return _PyAnyCAD.GTrsf_Value(self, theRow, theCol)

    def Invert(self):
        return _PyAnyCAD.GTrsf_Invert(self)

    def Inverted(self):
        r"""
        Computes the reverse transformation Raises an exception if the matrix of the transformation is not inversible, it means that the scale factor is lower or equal to Resolution from package gp. Computes the transformation composed with T and  <me>. In a C++ implementation you can also write Tcomposed = <me> * T. Example :.. code-block:: c++

           gp_Trsf T1, T2, Tcomp; ............... Tcomp = T2.Multiplied(T1);         // or   (Tcomp = T2 * T1) gp_Pnt P1(10.,3.,4.); gp_Pnt P2 = P1.Transformed(Tcomp); // using Tcomp gp_Pnt P3 = P1.Transformed(T1);    // using T1 then T2 P3.Transform(T2);                  // P3 = P2 !!!
        """
        return _PyAnyCAD.GTrsf_Inverted(self)

    def Multiplied(self, theT):
        return _PyAnyCAD.GTrsf_Multiplied(self, theT)

    def __mul__(self, theT):
        return _PyAnyCAD.GTrsf___mul__(self, theT)

    def Multiply(self, theT):
        r""" Computes the transformation composed with <me> and theT. <me> = <me> * theT"""
        return _PyAnyCAD.GTrsf_Multiply(self, theT)

    def __imul__(self, theT):
        return _PyAnyCAD.GTrsf___imul__(self, theT)

    def PreMultiply(self, theT):
        r""" Computes the transformation composed with <me> and T. <me> = theT * <me>"""
        return _PyAnyCAD.GTrsf_PreMultiply(self, theT)

    def Power(self, theN):
        return _PyAnyCAD.GTrsf_Power(self, theN)

    def Powered(self, theN):
        r""" Computes the following composition of transformations <me> * <me> * .......* <me>, theN time. if theN = 0 <me> = Identity if theN < 0 <me> = <me>.Inverse() *...........* <me>.Inverse(). Raises if theN < 0 and if the matrix of the transformation not inversible."""
        return _PyAnyCAD.GTrsf_Powered(self, theN)

    def Transforms(self, *args):
        r""" Transformation of a triplet XYZ with a Trsf"""
        return _PyAnyCAD.GTrsf_Transforms(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GTrsf

# Register GTrsf in _PyAnyCAD:
_PyAnyCAD.GTrsf_swigregister(GTrsf)
class GBBox(object):
    r""" Describes a bounding box in 3D space. A bounding box is parallel to the axes of the coordinates system. If it is finite, it is defined by the three intervals: -   [ Xmin,Xmax ], -   [ Ymin,Ymax ], -   [ Zmin,Zmax ]. A bounding box may be infinite (i.e. open) in one or more directions. It is said to be: -   OpenXmin if it is infinite on the negative side of the   "X Direction"; -   OpenXmax if it is infinite on the positive side of the "X Direction"; -   OpenYmin if it is infinite on the negative side of the   "Y Direction"; -   OpenYmax if it is infinite on the positive side of the "Y Direction"; -   OpenZmin if it is infinite on the negative side of the   "Z Direction"; -   OpenZmax if it is infinite on the positive side of the "Z Direction"; -   WholeSpace if it is infinite in all six directions. In this case, any point of the space is inside the box; -   Void if it is empty. In this case, there is no point included in the box. A bounding box is defined by: -   six bounds (Xmin, Xmax, Ymin, Ymax, Zmin and Zmax) which limit the bounding box if it is finite, -   eight flags (OpenXmin, OpenXmax, OpenYmin, OpenYmax, OpenZmin, OpenZmax, WholeSpace and Void) which describe the bounding box if it is infinite or empty, and -   a gap, which is included on both sides in any direction when consulting the finite bounds of the box."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an empty Box. The constructed box is qualified Void. Its gap is null.

        |

        *Overload 2:*
        Creates a bounding box, it contains: -   minimum/maximum point of bounding box, The constructed box is qualified Void. Its gap is null.
        """
        _PyAnyCAD.GBBox_swiginit(self, _PyAnyCAD.new_GBBox(*args))

    def SetWhole(self):
        r""" Sets this bounding box so that it covers the whole of 3D space. It is infinitely long in all directions."""
        return _PyAnyCAD.GBBox_SetWhole(self)

    def SetVoid(self):
        r""" Sets this bounding box so that it is empty. All points are outside a void box."""
        return _PyAnyCAD.GBBox_SetVoid(self)

    def Set(self, *args):
        r"""
        *Overload 1:*
        Sets this bounding box so that it bounds -   the point P. This involves first setting this bounding box to be void and then adding the point P.

        |

        *Overload 2:*
        Sets this bounding box so that it bounds the half-line defined by point P and direction D, i.e. all points M defined by M=P+u*D, where u is greater than or equal to 0, are inside the bounding volume. This involves first setting this box to be void and then adding   the half-line.
        """
        return _PyAnyCAD.GBBox_Set(self, *args)

    def Update(self, *args):
        r"""
        *Overload 1:*
        Enlarges this bounding box, if required, so that it contains at least: -   interval [ aXmin,aXmax ] in the "X Direction", -   interval [ aYmin,aYmax ] in the "Y Direction", -   interval [ aZmin,aZmax ] in the "Z Direction";

        |

        *Overload 2:*
        Adds a point of coordinates (X,Y,Z) to this bounding box.
        """
        return _PyAnyCAD.GBBox_Update(self, *args)

    def GetGap(self):
        r""" Returns the gap of this bounding box."""
        return _PyAnyCAD.GBBox_GetGap(self)

    def SetGap(self, Tol):
        r""" Set the gap of this bounding box to abs(Tol)."""
        return _PyAnyCAD.GBBox_SetGap(self, Tol)

    def Enlarge(self, Tol):
        r""" Enlarges the      box    with    a   tolerance   value. (minvalues-Abs(<tol>) and maxvalues+Abs(<tol>)) This means that the minimum values of its X, Y and Z intervals of definition, when they are finite, are reduced by the absolute value of Tol, while the maximum values are increased by the same amount."""
        return _PyAnyCAD.GBBox_Enlarge(self, Tol)

    def Get(self, theXmin, theYmin, theZmin, theXmax, theYmax, theZmax):
        r""" Returns the bounds of this bounding box. The gap is included. If this bounding box is infinite (i.e. "open"), returned values may be equal to +/- Precision::Infinite(). Standard_ConstructionError exception will be thrown if the box is void. if IsVoid()"""
        return _PyAnyCAD.GBBox_Get(self, theXmin, theYmin, theZmin, theXmax, theYmax, theZmax)

    def CornerMin(self):
        r""" Returns the lower corner of this bounding box. The gap is included. If this bounding box is infinite (i.e. "open"), returned values may be equal to +/- Precision::Infinite(). Standard_ConstructionError exception will be thrown if the box is void. if IsVoid()"""
        return _PyAnyCAD.GBBox_CornerMin(self)

    def CornerMax(self):
        r""" Returns the upper corner of this bounding box. The gap is included. If this bounding box is infinite (i.e. "open"), returned values may be equal to +/- Precision::Infinite(). Standard_ConstructionError exception will be thrown if the box is void. if IsVoid()"""
        return _PyAnyCAD.GBBox_CornerMax(self)

    def OpenXmin(self):
        r""" The   Box will be   infinitely   long  in the Xmin direction."""
        return _PyAnyCAD.GBBox_OpenXmin(self)

    def OpenXmax(self):
        r""" The   Box will be   infinitely   long  in the Xmax direction."""
        return _PyAnyCAD.GBBox_OpenXmax(self)

    def OpenYmin(self):
        r""" The   Box will be   infinitely   long  in the Ymin direction."""
        return _PyAnyCAD.GBBox_OpenYmin(self)

    def OpenYmax(self):
        r""" The   Box will be   infinitely   long  in the Ymax direction."""
        return _PyAnyCAD.GBBox_OpenYmax(self)

    def OpenZmin(self):
        r""" The   Box will be   infinitely   long  in the Zmin direction."""
        return _PyAnyCAD.GBBox_OpenZmin(self)

    def OpenZmax(self):
        r""" The   Box will be   infinitely   long  in the Zmax direction."""
        return _PyAnyCAD.GBBox_OpenZmax(self)

    def IsOpen(self):
        r""" Returns true if this bounding box has at least one open direction."""
        return _PyAnyCAD.GBBox_IsOpen(self)

    def IsOpenXmin(self):
        r""" Returns true if this bounding box is open in the  Xmin direction."""
        return _PyAnyCAD.GBBox_IsOpenXmin(self)

    def IsOpenXmax(self):
        r""" Returns true if this bounding box is open in the  Xmax direction."""
        return _PyAnyCAD.GBBox_IsOpenXmax(self)

    def IsOpenYmin(self):
        r""" Returns true if this bounding box is open in the  Ymix direction."""
        return _PyAnyCAD.GBBox_IsOpenYmin(self)

    def IsOpenYmax(self):
        r""" Returns true if this bounding box is open in the  Ymax direction."""
        return _PyAnyCAD.GBBox_IsOpenYmax(self)

    def IsOpenZmin(self):
        r""" Returns true if this bounding box is open in the  Zmin direction."""
        return _PyAnyCAD.GBBox_IsOpenZmin(self)

    def IsOpenZmax(self):
        r""" Returns true if this bounding box is open in the  Zmax  direction."""
        return _PyAnyCAD.GBBox_IsOpenZmax(self)

    def IsWhole(self):
        r""" Returns true if this bounding box is infinite in all 6 directions (WholeSpace flag)."""
        return _PyAnyCAD.GBBox_IsWhole(self)

    def IsVoid(self):
        r""" Returns true if this bounding box is empty (Void flag)."""
        return _PyAnyCAD.GBBox_IsVoid(self)

    def IsXThin(self, tol):
        r""" true if xmax-xmin < tol."""
        return _PyAnyCAD.GBBox_IsXThin(self, tol)

    def IsYThin(self, tol):
        r""" true if ymax-ymin < tol."""
        return _PyAnyCAD.GBBox_IsYThin(self, tol)

    def IsZThin(self, tol):
        r""" true if zmax-zmin < tol."""
        return _PyAnyCAD.GBBox_IsZThin(self, tol)

    def IsThin(self, tol):
        r""" Returns true if IsXThin, IsYThin and IsZThin are all true, i.e. if the box is thin in all three dimensions."""
        return _PyAnyCAD.GBBox_IsThin(self, tol)

    def Transformed(self, T):
        r""" Returns a bounding box which is the result of applying the transformation T to this bounding box. Warning Applying a geometric transformation (for example, a rotation) to a bounding box generally increases its dimensions. This is not optimal for algorithms which use it."""
        return _PyAnyCAD.GBBox_Transformed(self, T)

    def Add(self, *args):
        r"""
        *Overload 1:*
        Adds the box <Other> to <me>.

        |

        *Overload 2:*
        Adds a Pnt to the box.

        |

        *Overload 3:*
        Extends  <me> from the Pnt 
        in the direction <D>.

        |

        *Overload 4:*
        Extends the Box  in the given Direction, i.e. adds an  half-line. The   box  may become   infinite in 1,2 or 3 directions.
        """
        return _PyAnyCAD.GBBox_Add(self, *args)

    def IsOut(self, *args):
        r"""
        *Overload 1:*
        Returns True if the Pnt is out the box.

        |

        *Overload 2:*
        Returns False if the line intersects the box.

        |

        *Overload 3:*
        Returns False if the plane intersects the box.

        |

        *Overload 4:*
        Returns False if the <Box> intersects or is inside <me>.

        |

        *Overload 5:*
        Returns False if  the transformed <Box> intersects or  is inside <me>.

        |

        *Overload 6:*
        Returns False  if the transformed <Box> intersects or  is inside the transformed box <me>.

        |

        *Overload 7:*
        Returns False  if the flat band lying between two parallel lines represented by their reference points <P1>, <P2> and direction <D> intersects the box.
        """
        return _PyAnyCAD.GBBox_IsOut(self, *args)

    def Distance(self, Other):
        r""" Computes the minimum distance between two boxes."""
        return _PyAnyCAD.GBBox_Distance(self, Other)

    def Dump(self):
        return _PyAnyCAD.GBBox_Dump(self)

    def SquareExtent(self):
        r""" Computes the squared diagonal of me."""
        return _PyAnyCAD.GBBox_SquareExtent(self)

    def FinitePart(self):
        r""" Returns a finite part of an infinite bounding box (returns self if this is already finite box). This can be a Void box in case if its sides has been defined as infinite (Open) without adding any finite points. WARNING! This method relies on Open flags, the infinite points added using Add() method will be returned as is."""
        return _PyAnyCAD.GBBox_FinitePart(self)

    def HasFinitePart(self):
        r""" Returns TRUE if this box has finite part."""
        return _PyAnyCAD.GBBox_HasFinitePart(self)
    __swig_destroy__ = _PyAnyCAD.delete_GBBox

# Register GBBox in _PyAnyCAD:
_PyAnyCAD.GBBox_swigregister(GBBox)
class GCirc(object):
    r""" Describes a circle in 3D space. A circle is defined by its radius and positioned in space with a coordinate system (a gp_Ax2 object) as follows: -   the origin of the coordinate system is the center of the circle, and -   the origin, "X Direction" and "Y Direction" of the coordinate system define the plane of the circle. This positioning coordinate system is the "local coordinate system" of the circle. Its "main Direction" gives the normal vector to the plane of the circle. The "main Axis" of the coordinate system is referred to as the "Axis" of the circle. Note: when a gp_Circ circle is converted into a Geom_Circle circle, some implicit properties of the circle are used explicitly: -   the "main Direction" of the local coordinate system gives an implicit orientation to the circle (and defines its trigonometric sense), -   this orientation corresponds to the direction in which parameter values increase, -   the starting point for parameterization is that of the "X Axis" of the local coordinate system (i.e. the "X Axis" of the circle). See Also gce_MakeCirc which provides functions for more complex circle constructions Geom_Circle which provides additional functions for constructing circles and works, in particular, with the parametric equations of circles"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite circle.

        |

        *Overload 2:*
        A2 locates the circle and gives its orientation in 3D space. Warnings : It is not forbidden to create a circle with theRadius = 0.0  Raises ConstructionError if theRadius < 0.0
        """
        _PyAnyCAD.GCirc_swiginit(self, _PyAnyCAD.new_GCirc(*args))

    def SetAxis(self, theA1):
        r""" Changes the main axis of the circle. It is the axis perpendicular to the plane of the circle. Raises ConstructionError if the direction of theA1 is parallel to the "XAxis" of the circle."""
        return _PyAnyCAD.GCirc_SetAxis(self, theA1)

    def SetLocation(self, theP):
        r""" Changes the "Location" point (center) of the circle."""
        return _PyAnyCAD.GCirc_SetLocation(self, theP)

    def SetPosition(self, theA2):
        r""" Changes the position of the circle."""
        return _PyAnyCAD.GCirc_SetPosition(self, theA2)

    def SetRadius(self, theRadius):
        r""" Modifies the radius of this circle. Warning. This class does not prevent the creation of a circle where theRadius is null. Exceptions Standard_ConstructionError if theRadius is negative."""
        return _PyAnyCAD.GCirc_SetRadius(self, theRadius)

    def Area(self):
        r""" Computes the area of the circle."""
        return _PyAnyCAD.GCirc_Area(self)

    def Axis(self):
        r""" Returns the main axis of the circle. It is the axis perpendicular to the plane of the circle, passing through the "Location" point (center) of the circle."""
        return _PyAnyCAD.GCirc_Axis(self)

    def Length(self):
        r""" Computes the circumference of the circle."""
        return _PyAnyCAD.GCirc_Length(self)

    def Location(self):
        r""" Returns the center of the circle. It is the "Location" point of the local coordinate system of the circle"""
        return _PyAnyCAD.GCirc_Location(self)

    def Position(self):
        r""" Returns the position of the circle. It is the local coordinate system of the circle."""
        return _PyAnyCAD.GCirc_Position(self)

    def Radius(self):
        r""" Returns the radius of this circle."""
        return _PyAnyCAD.GCirc_Radius(self)

    def XAxis(self):
        r""" Returns the "XAxis" of the circle. This axis is perpendicular to the axis of the conic. This axis and the "Yaxis" define the plane of the conic."""
        return _PyAnyCAD.GCirc_XAxis(self)

    def YAxis(self):
        r""" Returns the "YAxis" of the circle. This axis and the "Xaxis" define the plane of the conic. The "YAxis" is perpendicular to the "Xaxis"."""
        return _PyAnyCAD.GCirc_YAxis(self)

    def Distance(self, theP):
        r""" Computes the minimum of distance between the point theP and any point on the circumference of the circle."""
        return _PyAnyCAD.GCirc_Distance(self, theP)

    def SquareDistance(self, theP):
        r""" Computes the square distance between <me> and the point theP."""
        return _PyAnyCAD.GCirc_SquareDistance(self, theP)

    def Contains(self, theP, theLinearTolerance):
        r""" Returns True if the point theP is on the circumference. The distance between <me> and <theP> must be lower or equal to theLinearTolerance."""
        return _PyAnyCAD.GCirc_Contains(self, theP, theLinearTolerance)

    def Mirror(self, *args):
        return _PyAnyCAD.GCirc_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a circle with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a circle with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a circle with respect to a plane. The axis placement theA2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GCirc_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCirc_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a circle. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GCirc_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCirc_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a circle. theS is the scaling value. Warnings : If theS is negative the radius stay positive but the "XAxis" and the "YAxis" are  reversed as for an ellipse."""
        return _PyAnyCAD.GCirc_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCirc_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a circle with the transformation theT from class Trsf."""
        return _PyAnyCAD.GCirc_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCirc_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a circle in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a circle from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GCirc_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCirc

# Register GCirc in _PyAnyCAD:
_PyAnyCAD.GCirc_swigregister(GCirc)
class GElips(object):
    r"""
    Describes an ellipse in 3D space. An ellipse is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax2 object) as follows: -   the origin of the coordinate system is the center of the ellipse, -   its "X Direction" defines the major axis of the ellipse, and - its "Y Direction" defines the minor axis of the ellipse. Together, the origin, "X Direction" and "Y Direction" of this coordinate system define the plane of the ellipse. This coordinate system is the "local coordinate system" of the ellipse. In this coordinate system, the equation of the ellipse is:.. code-block:: c++

       X*X / (MajorRadius**2) + Y*Y / (MinorRadius**2) = 1.0 The "main Direction" of the local coordinate system gives the normal vector to the plane of the ellipse. This vector gives an implicit orientation to the ellipse (definition of the trigonometric sense). We refer to the "main Axis" of the local coordinate system as the "Axis" of the ellipse. See Also gce_MakeElips which provides functions for more complex ellipse constructions Geom_Ellipse which provides additional functions for constructing ellipses and works, in particular, with the parametric equations of ellipses
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite ellipse.

        |

        *Overload 2:*
        The major radius of the ellipse is on the "XAxis" and the minor radius is on the "YAxis" of the ellipse. The "XAxis" is defined with the "XDirection" of theA2 and the "YAxis" is defined with the "YDirection" of theA2. Warnings : It is not forbidden to create an ellipse with theMajorRadius = theMinorRadius. Raises ConstructionError if theMajorRadius < theMinorRadius or theMinorRadius < 0.
        """
        _PyAnyCAD.GElips_swiginit(self, _PyAnyCAD.new_GElips(*args))

    def SetAxis(self, theA1):
        r""" Changes the axis normal to the plane of the ellipse. It modifies the definition of this plane. The "XAxis" and the "YAxis" are recomputed. The local coordinate system is redefined so that: -   its origin and "main Direction" become those of the axis theA1 (the "X Direction" and "Y Direction" are then recomputed in the same way as for any gp_Ax2), or Raises ConstructionError if the direction of theA1 is parallel to the direction of the "XAxis" of the ellipse."""
        return _PyAnyCAD.GElips_SetAxis(self, theA1)

    def SetLocation(self, theP):
        r""" Modifies this ellipse, by redefining its local coordinate so that its origin becomes theP."""
        return _PyAnyCAD.GElips_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        r""" The major radius of the ellipse is on the "XAxis" (major axis) of the ellipse. Raises ConstructionError if theMajorRadius < MinorRadius."""
        return _PyAnyCAD.GElips_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        r""" The minor radius of the ellipse is on the "YAxis" (minor axis) of the ellipse. Raises ConstructionError if theMinorRadius > MajorRadius or MinorRadius < 0."""
        return _PyAnyCAD.GElips_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA2):
        r""" Modifies this ellipse, by redefining its local coordinate so that it becomes theA2."""
        return _PyAnyCAD.GElips_SetPosition(self, theA2)

    def Area(self):
        r""" Computes the area of the Ellipse."""
        return _PyAnyCAD.GElips_Area(self)

    def Axis(self):
        r""" Computes the axis normal to the plane of the ellipse."""
        return _PyAnyCAD.GElips_Axis(self)

    def Directrix1(self):
        r""" Computes the first or second directrix of this ellipse. These are the lines, in the plane of the ellipse, normal to the major axis, at a distance equal to MajorRadius/e from the center of the ellipse, where e is the eccentricity of the ellipse. The first directrix (Directrix1) is on the positive side of the major axis. The second directrix (Directrix2) is on the negative side. The directrix is returned as an axis (gp_Ax1 object), the origin of which is situated on the "X Axis" of the local coordinate system of this ellipse. Exceptions Standard_ConstructionError if the eccentricity is null (the ellipse has degenerated into a circle)."""
        return _PyAnyCAD.GElips_Directrix1(self)

    def Directrix2(self):
        r""" This line is obtained by the symmetrical transformation of "Directrix1" with respect to the "YAxis" of the ellipse. Exceptions Standard_ConstructionError if the eccentricity is null (the ellipse has degenerated into a circle)."""
        return _PyAnyCAD.GElips_Directrix2(self)

    def Eccentricity(self):
        r""" Returns the eccentricity of the ellipse  between 0.0 and 1.0 If f is the distance between the center of the ellipse and the Focus1 then the eccentricity e = f / MajorRadius. Raises ConstructionError if MajorRadius = 0.0"""
        return _PyAnyCAD.GElips_Eccentricity(self)

    def Focal(self):
        r""" Computes the focal distance. It is the distance between the two focus focus1 and focus2 of the ellipse."""
        return _PyAnyCAD.GElips_Focal(self)

    def Focus1(self):
        r""" Returns the first focus of the ellipse. This focus is on the positive side of the "XAxis" of the ellipse."""
        return _PyAnyCAD.GElips_Focus1(self)

    def Focus2(self):
        r""" Returns the second focus of the ellipse. This focus is on the negative side of the "XAxis" of the ellipse."""
        return _PyAnyCAD.GElips_Focus2(self)

    def Location(self):
        r""" Returns the center of the ellipse. It is the "Location" point of the coordinate system of the ellipse."""
        return _PyAnyCAD.GElips_Location(self)

    def MajorRadius(self):
        r""" Returns the major radius of the ellipse."""
        return _PyAnyCAD.GElips_MajorRadius(self)

    def MinorRadius(self):
        r""" Returns the minor radius of the ellipse."""
        return _PyAnyCAD.GElips_MinorRadius(self)

    def Parameter(self):
        r""" Returns p = (1 - e * e) * MajorRadius where e is the eccentricity of the ellipse. Returns 0 if MajorRadius = 0"""
        return _PyAnyCAD.GElips_Parameter(self)

    def Position(self):
        r""" Returns the coordinate system of the ellipse."""
        return _PyAnyCAD.GElips_Position(self)

    def XAxis(self):
        r""" Returns the "XAxis" of the ellipse whose origin is the center of this ellipse. It is the major axis of the ellipse."""
        return _PyAnyCAD.GElips_XAxis(self)

    def YAxis(self):
        r""" Returns the "YAxis" of the ellipse whose unit vector is the "X Direction" or the "Y Direction" of the local coordinate system of this ellipse. This is the minor axis of the ellipse."""
        return _PyAnyCAD.GElips_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GElips_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an ellipse with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an ellipse with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of an ellipse with respect to a plane. The axis placement theA2 locates the plane of the symmetry (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GElips_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GElips_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates an ellipse. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GElips_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GElips_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales an ellipse. theS is the scaling value."""
        return _PyAnyCAD.GElips_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GElips_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an ellipse with the transformation theT from class Trsf."""
        return _PyAnyCAD.GElips_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GElips_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an ellipse in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an ellipse from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GElips_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GElips

# Register GElips in _PyAnyCAD:
_PyAnyCAD.GElips_swigregister(GElips)
class GHypr(object):
    r"""
    Describes a branch of a hyperbola in 3D space. A hyperbola is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax2 object) of which: -   the origin is the center of the hyperbola, -   the "X Direction" defines the major axis of the hyperbola, and - the "Y Direction" defines the minor axis of the hyperbola. The origin, "X Direction" and "Y Direction" of this coordinate system together define the plane of the hyperbola. This coordinate system is the "local coordinate system" of the hyperbola. In this coordinate system, the equation of the hyperbola is: X*X/(MajorRadius**2)-Y*Y/(MinorRadius**2) = 1.0 The branch of the hyperbola described is the one located on the positive side of the major axis. The "main Direction" of the local coordinate system is a normal vector to the plane of the hyperbola. This vector gives an implicit orientation to the hyperbola. We refer to the "main Axis" of the local coordinate system as the "Axis" of the hyperbola. The following schema shows the plane of the hyperbola, and in it, the respective positions of the three branches of hyperbolas constructed with the functions OtherBranch, ConjugateBranch1, and ConjugateBranch2:.. code-block:: c++

       ^YAxis | FirstConjugateBranch | Other            |                Main --------------------- C ------------------------------>XAxis Branch           |                Branch | | SecondConjugateBranch |                  ^YAxis Warning The major radius can be less than the minor radius. See Also gce_MakeHypr which provides functions for more complex hyperbola constructions Geom_Hyperbola which provides additional functions for constructing hyperbolas and works, in particular, with the parametric equations of hyperbolas
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates of an indefinite hyperbola.

        |

        *Overload 2:*
        Creates a hyperbola with radius theMajorRadius and theMinorRadius, positioned in the space by the coordinate system theA2 such that: -   the origin of theA2 is the center of the hyperbola, -   the "X Direction" of theA2 defines the major axis of the hyperbola, that is, the major radius theMajorRadius is measured along this axis, and -   the "Y Direction" of theA2 defines the minor axis of the hyperbola, that is, the minor radius theMinorRadius is measured along this axis. Note: This class does not prevent the creation of a hyperbola where: -   theMajorAxis is equal to theMinorAxis, or -   theMajorAxis is less than theMinorAxis. Exceptions Standard_ConstructionError if theMajorAxis or theMinorAxis is negative. Raises ConstructionError if theMajorRadius < 0.0 or theMinorRadius < 0.0 Raised if theMajorRadius < 0.0 or theMinorRadius < 0.0
        """
        _PyAnyCAD.GHypr_swiginit(self, _PyAnyCAD.new_GHypr(*args))

    def SetAxis(self, theA1):
        r""" Modifies this hyperbola, by redefining its local coordinate system so that: -   its origin and "main Direction" become those of the axis theA1 (the "X Direction" and "Y Direction" are then recomputed in the same way as for any gp_Ax2). Raises ConstructionError if the direction of theA1 is parallel to the direction of the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_SetAxis(self, theA1)

    def SetLocation(self, theP):
        r""" Modifies this hyperbola, by redefining its local coordinate system so that its origin becomes theP."""
        return _PyAnyCAD.GHypr_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        r""" Modifies the major  radius of this hyperbola. Exceptions Standard_ConstructionError if theMajorRadius is negative."""
        return _PyAnyCAD.GHypr_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        r""" Modifies the minor  radius of this hyperbola. Exceptions Standard_ConstructionError if theMinorRadius is negative."""
        return _PyAnyCAD.GHypr_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA2):
        r""" Modifies this hyperbola, by redefining its local coordinate system so that it becomes A2."""
        return _PyAnyCAD.GHypr_SetPosition(self, theA2)

    def Asymptote1(self):
        r""" In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = (B/A)*X where A is the major radius and B is the minor radius. Raises ConstructionError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr_Asymptote1(self)

    def Asymptote2(self):
        r""" In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = -(B/A)*X. where A is the major radius and B is the minor radius. Raises ConstructionError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr_Asymptote2(self)

    def Axis(self):
        r""" Returns the axis passing through the center, and normal to the plane of this hyperbola."""
        return _PyAnyCAD.GHypr_Axis(self)

    def ConjugateBranch1(self):
        r""" Computes the branch of hyperbola which is on the positive side of the "YAxis" of <me>."""
        return _PyAnyCAD.GHypr_ConjugateBranch1(self)

    def ConjugateBranch2(self):
        r""" Computes the branch of hyperbola which is on the negative side of the "YAxis" of <me>."""
        return _PyAnyCAD.GHypr_ConjugateBranch2(self)

    def Directrix1(self):
        r""" This directrix is the line normal to the XAxis of the hyperbola in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. This line is parallel to the "YAxis". The intersection point between the directrix1 and the "XAxis" is the "Location" point of the directrix1. This point is on the positive side of the "XAxis"."""
        return _PyAnyCAD.GHypr_Directrix1(self)

    def Directrix2(self):
        r""" This line is obtained by the symmetrical transformation of "Directrix1" with respect to the "YAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_Directrix2(self)

    def Eccentricity(self):
        r""" Returns the eccentricity of the hyperbola (e > 1). If f is the distance between the location of the hyperbola and the Focus1 then the eccentricity e = f / MajorRadius. Raises DomainError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr_Eccentricity(self)

    def Focal(self):
        r""" Computes the focal distance. It is the distance between the the two focus of the hyperbola."""
        return _PyAnyCAD.GHypr_Focal(self)

    def Focus1(self):
        r""" Returns the first focus of the hyperbola. This focus is on the positive side of the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_Focus1(self)

    def Focus2(self):
        r""" Returns the second focus of the hyperbola. This focus is on the negative side of the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_Focus2(self)

    def Location(self):
        r""" Returns  the location point of the hyperbola. It is the intersection point between the "XAxis" and the "YAxis"."""
        return _PyAnyCAD.GHypr_Location(self)

    def MajorRadius(self):
        r""" Returns the major radius of the hyperbola. It is the radius on the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_MajorRadius(self)

    def MinorRadius(self):
        r""" Returns the minor radius of the hyperbola. It is the radius on the "YAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_MinorRadius(self)

    def OtherBranch(self):
        r""" Returns the branch of hyperbola obtained by doing the symmetrical transformation of <me> with respect to the "YAxis"  of <me>."""
        return _PyAnyCAD.GHypr_OtherBranch(self)

    def Parameter(self):
        r""" Returns p = (e * e - 1) * MajorRadius where e is the eccentricity of the hyperbola. Raises DomainError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr_Parameter(self)

    def Position(self):
        r""" Returns the coordinate system of the hyperbola."""
        return _PyAnyCAD.GHypr_Position(self)

    def XAxis(self):
        r""" Computes an axis, whose -   the origin is the center of this hyperbola, and -   the unit vector is the "X Direction" of the local coordinate system of this hyperbola. These axes are, the major axis (the "X Axis") and  of this hyperboReturns the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr_XAxis(self)

    def YAxis(self):
        r""" Computes an axis, whose -   the origin is the center of this hyperbola, and -   the unit vector is the "Y Direction" of the local coordinate system of this hyperbola. These axes are the minor axis (the "Y Axis") of this hyperbola"""
        return _PyAnyCAD.GHypr_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GHypr_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an hyperbola with respect  to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an hyperbola with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of an hyperbola with respect to a plane. The axis placement theA2 locates the plane of the symmetry (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GHypr_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GHypr_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates an hyperbola. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GHypr_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GHypr_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales an hyperbola. theS is the scaling value."""
        return _PyAnyCAD.GHypr_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GHypr_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an hyperbola with the transformation theT from class Trsf."""
        return _PyAnyCAD.GHypr_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GHypr_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an hyperbola in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an hyperbola from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GHypr_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GHypr

# Register GHypr in _PyAnyCAD:
_PyAnyCAD.GHypr_swigregister(GHypr)
class GParab(object):
    r"""
    Describes a parabola in 3D space. A parabola is defined by its focal length (that is, the distance between its focus and apex) and positioned in space with a coordinate system (a gp_Ax2 object) where: -   the origin of the coordinate system is on the apex of the parabola, -   the "X Axis" of the coordinate system is the axis of symmetry; the parabola is on the positive side of this axis, and -   the origin, "X Direction" and "Y Direction" of the coordinate system define the plane of the parabola. The equation of the parabola in this coordinate system, which is the "local coordinate system" of the parabola, is:.. code-block:: c++

       Y**2 = (2*P) * X. where P, referred to as the parameter of the parabola, is the distance between the focus and the directrix (P is twice the focal length). The "main Direction" of the local coordinate system gives the normal vector to the plane of the parabola. See Also gce_MakeParab which provides functions for more complex parabola constructions Geom_Parabola which provides additional functions for constructing parabolas and works, in particular, with the parametric equations of parabolas
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite Parabola.

        |

        *Overload 2:*
        Creates a parabola with its local coordinate system "theA2" and it's focal length "Focal". The XDirection of theA2 defines the axis of symmetry of the parabola. The YDirection of theA2 is parallel to the directrix of the parabola. The Location point of theA2 is the vertex of the parabola Raises ConstructionError if theFocal < 0.0 Raised if theFocal < 0.0

        |

        *Overload 3:*
        theD is the directrix of the parabola and theF the focus point. The symmetry axis (XAxis) of the parabola is normal to the directrix and pass through the focus point theF, but its location point is the vertex of the parabola. The YAxis of the parabola is parallel to theD and its location point is the vertex of the parabola. The normal to the plane of the parabola is the cross product between the XAxis and the YAxis.
        """
        _PyAnyCAD.GParab_swiginit(self, _PyAnyCAD.new_GParab(*args))

    def SetAxis(self, theA1):
        r""" Modifies this parabola by redefining its local coordinate system so that -   its origin and "main Direction" become those of the axis theA1 (the "X Direction" and "Y Direction" are then recomputed in the same way as for any gp_Ax2) Raises ConstructionError if the direction of theA1 is parallel to the previous XAxis of the parabola."""
        return _PyAnyCAD.GParab_SetAxis(self, theA1)

    def SetFocal(self, theFocal):
        r""" Changes the focal distance of the parabola. Raises ConstructionError if theFocal < 0.0"""
        return _PyAnyCAD.GParab_SetFocal(self, theFocal)

    def SetLocation(self, theP):
        r""" Changes the location of the parabola. It is the vertex of the parabola."""
        return _PyAnyCAD.GParab_SetLocation(self, theP)

    def SetPosition(self, theA2):
        r""" Changes the local coordinate system of the parabola."""
        return _PyAnyCAD.GParab_SetPosition(self, theA2)

    def Axis(self):
        r""" Returns the main axis of the parabola. It is the axis normal to the plane of the parabola passing through the vertex of the parabola."""
        return _PyAnyCAD.GParab_Axis(self)

    def Directrix(self):
        r""" Computes the directrix of this parabola. The directrix is: -   a line parallel to the "Y Direction" of the local coordinate system of this parabola, and -   located on the negative side of the axis of symmetry, at a distance from the apex which is equal to the focal length of this parabola. The directrix is returned as an axis (a gp_Ax1 object), the origin of which is situated on the "X Axis" of this parabola."""
        return _PyAnyCAD.GParab_Directrix(self)

    def Focal(self):
        r""" Returns the distance between the vertex and the focus of the parabola."""
        return _PyAnyCAD.GParab_Focal(self)

    def Focus(self):
        r""" -   Computes the focus of the parabola."""
        return _PyAnyCAD.GParab_Focus(self)

    def Location(self):
        r""" Returns the vertex of the parabola. It is the "Location" point of the coordinate system of the parabola."""
        return _PyAnyCAD.GParab_Location(self)

    def Parameter(self):
        r""" Computes the parameter of the parabola. It is the distance between the focus and the directrix of the parabola. This distance is twice the focal length."""
        return _PyAnyCAD.GParab_Parameter(self)

    def Position(self):
        r""" Returns the local coordinate system of the parabola."""
        return _PyAnyCAD.GParab_Position(self)

    def XAxis(self):
        r""" Returns the symmetry axis of the parabola. The location point of the axis is the vertex of the parabola."""
        return _PyAnyCAD.GParab_XAxis(self)

    def YAxis(self):
        r""" It is an axis parallel to the directrix of the parabola. The location point of this axis is the vertex of the parabola."""
        return _PyAnyCAD.GParab_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GParab_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a parabola with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a parabola with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a parabola with respect to a plane. The axis placement theA2 locates the plane of the symmetry (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GParab_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GParab_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a parabola. theA1 is the axis of the rotation. Ang is the angular value of the rotation in radians."""
        return _PyAnyCAD.GParab_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GParab_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a parabola. theS is the scaling value. If theS is negative the direction of the symmetry axis XAxis is reversed and the direction of the YAxis too."""
        return _PyAnyCAD.GParab_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GParab_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a parabola with the transformation theT from class Trsf."""
        return _PyAnyCAD.GParab_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GParab_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a parabola in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a parabola from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GParab_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GParab

# Register GParab in _PyAnyCAD:
_PyAnyCAD.GParab_swigregister(GParab)
class GP(object):
    r""" The geometric processor package, called gp, provides an implementation of entities used  : . for algebraic calculation such as "XYZ" coordinates, "Mat" matrix . for basis analytic geometry such as Transformations, point, vector, line, plane, axis placement, conics, and elementary surfaces. These entities are defined in 2d and 3d space. All the classes of this package are non-persistent."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Resolution():
        r""" Method of package gp In geometric computations, defines the tolerance criterion used to determine when two numbers can be considered equal. Many class functions use this tolerance criterion, for example, to avoid division by zero in geometric computations. In the documentation, tolerance criterion is always referred to as gp::Resolution()."""
        return _PyAnyCAD.GP_Resolution()

    @staticmethod
    def Origin():
        r""" Identifies a Cartesian point with coordinates X = Y = Z = 0.0.0"""
        return _PyAnyCAD.GP_Origin()

    @staticmethod
    def DX():
        r""" Returns a unit vector with the combination (1,0,0)"""
        return _PyAnyCAD.GP_DX()

    @staticmethod
    def DY():
        r""" Returns a unit vector with the combination (0,1,0)"""
        return _PyAnyCAD.GP_DY()

    @staticmethod
    def DZ():
        r""" Returns a unit vector with the combination (0,0,1)"""
        return _PyAnyCAD.GP_DZ()

    @staticmethod
    def OX():
        r""" Identifies an axis where its origin is Origin and its unit vector coordinates  X = 1.0,  Y = Z = 0.0"""
        return _PyAnyCAD.GP_OX()

    @staticmethod
    def OY():
        r""" Identifies an axis where its origin is Origin and its unit vector coordinates Y = 1.0,  X = Z = 0.0"""
        return _PyAnyCAD.GP_OY()

    @staticmethod
    def OZ():
        r""" Identifies an axis where its origin is Origin and its unit vector coordinates Z = 1.0,  Y = X = 0.0"""
        return _PyAnyCAD.GP_OZ()

    @staticmethod
    def XOY():
        r""" Identifies a coordinate system where its origin is Origin, and its "main Direction" and "X Direction" coordinates Z = 1.0, X = Y =0.0 and X direction coordinates X = 1.0, Y = Z = 0.0"""
        return _PyAnyCAD.GP_XOY()

    @staticmethod
    def ZOX():
        r""" Identifies a coordinate system where its origin is Origin, and its "main Direction" and "X Direction" coordinates Y = 1.0, X = Z =0.0 and X direction coordinates Z = 1.0, X = Y = 0.0"""
        return _PyAnyCAD.GP_ZOX()

    @staticmethod
    def YOZ():
        r""" Identifies a coordinate system where its origin is Origin, and its "main Direction" and "X Direction" coordinates X = 1.0, Z = Y =0.0 and X direction coordinates Y = 1.0, X = Z = 0.0 In 2D space"""
        return _PyAnyCAD.GP_YOZ()

    @staticmethod
    def Origin2d():
        r""" Identifies a Cartesian point with coordinates X = Y = 0.0"""
        return _PyAnyCAD.GP_Origin2d()

    @staticmethod
    def DX2d():
        r""" Returns a unit vector with the combinations (1,0)"""
        return _PyAnyCAD.GP_DX2d()

    @staticmethod
    def DY2d():
        r""" Returns a unit vector with the combinations (0,1)"""
        return _PyAnyCAD.GP_DY2d()

    @staticmethod
    def OX2d():
        r""" Identifies an axis where its origin is Origin2d and its unit vector coordinates are: X = 1.0,  Y = 0.0"""
        return _PyAnyCAD.GP_OX2d()

    @staticmethod
    def OY2d():
        r""" Identifies an axis where its origin is Origin2d and its unit vector coordinates are Y = 1.0,  X = 0.0"""
        return _PyAnyCAD.GP_OY2d()

    def __init__(self):
        _PyAnyCAD.GP_swiginit(self, _PyAnyCAD.new_GP())
    __swig_destroy__ = _PyAnyCAD.delete_GP

# Register GP in _PyAnyCAD:
_PyAnyCAD.GP_swigregister(GP)
class GLin2d(object):
    r""" Describes a line in 2D space. A line is positioned in the plane with an axis (a gp_Ax2d object) which gives the line its origin and unit vector. A line and an axis are similar objects, thus, we can convert one into the other. A line provides direct access to the majority of the edit and query functions available on its positioning axis. In addition, however, a line has specific functions for computing distances and positions. See Also GccAna and Geom2dGcc packages which provide functions for constructing lines defined by geometric constraints gce_MakeLin2d which provides functions for more complex line constructions Geom2d_Line which provides additional functions for constructing lines and works, in particular, with the parametric equations of lines"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a Line corresponding to X axis of the reference coordinate system.

        |

        *Overload 2:*
        Creates a line located with theA.

        |

        *Overload 3:*
        <theP> is the location point (origin) of the line and <theV> is the direction of the line.

        |

        *Overload 4:*
        Creates the line from the equation theA*X + theB*Y + theC = 0.0 Raises ConstructionError if Sqrt(theA*theA + theB*theB) <= Resolution from gp. Raised if Sqrt(theA*theA + theB*theB) <= Resolution from gp.
        """
        _PyAnyCAD.GLin2d_swiginit(self, _PyAnyCAD.new_GLin2d(*args))

    def Reverse(self):
        return _PyAnyCAD.GLin2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the positioning axis of this line. Note: -   Reverse assigns the result to this line, while -   Reversed creates a new one."""
        return _PyAnyCAD.GLin2d_Reversed(self)

    def SetDirection(self, theV):
        r""" Changes the direction of the line."""
        return _PyAnyCAD.GLin2d_SetDirection(self, theV)

    def SetLocation(self, theP):
        r""" Changes the origin of the line."""
        return _PyAnyCAD.GLin2d_SetLocation(self, theP)

    def SetPosition(self, theA):
        r""" Complete redefinition of the line. The "Location" point of <theA> is the origin of the line. The "Direction" of <theA> is  the direction of the line."""
        return _PyAnyCAD.GLin2d_SetPosition(self, theA)

    def Coefficients(self, theA, theB, theC):
        r""" Returns the normalized coefficients of the line : theA * X + theB * Y + theC = 0."""
        return _PyAnyCAD.GLin2d_Coefficients(self, theA, theB, theC)

    def Direction(self):
        r""" Returns the direction of the line."""
        return _PyAnyCAD.GLin2d_Direction(self)

    def Location(self):
        r""" Returns the location point (origin) of the line."""
        return _PyAnyCAD.GLin2d_Location(self)

    def Position(self):
        r""" Returns the axis placement one axis with the same location and direction as <me>."""
        return _PyAnyCAD.GLin2d_Position(self)

    def Angle(self, theOther):
        r""" Computes the angle between two lines in radians."""
        return _PyAnyCAD.GLin2d_Angle(self, theOther)

    def Contains(self, theP, theLinearTolerance):
        r""" Returns true if this line contains the point theP, that is, if the distance between point theP and this line is less than or equal to theLinearTolerance."""
        return _PyAnyCAD.GLin2d_Contains(self, theP, theLinearTolerance)

    def Distance(self, *args):
        r"""
        *Overload 1:*
        Computes the distance between <me> and the point <theP>.

        |

        *Overload 2:*
        Computes the distance between two lines.
        """
        return _PyAnyCAD.GLin2d_Distance(self, *args)

    def SquareDistance(self, *args):
        r"""
        *Overload 1:*
        Computes the square distance between <me> and the point <theP>.

        |

        *Overload 2:*
        Computes the square distance between two lines.
        """
        return _PyAnyCAD.GLin2d_SquareDistance(self, *args)

    def Normal(self, theP):
        r""" Computes the line normal to the direction of <me>, passing through the point <theP>."""
        return _PyAnyCAD.GLin2d_Normal(self, theP)

    def Mirror(self, *args):
        return _PyAnyCAD.GLin2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a line with respect to the point <theP> which is the center of the symmetry

        |

        *Overload 2:*
        Performs the symmetrical transformation of a line with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GLin2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GLin2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates a line. theP is the center of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GLin2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GLin2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a line. theS is the scaling value. Only the origin of the line is modified."""
        return _PyAnyCAD.GLin2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GLin2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a line with the transformation theT from class Trsf2d."""
        return _PyAnyCAD.GLin2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GLin2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a line in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a line from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GLin2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GLin2d

# Register GLin2d in _PyAnyCAD:
_PyAnyCAD.GLin2d_swigregister(GLin2d)
class GCirc2d(object):
    r""" Describes a circle in the plane (2D space). A circle is defined by its radius and positioned in the plane with a coordinate system (a gp_Ax22d object) as follows: -   the origin of the coordinate system is the center of the circle, and -   the orientation (direct or indirect) of the coordinate system gives an implicit orientation to the circle (and defines its trigonometric sense). This positioning coordinate system is the "local coordinate system" of the circle. Note: when a gp_Circ2d circle is converted into a Geom2d_Circle circle, some implicit properties of the circle are used explicitly: -   the implicit orientation corresponds to the direction in which parameter values increase, -   the starting point for parameterization is that of the "X Axis" of the local coordinate system (i.e. the "X Axis" of the circle). See Also GccAna and Geom2dGcc packages which provide functions for constructing circles defined by geometric constraints gce_MakeCirc2d which provides functions for more complex circle constructions Geom2d_Circle which provides additional functions for constructing circles and works, with the parametric equations of circles in particular  gp_Ax22d"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        creates an indefinite circle.

        |

        *Overload 2:*
        The location point of theXAxis is the center of the circle. Warnings : It is not forbidden to create a circle with theRadius = 0.0   Raises ConstructionError if theRadius < 0.0. Raised if theRadius < 0.0.

        |

        *Overload 3:*
        The location point of theXAxis is the center of the circle. Warnings : It is not forbidden to create a circle with theRadius = 0.0   Raises ConstructionError if theRadius < 0.0. Raised if theRadius < 0.0.

        |

        *Overload 4:*
        theAxis defines the Xaxis and Yaxis of the circle which defines the origin and the sense of parametrization. The location point of theAxis is the center of the circle. Warnings : It is not forbidden to create a circle with theRadius = 0.0 Raises ConstructionError if theRadius < 0.0. Raised if theRadius < 0.0.
        """
        _PyAnyCAD.GCirc2d_swiginit(self, _PyAnyCAD.new_GCirc2d(*args))

    def SetLocation(self, theP):
        r""" Changes the location point (center) of the circle."""
        return _PyAnyCAD.GCirc2d_SetLocation(self, theP)

    def SetXAxis(self, theA):
        r""" Changes the X axis of the circle."""
        return _PyAnyCAD.GCirc2d_SetXAxis(self, theA)

    def SetAxis(self, theA):
        r""" Changes the X axis of the circle."""
        return _PyAnyCAD.GCirc2d_SetAxis(self, theA)

    def SetYAxis(self, theA):
        r""" Changes the Y axis of the circle."""
        return _PyAnyCAD.GCirc2d_SetYAxis(self, theA)

    def SetRadius(self, theRadius):
        r""" Modifies the radius of this circle. This class does not prevent the creation of a circle where theRadius is null. Exceptions Standard_ConstructionError if theRadius is negative."""
        return _PyAnyCAD.GCirc2d_SetRadius(self, theRadius)

    def Area(self):
        r""" Computes the area of the circle."""
        return _PyAnyCAD.GCirc2d_Area(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        r""" Returns the normalized coefficients from the implicit equation of the circle : theA * (X**2) + theB * (Y**2) + 2*theC*(X*Y) + 2*theD*X + 2*theE*Y + theF = 0.0"""
        return _PyAnyCAD.GCirc2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Contains(self, theP, theLinearTolerance):
        r""" Does <me> contain theP ? Returns True if the distance between theP and any point on the circumference of the circle is lower of equal to <theLinearTolerance>."""
        return _PyAnyCAD.GCirc2d_Contains(self, theP, theLinearTolerance)

    def Distance(self, theP):
        r""" Computes the minimum of distance between the point theP and any point on the circumference of the circle."""
        return _PyAnyCAD.GCirc2d_Distance(self, theP)

    def SquareDistance(self, theP):
        r""" Computes the square distance between <me> and the point theP."""
        return _PyAnyCAD.GCirc2d_SquareDistance(self, theP)

    def Length(self):
        r""" computes the circumference of the circle."""
        return _PyAnyCAD.GCirc2d_Length(self)

    def Location(self):
        r""" Returns the location point (center) of the circle."""
        return _PyAnyCAD.GCirc2d_Location(self)

    def Radius(self):
        r""" Returns the radius value of the circle."""
        return _PyAnyCAD.GCirc2d_Radius(self)

    def Axis(self):
        r""" returns the position of the circle."""
        return _PyAnyCAD.GCirc2d_Axis(self)

    def Position(self):
        r""" returns the position of the circle. Idem Axis(me)."""
        return _PyAnyCAD.GCirc2d_Position(self)

    def XAxis(self):
        r""" returns the X axis of the circle."""
        return _PyAnyCAD.GCirc2d_XAxis(self)

    def YAxis(self):
        r""" Returns the Y axis of the circle. Reverses the direction of the circle."""
        return _PyAnyCAD.GCirc2d_YAxis(self)

    def Reverse(self):
        r""" Reverses the orientation of the local coordinate system of this circle (the "Y Direction" is reversed) and therefore changes the implicit orientation of this circle. Reverse assigns the result to this circle,"""
        return _PyAnyCAD.GCirc2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the orientation of the local coordinate system of this circle (the "Y Direction" is reversed) and therefore changes the implicit orientation of this circle. Reversed creates a new circle."""
        return _PyAnyCAD.GCirc2d_Reversed(self)

    def IsDirect(self):
        r""" Returns true if the local coordinate system is direct and false in the other case."""
        return _PyAnyCAD.GCirc2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCirc2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a circle with respect to the point theP which is the center of the symmetry

        |

        *Overload 2:*
        Performs the symmetrical transformation of a circle with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GCirc2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GCirc2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates a circle. theP is the center of the rotation. Ang is the angular value of the rotation in radians."""
        return _PyAnyCAD.GCirc2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCirc2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a circle. theS is the scaling value. Warnings : If theS is negative the radius stay positive but the "XAxis" and the "YAxis" are  reversed as for an ellipse."""
        return _PyAnyCAD.GCirc2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCirc2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a circle with the transformation theT from class Trsf2d."""
        return _PyAnyCAD.GCirc2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCirc2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a circle in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a circle from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GCirc2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCirc2d

# Register GCirc2d in _PyAnyCAD:
_PyAnyCAD.GCirc2d_swigregister(GCirc2d)
class GElips2d(object):
    r"""
    Describes an ellipse in the plane (2D space). An ellipse is defined by its major and minor radii and positioned in the plane with a coordinate system (a gp_Ax22d object) as follows: -   the origin of the coordinate system is the center of the ellipse, -   its "X Direction" defines the major axis of the ellipse, and -   its "Y Direction" defines the minor axis of the ellipse. This coordinate system is the "local coordinate system" of the ellipse. Its orientation (direct or indirect) gives an implicit orientation to the ellipse. In this coordinate system, the equation of the ellipse is:.. code-block:: c++

       X*X / (MajorRadius**2) + Y*Y / (MinorRadius**2) = 1.0 See Also gce_MakeElips2d which provides functions for more complex ellipse constructions Geom2d_Ellipse which provides additional functions for constructing ellipses and works, in particular, with the parametric equations of ellipses
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite ellipse.

        |

        *Overload 2:*
        Creates an ellipse with the major axis, the major and the minor radius. The location of the theMajorAxis is the center of the  ellipse. The sense of parametrization is given by theIsSense. Warnings : It is possible to create an ellipse with theMajorRadius = theMinorRadius. Raises ConstructionError if theMajorRadius < theMinorRadius or theMinorRadius < 0.0

        |

        *Overload 3:*
        Creates an ellipse with the major axis, the major and the minor radius. The location of the theMajorAxis is the center of the  ellipse. The sense of parametrization is given by theIsSense. Warnings : It is possible to create an ellipse with theMajorRadius = theMinorRadius. Raises ConstructionError if theMajorRadius < theMinorRadius or theMinorRadius < 0.0

        |

        *Overload 4:*
        Creates an ellipse with radii MajorRadius and MinorRadius, positioned in the plane by coordinate system theA where: -   the origin of theA is the center of the ellipse, -   the "X Direction" of theA defines the major axis of the ellipse, that is, the major radius MajorRadius is measured along this axis, and -   the "Y Direction" of theA defines the minor axis of the ellipse, that is, the minor radius theMinorRadius is measured along this axis, and -   the orientation (direct or indirect sense) of theA gives the orientation of the ellipse. Warnings : It is possible to create an ellipse with theMajorRadius = theMinorRadius. Raises ConstructionError if theMajorRadius < theMinorRadius or theMinorRadius < 0.0
        """
        _PyAnyCAD.GElips2d_swiginit(self, _PyAnyCAD.new_GElips2d(*args))

    def SetLocation(self, theP):
        r""" Modifies this ellipse, by redefining its local coordinate system so that -   its origin becomes theP."""
        return _PyAnyCAD.GElips2d_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        r""" Changes the value of the major radius. Raises ConstructionError if theMajorRadius < MinorRadius."""
        return _PyAnyCAD.GElips2d_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        r""" Changes the value of the minor radius. Raises ConstructionError if MajorRadius < theMinorRadius or MinorRadius < 0.0"""
        return _PyAnyCAD.GElips2d_SetMinorRadius(self, theMinorRadius)

    def SetAxis(self, theA):
        r""" Modifies this ellipse, by redefining its local coordinate system so that it becomes theA."""
        return _PyAnyCAD.GElips2d_SetAxis(self, theA)

    def SetXAxis(self, theA):
        r""" Modifies this ellipse, by redefining its local coordinate system so that its origin and its "X Direction"  become those of the axis theA. The "Y  Direction"  is then recomputed. The orientation of the local coordinate system is not modified."""
        return _PyAnyCAD.GElips2d_SetXAxis(self, theA)

    def SetYAxis(self, theA):
        r""" Modifies this ellipse, by redefining its local coordinate system so that its origin and its "Y Direction"  become those of the axis theA. The "X  Direction"  is then recomputed. The orientation of the local coordinate system is not modified."""
        return _PyAnyCAD.GElips2d_SetYAxis(self, theA)

    def Area(self):
        r""" Computes the area of the ellipse."""
        return _PyAnyCAD.GElips2d_Area(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        r""" Returns the coefficients of the implicit equation of the ellipse. theA * (X**2) + theB * (Y**2) + 2*theC*(X*Y) + 2*theD*X + 2*theE*Y + theF = 0."""
        return _PyAnyCAD.GElips2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Directrix1(self):
        r""" This directrix is the line normal to the XAxis of the ellipse in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the ellipse, where e is the eccentricity of the ellipse. This line is parallel to the "YAxis". The intersection point between directrix1 and the "XAxis" is the location point of the directrix1. This point is on the positive side of the "XAxis". Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle)"""
        return _PyAnyCAD.GElips2d_Directrix1(self)

    def Directrix2(self):
        r""" This line is obtained by the symmetrical transformation of "Directrix1" with respect to the minor axis of the ellipse. Raised if Eccentricity = 0.0. (The ellipse degenerates into a circle)."""
        return _PyAnyCAD.GElips2d_Directrix2(self)

    def Eccentricity(self):
        r""" Returns the eccentricity of the ellipse  between 0.0 and 1.0 If f is the distance between the center of the ellipse and the Focus1 then the eccentricity e = f / MajorRadius. Returns 0 if MajorRadius = 0."""
        return _PyAnyCAD.GElips2d_Eccentricity(self)

    def Focal(self):
        r""" Returns the distance between the center of the ellipse and focus1 or focus2."""
        return _PyAnyCAD.GElips2d_Focal(self)

    def Focus1(self):
        r""" Returns the first focus of the ellipse. This focus is on the positive side of the major axis of the ellipse."""
        return _PyAnyCAD.GElips2d_Focus1(self)

    def Focus2(self):
        r""" Returns the second focus of the ellipse. This focus is on the negative side of the major axis of the ellipse."""
        return _PyAnyCAD.GElips2d_Focus2(self)

    def Location(self):
        r""" Returns the center of the ellipse."""
        return _PyAnyCAD.GElips2d_Location(self)

    def MajorRadius(self):
        r""" Returns the major radius of the Ellipse."""
        return _PyAnyCAD.GElips2d_MajorRadius(self)

    def MinorRadius(self):
        r""" Returns the minor radius of the Ellipse."""
        return _PyAnyCAD.GElips2d_MinorRadius(self)

    def Parameter(self):
        r""" Returns p = (1 - e * e) * MajorRadius where e is the eccentricity of the ellipse. Returns 0 if MajorRadius = 0"""
        return _PyAnyCAD.GElips2d_Parameter(self)

    def Axis(self):
        r""" Returns the major axis of the ellipse."""
        return _PyAnyCAD.GElips2d_Axis(self)

    def XAxis(self):
        r""" Returns the major axis of the ellipse."""
        return _PyAnyCAD.GElips2d_XAxis(self)

    def YAxis(self):
        r""" Returns the minor axis of the ellipse. Reverses the direction of the circle."""
        return _PyAnyCAD.GElips2d_YAxis(self)

    def Reverse(self):
        return _PyAnyCAD.GElips2d_Reverse(self)

    def Reversed(self):
        return _PyAnyCAD.GElips2d_Reversed(self)

    def IsDirect(self):
        r""" Returns true if the local coordinate system is direct and false in the other case."""
        return _PyAnyCAD.GElips2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GElips2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a ellipse with respect to the point theP which is the center of the symmetry

        |

        *Overload 2:*
        Performs the symmetrical transformation of a ellipse with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GElips2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GElips2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        return _PyAnyCAD.GElips2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GElips2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a ellipse. theS is the scaling value."""
        return _PyAnyCAD.GElips2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GElips2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an ellipse with the transformation theT from class Trsf2d."""
        return _PyAnyCAD.GElips2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GElips2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a ellipse in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a ellipse from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GElips2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GElips2d

# Register GElips2d in _PyAnyCAD:
_PyAnyCAD.GElips2d_swigregister(GElips2d)
class GHypr2d(object):
    r"""
    Describes a branch of a hyperbola in the plane (2D space). A hyperbola is defined by its major and minor radii, and positioned in the plane with a coordinate system (a gp_Ax22d object) of which: -   the origin is the center of the hyperbola, -   the "X Direction" defines the major axis of the hyperbola, and -   the "Y Direction" defines the minor axis of the hyperbola. This coordinate system is the "local coordinate system" of the hyperbola. The orientation of this coordinate system (direct or indirect) gives an implicit orientation to the hyperbola. In this coordinate system, the equation of the hyperbola is: X*X/(MajorRadius**2)-Y*Y/(MinorRadius**2) = 1.0 The branch of the hyperbola described is the one located on the positive side of the major axis. The following schema shows the plane of the hyperbola, and in it, the respective positions of the three branches of hyperbolas constructed with the functions OtherBranch, ConjugateBranch1, and ConjugateBranch2:.. code-block:: c++

       ^YAxis | FirstConjugateBranch | Other            |                Main --------------------- C ------------------------------>XAxis Branch           |                Branch | | SecondConjugateBranch | Warning The major radius can be less than the minor radius. See Also gce_MakeHypr2d which provides functions for more complex hyperbola constructions Geom2d_Hyperbola which provides additional functions for constructing hyperbolas and works, in particular, with the parametric equations of hyperbolas
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates of an indefinite hyperbola.

        |

        *Overload 2:*
        Creates a hyperbola with radii theMajorRadius and theMinorRadius, centered on the origin of theMajorAxis and where the unit vector of theMajorAxis is the "X Direction" of the local coordinate system of the hyperbola. This coordinate system is direct if theIsSense is true (the default value), and indirect if theIsSense is false. Warnings : It is yet  possible to create an Hyperbola with theMajorRadius <= theMinorRadius. Raises ConstructionError if theMajorRadius < 0.0 or theMinorRadius < 0.0

        |

        *Overload 3:*
        Creates a hyperbola with radii theMajorRadius and theMinorRadius, centered on the origin of theMajorAxis and where the unit vector of theMajorAxis is the "X Direction" of the local coordinate system of the hyperbola. This coordinate system is direct if theIsSense is true (the default value), and indirect if theIsSense is false. Warnings : It is yet  possible to create an Hyperbola with theMajorRadius <= theMinorRadius. Raises ConstructionError if theMajorRadius < 0.0 or theMinorRadius < 0.0

        |

        *Overload 4:*
        a hyperbola with radii theMajorRadius and theMinorRadius, positioned in the plane by coordinate system theA where: -   the origin of theA is the center of the hyperbola, -   the "X Direction" of theA defines the major axis of the hyperbola, that is, the major radius theMajorRadius is measured along this axis, and -   the "Y Direction" of theA defines the minor axis of the hyperbola, that is, the minor radius theMinorRadius is measured along this axis, and -   the orientation (direct or indirect sense) of theA gives the implicit orientation of the hyperbola. Warnings : It is yet  possible to create an Hyperbola with theMajorRadius <= theMinorRadius. Raises ConstructionError if theMajorRadius < 0.0 or theMinorRadius < 0.0
        """
        _PyAnyCAD.GHypr2d_swiginit(self, _PyAnyCAD.new_GHypr2d(*args))

    def SetLocation(self, theP):
        r""" Modifies this hyperbola, by redefining its local coordinate system so that its origin becomes theP."""
        return _PyAnyCAD.GHypr2d_SetLocation(self, theP)

    def SetMajorRadius(self, theMajorRadius):
        r""" Modifies the major or minor radius of this hyperbola. Exceptions Standard_ConstructionError if theMajorRadius or MinorRadius is negative."""
        return _PyAnyCAD.GHypr2d_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        r""" Modifies the major or minor radius of this hyperbola. Exceptions Standard_ConstructionError if MajorRadius or theMinorRadius is negative."""
        return _PyAnyCAD.GHypr2d_SetMinorRadius(self, theMinorRadius)

    def SetAxis(self, theA):
        r""" Modifies this hyperbola, by redefining its local coordinate system so that it becomes theA."""
        return _PyAnyCAD.GHypr2d_SetAxis(self, theA)

    def SetXAxis(self, theA):
        r""" Changes the major axis of the hyperbola. The minor axis is recomputed and the location of the hyperbola too."""
        return _PyAnyCAD.GHypr2d_SetXAxis(self, theA)

    def SetYAxis(self, theA):
        r""" Changes the minor axis of the hyperbola.The minor axis is recomputed and the location of the hyperbola too."""
        return _PyAnyCAD.GHypr2d_SetYAxis(self, theA)

    def Asymptote1(self):
        r""" In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = (B/A)*X where A is the major radius of the hyperbola and B the minor radius of the hyperbola. Raises ConstructionError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr2d_Asymptote1(self)

    def Asymptote2(self):
        r""" In the local coordinate system of the hyperbola the equation of the hyperbola is (X*X)/(A*A) - (Y*Y)/(B*B) = 1.0 and the equation of the first asymptote is Y = -(B/A)*X where A is the major radius of the hyperbola and B the minor radius of the hyperbola. Raises ConstructionError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr2d_Asymptote2(self)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        r""" Computes the coefficients of the implicit equation of the hyperbola : theA * (X**2) + theB * (Y**2) + 2*theC*(X*Y) + 2*theD*X + 2*theE*Y + theF = 0."""
        return _PyAnyCAD.GHypr2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def ConjugateBranch1(self):
        r""" Computes the branch of hyperbola which is on the positive side of the "YAxis" of <me>."""
        return _PyAnyCAD.GHypr2d_ConjugateBranch1(self)

    def ConjugateBranch2(self):
        r""" Computes the branch of hyperbola which is on the negative side of the "YAxis" of <me>."""
        return _PyAnyCAD.GHypr2d_ConjugateBranch2(self)

    def Directrix1(self):
        r""" Computes the directrix which is the line normal to the XAxis of the hyperbola in the local plane (Z = 0) at a distance d = MajorRadius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. This line is parallel to the "YAxis". The intersection point between the "Directrix1" and the "XAxis" is the "Location" point of the "Directrix1". This point is on the positive side of the "XAxis"."""
        return _PyAnyCAD.GHypr2d_Directrix1(self)

    def Directrix2(self):
        r""" This line is obtained by the symmetrical transformation of "Directrix1" with respect to the "YAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr2d_Directrix2(self)

    def Eccentricity(self):
        r""" Returns the eccentricity of the hyperbola (e > 1). If f is the distance between the location of the hyperbola and the Focus1 then the eccentricity e = f / MajorRadius. Raises DomainError if MajorRadius = 0.0."""
        return _PyAnyCAD.GHypr2d_Eccentricity(self)

    def Focal(self):
        r""" Computes the focal distance. It is the distance between the "Location" of the hyperbola and "Focus1" or "Focus2"."""
        return _PyAnyCAD.GHypr2d_Focal(self)

    def Focus1(self):
        r""" Returns the first focus of the hyperbola. This focus is on the positive side of the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr2d_Focus1(self)

    def Focus2(self):
        r""" Returns the second focus of the hyperbola. This focus is on the negative side of the "XAxis" of the hyperbola."""
        return _PyAnyCAD.GHypr2d_Focus2(self)

    def Location(self):
        r""" Returns  the location point of the hyperbola. It is the intersection point between the "XAxis" and the "YAxis"."""
        return _PyAnyCAD.GHypr2d_Location(self)

    def MajorRadius(self):
        r""" Returns the major radius of the hyperbola (it is the radius corresponding to the "XAxis" of the hyperbola)."""
        return _PyAnyCAD.GHypr2d_MajorRadius(self)

    def MinorRadius(self):
        r""" Returns the minor radius of the hyperbola (it is the radius corresponding to the "YAxis" of the hyperbola)."""
        return _PyAnyCAD.GHypr2d_MinorRadius(self)

    def OtherBranch(self):
        r""" Returns the branch of hyperbola obtained by doing the symmetrical transformation of <me> with respect to the "YAxis" of <me>."""
        return _PyAnyCAD.GHypr2d_OtherBranch(self)

    def Parameter(self):
        r""" Returns p = (e * e - 1) * MajorRadius where e is the eccentricity of the hyperbola. Raises DomainError if MajorRadius = 0.0"""
        return _PyAnyCAD.GHypr2d_Parameter(self)

    def Axis(self):
        r""" Returns the axisplacement of the hyperbola."""
        return _PyAnyCAD.GHypr2d_Axis(self)

    def XAxis(self):
        r""" Computes an axis whose -   the origin is the center of this hyperbola, and -   the unit vector is the "X Direction" or "Y Direction" respectively of the local coordinate system of this hyperbola Returns the major axis of the hyperbola."""
        return _PyAnyCAD.GHypr2d_XAxis(self)

    def YAxis(self):
        r""" Computes an axis whose -   the origin is the center of this hyperbola, and -   the unit vector is the "X Direction" or "Y Direction" respectively of the local coordinate system of this hyperbola Returns the minor axis of the hyperbola."""
        return _PyAnyCAD.GHypr2d_YAxis(self)

    def Reverse(self):
        return _PyAnyCAD.GHypr2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the orientation of the local coordinate system of this hyperbola (the "Y Axis" is reversed). Therefore, the implicit orientation of this hyperbola is reversed. Note: -   Reverse assigns the result to this hyperbola, while -   Reversed creates a new one."""
        return _PyAnyCAD.GHypr2d_Reversed(self)

    def IsDirect(self):
        r""" Returns true if the local coordinate system is direct and false in the other case."""
        return _PyAnyCAD.GHypr2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GHypr2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of an hyperbola with respect  to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of an hyperbola with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GHypr2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GHypr2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates an hyperbola. theP is the center of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GHypr2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GHypr2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales an hyperbola. <theS> is the scaling value. If <theS> is positive only the location point is modified. But if <theS> is negative the "XAxis" is reversed and the "YAxis" too."""
        return _PyAnyCAD.GHypr2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GHypr2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an hyperbola with the transformation theT from class Trsf2d."""
        return _PyAnyCAD.GHypr2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GHypr2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates an hyperbola in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates an hyperbola from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GHypr2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GHypr2d

# Register GHypr2d in _PyAnyCAD:
_PyAnyCAD.GHypr2d_swigregister(GHypr2d)
class GParab2d(object):
    r"""
    Describes a parabola in the plane (2D space). A parabola is defined by its focal length (that is, the distance between its focus and apex) and positioned in the plane with a coordinate system (a gp_Ax22d object) where: -   the origin of the coordinate system is on the apex of the parabola, and -   the "X Axis" of the coordinate system is the axis of symmetry; the parabola is on the positive side of this axis. This coordinate system is the "local coordinate system" of the parabola. Its orientation (direct or indirect sense) gives an implicit orientation to the parabola. In this coordinate system, the equation for the parabola is:.. code-block:: c++

       Y**2 = (2*P) * X. where P, referred to as the parameter of the parabola, is the distance between the focus and the directrix (P is twice the focal length). See Also GCE2d_MakeParab2d which provides functions for more complex parabola constructions Geom2d_Parabola which provides additional functions for constructing parabolas and works, in particular, with the parametric equations of parabolas
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite parabola.

        |

        *Overload 2:*
        Creates a parabola with its vertex point, its axis of symmetry ("XAxis") and its focal length. The sense of parametrization is given by theSense. If theSense == TRUE (by default) then right-handed coordinate system is used, otherwise - left-handed. Warnings : It is possible to have FocalLength = 0. In this case, the parabola looks like a line, which is parallel to the symmetry-axis. Raises ConstructionError if FocalLength < 0.0

        |

        *Overload 3:*
        Creates a parabola with its vertex point, its axis of symmetry ("XAxis") and its focal length. The sense of parametrization is given by theSense. If theSense == TRUE (by default) then right-handed coordinate system is used, otherwise - left-handed. Warnings : It is possible to have FocalLength = 0. In this case, the parabola looks like a line, which is parallel to the symmetry-axis. Raises ConstructionError if FocalLength < 0.0

        |

        *Overload 4:*
        Creates a parabola with its vertex point, its axis of symmetry ("XAxis"), correspond Y-axis and its focal length. Warnings : It is possible to have FocalLength = 0. In this case, the parabola looks like a line, which is parallel to the symmetry-axis. Raises ConstructionError if Focal < 0.0

        |

        *Overload 5:*
        Creates a parabola with the directrix and the focus point. Y-axis of the parabola (in User Coordinate System - UCS) is the direction of theDirectrix. X-axis always directs from theDirectrix to theFocus point and always comes through theFocus. Apex of the parabola is a middle point between the theFocus and the intersection point of theDirectrix and the X-axis. Warnings : It is possible to have FocalLength = 0 (when theFocus lies in theDirectrix). In this case, X-direction of the parabola is defined  by theSense parameter. If theSense == TRUE (by default) then right-handed coordinate system is used, otherwise - left-handed. Result parabola will look like a line, which is perpendicular to the directrix.

        |

        *Overload 6:*
        Creates a parabola with the directrix and the focus point. Y-axis of the parabola (in User Coordinate System - UCS) is the direction of theDirectrix. X-axis always directs from theDirectrix to theFocus point and always comes through theFocus. Apex of the parabola is a middle point between the theFocus and the intersection point of theDirectrix and the X-axis. Warnings : It is possible to have FocalLength = 0 (when theFocus lies in theDirectrix). In this case, X-direction of the parabola is defined  by theSense parameter. If theSense == TRUE (by default) then right-handed coordinate system is used, otherwise - left-handed. Result parabola will look like a line, which is perpendicular to the directrix.
        """
        _PyAnyCAD.GParab2d_swiginit(self, _PyAnyCAD.new_GParab2d(*args))

    def SetFocal(self, theFocal):
        r""" Changes the focal distance of the parabola Warnings : It is possible to have theFocal = 0. Raises ConstructionError if theFocal < 0.0"""
        return _PyAnyCAD.GParab2d_SetFocal(self, theFocal)

    def SetLocation(self, theP):
        r""" Changes the "Location" point of the parabola. It is the vertex of the parabola."""
        return _PyAnyCAD.GParab2d_SetLocation(self, theP)

    def SetMirrorAxis(self, theA):
        r""" Modifies this parabola, by redefining its local coordinate system so that its origin and "X Direction" become those of the axis MA. The "Y Direction" of the local coordinate system is then recomputed. The orientation of the local coordinate system is not modified."""
        return _PyAnyCAD.GParab2d_SetMirrorAxis(self, theA)

    def SetAxis(self, theA):
        r""" Changes the local coordinate system of the parabola. The "Location" point of A becomes the vertex of the parabola."""
        return _PyAnyCAD.GParab2d_SetAxis(self, theA)

    def Coefficients(self, theA, theB, theC, theD, theE, theF):
        r"""
        Computes the coefficients of the implicit equation of the parabola (in WCS - World Coordinate System)... code-block:: c++

           theA * (X**2) + theB * (Y**2) + 2*theC*(X*Y) + 2*theD*X + 2*theE*Y + theF = 0.
        """
        return _PyAnyCAD.GParab2d_Coefficients(self, theA, theB, theC, theD, theE, theF)

    def Directrix(self):
        r""" Computes the directrix of the parabola. The directrix is: -   a line parallel to the "Y Direction" of the local coordinate system of this parabola, and -   located on the negative side of the axis of symmetry, at a distance from the apex which is equal to the focal  length of this parabola. The directrix is returned as an axis (a gp_Ax2d object), the origin of which is situated on the "X Axis" of this parabola."""
        return _PyAnyCAD.GParab2d_Directrix(self)

    def Focal(self):
        r""" Returns the distance between the vertex and the focus of the parabola."""
        return _PyAnyCAD.GParab2d_Focal(self)

    def Focus(self):
        r""" Returns the focus of the parabola."""
        return _PyAnyCAD.GParab2d_Focus(self)

    def Location(self):
        r""" Returns the vertex of the parabola."""
        return _PyAnyCAD.GParab2d_Location(self)

    def MirrorAxis(self):
        r""" Returns the symmetry axis of the parabola. The "Location" point of this axis is the vertex of the parabola."""
        return _PyAnyCAD.GParab2d_MirrorAxis(self)

    def Axis(self):
        r""" Returns the local coordinate system of the parabola. The "Location" point of this axis is the vertex of the parabola."""
        return _PyAnyCAD.GParab2d_Axis(self)

    def Parameter(self):
        r""" Returns the distance between the focus and the directrix of the parabola."""
        return _PyAnyCAD.GParab2d_Parameter(self)

    def Reverse(self):
        return _PyAnyCAD.GParab2d_Reverse(self)

    def Reversed(self):
        r""" Reverses the orientation of the local coordinate system of this parabola (the "Y Direction" is reversed). Therefore, the implicit orientation of this parabola is reversed. Note: -   Reverse assigns the result to this parabola, while -   Reversed creates a new one."""
        return _PyAnyCAD.GParab2d_Reversed(self)

    def IsDirect(self):
        r""" Returns true if the local coordinate system is direct and false in the other case."""
        return _PyAnyCAD.GParab2d_IsDirect(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GParab2d_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a parabola with respect to the point theP which is the center of the symmetry

        |

        *Overload 2:*
        Performs the symmetrical transformation of a parabola with respect to an axis placement which is the axis of the symmetry.
        """
        return _PyAnyCAD.GParab2d_Mirrored(self, *args)

    def Rotate(self, theP, theAng):
        return _PyAnyCAD.GParab2d_Rotate(self, theP, theAng)

    def Rotated(self, theP, theAng):
        r""" Rotates a parabola. theP is the center of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GParab2d_Rotated(self, theP, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GParab2d_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a parabola. theS is the scaling value. If theS is negative the direction of the symmetry axis "XAxis" is reversed and the direction of the "YAxis" too."""
        return _PyAnyCAD.GParab2d_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GParab2d_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms an parabola with the transformation theT from class Trsf2d."""
        return _PyAnyCAD.GParab2d_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GParab2d_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a parabola in the direction of the vectorthe theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a parabola from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GParab2d_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GParab2d

# Register GParab2d in _PyAnyCAD:
_PyAnyCAD.GParab2d_swigregister(GParab2d)
class GCylinder(object):
    r""" Describes an infinite cylindrical surface. A cylinder is defined by its radius and positioned in space with a coordinate system (a gp_Ax3 object), the "main Axis" of which is the axis of the cylinder. This coordinate system is the "local coordinate system" of the cylinder. Note: when a gp_Cylinder cylinder is converted into a Geom_CylindricalSurface cylinder, some implicit properties of its local coordinate system are used explicitly: -   its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the cylinder and the origin of the parameters, -   its implicit orientation (right-handed or left-handed) gives an orientation (direct or indirect) to the Geom_CylindricalSurface cylinder. See Also gce_MakeCylinder which provides functions for more complex cylinder constructions Geom_CylindricalSurface which provides additional functions for constructing cylinders and works, in particular, with the parametric equations of cylinders gp_Ax3"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates a indefinite cylinder.

        |

        *Overload 2:*
        Creates a cylinder of radius Radius, whose axis is the "main Axis" of theA3. theA3 is the local coordinate system of the cylinder.   Raises ConstructionErrord if theRadius < 0.0
        """
        _PyAnyCAD.GCylinder_swiginit(self, _PyAnyCAD.new_GCylinder(*args))

    def SetAxis(self, theA1):
        r""" Changes the symmetry axis of the cylinder. Raises ConstructionError if the direction of theA1 is parallel to the "XDirection" of the coordinate system of the cylinder."""
        return _PyAnyCAD.GCylinder_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        r""" Changes the location of the surface."""
        return _PyAnyCAD.GCylinder_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        r""" Change the local coordinate system of the surface."""
        return _PyAnyCAD.GCylinder_SetPosition(self, theA3)

    def SetRadius(self, theR):
        r""" Modifies the radius of this cylinder. Exceptions Standard_ConstructionError if theR is negative."""
        return _PyAnyCAD.GCylinder_SetRadius(self, theR)

    def UReverse(self):
        r""" Reverses the   U   parametrization of   the cylinder reversing the YAxis."""
        return _PyAnyCAD.GCylinder_UReverse(self)

    def VReverse(self):
        r""" Reverses the   V   parametrization of   the  plane reversing the Axis."""
        return _PyAnyCAD.GCylinder_VReverse(self)

    def Direct(self):
        r""" Returns true if the local coordinate system of this cylinder is right-handed."""
        return _PyAnyCAD.GCylinder_Direct(self)

    def Axis(self):
        r""" Returns the symmetry axis of the cylinder."""
        return _PyAnyCAD.GCylinder_Axis(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        r""" Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinate system : theA1.X**2 + theA2.Y**2 + theA3.Z**2 + 2.(theB1.X.Y + theB2.X.Z + theB3.Y.Z) + 2.(theC1.X + theC2.Y + theC3.Z) + theD = 0.0"""
        return _PyAnyCAD.GCylinder_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def Location(self):
        r""" Returns the "Location" point of the cylinder."""
        return _PyAnyCAD.GCylinder_Location(self)

    def Position(self):
        r""" Returns the local coordinate system of the cylinder."""
        return _PyAnyCAD.GCylinder_Position(self)

    def Radius(self):
        r""" Returns the radius of the cylinder."""
        return _PyAnyCAD.GCylinder_Radius(self)

    def XAxis(self):
        r""" Returns the axis X of the cylinder."""
        return _PyAnyCAD.GCylinder_XAxis(self)

    def YAxis(self):
        r""" Returns the axis Y of the cylinder."""
        return _PyAnyCAD.GCylinder_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCylinder_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a cylinder with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a cylinder with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a cylinder with respect to a plane. The axis placement theA2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GCylinder_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCylinder_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a cylinder. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GCylinder_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCylinder_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a cylinder. theS is the scaling value. The absolute value of theS is used to scale the cylinder"""
        return _PyAnyCAD.GCylinder_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCylinder_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a cylinder with the transformation theT from class Trsf."""
        return _PyAnyCAD.GCylinder_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCylinder_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a cylinder in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a cylinder from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GCylinder_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCylinder

# Register GCylinder in _PyAnyCAD:
_PyAnyCAD.GCylinder_swigregister(GCylinder)
class GCone(object):
    r""" Defines an infinite conical surface. A cone is defined by its half-angle (can be negative) at the apex and positioned in space with a coordinate system (a gp_Ax3 object) and a "reference radius" where: -   the "main Axis" of the coordinate system is the axis of   revolution of the cone, -   the plane defined by the origin, the "X Direction" and the "Y Direction" of the coordinate system is the reference plane of the cone; the intersection of the cone with this reference plane is a circle of radius equal to the reference radius, if the half-angle is positive, the apex of the cone is on the negative side of the "main Axis" of the coordinate system. If the half-angle is negative, the apex is on the   positive side. This coordinate system is the "local coordinate system" of the cone. Note: when a gp_Cone cone is converted into a Geom_ConicalSurface cone, some implicit properties of its local coordinate system are used explicitly: -   its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the cone and the origin of the parameters, -   its implicit orientation (right-handed or left-handed) gives the orientation (direct or indirect) of the Geom_ConicalSurface cone. See Also gce_MakeCone which provides functions for more complex cone constructions Geom_ConicalSurface which provides additional functions for constructing cones and works, in particular, with the parametric equations of cones gp_Ax3"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite Cone.

        |

        *Overload 2:*
        Creates an infinite conical surface. theA3 locates the cone in the space and defines the reference plane of the surface. Ang is the conical surface semi-angle. Its absolute value is in range ]0, PI/2[. theRadius is the radius of the circle in the reference plane of the cone. theRaises ConstructionError * if theRadius is lower than 0.0 * Abs(theAng) < Resolution from gp  or Abs(theAng) >= (PI/2) - Resolution.
        """
        _PyAnyCAD.GCone_swiginit(self, _PyAnyCAD.new_GCone(*args))

    def SetAxis(self, theA1):
        r""" Changes the symmetry axis of the cone.  Raises ConstructionError the direction of theA1 is parallel to the "XDirection" of the coordinate system of the cone."""
        return _PyAnyCAD.GCone_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        r""" Changes the location of the cone."""
        return _PyAnyCAD.GCone_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        r""" Changes the local coordinate system of the cone. This coordinate system defines the reference plane of the cone."""
        return _PyAnyCAD.GCone_SetPosition(self, theA3)

    def SetRadius(self, theR):
        r""" Changes the radius of the cone in the reference plane of the cone. Raised if theR < 0.0"""
        return _PyAnyCAD.GCone_SetRadius(self, theR)

    def SetSemiAngle(self, theAng):
        r""" Changes the semi-angle of the cone. Semi-angle can be negative. Its absolute value Abs(theAng) is in range ]0,PI/2[. Raises ConstructionError if Abs(theAng) < Resolution from gp or Abs(theAng) >= PI/2 - Resolution"""
        return _PyAnyCAD.GCone_SetSemiAngle(self, theAng)

    def Apex(self):
        r""" Computes the cone's top. The Apex of the cone is on the negative side of the symmetry axis of the cone."""
        return _PyAnyCAD.GCone_Apex(self)

    def UReverse(self):
        r""" Reverses the   U   parametrization of   the  cone reversing the YAxis."""
        return _PyAnyCAD.GCone_UReverse(self)

    def VReverse(self):
        r""" Reverses the   V   parametrization of   the  cone  reversing the ZAxis."""
        return _PyAnyCAD.GCone_VReverse(self)

    def Direct(self):
        r""" Returns true if the local coordinate system of this cone is right-handed."""
        return _PyAnyCAD.GCone_Direct(self)

    def Axis(self):
        r""" returns the symmetry axis of the cone."""
        return _PyAnyCAD.GCone_Axis(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        r""" Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinates system : theA1.X**2 + theA2.Y**2 + theA3.Z**2 + 2.(theB1.X.Y + theB2.X.Z + theB3.Y.Z) + 2.(theC1.X + theC2.Y + theC3.Z) + theD = 0.0"""
        return _PyAnyCAD.GCone_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def Location(self):
        r""" returns the "Location" point of the cone."""
        return _PyAnyCAD.GCone_Location(self)

    def Position(self):
        r""" Returns the local coordinates system of the cone."""
        return _PyAnyCAD.GCone_Position(self)

    def RefRadius(self):
        r""" Returns the radius of the cone in the reference plane."""
        return _PyAnyCAD.GCone_RefRadius(self)

    def SemiAngle(self):
        r""" Returns the half-angle at the apex of this cone. Attention! Semi-angle can be negative."""
        return _PyAnyCAD.GCone_SemiAngle(self)

    def XAxis(self):
        r""" Returns the XAxis of the reference plane."""
        return _PyAnyCAD.GCone_XAxis(self)

    def YAxis(self):
        r""" Returns the YAxis of the reference plane."""
        return _PyAnyCAD.GCone_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GCone_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a cone with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a cone with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a cone with respect to a plane. The axis placement theA2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GCone_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GCone_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a cone. theA1 is the axis of the rotation. Ang is the angular value of the rotation in radians."""
        return _PyAnyCAD.GCone_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GCone_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a cone. theS is the scaling value. The absolute value of theS is used to scale the cone"""
        return _PyAnyCAD.GCone_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GCone_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a cone with the transformation theT from class Trsf."""
        return _PyAnyCAD.GCone_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GCone_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a cone in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a cone from the point P1 to the point P2.
        """
        return _PyAnyCAD.GCone_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GCone

# Register GCone in _PyAnyCAD:
_PyAnyCAD.GCone_swigregister(GCone)
class GSphere(object):
    r""" Describes a sphere. A sphere is defined by its radius and positioned in space with a coordinate system (a gp_Ax3 object). The origin of the coordinate system is the center of the sphere. This coordinate system is the "local coordinate system" of the sphere. Note: when a gp_Sphere sphere is converted into a Geom_SphericalSurface sphere, some implicit properties of its local coordinate system are used explicitly: -   its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the sphere and the origin of the parameters, -   its implicit orientation (right-handed or left-handed) gives the orientation (direct, indirect) to the Geom_SphericalSurface sphere. See Also gce_MakeSphere which provides functions for more complex sphere constructions Geom_SphericalSurface which provides additional functions for constructing spheres and works, in particular, with the parametric equations of spheres."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Creates an indefinite sphere.

        |

        *Overload 2:*
        Constructs a sphere with radius theRadius, centered on the origin of theA3.  theA3 is the local coordinate system of the sphere. Warnings : It is not forbidden to create a sphere with null radius. Raises ConstructionError if theRadius < 0.0
        """
        _PyAnyCAD.GSphere_swiginit(self, _PyAnyCAD.new_GSphere(*args))

    def SetLocation(self, theLoc):
        r""" Changes the center of the sphere."""
        return _PyAnyCAD.GSphere_SetLocation(self, theLoc)

    def SetPosition(self, theA3):
        r""" Changes the local coordinate system of the sphere."""
        return _PyAnyCAD.GSphere_SetPosition(self, theA3)

    def SetRadius(self, theR):
        r""" Assigns theR the radius of the Sphere. Warnings : It is not forbidden to create a sphere with null radius. Raises ConstructionError if theR < 0.0"""
        return _PyAnyCAD.GSphere_SetRadius(self, theR)

    def Area(self):
        r""" Computes the area of the sphere."""
        return _PyAnyCAD.GSphere_Area(self)

    def Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD):
        r"""
        Computes the coefficients of the implicit equation of the quadric in the absolute cartesian coordinates system :.. code-block:: c++

           theA1.X**2 + theA2.Y**2 + theA3.Z**2 + 2.(theB1.X.Y + theB2.X.Z + theB3.Y.Z) + 2.(theC1.X + theC2.Y + theC3.Z) + theD = 0.0
        """
        return _PyAnyCAD.GSphere_Coefficients(self, theA1, theA2, theA3, theB1, theB2, theB3, theC1, theC2, theC3, theD)

    def UReverse(self):
        r""" Reverses the   U   parametrization of   the sphere reversing the YAxis."""
        return _PyAnyCAD.GSphere_UReverse(self)

    def VReverse(self):
        r""" Reverses the   V   parametrization of   the  sphere reversing the ZAxis."""
        return _PyAnyCAD.GSphere_VReverse(self)

    def Direct(self):
        r""" Returns true if the local coordinate system of this sphere is right-handed."""
        return _PyAnyCAD.GSphere_Direct(self)

    def Location(self):
        r""" --- Purpose ; Returns the center of the sphere."""
        return _PyAnyCAD.GSphere_Location(self)

    def Position(self):
        r""" Returns the local coordinates system of the sphere."""
        return _PyAnyCAD.GSphere_Position(self)

    def Radius(self):
        r""" Returns the radius of the sphere."""
        return _PyAnyCAD.GSphere_Radius(self)

    def Volume(self):
        r""" Computes the volume of the sphere"""
        return _PyAnyCAD.GSphere_Volume(self)

    def XAxis(self):
        r""" Returns the axis X of the sphere."""
        return _PyAnyCAD.GSphere_XAxis(self)

    def YAxis(self):
        r""" Returns the axis Y of the sphere."""
        return _PyAnyCAD.GSphere_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GSphere_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a sphere with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a sphere with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a sphere with respect to a plane. The axis placement theA2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GSphere_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GSphere_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a sphere. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GSphere_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GSphere_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a sphere. theS is the scaling value. The absolute value of S is used to scale the sphere"""
        return _PyAnyCAD.GSphere_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GSphere_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a sphere with the transformation theT from class Trsf."""
        return _PyAnyCAD.GSphere_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GSphere_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a sphere in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a sphere from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GSphere_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GSphere

# Register GSphere in _PyAnyCAD:
_PyAnyCAD.GSphere_swigregister(GSphere)
class GTorus(object):
    r""" Describes a torus. A torus is defined by its major and minor radii and positioned in space with a coordinate system (a gp_Ax3 object) as follows: -   The origin of the coordinate system is the center of the torus; -   The surface is obtained by rotating a circle of radius equal to the minor radius of the torus about the "main Direction" of the coordinate system. This circle is located in the plane defined by the origin, the "X Direction" and the "main Direction" of the coordinate system. It is centered on the "X Axis" of this coordinate system, and located at a distance, from the origin of this coordinate system, equal to the major radius of the   torus; -   The "X Direction" and "Y Direction" define the reference plane of the torus. The coordinate system described above is the "local coordinate system" of the torus. Note: when a gp_Torus torus is converted into a Geom_ToroidalSurface torus, some implicit properties of its local coordinate system are used explicitly: -   its origin, "X Direction", "Y Direction" and "main Direction" are used directly to define the parametric directions on the torus and the origin of the parameters, -   its implicit orientation (right-handed or left-handed) gives the orientation (direct, indirect) to the Geom_ToroidalSurface torus. See Also gce_MakeTorus which provides functions for more complex torus constructions Geom_ToroidalSurface which provides additional functions for constructing tori and works, in particular, with the parametric equations of tori."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        creates an indefinite Torus.

        |

        *Overload 2:*
        a torus centered on the origin of coordinate system theA3, with major radius theMajorRadius and minor radius theMinorRadius, and with the reference plane defined by the origin, the "X Direction" and the "Y Direction" of theA3. Warnings : It is not forbidden to create a torus with theMajorRadius = theMinorRadius = 0.0 Raises ConstructionError if theMinorRadius < 0.0 or if theMajorRadius < 0.0
        """
        _PyAnyCAD.GTorus_swiginit(self, _PyAnyCAD.new_GTorus(*args))

    def SetAxis(self, theA1):
        r""" Modifies this torus, by redefining its local coordinate system so that: -   its origin and "main Direction" become those of the axis theA1 (the "X Direction" and "Y Direction" are then recomputed). Raises ConstructionError if the direction of theA1 is parallel to the "XDirection" of the coordinate system of the toroidal surface."""
        return _PyAnyCAD.GTorus_SetAxis(self, theA1)

    def SetLocation(self, theLoc):
        r""" Changes the location of the torus."""
        return _PyAnyCAD.GTorus_SetLocation(self, theLoc)

    def SetMajorRadius(self, theMajorRadius):
        r""" Assigns value to the major radius  of this torus. Raises ConstructionError if theMajorRadius - MinorRadius <= Resolution()"""
        return _PyAnyCAD.GTorus_SetMajorRadius(self, theMajorRadius)

    def SetMinorRadius(self, theMinorRadius):
        r""" Assigns value to the  minor radius of this torus. Raises ConstructionError if theMinorRadius < 0.0 or if MajorRadius - theMinorRadius <= Resolution from gp."""
        return _PyAnyCAD.GTorus_SetMinorRadius(self, theMinorRadius)

    def SetPosition(self, theA3):
        r""" Changes the local coordinate system of the surface."""
        return _PyAnyCAD.GTorus_SetPosition(self, theA3)

    def Area(self):
        r""" Computes the area of the torus."""
        return _PyAnyCAD.GTorus_Area(self)

    def UReverse(self):
        r""" Reverses the   U   parametrization of   the  torus reversing the YAxis."""
        return _PyAnyCAD.GTorus_UReverse(self)

    def VReverse(self):
        r""" Reverses the   V   parametrization of   the  torus reversing the ZAxis."""
        return _PyAnyCAD.GTorus_VReverse(self)

    def Direct(self):
        r""" returns true if the Ax3, the local coordinate system of this torus, is right handed."""
        return _PyAnyCAD.GTorus_Direct(self)

    def Axis(self):
        r""" returns the symmetry axis of the torus."""
        return _PyAnyCAD.GTorus_Axis(self)

    def Location(self):
        r""" Returns the Torus's location."""
        return _PyAnyCAD.GTorus_Location(self)

    def Position(self):
        r""" Returns the local coordinates system of the torus."""
        return _PyAnyCAD.GTorus_Position(self)

    def MajorRadius(self):
        r""" returns the major radius of the torus."""
        return _PyAnyCAD.GTorus_MajorRadius(self)

    def MinorRadius(self):
        r""" returns the minor radius of the torus."""
        return _PyAnyCAD.GTorus_MinorRadius(self)

    def Volume(self):
        r""" Computes the volume of the torus."""
        return _PyAnyCAD.GTorus_Volume(self)

    def XAxis(self):
        r""" returns the axis X of the torus."""
        return _PyAnyCAD.GTorus_XAxis(self)

    def YAxis(self):
        r""" returns the axis Y of the torus."""
        return _PyAnyCAD.GTorus_YAxis(self)

    def Mirror(self, *args):
        return _PyAnyCAD.GTorus_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        *Overload 1:*
        Performs the symmetrical transformation of a torus with respect to the point theP which is the center of the symmetry.

        |

        *Overload 2:*
        Performs the symmetrical transformation of a torus with respect to an axis placement which is the axis of the symmetry.

        |

        *Overload 3:*
        Performs the symmetrical transformation of a torus with respect to a plane. The axis placement theA2 locates the plane of the of the symmetry : (Location, XDirection, YDirection).
        """
        return _PyAnyCAD.GTorus_Mirrored(self, *args)

    def Rotate(self, theA1, theAng):
        return _PyAnyCAD.GTorus_Rotate(self, theA1, theAng)

    def Rotated(self, theA1, theAng):
        r""" Rotates a torus. theA1 is the axis of the rotation. theAng is the angular value of the rotation in radians."""
        return _PyAnyCAD.GTorus_Rotated(self, theA1, theAng)

    def Scale(self, theP, theS):
        return _PyAnyCAD.GTorus_Scale(self, theP, theS)

    def Scaled(self, theP, theS):
        r""" Scales a torus. S is the scaling value. The absolute value of S is used to scale the torus"""
        return _PyAnyCAD.GTorus_Scaled(self, theP, theS)

    def Transform(self, theT):
        return _PyAnyCAD.GTorus_Transform(self, theT)

    def Transformed(self, theT):
        r""" Transforms a torus with the transformation theT from class Trsf."""
        return _PyAnyCAD.GTorus_Transformed(self, theT)

    def Translate(self, *args):
        return _PyAnyCAD.GTorus_Translate(self, *args)

    def Translated(self, *args):
        r"""
        *Overload 1:*
        Translates a torus in the direction of the vector theV. The magnitude of the translation is the vector's magnitude.

        |

        *Overload 2:*
        Translates a torus from the point theP1 to the point theP2.
        """
        return _PyAnyCAD.GTorus_Translated(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_GTorus

# Register GTorus in _PyAnyCAD:
_PyAnyCAD.GTorus_swigregister(GTorus)
class GPntList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPntList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPntList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPntList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPntList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPntList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPntList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPntList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPntList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPntList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPntList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPntList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPntList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPntList_empty(self)

    def size(self):
        return _PyAnyCAD.GPntList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPntList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPntList_begin(self)

    def end(self):
        return _PyAnyCAD.GPntList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPntList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPntList_rend(self)

    def clear(self):
        return _PyAnyCAD.GPntList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPntList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPntList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPntList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPntList_swiginit(self, _PyAnyCAD.new_GPntList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPntList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPntList_front(self)

    def back(self):
        return _PyAnyCAD.GPntList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPntList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPntList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPntList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPntList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPntList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPntList

# Register GPntList in _PyAnyCAD:
_PyAnyCAD.GPntList_swigregister(GPntList)
class GVecList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GVecList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GVecList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GVecList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GVecList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GVecList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GVecList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GVecList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GVecList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GVecList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GVecList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GVecList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GVecList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GVecList_empty(self)

    def size(self):
        return _PyAnyCAD.GVecList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GVecList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GVecList_begin(self)

    def end(self):
        return _PyAnyCAD.GVecList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GVecList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GVecList_rend(self)

    def clear(self):
        return _PyAnyCAD.GVecList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GVecList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GVecList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GVecList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GVecList_swiginit(self, _PyAnyCAD.new_GVecList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GVecList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GVecList_front(self)

    def back(self):
        return _PyAnyCAD.GVecList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GVecList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GVecList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GVecList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GVecList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GVecList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GVecList

# Register GVecList in _PyAnyCAD:
_PyAnyCAD.GVecList_swigregister(GVecList)
class GDirList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GDirList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GDirList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GDirList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GDirList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GDirList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GDirList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GDirList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GDirList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GDirList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GDirList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GDirList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GDirList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GDirList_empty(self)

    def size(self):
        return _PyAnyCAD.GDirList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GDirList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GDirList_begin(self)

    def end(self):
        return _PyAnyCAD.GDirList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GDirList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GDirList_rend(self)

    def clear(self):
        return _PyAnyCAD.GDirList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GDirList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GDirList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GDirList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GDirList_swiginit(self, _PyAnyCAD.new_GDirList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GDirList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GDirList_front(self)

    def back(self):
        return _PyAnyCAD.GDirList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GDirList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GDirList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GDirList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GDirList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GDirList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GDirList

# Register GDirList in _PyAnyCAD:
_PyAnyCAD.GDirList_swigregister(GDirList)
class GPnt2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPnt2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPnt2dList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPnt2dList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPnt2dList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPnt2dList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPnt2dList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPnt2dList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPnt2dList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPnt2dList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPnt2dList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPnt2dList_empty(self)

    def size(self):
        return _PyAnyCAD.GPnt2dList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPnt2dList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPnt2dList_begin(self)

    def end(self):
        return _PyAnyCAD.GPnt2dList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPnt2dList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPnt2dList_rend(self)

    def clear(self):
        return _PyAnyCAD.GPnt2dList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPnt2dList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPnt2dList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPnt2dList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPnt2dList_swiginit(self, _PyAnyCAD.new_GPnt2dList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPnt2dList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPnt2dList_front(self)

    def back(self):
        return _PyAnyCAD.GPnt2dList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPnt2dList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPnt2dList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPnt2dList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPnt2dList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPnt2dList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPnt2dList

# Register GPnt2dList in _PyAnyCAD:
_PyAnyCAD.GPnt2dList_swigregister(GPnt2dList)
class GVec2dList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GVec2dList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GVec2dList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GVec2dList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GVec2dList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GVec2dList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GVec2dList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GVec2dList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GVec2dList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GVec2dList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GVec2dList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GVec2dList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GVec2dList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GVec2dList_empty(self)

    def size(self):
        return _PyAnyCAD.GVec2dList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GVec2dList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GVec2dList_begin(self)

    def end(self):
        return _PyAnyCAD.GVec2dList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GVec2dList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GVec2dList_rend(self)

    def clear(self):
        return _PyAnyCAD.GVec2dList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GVec2dList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GVec2dList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GVec2dList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GVec2dList_swiginit(self, _PyAnyCAD.new_GVec2dList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GVec2dList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GVec2dList_front(self)

    def back(self):
        return _PyAnyCAD.GVec2dList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GVec2dList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GVec2dList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GVec2dList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GVec2dList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GVec2dList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GVec2dList

# Register GVec2dList in _PyAnyCAD:
_PyAnyCAD.GVec2dList_swigregister(GVec2dList)
class GXYList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GXYList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GXYList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GXYList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GXYList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GXYList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GXYList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GXYList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GXYList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GXYList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GXYList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GXYList_pop(self)

    def append(self, x):
        return _PyAnyCAD.GXYList_append(self, x)

    def empty(self):
        return _PyAnyCAD.GXYList_empty(self)

    def size(self):
        return _PyAnyCAD.GXYList_size(self)

    def swap(self, v):
        return _PyAnyCAD.GXYList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GXYList_begin(self)

    def end(self):
        return _PyAnyCAD.GXYList_end(self)

    def rbegin(self):
        return _PyAnyCAD.GXYList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GXYList_rend(self)

    def clear(self):
        return _PyAnyCAD.GXYList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GXYList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GXYList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GXYList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GXYList_swiginit(self, _PyAnyCAD.new_GXYList(*args))

    def push_back(self, x):
        return _PyAnyCAD.GXYList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GXYList_front(self)

    def back(self):
        return _PyAnyCAD.GXYList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GXYList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GXYList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GXYList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GXYList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GXYList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GXYList

# Register GXYList in _PyAnyCAD:
_PyAnyCAD.GXYList_swigregister(GXYList)
class GPntList2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.GPntList2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.GPntList2___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.GPntList2___bool__(self)

    def __len__(self):
        return _PyAnyCAD.GPntList2___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.GPntList2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.GPntList2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.GPntList2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.GPntList2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.GPntList2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.GPntList2___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.GPntList2_pop(self)

    def append(self, x):
        return _PyAnyCAD.GPntList2_append(self, x)

    def empty(self):
        return _PyAnyCAD.GPntList2_empty(self)

    def size(self):
        return _PyAnyCAD.GPntList2_size(self)

    def swap(self, v):
        return _PyAnyCAD.GPntList2_swap(self, v)

    def begin(self):
        return _PyAnyCAD.GPntList2_begin(self)

    def end(self):
        return _PyAnyCAD.GPntList2_end(self)

    def rbegin(self):
        return _PyAnyCAD.GPntList2_rbegin(self)

    def rend(self):
        return _PyAnyCAD.GPntList2_rend(self)

    def clear(self):
        return _PyAnyCAD.GPntList2_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.GPntList2_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.GPntList2_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.GPntList2_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.GPntList2_swiginit(self, _PyAnyCAD.new_GPntList2(*args))

    def push_back(self, x):
        return _PyAnyCAD.GPntList2_push_back(self, x)

    def front(self):
        return _PyAnyCAD.GPntList2_front(self)

    def back(self):
        return _PyAnyCAD.GPntList2_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.GPntList2_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.GPntList2_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.GPntList2_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.GPntList2_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.GPntList2_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_GPntList2

# Register GPntList2 in _PyAnyCAD:
_PyAnyCAD.GPntList2_swigregister(GPntList2)
class MathUtil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ToDir(v):
        return _PyAnyCAD.MathUtil_ToDir(v)

    @staticmethod
    def To(*args):
        return _PyAnyCAD.MathUtil_To(*args)

    @staticmethod
    def Copy(*args):
        return _PyAnyCAD.MathUtil_Copy(*args)

    @staticmethod
    def IsPointInside(pt, contour):
        return _PyAnyCAD.MathUtil_IsPointInside(pt, contour)

    @staticmethod
    def ToBox(box):
        r"""
        Box转换
        :type box: :py:class:`Bnd_Box`
        :param box: Bnd_Box类型的box
        :rtype: :py:class:`AABox`
        :return: AABox
        """
        return _PyAnyCAD.MathUtil_ToBox(box)

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        根据点转为Float32Buffer
        :type points: :py:class:`GPntList`
        :param points: 点列表
        :rtype: :py:class:`Float32Buffer`
        :return: Buffer

        |

        *Overload 2:*

        点转换为Float32Buffer
        :type points: :py:class:`GPntList`
        :param points: 点列表
        :type trsf: :py:class:`gp_Trsf`
        :param trsf: 矩阵变换
        :rtype: :py:class:`Float32Buffer`
        :return: Buffer
        """
        return _PyAnyCAD.MathUtil_Create(*args)
    __swig_destroy__ = _PyAnyCAD.delete_MathUtil

# Register MathUtil in _PyAnyCAD:
_PyAnyCAD.MathUtil_swigregister(MathUtil)
EnumTopoShapeType_Topo_COMPOUND = _PyAnyCAD.EnumTopoShapeType_Topo_COMPOUND
EnumTopoShapeType_Topo_COMPSOLID = _PyAnyCAD.EnumTopoShapeType_Topo_COMPSOLID
EnumTopoShapeType_Topo_SOLID = _PyAnyCAD.EnumTopoShapeType_Topo_SOLID
EnumTopoShapeType_Topo_SHELL = _PyAnyCAD.EnumTopoShapeType_Topo_SHELL
EnumTopoShapeType_Topo_FACE = _PyAnyCAD.EnumTopoShapeType_Topo_FACE
EnumTopoShapeType_Topo_WIRE = _PyAnyCAD.EnumTopoShapeType_Topo_WIRE
EnumTopoShapeType_Topo_EDGE = _PyAnyCAD.EnumTopoShapeType_Topo_EDGE
EnumTopoShapeType_Topo_VERTEX = _PyAnyCAD.EnumTopoShapeType_Topo_VERTEX
EnumTopoShapeType_Topo_SHAPE = _PyAnyCAD.EnumTopoShapeType_Topo_SHAPE
EnumCurveType_CurveType_Line = _PyAnyCAD.EnumCurveType_CurveType_Line
EnumCurveType_CurveType_Circle = _PyAnyCAD.EnumCurveType_CurveType_Circle
EnumCurveType_CurveType_Ellipse = _PyAnyCAD.EnumCurveType_CurveType_Ellipse
EnumCurveType_CurveType_Hyperbola = _PyAnyCAD.EnumCurveType_CurveType_Hyperbola
EnumCurveType_CurveType_Parabola = _PyAnyCAD.EnumCurveType_CurveType_Parabola
EnumCurveType_CurveType_BezierCurve = _PyAnyCAD.EnumCurveType_CurveType_BezierCurve
EnumCurveType_CurveType_BSplineCurve = _PyAnyCAD.EnumCurveType_CurveType_BSplineCurve
EnumCurveType_CurveType_OtherCurve = _PyAnyCAD.EnumCurveType_CurveType_OtherCurve
EnumSurfaceType_SurfaceType_Plane = _PyAnyCAD.EnumSurfaceType_SurfaceType_Plane
EnumSurfaceType_SurfaceType_Cylinder = _PyAnyCAD.EnumSurfaceType_SurfaceType_Cylinder
EnumSurfaceType_SurfaceType_Cone = _PyAnyCAD.EnumSurfaceType_SurfaceType_Cone
EnumSurfaceType_SurfaceType_Sphere = _PyAnyCAD.EnumSurfaceType_SurfaceType_Sphere
EnumSurfaceType_SurfaceType_Torus = _PyAnyCAD.EnumSurfaceType_SurfaceType_Torus
EnumSurfaceType_SurfaceType_Bezier = _PyAnyCAD.EnumSurfaceType_SurfaceType_Bezier
EnumSurfaceType_SurfaceType_BSpline = _PyAnyCAD.EnumSurfaceType_SurfaceType_BSpline
EnumSurfaceType_SurfaceType_Revolution = _PyAnyCAD.EnumSurfaceType_SurfaceType_Revolution
EnumSurfaceType_SurfaceType_Extrusion = _PyAnyCAD.EnumSurfaceType_SurfaceType_Extrusion
EnumSurfaceType_SurfaceType_Offset = _PyAnyCAD.EnumSurfaceType_SurfaceType_Offset
EnumSurfaceType_SurfaceType_Other = _PyAnyCAD.EnumSurfaceType_SurfaceType_Other
EnumTopoOrientation_FORWARD = _PyAnyCAD.EnumTopoOrientation_FORWARD
EnumTopoOrientation_REVERSED = _PyAnyCAD.EnumTopoOrientation_REVERSED
EnumTopoOrientation_INTERNAL = _PyAnyCAD.EnumTopoOrientation_INTERNAL
EnumTopoOrientation_EXTERNAL = _PyAnyCAD.EnumTopoOrientation_EXTERNAL
EnumCurvatureType_MaxCurvature = _PyAnyCAD.EnumCurvatureType_MaxCurvature
EnumCurvatureType_MinCurvature = _PyAnyCAD.EnumCurvatureType_MinCurvature
EnumCurvatureType_MeanCurvature = _PyAnyCAD.EnumCurvatureType_MeanCurvature
EnumCurvatureType_GaussianCurvature = _PyAnyCAD.EnumCurvatureType_GaussianCurvature
class TopoShapeList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyAnyCAD.TopoShapeList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyAnyCAD.TopoShapeList___nonzero__(self)

    def __bool__(self):
        return _PyAnyCAD.TopoShapeList___bool__(self)

    def __len__(self):
        return _PyAnyCAD.TopoShapeList___len__(self)

    def __getslice__(self, i, j):
        return _PyAnyCAD.TopoShapeList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyAnyCAD.TopoShapeList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyAnyCAD.TopoShapeList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyAnyCAD.TopoShapeList___setitem__(self, *args)

    def pop(self):
        return _PyAnyCAD.TopoShapeList_pop(self)

    def append(self, x):
        return _PyAnyCAD.TopoShapeList_append(self, x)

    def empty(self):
        return _PyAnyCAD.TopoShapeList_empty(self)

    def size(self):
        return _PyAnyCAD.TopoShapeList_size(self)

    def swap(self, v):
        return _PyAnyCAD.TopoShapeList_swap(self, v)

    def begin(self):
        return _PyAnyCAD.TopoShapeList_begin(self)

    def end(self):
        return _PyAnyCAD.TopoShapeList_end(self)

    def rbegin(self):
        return _PyAnyCAD.TopoShapeList_rbegin(self)

    def rend(self):
        return _PyAnyCAD.TopoShapeList_rend(self)

    def clear(self):
        return _PyAnyCAD.TopoShapeList_clear(self)

    def get_allocator(self):
        return _PyAnyCAD.TopoShapeList_get_allocator(self)

    def pop_back(self):
        return _PyAnyCAD.TopoShapeList_pop_back(self)

    def erase(self, *args):
        return _PyAnyCAD.TopoShapeList_erase(self, *args)

    def __init__(self, *args):
        _PyAnyCAD.TopoShapeList_swiginit(self, _PyAnyCAD.new_TopoShapeList(*args))

    def push_back(self, x):
        return _PyAnyCAD.TopoShapeList_push_back(self, x)

    def front(self):
        return _PyAnyCAD.TopoShapeList_front(self)

    def back(self):
        return _PyAnyCAD.TopoShapeList_back(self)

    def assign(self, n, x):
        return _PyAnyCAD.TopoShapeList_assign(self, n, x)

    def resize(self, *args):
        return _PyAnyCAD.TopoShapeList_resize(self, *args)

    def insert(self, *args):
        return _PyAnyCAD.TopoShapeList_insert(self, *args)

    def reserve(self, n):
        return _PyAnyCAD.TopoShapeList_reserve(self, n)

    def capacity(self):
        return _PyAnyCAD.TopoShapeList_capacity(self)
    __swig_destroy__ = _PyAnyCAD.delete_TopoShapeList

# Register TopoShapeList in _PyAnyCAD:
_PyAnyCAD.TopoShapeList_swigregister(TopoShapeList)
class TopoShape(AObject):
    r"""
    Author: Geometry

    几何拓扑对象。用来表示一个几何对象。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TopoShape_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TopoShape_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TopoShape_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_TopoShape

    def GetShapeType(self):
        r"""
        获取拓扑类型
        :rtype: int
        :return: EnumTopoShapeType
        See also: EnumTopoShapeType
        """
        return _PyAnyCAD.TopoShape_GetShapeType(self)

    def IsShapeType(self, type):
        r"""
        Test if the shape type.
        :type type: int
        :param type: the type you want to test.
        :rtype: boolean
        :return: true if it's the type.
        """
        return _PyAnyCAD.TopoShape_IsShapeType(self, type)

    def IsNullShape(self):
        r"""
        test if null
        :rtype: boolean
        :return: true if shape is null.
        """
        return _PyAnyCAD.TopoShape_IsNullShape(self)

    def GetBBox(self):
        r"""
        Get bounding box
        :rtype: :py:class:`Bnd_Box`
        :return: the Bounding box
        """
        return _PyAnyCAD.TopoShape_GetBBox(self)

    def GetOptimalBBox(self):
        r"""
        Get accurate bounding box. with low performance.
        :rtype: :py:class:`Bnd_Box`
        :return: the Bounding box
        """
        return _PyAnyCAD.TopoShape_GetOptimalBBox(self)

    def GetLocalTransform(self):
        r"""
        Get local transform.
        :rtype: :py:class:`gp_Trsf`
        :return: the transform.
        """
        return _PyAnyCAD.TopoShape_GetLocalTransform(self)

    def GetChildren(self, subType):
        r"""
        Get the specified children shapes
        :type subType: int
        :param subType: the shape type.
        :rtype: :py:class:`TopoShapeList`
        :return: the children
        """
        return _PyAnyCAD.TopoShape_GetChildren(self, subType)

    def FindChild(self, subType, idx):
        r"""
        Find the specified child shape
        :type subType: int
        :param subType: the shape type.
        :type idx: int
        :param idx: the index starting from 0
        :rtype: :py:class:`TopoShape`
        :return: the child
        """
        return _PyAnyCAD.TopoShape_FindChild(self, subType, idx)

    def FindChildIndex(self, subShape):
        r"""
        Get the inedex of the sub shape.
        :type subShape: :py:class:`TopoShape`
        :param subShape: the sub shape object
        :rtype: int
        :return: -1 if failed to find
        """
        return _PyAnyCAD.TopoShape_FindChildIndex(self, subShape)

    def IsOrientable(self):
        r"""  Returns the orientability flag."""
        return _PyAnyCAD.TopoShape_IsOrientable(self)

    def Reversed(self):
        r"""
        get the reversed shape
        :rtype: :py:class:`TopoShape`
        :return: reversed shape
        """
        return _PyAnyCAD.TopoShape_Reversed(self)

    def GetOrientation(self):
        r"""Get oritation"""
        return _PyAnyCAD.TopoShape_GetOrientation(self)

    def SetOrientation(self, orient):
        return _PyAnyCAD.TopoShape_SetOrientation(self, orient)

    def Oriented(self, orient):
        r"""
        Returns a shape similar to <me>  with  the  orientation set to.
        :type orient: int
        :param orient: the orientation.
        :rtype: :py:class:`TopoShape`
        :return: the new shape
        """
        return _PyAnyCAD.TopoShape_Oriented(self, orient)

    def IsConvex(self):
        r"""
        Returns the convexness flag
        :rtype: boolean
        :return: true if convex.
        """
        return _PyAnyCAD.TopoShape_IsConvex(self)

    def IsEqualShape(self, other):
        r"""
        Returns True if two shapes are equal, i.e. if they
        share the same TShape with  the same Locations and
        Orientations.
        """
        return _PyAnyCAD.TopoShape_IsEqualShape(self, other)

    def IsSameShape(self, other):
        r"""
        Returns True if two shapes are same, i.e.  if they
        share  the  same TShape  with the same  Locations.
        Orientations may differ.
        """
        return _PyAnyCAD.TopoShape_IsSameShape(self, other)

    def IsPartnerShape(self, other):
        r"""
        Returns True if two shapes  are partners, i.e.  if
        they   share   the   same  TShape.  Locations  and
        Orientations may differ.
        """
        return _PyAnyCAD.TopoShape_IsPartnerShape(self, other)

    def IsClosed(self):
        r"""Returns the closedness flag."""
        return _PyAnyCAD.TopoShape_IsClosed(self)

    def Write(self):
        r"""
        Write to string.
        :rtype: string
        :return: the string
        """
        return _PyAnyCAD.TopoShape_Write(self)

    @staticmethod
    def Read(buffer):
        r"""
        Create from string.
        :type buffer: string
        :param buffer: the string content.
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.TopoShape_Read(buffer)

# Register TopoShape in _PyAnyCAD:
_PyAnyCAD.TopoShape_swigregister(TopoShape)
class TopoExplor(object):
    r"""
    Author: Geometry

     几何拓扑遍历.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, childType, parentType, uniqueParent=False, useOrientation=False):
        r"""
        构造遍历器
        :type shape: :py:class:`TopoShape`
        :param shape: 整体
        :type childType: int
        :param childType: 子类型
        :type parentType: int
        :param parentType: 父类型
        :type uniqueParent: boolean, optional
        :param uniqueParent: 是否唯一父类
        :type useOrientation: boolean, optional
        :param useOrientation: 是否区分朝向
        """
        _PyAnyCAD.TopoExplor_swiginit(self, _PyAnyCAD.new_TopoExplor(shape, childType, parentType, uniqueParent, useOrientation))
    __swig_destroy__ = _PyAnyCAD.delete_TopoExplor

    def GetChildrenShapes(self):
        r"""
        获取所有的子拓扑对象.
        :rtype: :py:class:`TopoShapeList`
        :return: the shape list.
        """
        return _PyAnyCAD.TopoExplor_GetChildrenShapes(self)

    @staticmethod
    def GetSubShapes(topoShape):
        r"""
        获取指定对象的子拓扑对象
        :type topoShape: :py:class:`TopoShape`
        :param topoShape: the TopoShape
        :rtype: :py:class:`TopoShapeList`
        :return: the sub TopoShape
        """
        return _PyAnyCAD.TopoExplor_GetSubShapes(topoShape)

    @staticmethod
    def GetVertexValue(vertex):
        r"""
        获取顶点的值.
        :type vertex: :py:class:`TopoShape`
        :param vertex: the vertex to get.
        :rtype: :py:class:`gp_Pnt`
        :return: the point value.
        """
        return _PyAnyCAD.TopoExplor_GetVertexValue(vertex)

    @staticmethod
    def GetVertexPoints(shape):
        r"""
        获取所有的顶点的值.
        :type shape: :py:class:`TopoShape`
        :param shape: the shape.
        :rtype: :py:class:`GPntList`
        :return: the points.
        """
        return _PyAnyCAD.TopoExplor_GetVertexPoints(shape)

    @staticmethod
    def GetOuterShell(solid):
        r"""
        获取外表面的Shell
        :type solid: :py:class:`TopoShape`
        :param solid: must be Solid
        :rtype: :py:class:`TopoShape`
        :return: the shell
        """
        return _PyAnyCAD.TopoExplor_GetOuterShell(solid)

    @staticmethod
    def GetParentShapes(*args):
        r"""
        *Overload 1:*

        获取父拓扑对象。
        :type subShape: :py:class:`TopoShape`
        :param subShape:
        :rtype: :py:class:`TopoShapeList`
        :return: the parent list;

        |

        *Overload 2:*

        获取对象的父对象
        :type shape: :py:class:`TopoShape`
        :param shape: 整体
        :type subShape: :py:class:`TopoShape`
        :param subShape: 子对象
        :type parentType: int
        :param parentType: 类型
        :rtype: :py:class:`TopoShapeList`
        :return: 
        """
        return _PyAnyCAD.TopoExplor_GetParentShapes(*args)

# Register TopoExplor in _PyAnyCAD:
_PyAnyCAD.TopoExplor_swigregister(TopoExplor)
class PrincipalProps(object):
    r"""
    Author: Geometry

       获取几何对象的主属性
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.PrincipalProps_swiginit(self, _PyAnyCAD.new_PrincipalProps())
    __swig_destroy__ = _PyAnyCAD.delete_PrincipalProps

    def HasSymmetryAxis(self, *args):
        r"""
        *Overload 1:*

        returns true if the geometric system has an axis of symmetry.
        For  comparing  moments  relative  tolerance  1.e-10  is  used.
        Usually  it  is  enough  for  objects,  restricted  by  faces  with
        analytical  geometry.


        |

        *Overload 2:*

        returns true if the geometric system has an axis of symmetry.
        :type aTol: float
        :param aTol:  is  relative  tolerance for  checking  equality  of  moments
            If  aTol  ==  0,  relative  tolerance  is  ~  1.e-16  (Epsilon(I))
        """
        return _PyAnyCAD.PrincipalProps_HasSymmetryAxis(self, *args)

    def HasSymmetryPoint(self, *args):
        r"""
        *Overload 1:*

        returns true if the geometric system has a point of symmetry.
        For  comparing  moments  relative  tolerance  1.e-10  is  used.
        Usually  it  is  enough  for  objects,  restricted  by  faces  with
        analytical  geometry.


        |

        *Overload 2:*

        returns true if the geometric system has a point of symmetry.
        :type aTol: float
        :param aTol:  is  relative  tolerance for  checking  equality  of  moments
            If  aTol  ==  0,  relative  tolerance  is  ~  1.e-16  (Epsilon(I))
        """
        return _PyAnyCAD.PrincipalProps_HasSymmetryPoint(self, *args)

    def Moments(self):
        r"""
        Return the principal moments of inertia in the current system.
        Notes :
        - If the current system has an axis of symmetry, two
        of the three values Ixx, Iyy and Izz are equal. They
        indicate which eigen vectors define an infinity of
        axes of principal inertia.
        - If the current system has a center of symmetry, Ixx,
        Iyy and Izz are equal.
        """
        return _PyAnyCAD.PrincipalProps_Moments(self)

    def FirstAxisOfInertia(self):
        r"""
        returns the first axis of inertia.
        if the system has a point of symmetry there is an infinity of
        solutions. It is not possible to defines the three axis of
        inertia.
        """
        return _PyAnyCAD.PrincipalProps_FirstAxisOfInertia(self)

    def SecondAxisOfInertia(self):
        r"""
        returns the second axis of inertia.
        if the system has a point of symmetry or an axis of symmetry the
        second and the third axis of symmetry are undefined.
        """
        return _PyAnyCAD.PrincipalProps_SecondAxisOfInertia(self)

    def ThirdAxisOfInertia(self):
        r"""
        returns the third axis of inertia.
        This and the above functions return the first, second or third eigen vector of the
        matrix of inertia of the current system.
        The first, second and third principal axis of inertia
        pass through the center of mass of the current
        system. They are respectively parallel to these three eigen vectors.
        Note that:
        - If the current system has an axis of symmetry, any
        axis is an axis of principal inertia if it passes
        through the center of mass of the system, and runs
        parallel to a linear combination of the two eigen
        vectors of the matrix of inertia, corresponding to the
        two eigen values which are equal. If the current
        system has a center of symmetry, any axis passing
        through the center of mass of the system is an axis
        of principal inertia. Use the functions
        HasSymmetryAxis and HasSymmetryPoint to
        check these particular cases, where the returned
        eigen vectors define an infinity of principal axis of inertia.
        - The Moments function can be used to know which
        of the three eigen vectors corresponds to the two
        eigen values which are equal.

        if the system has a point of symmetry or an axis of symmetry the
        second and the third axis of symmetry are undefined.
        """
        return _PyAnyCAD.PrincipalProps_ThirdAxisOfInertia(self)

    def RadiusOfGyration(self):
        r"""
        Returns the principal radii of gyration  Rxx, Ryy
        and Rzz are the radii of gyration of the current
        system about its three principal axes of inertia.
        Note that:
        - If the current system has an axis of symmetry,
        two of the three values Rxx, Ryy and Rzz are equal.
        - If the current system has a center of symmetry,
        Rxx, Ryy and Rzz are equal.
        """
        return _PyAnyCAD.PrincipalProps_RadiusOfGyration(self)

# Register PrincipalProps in _PyAnyCAD:
_PyAnyCAD.PrincipalProps_swigregister(PrincipalProps)
class TopoShapeProperty(object):
    r"""
    Author: Geometry

       获取几何属性
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TopoShapeProperty_swiginit(self, _PyAnyCAD.new_TopoShapeProperty(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TopoShapeProperty

    def SetShape(self, shape):
        r"""
        Set the TopoShape to compute
        :type shape: :py:class:`TopoShape`
        :param shape: the TopoShape
        """
        return _PyAnyCAD.TopoShapeProperty_SetShape(self, shape)

    def EdgeLength(self):
        r"""
        Compute the length of all edges.
        :rtype: float
        :return: the length
        """
        return _PyAnyCAD.TopoShapeProperty_EdgeLength(self)

    def SurfaceArea(self):
        r"""
        Compute the area of all surfaces.
        :rtype: float
        :return: the area
        """
        return _PyAnyCAD.TopoShapeProperty_SurfaceArea(self)

    def SolidVolume(self):
        r"""
        Compute the volume of all solids.
        :rtype: float
        :return: the volume.
        """
        return _PyAnyCAD.TopoShapeProperty_SolidVolume(self)

    def CenterOfMass(self):
        r"""
        Compute center of the mass.
        :rtype: :py:class:`gp_Pnt`
        :return: the center position.
        """
        return _PyAnyCAD.TopoShapeProperty_CenterOfMass(self)

    def Add(self, item, density):
        r"""
        Add sub shape property
        :type item: :py:class:`TopoShapeProperty`
        :param item: the sub information.
        :type density: float
        :param density: the density.
        """
        return _PyAnyCAD.TopoShapeProperty_Add(self, item, density)

    def MatrixOfInertia(self):
        r"""
         Get the matrix of inertia. It is a symmetrical matrix.
        :rtype: :py:class:`gp_Mat`
        :return: the matrix of inertia.
        """
        return _PyAnyCAD.TopoShapeProperty_MatrixOfInertia(self)

    def StaticMoments(self):
        r"""
        Get Ix, Iy, Iz, the static moments of inertia of the
        current system; i.e. the moments of inertia about the
        three axes of the Cartesian coordinate system.
        """
        return _PyAnyCAD.TopoShapeProperty_StaticMoments(self)

    def MomentOfInertia(self, A):
        r"""
        computes the moment of inertia of the material system.
        :type A: :py:class:`gp_Ax1`
        :param A: the the axis.
        :rtype: float
        :return: the moment of inertia.
        """
        return _PyAnyCAD.TopoShapeProperty_MomentOfInertia(self, A)

    def RadiusOfGyration(self, A):
        r"""
        Get the radius of gyration of the current system.
        :type A: :py:class:`gp_Ax1`
        :param A: the the axis.
        :rtype: float
        :return: the radius.
        """
        return _PyAnyCAD.TopoShapeProperty_RadiusOfGyration(self, A)

    def PrincipalProperties(self):
        r"""
        Get the principal properties
        :rtype: :py:class:`PrincipalProps`
        :return: the Principal Properties
        """
        return _PyAnyCAD.TopoShapeProperty_PrincipalProperties(self)

# Register TopoShapeProperty in _PyAnyCAD:
_PyAnyCAD.TopoShapeProperty_swigregister(TopoShapeProperty)
class SurfaceShapeProperty(object):
    r"""
    Author: Geometry

       获取曲面的局部属性
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.SurfaceShapeProperty_swiginit(self, _PyAnyCAD.new_SurfaceShapeProperty(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceShapeProperty

    def SetSurface(self, face):
        r"""
        设置曲面
        :type face: :py:class:`TopoShape`
        :param face: 曲面
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.SurfaceShapeProperty_SetSurface(self, face)

    def SetParameters(self, U, V):
        r"""
        设置计算的位置
        :type U: float
        :param U: U值
        :type V: float
        :param V: V值
        """
        return _PyAnyCAD.SurfaceShapeProperty_SetParameters(self, U, V)

    def IsCurvatureDefined(self):
        return _PyAnyCAD.SurfaceShapeProperty_IsCurvatureDefined(self)

    def Value(self):
        return _PyAnyCAD.SurfaceShapeProperty_Value(self)

    def D1U(self):
        r""" Returns the first U derivative."""
        return _PyAnyCAD.SurfaceShapeProperty_D1U(self)

    def D1V(self):
        r""" Returns the first V derivative."""
        return _PyAnyCAD.SurfaceShapeProperty_D1V(self)

    def D2U(self):
        r""" Returns the second U derivatives"""
        return _PyAnyCAD.SurfaceShapeProperty_D2U(self)

    def D2V(self):
        r""" Returns the second V derivative."""
        return _PyAnyCAD.SurfaceShapeProperty_D2V(self)

    def DUV(self):
        r""" Returns the second UV cross-derivative."""
        return _PyAnyCAD.SurfaceShapeProperty_DUV(self)

    def IsTangentUDefined(self):
        r""" returns True if the U tangent is defined. For example, the tangent is not defined if the two first U derivatives are null."""
        return _PyAnyCAD.SurfaceShapeProperty_IsTangentUDefined(self)

    def TangentU(self):
        r""" Returns the tangent direction <D> on the iso-V."""
        return _PyAnyCAD.SurfaceShapeProperty_TangentU(self)

    def IsTangentVDefined(self):
        r""" returns if the V tangent is defined. For example, the tangent is not defined if the two first V derivatives are null."""
        return _PyAnyCAD.SurfaceShapeProperty_IsTangentVDefined(self)

    def TangentV(self):
        r""" Returns the tangent direction <D> on the iso-V."""
        return _PyAnyCAD.SurfaceShapeProperty_TangentV(self)

    def IsNormalDefined(self):
        r""" Tells if the normal is defined."""
        return _PyAnyCAD.SurfaceShapeProperty_IsNormalDefined(self)

    def Normal(self):
        r""" Returns the normal direction."""
        return _PyAnyCAD.SurfaceShapeProperty_Normal(self)

    def IsUmbilic(self):
        r"""returns True if the point is umbilic(i.e. if the curvature is constant)."""
        return _PyAnyCAD.SurfaceShapeProperty_IsUmbilic(self)

    def MaxCurvature(self):
        r"""
        Returns the maximum curvature
        :rtype: float
        :return: the maximum curvature
        """
        return _PyAnyCAD.SurfaceShapeProperty_MaxCurvature(self)

    def GetDirectionOfMax(self):
        return _PyAnyCAD.SurfaceShapeProperty_GetDirectionOfMax(self)

    def MinCurvature(self):
        r"""
        Returns the maximum curvature
        :rtype: float
        :return: the maximum curvature
        """
        return _PyAnyCAD.SurfaceShapeProperty_MinCurvature(self)

    def GetDirectionOfMin(self):
        return _PyAnyCAD.SurfaceShapeProperty_GetDirectionOfMin(self)

    def MeanCurvature(self):
        r"""
        Returns the mean curvature.
        :rtype: float
        :return: the mean curvature.
        """
        return _PyAnyCAD.SurfaceShapeProperty_MeanCurvature(self)

    def GaussianCurvature(self):
        r"""
        Returns the Gaussian curvature
        :rtype: float
        :return: the Gaussian curvature
        """
        return _PyAnyCAD.SurfaceShapeProperty_GaussianCurvature(self)

# Register SurfaceShapeProperty in _PyAnyCAD:
_PyAnyCAD.SurfaceShapeProperty_swigregister(SurfaceShapeProperty)
class CurveShapeProperty(object):
    r"""
    Author: Geometry

       获取曲线的局部属性.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.CurveShapeProperty_swiginit(self, _PyAnyCAD.new_CurveShapeProperty(*args))
    __swig_destroy__ = _PyAnyCAD.delete_CurveShapeProperty

    def SetCurve(self, edge):
        r"""
        设置曲线
        :type edge: :py:class:`TopoShape`
        :param edge: 曲线
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.CurveShapeProperty_SetCurve(self, edge)

    def SetParameter(self, U):
        r"""
        设置计算位置
        :type U: float
        :param U: 参数
        """
        return _PyAnyCAD.CurveShapeProperty_SetParameter(self, U)

    def Value(self):
        r"""
        点的位置
        :rtype: :py:class:`gp_Pnt`
        :return: 
        """
        return _PyAnyCAD.CurveShapeProperty_Value(self)

    def D1(self):
        r"""
        返回切线
        :rtype: :py:class:`gp_Vec`
        :return: 向量
        """
        return _PyAnyCAD.CurveShapeProperty_D1(self)

    def D2(self):
        r"""
        返回二阶切线
        :rtype: :py:class:`gp_Vec`
        :return: 向量
        """
        return _PyAnyCAD.CurveShapeProperty_D2(self)

    def D3(self):
        r"""
        返回三阶切线
        :rtype: :py:class:`gp_Vec`
        :return: 向量
        """
        return _PyAnyCAD.CurveShapeProperty_D3(self)

    def IsTangentDefined(self):
        r""" returns True if the U tangent is defined. For example, the tangent is not defined if the two first U derivatives are null."""
        return _PyAnyCAD.CurveShapeProperty_IsTangentDefined(self)

    def Tangent(self):
        r"""
        返回切向量
        :rtype: :py:class:`gp_Dir`
        :return: 方向
        """
        return _PyAnyCAD.CurveShapeProperty_Tangent(self)

    def Normal(self):
        r"""
        返回法向量
        :rtype: :py:class:`gp_Dir`
        :return: 方向
        """
        return _PyAnyCAD.CurveShapeProperty_Normal(self)

    def Curvature(self):
        r"""
        计算曲率
        :rtype: float
        :return: 曲率值
        """
        return _PyAnyCAD.CurveShapeProperty_Curvature(self)

    def CentreOfCurvature(self):
        r"""
        曲率中心点
        :rtype: :py:class:`gp_Pnt`
        :return: 点
        """
        return _PyAnyCAD.CurveShapeProperty_CentreOfCurvature(self)

# Register CurveShapeProperty in _PyAnyCAD:
_PyAnyCAD.CurveShapeProperty_swigregister(CurveShapeProperty)
EnumGeometryContinuity_C0 = _PyAnyCAD.EnumGeometryContinuity_C0
EnumGeometryContinuity_G1 = _PyAnyCAD.EnumGeometryContinuity_G1
EnumGeometryContinuity_C1 = _PyAnyCAD.EnumGeometryContinuity_C1
EnumGeometryContinuity_G2 = _PyAnyCAD.EnumGeometryContinuity_G2
EnumGeometryContinuity_C2 = _PyAnyCAD.EnumGeometryContinuity_C2
EnumGeometryContinuity_C3 = _PyAnyCAD.EnumGeometryContinuity_C3
EnumGeometryContinuity_CN = _PyAnyCAD.EnumGeometryContinuity_CN
class DerivativeValues(object):
    r"""
    Author: Geometry

       The derivative result of curve or surface.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DerivativeValues_swiginit(self, _PyAnyCAD.new_DerivativeValues())
    __swig_destroy__ = _PyAnyCAD.delete_DerivativeValues

    def GetPoint(self):
        return _PyAnyCAD.DerivativeValues_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.DerivativeValues_SetPoint(self, val)

    def GetVectors(self):
        return _PyAnyCAD.DerivativeValues_GetVectors(self)

    def AddVector(self, vec):
        return _PyAnyCAD.DerivativeValues_AddVector(self, vec)

# Register DerivativeValues in _PyAnyCAD:
_PyAnyCAD.DerivativeValues_swigregister(DerivativeValues)
class DerivativeValues2d(object):
    r"""
    Author: Geometry

       The derivative result of curve2d
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DerivativeValues2d_swiginit(self, _PyAnyCAD.new_DerivativeValues2d())
    __swig_destroy__ = _PyAnyCAD.delete_DerivativeValues2d

    def GetPoint(self):
        return _PyAnyCAD.DerivativeValues2d_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.DerivativeValues2d_SetPoint(self, val)

    def GetVectors(self):
        return _PyAnyCAD.DerivativeValues2d_GetVectors(self)

    def AddVector(self, vec):
        return _PyAnyCAD.DerivativeValues2d_AddVector(self, vec)

# Register DerivativeValues2d in _PyAnyCAD:
_PyAnyCAD.DerivativeValues2d_swigregister(DerivativeValues2d)
class GBezierCurve(object):
    r"""
    Author: Geometry

       BezierCurve信息获取.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBezierCurve

    def NbPoles(self):
        return _PyAnyCAD.GBezierCurve_NbPoles(self)

    def Poles(self):
        return _PyAnyCAD.GBezierCurve_Poles(self)

    def Pole(self, idx):
        return _PyAnyCAD.GBezierCurve_Pole(self, idx)

# Register GBezierCurve in _PyAnyCAD:
_PyAnyCAD.GBezierCurve_swigregister(GBezierCurve)
class GBSplineCurve(object):
    r"""
    Author: Geometry

       BSplineCurve信息获取.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBSplineCurve

    def IsClosed(self):
        return _PyAnyCAD.GBSplineCurve_IsClosed(self)

    def IsPeriodic(self):
        return _PyAnyCAD.GBSplineCurve_IsPeriodic(self)

    def IsRational(self):
        return _PyAnyCAD.GBSplineCurve_IsRational(self)

    def Degree(self):
        return _PyAnyCAD.GBSplineCurve_Degree(self)

    def NbKnots(self):
        return _PyAnyCAD.GBSplineCurve_NbKnots(self)

    def Knots(self):
        return _PyAnyCAD.GBSplineCurve_Knots(self)

    def Knot(self, idx):
        return _PyAnyCAD.GBSplineCurve_Knot(self, idx)

    def Multiplicities(self):
        return _PyAnyCAD.GBSplineCurve_Multiplicities(self)

    def Multiplicity(self, idx):
        return _PyAnyCAD.GBSplineCurve_Multiplicity(self, idx)

    def NbPoles(self):
        return _PyAnyCAD.GBSplineCurve_NbPoles(self)

    def Poles(self):
        return _PyAnyCAD.GBSplineCurve_Poles(self)

    def Pole(self, idx):
        return _PyAnyCAD.GBSplineCurve_Pole(self, idx)

    def Weights(self):
        return _PyAnyCAD.GBSplineCurve_Weights(self)

    def Weight(self, idx):
        return _PyAnyCAD.GBSplineCurve_Weight(self, idx)

# Register GBSplineCurve in _PyAnyCAD:
_PyAnyCAD.GBSplineCurve_swigregister(GBSplineCurve)
class GBSplineSurface(object):
    r"""
    Author: Geometry

     获取BSplineSurface信息.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBSplineSurface

    def Continuity(self):
        r"""
        获取连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.GBSplineSurface_Continuity(self)

    def NbUPoles(self):
        r"""
        U方向的顶点数量
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.GBSplineSurface_NbUPoles(self)

    def NbVPoles(self):
        r"""
        V方向的顶点数量
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.GBSplineSurface_NbVPoles(self)

    def Pole(self, idxU, idxV):
        r"""
        获取控制点的值
        :type idxU: int
        :param idxU: U方向的索引 [0, NbU)
        :type idxV: int
        :param idxV: V方向的索引 [0, NbV)
        :rtype: :py:class:`gp_Pnt`
        :return: 点坐标
        """
        return _PyAnyCAD.GBSplineSurface_Pole(self, idxU, idxV)

    def Weight(self, idxU, idxV):
        r"""
        获取权重
        :type idxU: int
        :param idxU: U方向[0, NbU)
        :type idxV: int
        :param idxV: V方向[0, NbV)
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.GBSplineSurface_Weight(self, idxU, idxV)

    def NbUKnots(self):
        r"""
        U方向节点数量
        :rtype: int
        :return: 数量
        """
        return _PyAnyCAD.GBSplineSurface_NbUKnots(self)

    def NbVKnots(self):
        r"""
        V方向节点数量
        :rtype: int
        :return: 数量
        """
        return _PyAnyCAD.GBSplineSurface_NbVKnots(self)

    def FirstUKnotIndex(self):
        return _PyAnyCAD.GBSplineSurface_FirstUKnotIndex(self)

    def FirstVKnotIndex(self):
        return _PyAnyCAD.GBSplineSurface_FirstVKnotIndex(self)

    def LastUKnotIndex(self):
        return _PyAnyCAD.GBSplineSurface_LastUKnotIndex(self)

    def LastVKnotIndex(self):
        return _PyAnyCAD.GBSplineSurface_LastVKnotIndex(self)

    def UKnot(self, UIndex):
        r"""
        获取U方向节点的值
        :type UIndex: int
        :param UIndex: 索引[0, NbUKnots())
        :rtype: float
        :return: 值
        """
        return _PyAnyCAD.GBSplineSurface_UKnot(self, UIndex)

    def VKnot(self, VIndex):
        r"""
        获取V方向节点的值
        :type VIndex: int
        :param VIndex: 索引[0, NbVKnots())
        :rtype: float
        :return: 值
        """
        return _PyAnyCAD.GBSplineSurface_VKnot(self, VIndex)

    def UMultiplicity(self, UIndex):
        r"""
        U节点重数
        :type UIndex: int
        :param UIndex: 索引[0, NbUKnots())
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.GBSplineSurface_UMultiplicity(self, UIndex)

    def VMultiplicity(self, UIndex):
        r"""
        V节点重数
        :param VIndex: 索引[0, NbUKnots())
        :rtype: int
        :return: 值
        """
        return _PyAnyCAD.GBSplineSurface_VMultiplicity(self, UIndex)

    def UDegree(self):
        r"""
        U方向的Degree
        :rtype: int
        :return: Degree
        """
        return _PyAnyCAD.GBSplineSurface_UDegree(self)

    def VDegree(self):
        r"""
        V方向的Degree
        :rtype: int
        :return: Degree
        """
        return _PyAnyCAD.GBSplineSurface_VDegree(self)

    def IsUClosed(self):
        r"""
        U方向是否为封闭的
        :rtype: boolean
        :return: true封闭
        """
        return _PyAnyCAD.GBSplineSurface_IsUClosed(self)

    def IsVClosed(self):
        r"""
        V方向是否为封闭的
        :rtype: boolean
        :return: true封闭
        """
        return _PyAnyCAD.GBSplineSurface_IsVClosed(self)

    def IsUPeriodic(self):
        r"""
        U方向是否为周期的
        :rtype: boolean
        :return: true周期
        """
        return _PyAnyCAD.GBSplineSurface_IsUPeriodic(self)

    def IsVPeriodic(self):
        r"""
        V方向是否为周期的
        :rtype: boolean
        :return: true周期
        """
        return _PyAnyCAD.GBSplineSurface_IsVPeriodic(self)

    def IsURational(self):
        r"""
        U方向是否为有理的
        :rtype: boolean
        :return: true有理的
        """
        return _PyAnyCAD.GBSplineSurface_IsURational(self)

    def IsVRational(self):
        r"""
        V方向是否为有理的
        :rtype: boolean
        :return: true有理的
        """
        return _PyAnyCAD.GBSplineSurface_IsVRational(self)

    def MaxDegree(self):
        r"""
        返回多项式的最大阶次
        :rtype: int
        :return: 最大阶次
        """
        return _PyAnyCAD.GBSplineSurface_MaxDegree(self)

    def D0(self, u, v):
        r"""
        获取曲面上的点.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.GBSplineSurface_D0(self, u, v)

    def D1(self, u, v):
        r"""
        获取曲面上的点和1阶导数.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point and D1U, D1V. Empty if not C1
        """
        return _PyAnyCAD.GBSplineSurface_D1(self, u, v)

    def D2(self, u, v):
        r"""
        获取曲面上的点和2阶导数.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV. Empty if not C2.
        """
        return _PyAnyCAD.GBSplineSurface_D2(self, u, v)

    def D3(self, u, v):
        r"""
        获取曲面上的点和3阶导数.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV. Empty if not C3.
        """
        return _PyAnyCAD.GBSplineSurface_D3(self, u, v)

    def DN(self, u, v, nu, nv):
        r"""
        The returned vector gives the value of the derivative for the order of derivation N.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :type nu: int
        :param nu: the order of derivation
        :type nv: int
        :param nv: the order of derivation
        :rtype: :py:class:`gp_Vec`
        :return: the vector. Return zero if not CN or N < 1.
        """
        return _PyAnyCAD.GBSplineSurface_DN(self, u, v, nu, nv)

# Register GBSplineSurface in _PyAnyCAD:
_PyAnyCAD.GBSplineSurface_swigregister(GBSplineSurface)
class GBezierSurface(object):
    r"""
    Author: Geometry

     获取BezierSurface信息.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GBezierSurface

    def Continuity(self):
        r"""
        获取连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.GBezierSurface_Continuity(self)

    def NbUPoles(self):
        r"""
        U方向的顶点数量
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.GBezierSurface_NbUPoles(self)

    def NbVPoles(self):
        r"""
        V方向的顶点数量
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.GBezierSurface_NbVPoles(self)

    def Pole(self, idxU, idxV):
        r"""
        获取控制点的值
        :type idxU: int
        :param idxU: U方向的索引 [0, NbU)
        :type idxV: int
        :param idxV: V方向的索引 [0, NbV)
        :rtype: :py:class:`gp_Pnt`
        :return: 点坐标
        """
        return _PyAnyCAD.GBezierSurface_Pole(self, idxU, idxV)

    def Weight(self, idxU, idxV):
        r"""
        获取权重
        :type idxU: int
        :param idxU: U方向[0, NbU)
        :type idxV: int
        :param idxV: V方向[0, NbV)
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.GBezierSurface_Weight(self, idxU, idxV)

    def UDegree(self):
        r"""
        U方向的Degree
        :rtype: int
        :return: Degree
        """
        return _PyAnyCAD.GBezierSurface_UDegree(self)

    def VDegree(self):
        r"""
        V方向的Degree
        :rtype: int
        :return: Degree
        """
        return _PyAnyCAD.GBezierSurface_VDegree(self)

    def IsUClosed(self):
        r"""
        U方向是否为封闭的
        :rtype: boolean
        :return: true封闭
        """
        return _PyAnyCAD.GBezierSurface_IsUClosed(self)

    def IsVClosed(self):
        r"""
        V方向是否为封闭的
        :rtype: boolean
        :return: true封闭
        """
        return _PyAnyCAD.GBezierSurface_IsVClosed(self)

    def IsUPeriodic(self):
        r"""
        U方向是否为周期的
        :rtype: boolean
        :return: true周期
        """
        return _PyAnyCAD.GBezierSurface_IsUPeriodic(self)

    def IsVPeriodic(self):
        r"""
        V方向是否为周期的
        :rtype: boolean
        :return: true周期
        """
        return _PyAnyCAD.GBezierSurface_IsVPeriodic(self)

    def IsURational(self):
        r"""
        U方向是否为有理的
        :rtype: boolean
        :return: true有理的
        """
        return _PyAnyCAD.GBezierSurface_IsURational(self)

    def IsVRational(self):
        r"""
        V方向是否为有理的
        :rtype: boolean
        :return: true有理的
        """
        return _PyAnyCAD.GBezierSurface_IsVRational(self)

    def MaxDegree(self):
        r"""
        返回多项式的最大阶次
        :rtype: int
        :return: 最大阶次
        """
        return _PyAnyCAD.GBezierSurface_MaxDegree(self)

    def D0(self, u, v):
        r"""
        获取曲面上的点.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.GBezierSurface_D0(self, u, v)

    def D1(self, u, v):
        r"""
        获取曲面上的点和1阶导数.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point and D1U, D1V. Empty if not C1
        """
        return _PyAnyCAD.GBezierSurface_D1(self, u, v)

    def D2(self, u, v):
        r"""
        获取曲面上的点和2阶导数.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV. Empty if not C2.
        """
        return _PyAnyCAD.GBezierSurface_D2(self, u, v)

    def D3(self, u, v):
        r"""
        获取曲面上的点和3阶导数.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV. Empty if not C3.
        """
        return _PyAnyCAD.GBezierSurface_D3(self, u, v)

    def DN(self, u, v, nu, nv):
        r"""
        The returned vector gives the value of the derivative for the order of derivation N.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :type nu: int
        :param nu: the order of derivation
        :type nv: int
        :param nv: the order of derivation
        :rtype: :py:class:`gp_Vec`
        :return: the vector. Return zero if not CN or N < 1.
        """
        return _PyAnyCAD.GBezierSurface_DN(self, u, v, nu, nv)

# Register GBezierSurface in _PyAnyCAD:
_PyAnyCAD.GBezierSurface_swigregister(GBezierSurface)
class ParametricGeometry(object):
    r"""
    Author: Geometry

       几何参数对象的基类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ParametricGeometry

    def GetId(self):
        return _PyAnyCAD.ParametricGeometry_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.ParametricGeometry_SetId(self, val)

    def IsValidGeometry(self):
        r"""判断是否有效."""
        return _PyAnyCAD.ParametricGeometry_IsValidGeometry(self)

    def Initialize(self, shape):
        r"""
        初始化.
        :type shape: :py:class:`TopoShape`
        :param shape: the TopoShape
        :rtype: boolean
        :return: true if ok.
        """
        return _PyAnyCAD.ParametricGeometry_Initialize(self, shape)

    def GetShape(self):
        r"""
        获取拓扑对象
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.ParametricGeometry_GetShape(self)

    @staticmethod
    def GetPointValue(vertex):
        r"""
        获取顶点的值
        :type vertex: :py:class:`TopoShape`
        :param vertex: 顶点，类型为Vertex
        :rtype: :py:class:`gp_Pnt`
        :return: 点
        """
        return _PyAnyCAD.ParametricGeometry_GetPointValue(vertex)

# Register ParametricGeometry in _PyAnyCAD:
_PyAnyCAD.ParametricGeometry_swigregister(ParametricGeometry)
class ParametricCurve(ParametricGeometry):
    r"""
    Author: Geometry

       曲线的几何参数表达，用来获取曲线上点、切线等信息。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParametricCurve_swiginit(self, _PyAnyCAD.new_ParametricCurve(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricCurve

    def GetOwnerId(self):
        return _PyAnyCAD.ParametricCurve_GetOwnerId(self)

    def SetOwnerId(self, val):
        return _PyAnyCAD.ParametricCurve_SetOwnerId(self, val)

    def IsValidGeometry(self):
        r"""Test if valid."""
        return _PyAnyCAD.ParametricCurve_IsValidGeometry(self)

    def Initialize(self, edge):
        r"""
        使用边对象来初始化,必须为边.
        :type edge: :py:class:`TopoShape`
        :param edge: 边
        :rtype: boolean
        :return: true if ok.
        """
        return _PyAnyCAD.ParametricCurve_Initialize(self, edge)

    def GetCurveType(self):
        r"""
        获取曲线类型.
        See also: EnumCurveType
        :rtype: int
        :return: 类型.
        """
        return _PyAnyCAD.ParametricCurve_GetCurveType(self)

    def Is3DCurve(self):
        r"""Is 3D Curve."""
        return _PyAnyCAD.ParametricCurve_Is3DCurve(self)

    def IsCurveOnSurface(self):
        r"""Is 3D Curve on surface."""
        return _PyAnyCAD.ParametricCurve_IsCurveOnSurface(self)

    def Tolerance(self):
        r"""tolerance."""
        return _PyAnyCAD.ParametricCurve_Tolerance(self)

    def FirstParameter(self):
        r"""
        起始参数.
        :rtype: float
        :return: 参数
        """
        return _PyAnyCAD.ParametricCurve_FirstParameter(self)

    def FirstPoint(self):
        r"""
        起始点
        :rtype: :py:class:`gp_Pnt`
        :return: 点
        """
        return _PyAnyCAD.ParametricCurve_FirstPoint(self)

    def LastParameter(self):
        r"""
        终点参数
        :rtype: float
        :return: 参数
        """
        return _PyAnyCAD.ParametricCurve_LastParameter(self)

    def LastPoint(self):
        r"""
        终点
        :rtype: :py:class:`gp_Pnt`
        :return: 点
        """
        return _PyAnyCAD.ParametricCurve_LastPoint(self)

    def Continuity(self):
        r"""
        获取连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.ParametricCurve_Continuity(self)

    def IsClosed(self):
        r"""Is Closed."""
        return _PyAnyCAD.ParametricCurve_IsClosed(self)

    def IsPeriodic(self):
        r"""是否为周期函数."""
        return _PyAnyCAD.ParametricCurve_IsPeriodic(self)

    def Period(self):
        r"""周期值."""
        return _PyAnyCAD.ParametricCurve_Period(self)

    def Value(self, u):
        r"""
        Computes the point of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ParametricCurve_Value(self, u)

    def D0(self, u):
        r"""
        Computes the point of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ParametricCurve_D0(self, u)

    def D1(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues`
        :return: the point and the first derivative. Empty if not C1
        """
        return _PyAnyCAD.ParametricCurve_D1(self, u)

    def D2(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the first and second derivative. Empty if not C2.
        """
        return _PyAnyCAD.ParametricCurve_D2(self, u)

    def D3(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the first, the second and the third derivative. Empty if not C3.
        """
        return _PyAnyCAD.ParametricCurve_D3(self, u)

    def DN(self, u, n):
        r"""
        The returned vector gives the value of the derivative for the order of derivation N.
        :type u: float
        :param u: the parameter
        :type n: int
        :param n: the order of derivation
        :rtype: :py:class:`gp_Vec`
        :return: the vector. Return zero if not CN or N < 1.
        """
        return _PyAnyCAD.ParametricCurve_DN(self, u, n)

    def Curvature(self, u):
        r"""
        计算曲率
        :type u: float
        :param u: 参数位置
        :rtype: float
        :return: 曲率
        """
        return _PyAnyCAD.ParametricCurve_Curvature(self, u)

    def GetStartPoint(self):
        r"""
        Get the start point position.
        :rtype: :py:class:`gp_Pnt`
        :return: the start point.
        """
        return _PyAnyCAD.ParametricCurve_GetStartPoint(self)

    def GetEndPoint(self):
        r"""
        Get the end point position.
        :rtype: :py:class:`gp_Pnt`
        :return: the end point.
        """
        return _PyAnyCAD.ParametricCurve_GetEndPoint(self)

    def GetBBox(self):
        r"""
        Compute the bounding box.
        :rtype: :py:class:`Bnd_Box`
        :return: the box.
        """
        return _PyAnyCAD.ParametricCurve_GetBBox(self)

    def GetLength(self):
        r"""
        长度
        :rtype: float
        :return: 长度
        """
        return _PyAnyCAD.ParametricCurve_GetLength(self)

    def ComputeLength(self, u1, u2):
        r"""
        计算指定位置间的长度
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :rtype: float
        :return: 长度
        """
        return _PyAnyCAD.ParametricCurve_ComputeLength(self, u1, u2)

    def ComputePointByDistance(self, u0, distance):
        r"""
        Compute the point with the distance to u0.
        :type u0: float
        :param u0: the parameter of the start point.
        :type distance: float
        :param distance: the distance.
        :param tol: the tolerance
        :rtype: float
        :return: the parameter of the point. retun u0 if not found.
        """
        return _PyAnyCAD.ParametricCurve_ComputePointByDistance(self, u0, distance)

    def SplitByUniformLength(self, *args):
        r"""
        *Overload 1:*

        把曲线拆分为等长的线段.
        :type length: float
        :param length: 每段的长度.
        :type tolerance: float
        :param tolerance: 误差
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。使用GetValue(u)获取点的值

        |

        *Overload 2:*

        把曲线指定的区间拆分为等长的线段.
        :type length: float
        :param length: 每段的长度.
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :type tolerance: float
        :param tolerance: 误差
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。
        """
        return _PyAnyCAD.ParametricCurve_SplitByUniformLength(self, *args)

    def SplitByUniformLengthByCount(self, count, u1, u2, tolerance):
        r"""
        指定个数，把曲线指定的区间拆分为等长的线段.
        :type count: int
        :param count: 个数
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :type tolerance: float
        :param tolerance: 误差
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。
        """
        return _PyAnyCAD.ParametricCurve_SplitByUniformLengthByCount(self, count, u1, u2, tolerance)

    def SplitByUniformAbscissa(self, *args):
        r"""
        *Overload 1:*

        把曲线指定的区间拆分为等长的线段.
        :type count: int
        :param count: 点的个数.
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。

        |

        *Overload 2:*

        指定个数，把曲线指定的区间拆分为等长的线段.
        :type count: int
        :param count: 点的个数.
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。
        """
        return _PyAnyCAD.ParametricCurve_SplitByUniformAbscissa(self, *args)

    def SplitByTangential(self, *args):
        r"""
        *Overload 1:*

        根据曲率和角度自动分割曲线，曲率大的地方密一些，曲率小的地方稀一些。
        :type angular: float
        :param angular: 角度偏转（弧度）
        :type curvature: float
        :param curvature: 线形偏转 linear deflection
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。

        |

        *Overload 2:*

        根据曲率和角度自动分割曲线，曲率大的地方密一些，曲率小的地方稀一些。
        :type angular: float
        :param angular: 角度偏转（弧度）
        :type curvature: float
        :param curvature: 线形偏转 linear deflection
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。

        |

        *Overload 3:*

        根据曲率和角度自动分割曲线，曲率大的地方密一些，曲率小的地方稀一些。
        :type angular: float
        :param angular: 角度偏转（弧度）
        :type curvature: float
        :param curvature: 线形偏转 linear deflection
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :type minLength: float
        :param minLength: 最小长度
        :type minPointNumber: int
        :param minPointNumber: 最小点数量
        :rtype: :py:class:`DoubleList`
        :return: 分割每一段的参数列表。
        """
        return _PyAnyCAD.ParametricCurve_SplitByTangential(self, *args)

    def TryLine(self):
        r"""
        转成线。转之前调用GetCurveType判断类型
        :rtype: :py:class:`gp_Lin`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryLine(self)

    def TryCircle(self):
        r"""
        转成圆弧。转之前调用GetCurveType判断类型
        :rtype: :py:class:`gp_Circ`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryCircle(self)

    def TryEllipse(self):
        r"""
        转成椭圆弧。转之前调用GetCurveType判断类型
        :rtype: :py:class:`gp_Elips`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryEllipse(self)

    def TryHyperbola(self):
        r"""
        转成双曲线。转之前调用GetCurveType判断类型
        :rtype: :py:class:`gp_Hypr`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryHyperbola(self)

    def TryParabola(self):
        r"""
        转成抛物线。转之前调用GetCurveType判断类型
        :rtype: :py:class:`gp_Parab`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryParabola(self)

    def TryBSplineCurve(self):
        r"""
        转成样条曲线。转之前调用GetCurveType判断类型
        :rtype: :py:class:`GBSplineCurve`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryBSplineCurve(self)

    def TryBezierCurve(self):
        r"""
        转成贝塞尔曲线。转之前调用GetCurveType判断类型
        :rtype: :py:class:`GBezierCurve`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve_TryBezierCurve(self)

    def ComputeClosestPoint(self, pt):
        r"""
        计算曲线上最近的点
        :type pt: :py:class:`gp_Pnt`
        :param pt: 点
        :rtype: float
        :return: 曲线参数
        """
        return _PyAnyCAD.ParametricCurve_ComputeClosestPoint(self, pt)

# Register ParametricCurve in _PyAnyCAD:
_PyAnyCAD.ParametricCurve_swigregister(ParametricCurve)
class ParametricSurface(ParametricGeometry):
    r"""
    Author: Geometry

       ParametricSurface几何曲面对象的参数表达，用来获取曲面上的点、法向等信息.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        构造函数，初始化对象
        :type face: :py:class:`TopoShape`
        :param face: 面对象
        """
        _PyAnyCAD.ParametricSurface_swiginit(self, _PyAnyCAD.new_ParametricSurface(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricSurface

    def IsValidGeometry(self):
        r"""Test if valid."""
        return _PyAnyCAD.ParametricSurface_IsValidGeometry(self)

    def Initialize(self, face):
        r"""
        使用面对象来初始化.
        :type face: :py:class:`TopoShape`
        :param face: the TopoShape
        :rtype: boolean
        :return: true if ok.
        """
        return _PyAnyCAD.ParametricSurface_Initialize(self, face)

    def GetSurfaceType(self):
        r"""
        Get the surface type.
        enum EnumSurfaceType:
        :rtype: int
        :return: the point.
        """
        return _PyAnyCAD.ParametricSurface_GetSurfaceType(self)

    def Tolerance(self):
        r"""tolerance."""
        return _PyAnyCAD.ParametricSurface_Tolerance(self)

    def FirstUParameter(self):
        r"""The first u parameter."""
        return _PyAnyCAD.ParametricSurface_FirstUParameter(self)

    def LastUParameter(self):
        r"""The last u parameter."""
        return _PyAnyCAD.ParametricSurface_LastUParameter(self)

    def FirstVParameter(self):
        r"""The first v parameter."""
        return _PyAnyCAD.ParametricSurface_FirstVParameter(self)

    def LastVParameter(self):
        r"""The last v parameter."""
        return _PyAnyCAD.ParametricSurface_LastVParameter(self)

    def UContinuity(self):
        r"""
        U方向连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.ParametricSurface_UContinuity(self)

    def VContinuity(self):
        r"""
        V方向连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.ParametricSurface_VContinuity(self)

    def IsUClosed(self):
        r"""Is Closed."""
        return _PyAnyCAD.ParametricSurface_IsUClosed(self)

    def IsVClosed(self):
        r"""Is Closed."""
        return _PyAnyCAD.ParametricSurface_IsVClosed(self)

    def IsUPeriodic(self):
        r"""Is Periodic."""
        return _PyAnyCAD.ParametricSurface_IsUPeriodic(self)

    def IsVPeriodic(self):
        r"""Is Periodic."""
        return _PyAnyCAD.ParametricSurface_IsVPeriodic(self)

    def UPeriod(self):
        r"""The period."""
        return _PyAnyCAD.ParametricSurface_UPeriod(self)

    def VPeriod(self):
        r"""The period."""
        return _PyAnyCAD.ParametricSurface_VPeriod(self)

    def GetTransform(self):
        r"""Get the transform."""
        return _PyAnyCAD.ParametricSurface_GetTransform(self)

    def Value(self, u, v):
        r"""
        计算给定位置的点坐标.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`gp_Pnt`
        :return: 点的坐标.
        """
        return _PyAnyCAD.ParametricSurface_Value(self, u, v)

    def GetNormal(self, *args):
        return _PyAnyCAD.ParametricSurface_GetNormal(self, *args)

    def D0(self, u, v):
        r"""
        Computes the point of parameter U on the surface.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ParametricSurface_D0(self, u, v)

    def D1(self, u, v):
        r"""
        Computes the point and derivative of parameter U on the surface.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point and D1U, D1V. Empty if not C1
        """
        return _PyAnyCAD.ParametricSurface_D1(self, u, v)

    def D2(self, u, v):
        r"""
        Computes the point and derivative of parameter U on the surface.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV. Empty if not C2.
        """
        return _PyAnyCAD.ParametricSurface_D2(self, u, v)

    def D3(self, u, v):
        r"""
        Computes the point and derivative of parameter U on the surface.
        :type u: float
        :param u: the parameter
        :type v: float
        :param v: the parameter v
        :rtype: :py:class:`DerivativeValues`
        :return: the point, the D1U, D1V, D2U, D2V, D2UV, D3U, D3V, D3UUV, D3UVV. Empty if not C3.
        """
        return _PyAnyCAD.ParametricSurface_D3(self, u, v)

    def DN(self, u, v, nu, nv):
        r"""
        The returned vector gives the value of the derivative for the order of derivation N.
        :type u: float
        :param u: the parameter u
        :type v: float
        :param v: the parameter v
        :type nu: int
        :param nu: the order of derivation
        :type nv: int
        :param nv: the order of derivation
        :rtype: :py:class:`gp_Vec`
        :return: the vector. Return zero if not CN or N < 1.
        """
        return _PyAnyCAD.ParametricSurface_DN(self, u, v, nu, nv)

    def ComputeClosestPoint(self, pt, tolU, tolV):
        r"""
        用投影的方式，计算在曲面上与点最接近的点
        :type pt: :py:class:`gp_Pnt`
        :param pt: 点
        :type tolU: float
        :param tolU: u方向的误差
        :type tolV: float
        :param tolV: v方向的误差
        :rtype: :py:class:`gp_XY`
        :return: UV坐标(u,v)
        """
        return _PyAnyCAD.ParametricSurface_ComputeClosestPoint(self, pt, tolU, tolV)

    def GetUV(self, pt):
        r"""
        用极值方式，计算点在曲面上的位置。
        :type pt: :py:class:`gp_Pnt`
        :param pt: 点。
        :rtype: :py:class:`gp_XY`
        :return: UV坐标(u,v)
        """
        return _PyAnyCAD.ParametricSurface_GetUV(self, pt)

    def GetArea(self):
        r"""
        计算面积
        :rtype: float
        :return: 面积
        """
        return _PyAnyCAD.ParametricSurface_GetArea(self)

    def TryPlane(self):
        r"""
        转换成平面
        :rtype: :py:class:`gp_Pln`
        :return: 对象
        """
        return _PyAnyCAD.ParametricSurface_TryPlane(self)

    def TryCylinder(self):
        r"""
        转换成圆柱面
        :rtype: :py:class:`gp_Cylinder`
        :return: 对象
        """
        return _PyAnyCAD.ParametricSurface_TryCylinder(self)

    def TryCone(self):
        r"""
        转换成圆锥面
        :rtype: :py:class:`gp_Cone`
        :return: 对象
        """
        return _PyAnyCAD.ParametricSurface_TryCone(self)

    def TrySphere(self):
        r"""
        转换成球面
        :rtype: :py:class:`gp_Sphere`
        :return: 对象
        """
        return _PyAnyCAD.ParametricSurface_TrySphere(self)

    def TryTorus(self):
        r"""
        转换成圆环面
        :rtype: :py:class:`gp_Torus`
        :return: 对象
        """
        return _PyAnyCAD.ParametricSurface_TryTorus(self)

    def TryBSplineSurface(self):
        r"""
        转换成BSplineSurface
        :rtype: :py:class:`GBSplineSurface`
        :return: GBSplineSurface
        """
        return _PyAnyCAD.ParametricSurface_TryBSplineSurface(self)

    def TryBezierSurface(self):
        r"""
        转换成BezierSurface
        :rtype: :py:class:`GBezierSurface`
        :return: GBezierSurface
        """
        return _PyAnyCAD.ParametricSurface_TryBezierSurface(self)

# Register ParametricSurface in _PyAnyCAD:
_PyAnyCAD.ParametricSurface_swigregister(ParametricSurface)
class ParametricCurve2d(ParametricGeometry):
    r"""
    Author: Geometry

      二维曲线的几何参数表达，用来获取曲线上点、切线等信息。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ParametricCurve2d_swiginit(self, _PyAnyCAD.new_ParametricCurve2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParametricCurve2d

    def GetOwnerId(self):
        return _PyAnyCAD.ParametricCurve2d_GetOwnerId(self)

    def SetOwnerId(self, val):
        return _PyAnyCAD.ParametricCurve2d_SetOwnerId(self, val)

    def IsValidGeometry(self):
        r"""Test if valid."""
        return _PyAnyCAD.ParametricCurve2d_IsValidGeometry(self)

    def Initialize(self, edge):
        r"""
        使用2D的边来初始化对象.
        :type edge: :py:class:`TopoShape`
        :param edge: 边
        :rtype: boolean
        :return: true if ok.
        """
        return _PyAnyCAD.ParametricCurve2d_Initialize(self, edge)

    def GetCurveType(self):
        r"""
        Get the curve type.
        enum EnumCurveType
        :rtype: int
        :return: the point.
        """
        return _PyAnyCAD.ParametricCurve2d_GetCurveType(self)

    def Is3DCurve(self):
        r"""Is 3D Curve."""
        return _PyAnyCAD.ParametricCurve2d_Is3DCurve(self)

    def FirstParameter(self):
        r"""
        起点参数
        :rtype: float
        :return: 参数
        """
        return _PyAnyCAD.ParametricCurve2d_FirstParameter(self)

    def LastParameter(self):
        r"""
        终点参数
        :rtype: float
        :return: 参数
        """
        return _PyAnyCAD.ParametricCurve2d_LastParameter(self)

    def Continuity(self):
        r"""
        获取连续性
        :rtype: int
        :return: EnumGeometryContinuity
        """
        return _PyAnyCAD.ParametricCurve2d_Continuity(self)

    def IsClosed(self):
        r"""Is Closed."""
        return _PyAnyCAD.ParametricCurve2d_IsClosed(self)

    def IsPeriodic(self):
        r"""Is Periodic."""
        return _PyAnyCAD.ParametricCurve2d_IsPeriodic(self)

    def Period(self):
        r"""The period."""
        return _PyAnyCAD.ParametricCurve2d_Period(self)

    def Value(self, u):
        r"""
        计算点的值.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`gp_Pnt2d`
        :return: the point.
        """
        return _PyAnyCAD.ParametricCurve2d_Value(self, u)

    def Normal(self, u):
        r"""
        计算法向的值
        :type u: float
        :param u: 参数
        :rtype: :py:class:`gp_Vec2d`
        :return: 法向
        """
        return _PyAnyCAD.ParametricCurve2d_Normal(self, u)

    def D0(self, u):
        r"""
        Computes the point of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`gp_Pnt2d`
        :return: the point.
        """
        return _PyAnyCAD.ParametricCurve2d_D0(self, u)

    def D1(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues2d`
        :return: the point and the first derivative. Empty if not C1
        """
        return _PyAnyCAD.ParametricCurve2d_D1(self, u)

    def D2(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues2d`
        :return: the point, the first and second derivative. Empty if not C2.
        """
        return _PyAnyCAD.ParametricCurve2d_D2(self, u)

    def D3(self, u):
        r"""
        Computes the point and derivative of parameter U on the curve.
        :type u: float
        :param u: the parameter
        :rtype: :py:class:`DerivativeValues2d`
        :return: the point, the first, the second and the third derivative. Empty if not C3.
        """
        return _PyAnyCAD.ParametricCurve2d_D3(self, u)

    def DN(self, u, n):
        r"""
        The returned vector gives the value of the derivative for the order of derivation N.
        :type u: float
        :param u: the parameter
        :type n: int
        :param n: the order of derivation
        :rtype: :py:class:`gp_Vec2d`
        :return: the vector. Return zero if not CN or N < 1.
        """
        return _PyAnyCAD.ParametricCurve2d_DN(self, u, n)

    def GetStartPoint(self):
        r"""
        获取起始点坐标.
        :rtype: :py:class:`gp_Pnt2d`
        :return: the start point.
        """
        return _PyAnyCAD.ParametricCurve2d_GetStartPoint(self)

    def GetEndPoint(self):
        r"""
        获取终点坐标.
        :rtype: :py:class:`gp_Pnt2d`
        :return: the end point.
        """
        return _PyAnyCAD.ParametricCurve2d_GetEndPoint(self)

    def GetBBox(self):
        r"""
        Compute the bounding box.
        :rtype: :py:class:`Bnd_Box`
        :return: the box.
        """
        return _PyAnyCAD.ParametricCurve2d_GetBBox(self)

    def GetLength(self):
        r"""
        计算长度
        :rtype: float
        :return: 长度
        """
        return _PyAnyCAD.ParametricCurve2d_GetLength(self)

    def ComputeLength(self, u1, u2):
        r"""
        计算指定区间的长度
        :type u1: float
        :param u1: 起始参数
        :type u2: float
        :param u2: 终止参数
        :rtype: float
        :return: 长度
        """
        return _PyAnyCAD.ParametricCurve2d_ComputeLength(self, u1, u2)

    def ComputePointByDistance(self, u0, offset):
        r"""
        Compute the point with the distance to u0.
        :type u0: float
        :param u0: the parameter of the start point.
        :type offset: float
        :param offset: the distance.
        :param tol: the tolerance
        :rtype: float
        :return: the parameter of the point. retun u0 if not found.
        """
        return _PyAnyCAD.ParametricCurve2d_ComputePointByDistance(self, u0, offset)

    def SplitByUniformLength(self, length, tolerance):
        r"""
        拆分为等长度的线段.
        :type length: float
        :param length: the length of each part.
        :type tolerance: float
        :param tolerance: 误差
        :rtype: :py:class:`DoubleList`
        :return: the parameters of each part.
        """
        return _PyAnyCAD.ParametricCurve2d_SplitByUniformLength(self, length, tolerance)

    def TryLine(self):
        r"""
        转换为直线对象
        :rtype: :py:class:`gp_Lin2d`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve2d_TryLine(self)

    def TryCircle(self):
        r"""
        转换为圆弧对象
        :rtype: :py:class:`gp_Circ2d`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve2d_TryCircle(self)

    def TryEllipse(self):
        r"""
        转换为椭圆弧对象
        :rtype: :py:class:`gp_Elips2d`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve2d_TryEllipse(self)

    def TryHyperbola(self):
        r"""
        转换为双曲线对象
        :rtype: :py:class:`gp_Hypr2d`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve2d_TryHyperbola(self)

    def TryParabola(self):
        r"""
        转换为抛物线对象
        :rtype: :py:class:`gp_Parab2d`
        :return: 对象
        """
        return _PyAnyCAD.ParametricCurve2d_TryParabola(self)

# Register ParametricCurve2d in _PyAnyCAD:
_PyAnyCAD.ParametricCurve2d_swigregister(ParametricCurve2d)
EnumExtremaType_Min = _PyAnyCAD.EnumExtremaType_Min
r"""最小值"""
EnumExtremaType_Max = _PyAnyCAD.EnumExtremaType_Max
r"""最大值"""
EnumExtremaType_MinMax = _PyAnyCAD.EnumExtremaType_MinMax
r"""最小值和最大值"""
EnumCollisionState_In = _PyAnyCAD.EnumCollisionState_In
r"""在里面"""
EnumCollisionState_Out = _PyAnyCAD.EnumCollisionState_Out
r"""在外面"""
EnumCollisionState_On = _PyAnyCAD.EnumCollisionState_On
r"""在边界上"""
EnumCollisionState_Unknown = _PyAnyCAD.EnumCollisionState_Unknown
r"""未知"""
class CollisionDetector(object):
    r"""
    Author: Geometry

      点与面、体的碰撞检查.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def FacePoint(face, point, tol):
        r"""
        判断点和面的关系.
        :type face: :py:class:`TopoShape`
        :param face: the face.
        :type point: :py:class:`gp_Pnt`
        :param point: the point.
        :type tol: float
        :param tol: the tolerance
        :rtype: int
        :return: the state by EnumShapeState
        """
        return _PyAnyCAD.CollisionDetector_FacePoint(face, point, tol)

    @staticmethod
    def SolidPoint(shape, point, tol):
        r"""
        判断点和体的关系.
        :type shape: :py:class:`TopoShape`
        :param shape: the solid.
        :type point: :py:class:`gp_Pnt`
        :param point: the point.
        :type tol: float
        :param tol: the tolerance
        :rtype: int
        :return: the state by EnumShapeState
        """
        return _PyAnyCAD.CollisionDetector_SolidPoint(shape, point, tol)

# Register CollisionDetector in _PyAnyCAD:
_PyAnyCAD.CollisionDetector_swigregister(CollisionDetector)
class ExtremaCurveCurve(object):
    r"""
    Author: Geometry

       计算曲线之间的最大最小距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaCurveCurve_swiginit(self, _PyAnyCAD.new_ExtremaCurveCurve())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaCurveCurve

    def Initialize(self, curve1, curve2):
        r"""
        初始化
        :type curve1: :py:class:`TopoShape`
        :param curve1: 曲线1
        :type curve2: :py:class:`TopoShape`
        :param curve2: 曲线2
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ExtremaCurveCurve_Initialize(self, curve1, curve2)

    def GetPointCount(self):
        r"""
        Get the extrema point count
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaCurveCurve_GetPointCount(self)

    def GetPoint1(self, idx):
        r"""
        Get the point by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaCurveCurve_GetPoint1(self, idx)

    def GetPoint2(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetPoint2(self, idx)

    def GetParameter1(self, idx):
        r"""
        Get parameter by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ExtremaCurveCurve_GetParameter1(self, idx)

    def GetParameter2(self, idx):
        return _PyAnyCAD.ExtremaCurveCurve_GetParameter2(self, idx)

    def GetSquareDistance(self, idx):
        r"""
        Get the square distance by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the squre distance.
        """
        return _PyAnyCAD.ExtremaCurveCurve_GetSquareDistance(self, idx)

    def IsParallel(self):
        r"""
        是否平行
        :rtype: boolean
        :return: true 如果平行
        """
        return _PyAnyCAD.ExtremaCurveCurve_IsParallel(self)

# Register ExtremaCurveCurve in _PyAnyCAD:
_PyAnyCAD.ExtremaCurveCurve_swigregister(ExtremaCurveCurve)
class ExtremaCurveSurface(object):
    r"""
    Author: Geometry

       计算曲线和曲面之间的最大和最小距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaCurveSurface_swiginit(self, _PyAnyCAD.new_ExtremaCurveSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaCurveSurface

    def Initialize(self, edge, face):
        r"""
        初始化
        :type edge: :py:class:`TopoShape`
        :param edge: 曲线
        :type face: :py:class:`TopoShape`
        :param face: 曲面
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ExtremaCurveSurface_Initialize(self, edge, face)

    def GetPointCount(self):
        r"""
        Get the extrema point count
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetPointCount(self)

    def IsParallel(self):
        r"""
        if the curve is on a parallel surface
        :rtype: boolean
        :return: true if parallel
        """
        return _PyAnyCAD.ExtremaCurveSurface_IsParallel(self)

    def GetSquareDistance(self, idx):
        r"""
        Get the square distance of the solution index
        :type idx: int
        :param idx: the index.
        :rtype: float
        :return: the  square distance.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetSquareDistance(self, idx)

    def GetPointOnEdge(self, idx):
        r"""
        Get the point by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetPointOnEdge(self, idx)

    def GetPointOnFace(self, idx):
        r"""
        Get the point by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetPointOnFace(self, idx)

    def GetParameterOnEdge(self, idx):
        r"""
        Get parameter on edge by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetParameterOnEdge(self, idx)

    def GetParameterOnFace(self, idx):
        r"""
        Get parameter on face by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_XY`
        :return: the parameters.
        """
        return _PyAnyCAD.ExtremaCurveSurface_GetParameterOnFace(self, idx)

# Register ExtremaCurveSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaCurveSurface_swigregister(ExtremaCurveSurface)
class ExtremaPointCurve(object):
    r"""
    Author: Geometry

       计算点与曲线的最大和最小距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaPointCurve_swiginit(self, _PyAnyCAD.new_ExtremaPointCurve())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaPointCurve

    def Initialize(self, *args):
        return _PyAnyCAD.ExtremaPointCurve_Initialize(self, *args)

    def GetPointCount(self):
        r"""
        Get the extrema point count
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaPointCurve_GetPointCount(self)

    def IsMin(self, idx):
        r"""
        idx extremum distance is a minimum
        :type idx: int
        :param idx: the index
        :rtype: boolean
        :return: true if it's minimun.
        """
        return _PyAnyCAD.ExtremaPointCurve_IsMin(self, idx)

    def GetPoint(self, idx):
        r"""
        Get the point by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaPointCurve_GetPoint(self, idx)

    def GetParameter(self, idx):
        r"""
        Get parameter by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ExtremaPointCurve_GetParameter(self, idx)

    def GetSquareDistance(self, idx):
        r"""
        Get the square distance by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the squre distance.
        """
        return _PyAnyCAD.ExtremaPointCurve_GetSquareDistance(self, idx)

    def GetMinimumSquareDistance(self):
        r"""
        Get the minimum square distance
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.ExtremaPointCurve_GetMinimumSquareDistance(self)

    def GetMinimumDistancePoint(self):
        r"""
        Get the neasrest point
        :rtype: :py:class:`gp_Pnt`
        :return: 
        """
        return _PyAnyCAD.ExtremaPointCurve_GetMinimumDistancePoint(self)

    def GetMinimumDistanceParameter(self):
        r"""
        get the neasrest point's parameter
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.ExtremaPointCurve_GetMinimumDistanceParameter(self)

# Register ExtremaPointCurve in _PyAnyCAD:
_PyAnyCAD.ExtremaPointCurve_swigregister(ExtremaPointCurve)
class ExtremaPointSurface(object):
    r"""
    Author: Geometry

       计算点与曲面的最大、最远距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaPointSurface_swiginit(self, _PyAnyCAD.new_ExtremaPointSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaPointSurface

    def Initialize(self, *args):
        return _PyAnyCAD.ExtremaPointSurface_Initialize(self, *args)

    def GetPointCount(self):
        r"""
        Get the extrema point count
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaPointSurface_GetPointCount(self)

    def GetPoint(self, idx):
        r"""
        Get the point by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaPointSurface_GetPoint(self, idx)

    def GetParameter(self, idx):
        r"""
        Get parameter by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_XY`
        :return: the parameter.
        """
        return _PyAnyCAD.ExtremaPointSurface_GetParameter(self, idx)

    def GetSquareDistance(self, idx):
        r"""
        Get the square distance by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the squre distance.
        """
        return _PyAnyCAD.ExtremaPointSurface_GetSquareDistance(self, idx)

# Register ExtremaPointSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaPointSurface_swigregister(ExtremaPointSurface)
class ExtremaSurfacePoint(object):
    r"""
    Author: Geometry

       曲面极值计算结果点的信息. ParameterU和ParameterV记录点对应在所在面的UV值。
    See also: ExtremaSurfaceSurface
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ExtremaSurfacePoint_swiginit(self, _PyAnyCAD.new_ExtremaSurfacePoint(*args))

    def GetPoint(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetPoint(self)

    def GetParameterU(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetParameterU(self)

    def GetParameterV(self):
        return _PyAnyCAD.ExtremaSurfacePoint_GetParameterV(self)
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfacePoint

# Register ExtremaSurfacePoint in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfacePoint_swigregister(ExtremaSurfacePoint)
class ExtremaSurfacePointPair(object):
    r"""
    Author: Geometry

       曲面极值计算结果. Point1记录第一个面上的点， Point2记录第二个面上的点。
    See also: ExtremaSurfaceSurface
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p1, p2):
        _PyAnyCAD.ExtremaSurfacePointPair_swiginit(self, _PyAnyCAD.new_ExtremaSurfacePointPair(p1, p2))

    def GetPoint1(self):
        return _PyAnyCAD.ExtremaSurfacePointPair_GetPoint1(self)

    def GetPoint2(self):
        return _PyAnyCAD.ExtremaSurfacePointPair_GetPoint2(self)
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfacePointPair

# Register ExtremaSurfacePointPair in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfacePointPair_swigregister(ExtremaSurfacePointPair)
class ExtremaSurfaceSurface(object):
    r"""
    Author: Geometry

       计算两个曲面的最大、最小距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaSurfaceSurface_swiginit(self, _PyAnyCAD.new_ExtremaSurfaceSurface())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaSurfaceSurface

    def Initialize(self, s1, s2, tolS1, tolS2):
        r"""
        初始化
        :type s1: :py:class:`TopoShape`
        :param s1: 曲面1
        :type s2: :py:class:`TopoShape`
        :param s2: 曲面2
        :type tolS1: float
        :param tolS1: 曲面1的误差
        :type tolS2: float
        :param tolS2: 曲面2的误差
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.ExtremaSurfaceSurface_Initialize(self, s1, s2, tolS1, tolS2)

    def GetPointCount(self):
        r"""
        获取极值点的个数
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaSurfaceSurface_GetPointCount(self)

    def GetPoint(self, idx):
        r"""
        获取极值点的信息
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`ExtremaSurfacePointPair`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaSurfaceSurface_GetPoint(self, idx)

    def GetSquareDistance(self, idx):
        r"""
        获取距离
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: float
        :return: the squre distance.
        """
        return _PyAnyCAD.ExtremaSurfaceSurface_GetSquareDistance(self, idx)

    def IsParallel(self):
        r"""
        判断是否平行
        :rtype: boolean
        :return: true 如果平行
        """
        return _PyAnyCAD.ExtremaSurfaceSurface_IsParallel(self)

# Register ExtremaSurfaceSurface in _PyAnyCAD:
_PyAnyCAD.ExtremaSurfaceSurface_swigregister(ExtremaSurfaceSurface)
class ExtremaShapeShape(object):
    r"""
    Author: Geometry

       计算两个Shape之间的最小、最大距离.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ExtremaShapeShape_swiginit(self, _PyAnyCAD.new_ExtremaShapeShape())
    __swig_destroy__ = _PyAnyCAD.delete_ExtremaShapeShape

    def Initialize(self, *args):
        r"""
        初始化
        :type shape1: :py:class:`TopoShape`
        :param shape1: 几何1
        :type shape2: :py:class:`TopoShape`
        :param shape2: 几何2
        :type tol: float
        :param tol: 误差
        :type type: int, optional
        :param type: 类型，默认最小距离
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ExtremaShapeShape_Initialize(self, *args)

    def GetMinimumDistance(self):
        r"""
        Get the minimum distance.
        :rtype: float
        :return: the distance.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetMinimumDistance(self)

    def IsInnerSolution(self):
        r"""
        True if one of the shapes is a solid and the other shape
        is completely or partially inside the solid.
        :rtype: boolean
        :return: true if ....
        """
        return _PyAnyCAD.ExtremaShapeShape_IsInnerSolution(self)

    def GetPointCount(self):
        r"""
        Get the extrema point count
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetPointCount(self)

    def GetPointOnShape1(self, idx):
        r"""
        Get the point on shape 1 by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetPointOnShape1(self, idx)

    def GetPointOnShape2(self, idx):
        r"""
        Get the point on shape 2 by index
        :type idx: int
        :param idx: the index. start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the Point.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetPointOnShape2(self, idx)

    def GetSupportShape1(self, N):
        r"""
        Gives the support where the Nth solution on the first shape is situated.
        :type N: int
        :param N: the index. start from 0.
        :rtype: :py:class:`TopoShape`
        :return: the support which can be a Vertex, an Edge or a Face.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetSupportShape1(self, N)

    def GetSupportShape2(self, N):
        r"""
        Gives the support where the Nth solution on the first shape is situated.
        :type N: int
        :param N: the index. start from 0.
        :rtype: :py:class:`TopoShape`
        :return: the support which can be a Vertex, an Edge or a Face.
        """
        return _PyAnyCAD.ExtremaShapeShape_GetSupportShape2(self, N)

    def GetParameterOnEdgeS1(self, N):
        r"""
        gives the corresponding parameter t if the Nth solution
        is situated on an Egde of the first shape
        :type N: int
        :param N: the index.
        :rtype: float
        :return: the parameter
        """
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnEdgeS1(self, N)

    def GetParameterOnEdgeS2(self, N):
        r"""
        gives the corresponding parameter t if the Nth solution
        is situated on an Egde of the first shape
        :type N: int
        :param N: the index.
        :rtype: float
        :return: the parameter
        """
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnEdgeS2(self, N)

    def GetParameterOnFaceS1(self, N):
        r"""
        gives the corresponding parameter t if the Nth solution
        is situated on an Face of the first shape
        :type N: int
        :param N: the index.
        :rtype: :py:class:`gp_XY`
        :return: the parameter
        """
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnFaceS1(self, N)

    def GetParameterOnFaceS2(self, N):
        r"""
        gives the corresponding parameter t if the Nth solution
        is situated on an Face of the first shape
        :type N: int
        :param N: the index.
        :rtype: :py:class:`gp_XY`
        :return: the parameter
        """
        return _PyAnyCAD.ExtremaShapeShape_GetParameterOnFaceS2(self, N)

# Register ExtremaShapeShape in _PyAnyCAD:
_PyAnyCAD.ExtremaShapeShape_swigregister(ExtremaShapeShape)
class FaceIntersector(object):
    r"""
    Author: Geometry

      Intersection testing between face and curve.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face, tolerance):
        _PyAnyCAD.FaceIntersector_swiginit(self, _PyAnyCAD.new_FaceIntersector(face, tolerance))
    __swig_destroy__ = _PyAnyCAD.delete_FaceIntersector

    def IsValid(self):
        return _PyAnyCAD.FaceIntersector_IsValid(self)

    def Perform(self, *args):
        r"""
        *Overload 1:*

        Perform the intersection between the line and face.
        :type line: :py:class:`gp_Lin`
        :param line: segment.
        :type smallestP: float
        :param smallestP: is the smallest parameter on the line
        :type highestP: float
        :param highestP: is the highest  parmaeter on the line
        :rtype: boolean
        :return: true if done.

        |

        *Overload 2:*

        Perform the intersection between the ledgeine and face.
        :type edge: :py:class:`TopoShape`
        :param edge: the edge.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.FaceIntersector_Perform(self, *args)

    def IsParallel(self):
        r"""
        Test if curve is parallel or belongs face surface
        :rtype: boolean
        :return: Returns true if curve is parallel or belongs face surface.
        """
        return _PyAnyCAD.FaceIntersector_IsParallel(self)

    def GetPointCount(self):
        r"""
        Get the intersecting point number
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.FaceIntersector_GetPointCount(self)

    def UParameter(self, idx):
        r"""
        Returns the U parameter of the ith intersection point  on the surface.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the u parameter.
        """
        return _PyAnyCAD.FaceIntersector_UParameter(self, idx)

    def VParameter(self, idx):
        r"""
        Returns the V parameter of the ith intersection point  on the surface.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the V parameter.
        """
        return _PyAnyCAD.FaceIntersector_VParameter(self, idx)

    def WParameter(self, idx):
        r"""
        Returns the parameter of the ith intersection point on the line.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the parameter of the edge.
        """
        return _PyAnyCAD.FaceIntersector_WParameter(self, idx)

    def GetPoint(self, idx):
        r"""
        Returns the geometric point of the ith intersection between the line and the surface.
        :type idx: int
        :param idx: the index, start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.FaceIntersector_GetPoint(self, idx)

    @staticmethod
    def Instersect(face, edge):
        return _PyAnyCAD.FaceIntersector_Instersect(face, edge)

# Register FaceIntersector in _PyAnyCAD:
_PyAnyCAD.FaceIntersector_swigregister(FaceIntersector)
class ShapeIntersector(object):
    r"""
    Author: Geometry

      Intersection testing between face and shape.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape, tolerance):
        _PyAnyCAD.ShapeIntersector_swiginit(self, _PyAnyCAD.new_ShapeIntersector(shape, tolerance))
    __swig_destroy__ = _PyAnyCAD.delete_ShapeIntersector

    def IsValid(self):
        return _PyAnyCAD.ShapeIntersector_IsValid(self)

    def Perform(self, *args):
        r"""
        *Overload 1:*

        Perform the intersection between the line and face.
        :type line: :py:class:`gp_Lin`
        :param line: segment.
        :type smallestP: float
        :param smallestP: is the smallest parameter on the line
        :type highestP: float
        :param highestP: is the highest  parmaeter on the line
        :rtype: boolean
        :return: true if done.

        |

        *Overload 2:*

        Perform the intersection between the ledgeine and face.
        :type edge: :py:class:`TopoShape`
        :param edge: the edge.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.ShapeIntersector_Perform(self, *args)

    def GetPointCount(self):
        r"""
        Get the intersecting point number
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.ShapeIntersector_GetPointCount(self)

    def UParameter(self, idx):
        r"""
        Returns the U parameter of the ith intersection point  on the surface.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the u parameter.
        """
        return _PyAnyCAD.ShapeIntersector_UParameter(self, idx)

    def VParameter(self, idx):
        r"""
        Returns the V parameter of the ith intersection point  on the surface.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the V parameter.
        """
        return _PyAnyCAD.ShapeIntersector_VParameter(self, idx)

    def WParameter(self, idx):
        r"""
        Returns the parameter of the ith intersection point on the line.
        :type idx: int
        :param idx: the index, start from 0
        :rtype: float
        :return: the parameter of the edge.
        """
        return _PyAnyCAD.ShapeIntersector_WParameter(self, idx)

    def GetPoint(self, idx):
        r"""
        Returns the geometric point of the ith intersection between the line and the surface.
        :type idx: int
        :param idx: the index, start from 0.
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ShapeIntersector_GetPoint(self, idx)

# Register ShapeIntersector in _PyAnyCAD:
_PyAnyCAD.ShapeIntersector_swigregister(ShapeIntersector)
class EdgeExplor(object):
    r"""
    Author: Geometry

       对实体的边进行分类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.EdgeExplor_swiginit(self, _PyAnyCAD.new_EdgeExplor(*args))

    def Initialize(self, shape):
        r"""
        初始化.
        :type shape: :py:class:`TopoShape`
        :param shape: 包含边的实体.
        :rtype: boolean
        :return: false if failed.
        """
        return _PyAnyCAD.EdgeExplor_Initialize(self, shape)

    def GetSharedEdges(self):
        r"""
        获取共享的边，即被多个面引用的边。
        :rtype: :py:class:`TopoShapeList`
        :return: the edge list.
        """
        return _PyAnyCAD.EdgeExplor_GetSharedEdges(self)

    def GetFreeEdges(self):
        r"""
        获取自由的边，即只被一个面引用的边.
        :rtype: :py:class:`TopoShapeList`
        :return: the edge list.
        """
        return _PyAnyCAD.EdgeExplor_GetFreeEdges(self)

    def GetStandaloneEdges(self):
        r"""
        获取独立的边，即不被任何面引用的边.
        :rtype: :py:class:`TopoShapeList`
        :return: the edge list.
        """
        return _PyAnyCAD.EdgeExplor_GetStandaloneEdges(self)
    __swig_destroy__ = _PyAnyCAD.delete_EdgeExplor

# Register EdgeExplor in _PyAnyCAD:
_PyAnyCAD.EdgeExplor_swigregister(EdgeExplor)
class WireExplor(object):
    r"""
    Author: Geometry

       遍历面上的边界线.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.WireExplor_swiginit(self, _PyAnyCAD.new_WireExplor(*args))

    def Initialize(self, face):
        r"""
        初始化.
        :type face: :py:class:`TopoShape`
        :param face: 面对象.
        :rtype: boolean
        :return: false if failed.
        """
        return _PyAnyCAD.WireExplor_Initialize(self, face)

    def GetInnerWires(self):
        r"""
        获取内边界
        :rtype: :py:class:`TopoShapeList`
        :return: the wires.
        """
        return _PyAnyCAD.WireExplor_GetInnerWires(self)

    def GetOuterWire(self):
        r"""
        获取外边界.
        :rtype: :py:class:`TopoShape`
        :return: the wire of the face.
        """
        return _PyAnyCAD.WireExplor_GetOuterWire(self)

    @staticmethod
    def GetEdges(wire):
        r"""
        Get edges of a wire in order
        :type wire: :py:class:`TopoShape`
        :param wire:
        :rtype: :py:class:`TopoShapeList`
        :return: 
        """
        return _PyAnyCAD.WireExplor_GetEdges(wire)
    __swig_destroy__ = _PyAnyCAD.delete_WireExplor

# Register WireExplor in _PyAnyCAD:
_PyAnyCAD.WireExplor_swigregister(WireExplor)
class EdgeVertex(object):
    r"""
    Author: Geometry

     顶点信息, 在ShapeExplor中使用。
    See also: ShapeExplor
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.EdgeVertex_swiginit(self, _PyAnyCAD.new_EdgeVertex(*args))

    def GetEdgeIdx(self):
        return _PyAnyCAD.EdgeVertex_GetEdgeIdx(self)

    def SetEdgeIdx(self, val):
        return _PyAnyCAD.EdgeVertex_SetEdgeIdx(self, val)

    def GetPoint(self):
        return _PyAnyCAD.EdgeVertex_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.EdgeVertex_SetPoint(self, val)

    def GetKey(self):
        return _PyAnyCAD.EdgeVertex_GetKey(self)

    def GetPointType(self):
        return _PyAnyCAD.EdgeVertex_GetPointType(self)

    def SetPointType(self, val):
        return _PyAnyCAD.EdgeVertex_SetPointType(self, val)

    def IsStartPoint(self):
        r"""
        是否为起始点
        :rtype: boolean
        :return: true起始点
        """
        return _PyAnyCAD.EdgeVertex_IsStartPoint(self)

    def IsEndPoint(self):
        r"""
        是否为终止点
        :rtype: boolean
        :return: true终点
        """
        return _PyAnyCAD.EdgeVertex_IsEndPoint(self)

    def IsSame(self, vertex):
        r"""
        是否是同一个点
        :type vertex: :py:class:`EdgeVertex`
        :param vertex: 被比较的点
        :rtype: boolean
        :return: true则是同一个点
        """
        return _PyAnyCAD.EdgeVertex_IsSame(self, vertex)
    __swig_destroy__ = _PyAnyCAD.delete_EdgeVertex

# Register EdgeVertex in _PyAnyCAD:
_PyAnyCAD.EdgeVertex_swigregister(EdgeVertex)
class ShapeExplor(object):
    r"""
    Author: Geometry

     辅助类用来高效地遍历边和面的几何拓扑关系
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ShapeExplor_swiginit(self, _PyAnyCAD.new_ShapeExplor())

    def GetTolerance(self):
        return _PyAnyCAD.ShapeExplor_GetTolerance(self)

    def SetTolerance(self, val):
        return _PyAnyCAD.ShapeExplor_SetTolerance(self, val)

    def GetBoundingBox(self):
        return _PyAnyCAD.ShapeExplor_GetBoundingBox(self)

    def AddShape(self, shape):
        r"""
        添加几何对象，必须为面、体、复合体
        :type shape: :py:class:`TopoShape`
        :param shape: 几何对象
        :rtype: boolean
        :return: 若为点、边，则返回失败
        """
        return _PyAnyCAD.ShapeExplor_AddShape(self, shape)

    def Build(self):
        r"""构建关系。"""
        return _PyAnyCAD.ShapeExplor_Build(self)

    def GetFaceCount(self):
        r"""
        获取面的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.ShapeExplor_GetFaceCount(self)

    def GetFace(self, faceIdx):
        r"""
        获取面的参数表达
        :type faceIdx: int
        :param faceIdx: 面的索引，区间[0, GetFaceCount())
        :rtype: :py:class:`ParametricSurface`
        :return: 参数表达
        """
        return _PyAnyCAD.ShapeExplor_GetFace(self, faceIdx)

    def GetFaceBBox(self, faceIdx):
        r"""
        获取面的包围盒
        :type faceIdx: int
        :param faceIdx: 面的索引
        :rtype: :py:class:`Bnd_Box`
        :return: 包围盒
        """
        return _PyAnyCAD.ShapeExplor_GetFaceBBox(self, faceIdx)

    def GetEdgeCountOfFace(self, faceIdx):
        r"""
        获取某个面包含的边的数量
        :type faceIdx: int
        :param faceIdx: 面的索引
        :rtype: int
        :return: 边的数量
        """
        return _PyAnyCAD.ShapeExplor_GetEdgeCountOfFace(self, faceIdx)

    def GetEdgeOfFace(self, faceIdx, edgeIdx):
        r"""
        获取边的参数表达
        :type faceIdx: int
        :param faceIdx: 面的索引
        :type edgeIdx: int
        :param edgeIdx: 边在面上的索引， 区间[0, GetEdgeCountOfFace())
        :rtype: :py:class:`ParametricCurve`
        :return: 参数表达
        """
        return _PyAnyCAD.ShapeExplor_GetEdgeOfFace(self, faceIdx, edgeIdx)

    def GetEdgeCount(self):
        r"""
        获取边的个数
        :rtype: int
        :return: 边个数
        """
        return _PyAnyCAD.ShapeExplor_GetEdgeCount(self)

    def GetEdge(self, idx):
        r"""
        获取边的参数表达
        :type idx: int
        :param idx: 边的索引， 区间[0, GetEdgeCount())
        :rtype: :py:class:`ParametricCurve`
        :return: 参数表达
        """
        return _PyAnyCAD.ShapeExplor_GetEdge(self, idx)

    def GetFaceOfEdge(self, idx):
        r"""
        获取边所在的面的索引
        :type idx: int
        :param idx: 边的索引，区间[0, GetEdgeCount())
        :rtype: int
        :return: 面的索引
        """
        return _PyAnyCAD.ShapeExplor_GetFaceOfEdge(self, idx)

    def IsEdgeOnFace(self, edgeIdx, faceIdx):
        r"""
        判断某条边是否在某个面上
        :type edgeIdx: int
        :param edgeIdx: 边的索引 ，区间[0, GetEdgeCount())
        :type faceIdx: int
        :param faceIdx: 面的索引
        :rtype: boolean
        :return: true则在面上
        """
        return _PyAnyCAD.ShapeExplor_IsEdgeOnFace(self, edgeIdx, faceIdx)

    def FindSiblingFaces(self, *args):
        r"""
        *Overload 1:*

        查找边的邻面
        :type edgeIdx: int
        :param edgeIdx: 边的索引，区间[0, GetEdgeCount())
        :type candidateFaceIds: :py:class:`Uint32List`
        :param candidateFaceIds: 候选的面的索引列表
        :rtype: :py:class:`Uint32List`
        :return: 邻面的索引列表

        |

        *Overload 2:*

        从所有的面中查找边的邻面
        :type edgeIdx: int
        :param edgeIdx: 边的索引，区间[0, GetEdgeCount())
        :rtype: :py:class:`Uint32List`
        :return: 邻面的索引列表
        """
        return _PyAnyCAD.ShapeExplor_FindSiblingFaces(self, *args)

    def IsSiblingEdges(self, edgeIdxA, edgeIdxB):
        r"""
        判断两条边是否为临边
        :rtype: int
        :return: 0: Not, otherwise Yes: 1: A-end B-start 2: A-end B-end 3: A-start B-end 4: A-start B-start
        """
        return _PyAnyCAD.ShapeExplor_IsSiblingEdges(self, edgeIdxA, edgeIdxB)

    def GetStartVertexOfEdge(self, edgeIdx):
        r"""
        获取边的起点信息
        :type edgeIdx: int
        :param edgeIdx: 边，区间[0, GetEdgeCount())
        :rtype: :py:class:`EdgeVertex`
        :return: 顶点信息
        """
        return _PyAnyCAD.ShapeExplor_GetStartVertexOfEdge(self, edgeIdx)

    def GetEndVertexOfEdge(self, edgeIdx):
        r"""
        获取边的终点信息
        :type edgeIdx: int
        :param edgeIdx: 边，区间[0, GetEdgeCount())
        :rtype: :py:class:`EdgeVertex`
        :return: 顶点信息
        """
        return _PyAnyCAD.ShapeExplor_GetEndVertexOfEdge(self, edgeIdx)

    def GetVertexCount(self):
        r"""
        获取顶的个数
        :rtype: int
        :return: 顶点数量
        """
        return _PyAnyCAD.ShapeExplor_GetVertexCount(self)

    def GetVertex(self, vertexIdx):
        r"""
        获取顶点信息
        :type vertexIdx: int
        :param vertexIdx: 顶点索引 [0, GetVertexCount())
        :rtype: :py:class:`EdgeVertex`
        :return: 顶点信息
        """
        return _PyAnyCAD.ShapeExplor_GetVertex(self, vertexIdx)

    def GetConnectedVertices(self, vertexIdx):
        r"""
        获取与顶点相链接的点的列表
        :type vertexIdx: int
        :param vertexIdx: 顶点索引
        :rtype: :py:class:`Uint32List`
        :return: 顶点索引列表
        """
        return _PyAnyCAD.ShapeExplor_GetConnectedVertices(self, vertexIdx)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeExplor

# Register ShapeExplor in _PyAnyCAD:
_PyAnyCAD.ShapeExplor_swigregister(ShapeExplor)
class SolidExplor(object):
    r"""
    Author: Geometry

     实体拓扑关系遍历辅助类，需要是Topo_SOLID类型的对象
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SolidExplor_swiginit(self, _PyAnyCAD.new_SolidExplor())
    __swig_destroy__ = _PyAnyCAD.delete_SolidExplor

    def GetSolid(self):
        return _PyAnyCAD.SolidExplor_GetSolid(self)

    def Initialize(self, solid):
        r"""
        初始化.
        :type solid: :py:class:`TopoShape`
        :param solid: the solid to be explored.
        :rtype: boolean
        :return: false if failed.
        """
        return _PyAnyCAD.SolidExplor_Initialize(self, solid)

    def GetEdges(self):
        r"""
        获取边的列表
        :rtype: :py:class:`TopoShapeList`
        :return: 列表
        """
        return _PyAnyCAD.SolidExplor_GetEdges(self)

    def GetEdgeCount(self):
        r"""
        获取边的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.SolidExplor_GetEdgeCount(self)

    def GetEdge(self, idx):
        r"""
        获取某条边
        :type idx: int
        :param idx: 边的索引
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.SolidExplor_GetEdge(self, idx)

    def GetEdgeIndex(self, edge):
        r"""
        获取边的索引
        :type edge: :py:class:`TopoShape`
        :param edge: 对象
        :rtype: int
        :return: 索引
        """
        return _PyAnyCAD.SolidExplor_GetEdgeIndex(self, edge)

    def GetFaces(self):
        r"""
        获取面的列表
        :rtype: :py:class:`TopoShapeList`
        :return: 列表
        """
        return _PyAnyCAD.SolidExplor_GetFaces(self)

    def GetFaceCount(self):
        r"""
        面的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.SolidExplor_GetFaceCount(self)

    def GetFace(self, idx):
        r"""
        获取面对象
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.SolidExplor_GetFace(self, idx)

    def GetFaceIndex(self, face):
        r"""
        获取面的索引
        :type face: :py:class:`TopoShape`
        :param face: 对象
        :rtype: int
        :return: 索引
        """
        return _PyAnyCAD.SolidExplor_GetFaceIndex(self, face)

    def GetSharedFaces(self, edge):
        r"""
        获取共边的面
        :type edge: :py:class:`TopoShape`
        :param edge: 指定的边
        :rtype: :py:class:`TopoShapeList`
        :return: 面的列表
        """
        return _PyAnyCAD.SolidExplor_GetSharedFaces(self, edge)

    def GetSharedFaceIDs(self, edge):
        r"""
        获取共边的面的索引
        :type edge: :py:class:`TopoShape`
        :param edge: 边
        :rtype: :py:class:`Int32List`
        :return: 面的索引数组
        """
        return _PyAnyCAD.SolidExplor_GetSharedFaceIDs(self, edge)

    def GetSharedEdges(self, face1, face2):
        r"""
        获取两个面的共边
        :type face1: :py:class:`TopoShape`
        :param face1: 面对象1
        :type face2: :py:class:`TopoShape`
        :param face2: 面对象2
        :rtype: :py:class:`TopoShapeList`
        :return: 边的列表
        """
        return _PyAnyCAD.SolidExplor_GetSharedEdges(self, face1, face2)

    def GetSharedEdgeIDs(self, face1, face2):
        r"""
        获取两个面的共边索引
        :type face1: :py:class:`TopoShape`
        :param face1: 面对象1
        :type face2: :py:class:`TopoShape`
        :param face2: 面对象2
        :rtype: :py:class:`Int32List`
        :return: 边索引的列表
        """
        return _PyAnyCAD.SolidExplor_GetSharedEdgeIDs(self, face1, face2)

# Register SolidExplor in _PyAnyCAD:
_PyAnyCAD.SolidExplor_swigregister(SolidExplor)
EnumGeomJoinType_Arc = _PyAnyCAD.EnumGeomJoinType_Arc
EnumGeomJoinType_Tangent = _PyAnyCAD.EnumGeomJoinType_Tangent
EnumGeomJoinType_Intersection = _PyAnyCAD.EnumGeomJoinType_Intersection
EnumSweepTransitionMode_Transformed = _PyAnyCAD.EnumSweepTransitionMode_Transformed
EnumSweepTransitionMode_RightCorner = _PyAnyCAD.EnumSweepTransitionMode_RightCorner
EnumSweepTransitionMode_RoundCorner = _PyAnyCAD.EnumSweepTransitionMode_RoundCorner
EnumGeomFillTrihedron_CorrectedFrenet = _PyAnyCAD.EnumGeomFillTrihedron_CorrectedFrenet
EnumGeomFillTrihedron_Fixed = _PyAnyCAD.EnumGeomFillTrihedron_Fixed
EnumGeomFillTrihedron_Frenet = _PyAnyCAD.EnumGeomFillTrihedron_Frenet
EnumGeomFillTrihedron_ConstantNormal = _PyAnyCAD.EnumGeomFillTrihedron_ConstantNormal
EnumGeomFillTrihedron_Darboux = _PyAnyCAD.EnumGeomFillTrihedron_Darboux
EnumGeomFillTrihedron_GuideAC = _PyAnyCAD.EnumGeomFillTrihedron_GuideAC
EnumGeomFillTrihedron_GuidePlan = _PyAnyCAD.EnumGeomFillTrihedron_GuidePlan
EnumGeomFillTrihedron_GuideACWithContact = _PyAnyCAD.EnumGeomFillTrihedron_GuideACWithContact
EnumGeomFillTrihedron_GuidePlanWithContact = _PyAnyCAD.EnumGeomFillTrihedron_GuidePlanWithContact
EnumGeomFillTrihedron_DiscreteTrihedron = _PyAnyCAD.EnumGeomFillTrihedron_DiscreteTrihedron
EnumConvertParameterisationType_TgtThetaOver2 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2
EnumConvertParameterisationType_TgtThetaOver2_1 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_1
EnumConvertParameterisationType_TgtThetaOver2_2 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_2
EnumConvertParameterisationType_TgtThetaOver2_3 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_3
EnumConvertParameterisationType_TgtThetaOver2_4 = _PyAnyCAD.EnumConvertParameterisationType_TgtThetaOver2_4
EnumConvertParameterisationType_QuasiAngular = _PyAnyCAD.EnumConvertParameterisationType_QuasiAngular
EnumConvertParameterisationType_RationalC1 = _PyAnyCAD.EnumConvertParameterisationType_RationalC1
EnumConvertParameterisationType_Polynomial = _PyAnyCAD.EnumConvertParameterisationType_Polynomial
EnumSurfaceBuildAlgorithm_ConstrainedFilling = _PyAnyCAD.EnumSurfaceBuildAlgorithm_ConstrainedFilling
r"""
    An algorithm for constructing a BSpline surface filled 
    from a series of boundaries which serve as path 
    constraints and optionally, as tangency constraints. 
    The algorithm accepts three or four curves as the 
    boundaries of the target surface. 
    Warning 
    This surface filling algorithm is specifically designed to 
    be used in connection with fillets. Satisfactory results 
    cannot be guaranteed for other uses. 
    """
EnumSurfaceBuildAlgorithm_StretchStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_StretchStyle
r"""
    An algorithm for constructing a BSpline surface filled 
    from contiguous BSpline curves which form its boundaries. 
    The algorithm accepts two, three or four BSpline 
    curves as the boundaries of the target surface. 
    A range of filling styles - more or less rounded, more 
    or less flat - is available. 
    Warning 
    Some problems may show up with rational curves. 
    """
EnumSurfaceBuildAlgorithm_CoonsStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_CoonsStyle
EnumSurfaceBuildAlgorithm_CurvedStyle = _PyAnyCAD.EnumSurfaceBuildAlgorithm_CurvedStyle
class ShapeBuilder(object):
    r"""
    Author: Geometry

    ShapeBuilder 用于创建三维基本体.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeCompound(shapes):
        r"""
        Make compound shape for the input shapes.
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: the shape list.
        :rtype: :py:class:`TopoShape`
        :return: the new shape.
        """
        return _PyAnyCAD.ShapeBuilder_MakeCompound(shapes)

    @staticmethod
    def MakeSphere(*args):
        r"""
        *Overload 1:*

        Make sphere.
        :type center: :py:class:`gp_Pnt`
        :param center: the center of the sphere.
        :type radius: float
        :param radius: the radius value fo the shpere.
        :rtype: :py:class:`TopoShape`
        :return: the shape.

        |

        *Overload 2:*

        创建球截形
        :type ax: :py:class:`gp_Ax2`
        :param ax: 轴
        :type radius: float
        :param radius: 半径
        :type angle1: float
        :param angle1: 定义球截形的角度 0 - 2PI
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.ShapeBuilder_MakeSphere(*args)

    @staticmethod
    def MakeBox(ax, dx, dy, dz):
        r"""
        Make box
        :type ax: :py:class:`gp_Ax2`
        :param ax: the position and direction of the box.
        :type dx: float
        :param dx: x length
        :type dy: float
        :param dy: y length
        :type dz: float
        :param dz: z length
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.ShapeBuilder_MakeBox(ax, dx, dy, dz)

    @staticmethod
    def MakeCylinder(ax, radius, height, angle):
        r"""
        Make the cylinder shape.
        :type ax: :py:class:`gp_Ax2`
        :param ax: the position and direction of the cylinder.
        :type radius: float
        :param radius: the radius value.
        :type height: float
        :param height: the height of the cylindeer.
        :type angle: float
        :param angle: the opening angle with rad. closed if 0.
        :rtype: :py:class:`TopoShape`
        :return: the cylinder.
        """
        return _PyAnyCAD.ShapeBuilder_MakeCylinder(ax, radius, height, angle)

    @staticmethod
    def MakeCone(ax, radius, radiusTop, height, angle):
        r"""
        Make cone shape.
        :type ax: :py:class:`gp_Ax2`
        :param ax: the position and direction of the cone.
        :type radius: float
        :param radius: the botton radius
        :type radiusTop: float
        :param radiusTop: the top radius. if 0.
        :type height: float
        :param height: the height value.
        :type angle: float
        :param angle: the opening angle with rad.
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.ShapeBuilder_MakeCone(ax, radius, radiusTop, height, angle)

    @staticmethod
    def MakeTorus(*args):
        r"""
        *Overload 1:*

        Make torus shape.
        :type majorR: float
        :param majorR: Distance from the center of the pipe to the center of the torus.
        :type minorR: float
        :param minorR: Radius of the pipe.
        :type ax: :py:class:`gp_Ax2`
        :param ax: the position and direction.
        :type angle: float
        :param angle: the closed angle.
        :rtype: :py:class:`TopoShape`
        :return: the shape.

        |

        *Overload 2:*

        Make torus shape.
        :type majorR: float
        :param majorR: Distance from the center of the pipe to the center of the torus.
        :type minorR: float
        :param minorR: Radius of the pipe.
        :type ax: :py:class:`gp_Ax2`
        :param ax: the position and direction.
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.ShapeBuilder_MakeTorus(*args)

    @staticmethod
    def MakeTube(location, dir, innerRadius, thickness, len):
        r"""
        Make tube shape.
        :type location: :py:class:`gp_Pnt`
        :param location: the center value.
        :type dir: :py:class:`gp_Dir`
        :param dir: the direction.
        :type innerRadius: float
        :param innerRadius: the inner radius.
        :type thickness: float
        :param thickness: the thickness.
        :type len: float
        :param len: the length.
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.ShapeBuilder_MakeTube(location, dir, innerRadius, thickness, len)

    @staticmethod
    def MakePyramid(ax, number, radius, height):
        r"""
        Make pyramid.
        :type ax: :py:class:`gp_Ax2`
        :param ax: the local axis for position and direction.
        :type number: int
        :param number: the number of the ridges.
        :type radius: float
        :param radius: the radius.
        :type height: float
        :param height: the height.
        :rtype: :py:class:`TopoShape`
        :return: the solid.
        """
        return _PyAnyCAD.ShapeBuilder_MakePyramid(ax, number, radius, height)

    @staticmethod
    def MakeHalfSpace(*args):
        return _PyAnyCAD.ShapeBuilder_MakeHalfSpace(*args)

    @staticmethod
    def MakeSolid(*args):
        r"""
        *Overload 1:*

        Make solid from compound of face.
        :type compound: :py:class:`TopoShape`
        :param compound: the faces
        :rtype: :py:class:`TopoShape`
        :return: new solid

        |

        *Overload 2:*

        加多个面创建Solid
        :type faceList: :py:class:`TopoShapeList`
        :param faceList: 面的列表
        :type avoidInternals: boolean
        :param avoidInternals: 是否避免构造内部的环
        :rtype: :py:class:`TopoShapeList`
        :return: 构造好的体对象列表
        """
        return _PyAnyCAD.ShapeBuilder_MakeSolid(*args)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeBuilder

# Register ShapeBuilder in _PyAnyCAD:
_PyAnyCAD.ShapeBuilder_swigregister(ShapeBuilder)
class CurveBuilder(object):
    r"""
    Author: Geometry

    ShapeBuilder 主要用于创建三维点、曲线、平面等。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeVertex(pt):
        r"""
        创建三维顶点.
        :type pt: :py:class:`gp_Pnt`
        :param pt: 位置.
        :rtype: :py:class:`TopoShape`
        :return: the vertex shape.
        """
        return _PyAnyCAD.CurveBuilder_MakeVertex(pt)

    @staticmethod
    def MakeLine(*args):
        r"""
        *Overload 1:*

        创建直线.
        :type start: :py:class:`gp_Pnt`
        :param start: the start point.
        :type end: :py:class:`gp_Pnt`
        :param end: the end point.
        :rtype: :py:class:`TopoShape`
        :return: the line shape.

        |

        *Overload 2:*

        创建直线.
        :type line: :py:class:`gp_Lin`
        :param line: the line object.
        :type p1: float
        :param p1: the start parameter.
        :type p2: float
        :param p2: the end parameter.
        :rtype: :py:class:`TopoShape`
        :return: the line shape.
        """
        return _PyAnyCAD.CurveBuilder_MakeLine(*args)

    @staticmethod
    def MakeCircle(*args):
        r"""
        *Overload 1:*

        创建圆.
        :type center: :py:class:`gp_Pnt`
        :param center: the center.
        :type radius: float
        :param radius: the radius.
        :type zdir: :py:class:`gp_Dir`
        :param zdir: the direction.
        :rtype: :py:class:`TopoShape`
        :return: the circle.

        |

        *Overload 2:*

        创建通过三个点的圆
        :type p1: :py:class:`gp_Pnt`
        :param p1: 点1
        :type p2: :py:class:`gp_Pnt`
        :param p2: 点2
        :type p3: :py:class:`gp_Pnt`
        :param p3: 点3
        :rtype: :py:class:`TopoShape`
        :return: 圆。可能为null。
        """
        return _PyAnyCAD.CurveBuilder_MakeCircle(*args)

    @staticmethod
    def MakeEllipse(*args):
        return _PyAnyCAD.CurveBuilder_MakeEllipse(*args)

    @staticmethod
    def MakeArcOfCircle(*args):
        r"""
        *Overload 1:*

        创建圆弧.
        :type circle: :py:class:`gp_Circ`
        :param circle: the circle.
        :type start: :py:class:`gp_Pnt`
        :param start: the start point.
        :type end: :py:class:`gp_Pnt`
        :param end: the end point.
        :rtype: :py:class:`TopoShape`
        :return: the arc.

        |

        *Overload 2:*

        创建圆弧.
        :type circle: :py:class:`gp_Circ`
        :param circle: the circle.
        :type start: float
        :param start: the start angle with radians.
        :type end: float
        :param end: the end angle with radians.
        :rtype: :py:class:`TopoShape`
        :return: the arc.

        |

        *Overload 3:*

        创建圆弧.
        :type start: :py:class:`gp_Pnt`
        :param start: the start point.
        :type end: :py:class:`gp_Pnt`
        :param end: the end point.
        :type middle: :py:class:`gp_Pnt`
        :param middle: the middle point.
        :rtype: :py:class:`TopoShape`
        :return: the arc.
        """
        return _PyAnyCAD.CurveBuilder_MakeArcOfCircle(*args)

    @staticmethod
    def MakeArc(start, end, center, dir):
        r"""
        创建圆弧
        :type start: :py:class:`gp_Pnt`
        :param start: 起始点
        :type end: :py:class:`gp_Pnt`
        :param end: 终止点
        :type center: :py:class:`gp_Pnt`
        :param center: 圆心
        :type dir: :py:class:`gp_Dir`
        :param dir: 法向
        :rtype: :py:class:`TopoShape`
        :return: 圆弧
        """
        return _PyAnyCAD.CurveBuilder_MakeArc(start, end, center, dir)

    @staticmethod
    def MakeArcOfEllipse(elips, start, end):
        r"""
        创建椭圆弧.
        :type elips: :py:class:`gp_Elips`
        :param elips: the ellipse object
        :type start: float
        :param start: the start angle with radians.
        :type end: float
        :param end: the end angle with radians.
        :rtype: :py:class:`TopoShape`
        :return: the arc curve.
        """
        return _PyAnyCAD.CurveBuilder_MakeArcOfEllipse(elips, start, end)

    @staticmethod
    def MakeHypr(hypr, p1, p2):
        r"""
        创建椭圆弧.
        :param coord: the position and direction.
        :param len: the length.
        :param width: the width.
        :param radius: the radius.
        :param bFilled: filled to face if true.
        :rtype: :py:class:`TopoShape`
        :return: 

        Make hyperbola curve.
        :type hypr: :py:class:`gp_Hypr`
        :param hypr: the hyperbola object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the second parameter.
        :rtype: :py:class:`TopoShape`
        :return: the hyperbola curve.
        """
        return _PyAnyCAD.CurveBuilder_MakeHypr(hypr, p1, p2)

    @staticmethod
    def MakeParab(parab, p1, p2):
        r"""
        Make parabola curve.
        :type parab: :py:class:`gp_Parab`
        :param parab: the parabola object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the second parameter.
        :rtype: :py:class:`TopoShape`
        :return: the parabola curve.
        """
        return _PyAnyCAD.CurveBuilder_MakeParab(parab, p1, p2)

    @staticmethod
    def MakeRectangle(coord, len, width, radius, bFilled):
        r"""
        创建圆角矩形
        :type coord: :py:class:`gp_Ax2`
        :param coord: 起始点
        :type len: float
        :param len: 长度X
        :type width: float
        :param width: 宽度Y
        :type radius: float
        :param radius: 圆角半径，可以为0
        :type bFilled: boolean
        :param bFilled: 是否填充
        :rtype: :py:class:`TopoShape`
        :return: 矩形
        """
        return _PyAnyCAD.CurveBuilder_MakeRectangle(coord, len, width, radius, bFilled)

    @staticmethod
    def MakeRectangleByCenter(center, len, width, radius, bFilled):
        r"""
        以中心绘制矩形
        :type center: :py:class:`gp_Ax2`
        :param center: 中心点
        :type len: float
        :param len: 长度X
        :type width: float
        :param width: 宽度Y
        :type radius: float
        :param radius: 圆角半径，可以为0
        :type bFilled: boolean
        :param bFilled: 是否填充
        :rtype: :py:class:`TopoShape`
        :return: 矩形
        """
        return _PyAnyCAD.CurveBuilder_MakeRectangleByCenter(center, len, width, radius, bFilled)

    @staticmethod
    def MakePolyline(*args):
        r"""
        *Overload 1:*

        构造仅包含直线段的多段线
        :type points: :py:class:`GPntList`
        :param points: 顶点
        :rtype: :py:class:`TopoShape`
        :return: 多段线

        |

        *Overload 2:*

        构造多段线，每段是线段或圆弧
        :type points: :py:class:`GPntList`
        :param points: 顶点
        :type bulges: :py:class:`DoubleList`
        :param bulges:: The tangent of 1/4 of the arc angle or 0 for lines. ccw > 0, cw < 0
        :rtype: :py:class:`TopoShape`
        :return: Polyline
        """
        return _PyAnyCAD.CurveBuilder_MakePolyline(*args)

    @staticmethod
    def MakePolygon(*args):
        r"""
        *Overload 1:*

        Make polygon.
        :type coord: :py:class:`gp_Ax2`
        :param coord: the position and direction.
        :type number: int
        :param number: edge count.
        :type radius: float
        :param radius: radius.
        :rtype: :py:class:`TopoShape`
        :return: the wire.

        |

        *Overload 2:*

        Make polygon with points.
        :type points: :py:class:`GPntList`
        :param points: the point list.
        :type bClosed: boolean
        :param bClosed: closed if true.
        :rtype: :py:class:`TopoShape`
        :return: the shape.

        |

        *Overload 3:*

        Make polygon with radius angles.
        :type points: :py:class:`GPntList`
        :param points: the point list.
        :type radius: float
        :param radius: the radius.
        :type bFilled: boolean
        :param bFilled: to face if true.
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.CurveBuilder_MakePolygon(*args)

    @staticmethod
    def MakeBSpline(*args):
        return _PyAnyCAD.CurveBuilder_MakeBSpline(*args)

    @staticmethod
    def MakeBezierCurve(*args):
        r"""
        *Overload 1:*

        Creates a non rational Bezier curve with a set of poles.  The weights are defaulted to all being 1.
        :type poles: :py:class:`GPntList`
        :param poles: the poles.
        :rtype: :py:class:`TopoShape`
        :return: the shape.

        |

        *Overload 2:*

        Creates a rational Bezier curve with the set of poles and the set of weights.
        :type poles: :py:class:`GPntList`
        :param poles: the poles.
        :type weights: :py:class:`DoubleList`
        :param weights:  If all the weights are identical the curve is considered as non rational.
        :rtype: :py:class:`TopoShape`
        :return: the shape
        """
        return _PyAnyCAD.CurveBuilder_MakeBezierCurve(*args)

    @staticmethod
    def MakeSpiral(radius, interval, count, ax, reversed=False):
        return _PyAnyCAD.CurveBuilder_MakeSpiral(radius, interval, count, ax, reversed)

    @staticmethod
    def MakeBSplineByCurves(*args):
        return _PyAnyCAD.CurveBuilder_MakeBSplineByCurves(*args)

    @staticmethod
    def MakeBSplineByCurve(*args):
        return _PyAnyCAD.CurveBuilder_MakeBSplineByCurve(*args)

    @staticmethod
    def MakeBSplineByWire(*args):
        return _PyAnyCAD.CurveBuilder_MakeBSplineByWire(*args)

    @staticmethod
    def MakeWire(*args):
        return _PyAnyCAD.CurveBuilder_MakeWire(*args)

    @staticmethod
    def ConnectToWires(shapes, tol, sharedVeterx):
        r"""
        从shape list中找到首尾连接的Wires集合。only edges and wires will be kept
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: the shape list
        :type tol: float
        :param tol: the tolerance
        :type sharedVeterx: boolean
        :param sharedVeterx: is True connection is performed only when adjacent wires share the same vertex.
        :rtype: :py:class:`TopoShapeList`
        :return: the connected wire list.
        """
        return _PyAnyCAD.CurveBuilder_ConnectToWires(shapes, tol, sharedVeterx)

    @staticmethod
    def ConnectWiresToWires(wires, tol, sharedVeterx):
        r"""
        把Wires首尾连接，生成Wire。Make sure all shapes' type are wire, or shape will be missing
        :type wires: :py:class:`TopoShapeList`
        :param wires: the wire list.
        :type tol: float
        :param tol: the tolerance
        :type sharedVeterx: boolean
        :param sharedVeterx: is True connection is performed only when adjacent wires share the same vertex.
        :rtype: :py:class:`TopoShapeList`
        :return: the connected wire list.
        """
        return _PyAnyCAD.CurveBuilder_ConnectWiresToWires(wires, tol, sharedVeterx)

    @staticmethod
    def ConnectEdgesToWires(*args):
        return _PyAnyCAD.CurveBuilder_ConnectEdgesToWires(*args)

    @staticmethod
    def MakePolygonFaceByPoints(points):
        r"""
        构造多边形平面
        :type points: :py:class:`GPntList`
        :param points: 顶点
        :rtype: :py:class:`TopoShape`
        :return: 面
        """
        return _PyAnyCAD.CurveBuilder_MakePolygonFaceByPoints(points)

    @staticmethod
    def MakePolygonFaceByWires(wires):
        r"""
        构造多边形平面
        :type wires: :py:class:`TopoShapeList`
        :param wires: Wire
        :rtype: :py:class:`TopoShape`
        :return: 面
        """
        return _PyAnyCAD.CurveBuilder_MakePolygonFaceByWires(wires)

    @staticmethod
    def MakePlanarFace(*args):
        r"""
        *Overload 1:*

        根据曲线构造面
        :param wires: 封闭曲线或者曲线的组合
        :rtype: :py:class:`TopoShape`
        :return: 平面

        |

        *Overload 2:*

        根据平面和参数范围构造面
        :type plane: :py:class:`gp_Pln`
        :param plane: 输入平面
        :type minU: float
        :param minU: 最小u
        :type maxU: float
        :param maxU: 最大u
        :type minV: float
        :param minV: 最小v
        :type maxV: float
        :param maxV: 最大v
        :rtype: :py:class:`TopoShape`
        :return: 平面

        |

        *Overload 3:*

        根据平面构造面，无范围限制
        :type plane: :py:class:`gp_Pln`
        :param plane: 输入平面
        :rtype: :py:class:`TopoShape`
        :return: 平面
        """
        return _PyAnyCAD.CurveBuilder_MakePlanarFace(*args)

    @staticmethod
    def TrimCurve(curve, startP, endP):
        r"""
        创建曲线
        :type curve: :py:class:`TopoShape`
        :param curve: 曲线
        :type startP: float
        :param startP: 起始参数
        :type endP: float
        :param endP: 终止参数
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.CurveBuilder_TrimCurve(curve, startP, endP)

    @staticmethod
    def MakeCurve(curve, startU, lastU):
        r"""
        创建曲线
        :type curve: :py:class:`ParametricCurve`
        :param curve: 曲线
        :type startU: float
        :param startU: 起始参数
        :type lastU: float
        :param lastU: 终止参数
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.CurveBuilder_MakeCurve(curve, startU, lastU)

    @staticmethod
    def MakeCurveOnSurface(curve2d, surface):
        r"""
        在曲面上创建曲线
        :type curve2d: :py:class:`TopoShape`
        :param curve2d: the trimmed 2d curve defining the ranges of the uv paramters;
        :type surface: :py:class:`TopoShape`
        :param surface: the base surface.
        :rtype: :py:class:`TopoShape`
        :return: the new curve.
        """
        return _PyAnyCAD.CurveBuilder_MakeCurveOnSurface(curve2d, surface)

    @staticmethod
    def MakeWindingCurve(sketchWire, surface):
        r"""
        创建缠绕曲线
        :type sketchWire: :py:class:`TopoShape`
        :param sketchWire: 输入的草图线
        :type surface: :py:class:`TopoShape`
        :param surface: 曲面
        :rtype: :py:class:`TopoShape`
        :return: Wire或者Edge
        """
        return _PyAnyCAD.CurveBuilder_MakeWindingCurve(sketchWire, surface)

    @staticmethod
    def MakeTangentLine(*args):
        return _PyAnyCAD.CurveBuilder_MakeTangentLine(*args)

    @staticmethod
    def ComputePlaneDirection(curve):
        return _PyAnyCAD.CurveBuilder_ComputePlaneDirection(curve)
    __swig_destroy__ = _PyAnyCAD.delete_CurveBuilder

# Register CurveBuilder in _PyAnyCAD:
_PyAnyCAD.CurveBuilder_swigregister(CurveBuilder)
class SketchBuilder(CurveBuilder):
    r"""
    Author: Geometry

    SketchBuilder 遗弃。请使用CurveBuilder
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_SketchBuilder

# Register SketchBuilder in _PyAnyCAD:
_PyAnyCAD.SketchBuilder_swigregister(SketchBuilder)
class FeatureTool(object):
    r"""
    Author: Geometry

    FeatureTool
    特征造型的工具.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Extrude(base, height, _dir):
        r"""
        创建拉伸. 面拉伸为体，曲线拉伸为面，点拉伸为线。
        :type base: :py:class:`TopoShape`
        :param base: 可以为面、Wire、曲线、点。
        :type height: float
        :param height: 拉伸高度.
        :type _dir: :py:class:`gp_Dir`
        :param _dir: 拉伸方向.
        :rtype: :py:class:`TopoShape`
        :return: 生成的拉伸对象.
        """
        return _PyAnyCAD.FeatureTool_Extrude(base, height, _dir)

    @staticmethod
    def Fillet(shape, radius):
        r"""
        倒圆角. 输入的体对象所有的边进行倒角。
        :type shape: :py:class:`TopoShape`
        :param shape: 输入的体对象.
        :type radius: float
        :param radius: 半径.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Fillet(shape, radius)

    @staticmethod
    def FilletByEdges(shape, edgeIdx, radius):
        return _PyAnyCAD.FeatureTool_FilletByEdges(shape, edgeIdx, radius)

    @staticmethod
    def Chamfer(*args):
        r"""
        *Overload 1:*

        倒直角。对输入体的所有的边倒直角。
        :type shape: :py:class:`TopoShape`
        :param shape: 输入的体对象.
        :type dis1: float
        :param dis1: 左边的倒角长度
        :type dis2: float
        :param dis2: 右边的倒角长度.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.

        |

        *Overload 2:*

        倒直角。仅对指定的边倒直角。
        :type shape: :py:class:`TopoShape`
        :param shape: 输入的体对象.
        :type edgeIdx: :py:class:`Uint32List`
        :param edgeIdx:  需要倒角的边的ID.
        :type dis1: :py:class:`DoubleList`
        :param dis1:  左边的倒角长度
        :type dis2: :py:class:`DoubleList`
        :param dis2:   右边的倒角长度.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Chamfer(*args)

    @staticmethod
    def Revolve(base, ax, angle):
        r"""
        创建回转/旋转体对象.
        根据输入类型，生成如下对应的结果:
        - Vertex -> Edge.
        - Edge   -> Face.
        - Wire   -> Shell.
        - Face   -> Solid.
        - Shell  -> CompSolid.
        :type base: :py:class:`TopoShape`
        :param base: 输入对象
        :type ax: :py:class:`gp_Ax1`
        :param ax: 旋转轴
        :type angle: float
        :param angle: 旋转角度[0, 2*PI]
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Revolve(base, ax, angle)

    @staticmethod
    def Loft(*args):
        r"""
        *Overload 1:*

        放样
        :type sketches: :py:class:`TopoShapeList`
        :param sketches: 放样曲线列表
        :type bSolid: boolean
        :param bSolid: 是否生成实体，否则生成面
        :type bRuled: boolean
        :param bRuled: 是否生成直纹面.
        :type bCheckCompatibility: boolean
        :param bCheckCompatibility: 是否检查兼容性.
        :type pres3d: float
        :param pres3d: 表达精度.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.

        |

        *Overload 2:*

        放样：生成直纹面
        :type sketches: :py:class:`TopoShapeList`
        :param sketches: 放样曲线列表
        :type bSolid: boolean
        :param bSolid: 是否生成实体，否则生成面
        :type bCheckCompatibility: boolean
        :param bCheckCompatibility: 是否检查兼容性.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.

        |

        *Overload 3:*

        放样：生成直纹面
        :type wireA: :py:class:`TopoShape`
        :param wireA: 第一个wire.
        :type wireB: :py:class:`TopoShape`
        :param wireB: 第二个wire.
        :type bSolid: boolean
        :param bSolid: 是否生成实体，否则生成面
        :rtype: :py:class:`TopoShape`
        :return: 新对象.

        |

        *Overload 4:*

        放样：点+曲线
        :type wire: :py:class:`TopoShape`
        :param wire: 曲线
        :type pt: :py:class:`gp_Pnt`
        :param pt: 点
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Loft(*args)

    @staticmethod
    def Thickness(solid, offset, faceIdx):
        r"""
        抽壳.
        :type solid: :py:class:`TopoShape`
        :param solid: 输入的体对象
        :type offset: float
        :param offset: 厚度. 正负代表内外。
        :type faceIdx: :py:class:`Int32List`
        :param faceIdx: 挖孔面的索引.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Thickness(solid, offset, faceIdx)

    @staticmethod
    def OffsetWire(wire, offset, altitude, jointType, openning):
        r"""
        偏移曲线.
        :type wire: :py:class:`TopoShape`
        :param wire: 曲线.
        :type offset: float
        :param offset: 偏移距离
        :type altitude: float
        :param altitude: 偏移高度.
        :type jointType: int
        :param jointType: 链接曲线的类型.
        :type openning: boolean
        :param openning: 开口还是闭合.
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_OffsetWire(wire, offset, altitude, jointType, openning)

    @staticmethod
    def OffsetShape(*args):
        return _PyAnyCAD.FeatureTool_OffsetShape(*args)

    @staticmethod
    def MiddlePath(shape, base1, base2):
        r"""
        抽取管子一类对象的中心线。
        :type shape: :py:class:`TopoShape`
        :param shape: 输入的体.
        :type base1: :py:class:`TopoShape`
        :param base1: 管子的第一个端面.
        :type base2: :py:class:`TopoShape`
        :param base2: 管子的第二个端面.
        :rtype: :py:class:`TopoShape`
        :return: 中心线.
        """
        return _PyAnyCAD.FeatureTool_MiddlePath(shape, base1, base2)

    @staticmethod
    def CeneterLine(face):
        r"""
        抽取圆柱面的中心线
        :type face: :py:class:`TopoShape`
        :param face: 圆柱面.
        :rtype: :py:class:`GPntList`
        :return: the 中心线的端点.
        """
        return _PyAnyCAD.FeatureTool_CeneterLine(face)

    @staticmethod
    def ExtractCircle(shape):
        r"""
        抽取圆弧线.
        :type shape: :py:class:`TopoShape`
        :param shape: 面或者边.
        :rtype: :py:class:`ParametricCurve`
        :return: 圆弧线
        """
        return _PyAnyCAD.FeatureTool_ExtractCircle(shape)

    @staticmethod
    def Evolved(section, spine, joinType, bSolid):
        r"""
        从平面上的面、曲线沿着脊椎线生成几何对象
        :type section: :py:class:`TopoShape`
        :param section: 平面、平面曲线
        :type spine: :py:class:`TopoShape`
        :param spine: 脊椎线
        :type joinType: int
        :param joinType: 交点结合类型
        :type bSolid: boolean
        :param bSolid: 是否生成体
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Evolved(section, spine, joinType, bSolid)

    @staticmethod
    def Sweep(section, path, type):
        r"""
        扫掠
        :type section: :py:class:`TopoShape`
        :param section: 扫掠的面、边
        :type path: :py:class:`TopoShape`
        :param path: 扫掠路径
        :type type: int
        :param type: 填充类型
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_Sweep(section, path, type)

    @staticmethod
    def SweepByEvolution(section, path, evolutionSpline, bSolid):
        r"""
        变截面扫掠
        :type section: :py:class:`TopoShape`
        :param section: 轮廓线
        :type path: :py:class:`TopoShape`
        :param path: 扫掠路径
        :type evolutionSpline: :py:class:`TopoShape`
        :param evolutionSpline: 演化脊椎线
        :type bSolid: boolean
        :param bSolid: 是否生成体
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.FeatureTool_SweepByEvolution(section, path, evolutionSpline, bSolid)

    @staticmethod
    def SweepByFrenet(section, path, mode, bSolid, withContact=True, withCorrection=True):
        r"""
        单截面沿着路径扫掠
        :type section: :py:class:`TopoShape`
        :param section: 截面
        :type path: :py:class:`TopoShape`
        :param path: 路径
        :type mode: int
        :param mode: 扫掠模式
        :type bSolid: boolean
        :param bSolid: 是否生成实体
        :type withContact: boolean, optional
        :param withContact: 截面是否需要变换到跟路径接触
        :type withCorrection: boolean, optional
        :param withCorrection: 截面是否需要旋转跟路径切线正交
        :rtype: :py:class:`TopoShape`
        :return: 新对象
        """
        return _PyAnyCAD.FeatureTool_SweepByFrenet(section, path, mode, bSolid, withContact, withCorrection)

    @staticmethod
    def SweepBySections(*args):
        r"""
        *Overload 1:*

        用多个截面沿着指定的路径扫掠
        :type sections: :py:class:`TopoShapeList`
        :param sections: 截面
        :type path: :py:class:`TopoShape`
        :param path: 路径
        :type mode: int
        :param mode: 模式
        :type bSolid: boolean
        :param bSolid: 是否生成实体
        :rtype: :py:class:`TopoShape`
        :return: 扫掠对象

        |

        *Overload 2:*

        用多个截面沿着指定的路径扫掠
        :type sections: :py:class:`TopoShapeList`
        :param sections: 截面
        :type path: :py:class:`TopoShape`
        :param path: 路径
        :type mode: int
        :param mode: 模式
        :type bSolid: boolean
        :param bSolid: 是否生成实体
        :type withContact: boolean
        :param withContact: 设置成true则截面会变换与路径接触
        :type withCorrection: boolean
        :param withCorrection: 设置成true则截面会被旋转，使得其与路径的切线正交。
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.FeatureTool_SweepBySections(*args)

    @staticmethod
    def ExtendFace(face, extend):
        r"""
        延伸曲面
        :type face: :py:class:`TopoShape`
        :param face: 面
        :type extend: float
        :param extend: 延伸的距离
        :rtype: :py:class:`TopoShape`
        :return: 新的面
        """
        return _PyAnyCAD.FeatureTool_ExtendFace(face, extend)
    __swig_destroy__ = _PyAnyCAD.delete_FeatureTool

# Register FeatureTool in _PyAnyCAD:
_PyAnyCAD.FeatureTool_swigregister(FeatureTool)
EnumBooleanType_Common = _PyAnyCAD.EnumBooleanType_Common
EnumBooleanType_Fuse = _PyAnyCAD.EnumBooleanType_Fuse
EnumBooleanType_Cut = _PyAnyCAD.EnumBooleanType_Cut
class BooleanTool(object):
    r"""
    Author: Geometry

    BooleanTool
    对TopoShape进行布尔操作的工具类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Boolean(shapeA, shapeB, type):
        r"""
        通用布尔运算
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: 对象A
        :type shapeB: :py:class:`TopoShape`
        :param shapeB: 对象B
        :type type: int
        :param type: 布尔操作类型
        :rtype: :py:class:`TopoShape`
        :return: 操作结果
        """
        return _PyAnyCAD.BooleanTool_Boolean(shapeA, shapeB, type)

    @staticmethod
    def Cut(*args):
        r"""
        *Overload 1:*

        布尔减操作：A - B
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: 对象A.
        :type shapeB: :py:class:`TopoShape`
        :param shapeB: 对象B.
        :rtype: :py:class:`TopoShape`
        :return: A - B.

        |

        *Overload 2:*

        布尔减操作：A - B
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: 对象A.
        :type shapeB: :py:class:`TopoShapeList`
        :param shapeB: 对象B，列表.
        :rtype: :py:class:`TopoShape`
        :return: A - B.
        """
        return _PyAnyCAD.BooleanTool_Cut(*args)

    @staticmethod
    def Fuse(*args):
        return _PyAnyCAD.BooleanTool_Fuse(*args)

    @staticmethod
    def Common(shapeA, shapeB):
        r"""
        布尔And操作： A n B, 计算A和B的公共部分.
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: the shape A.
        :type shapeB: :py:class:`TopoShape`
        :param shapeB: the shape B.
        :rtype: :py:class:`TopoShape`
        :return: A n B.
        """
        return _PyAnyCAD.BooleanTool_Common(shapeA, shapeB)

    @staticmethod
    def Section(*args):
        r"""
        *Overload 1:*

        剖切，计算两个几何的公共部分. eg. 如两个面相交的公共部分（边）.
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: the shape A.
        :type shapeB: :py:class:`TopoShape`
        :param shapeB: the shape B.
        :rtype: :py:class:`TopoShape`
        :return: 剖切.

        |

        *Overload 2:*

        使用平面剖切几何对象.
        :type shape: :py:class:`TopoShape`
        :param shape: 几何对象.
        :type position: :py:class:`gp_Pnt`
        :param position: 平面的位置.
        :type dir: :py:class:`gp_Dir`
        :param dir: 平面的方向.
        :rtype: :py:class:`TopoShapeList`
        :return: 生成的公共部分：边.
        """
        return _PyAnyCAD.BooleanTool_Section(*args)

    @staticmethod
    def Slice(solid, position, dir, tol):
        r"""
        使用平面剖切实体.
        :type solid: :py:class:`TopoShape`
        :param solid: 体对象.
        :type position: :py:class:`gp_Pnt`
        :param position: 平面的位置.
        :type dir: :py:class:`gp_Dir`
        :param dir: 平面的方向.
        :rtype: :py:class:`TopoShapeList`
        :return: 剖切生成的面对象列表.
        """
        return _PyAnyCAD.BooleanTool_Slice(solid, position, dir, tol)

    @staticmethod
    def SliceApart(*args):
        r"""
        *Overload 1:*

        使用平面切分任意shape
        :type shape: :py:class:`TopoShape`
        :param shape: 被切分的对象
        :type position: :py:class:`gp_Pnt`
        :param position: 切分平面的位置
        :type dir: :py:class:`gp_Dir`
        :param dir: 切分平面的方向
        :rtype: :py:class:`TopoShapeList`
        :return: 分割结果，平面正方向部分位于数组首位，平面反方向部分位于数组第二位

        |

        *Overload 2:*

        使用tool(Solid)切割任意shape
        :type shape: :py:class:`TopoShape`
        :param shape: 被切割的对象
        :type tool: :py:class:`TopoShape`
        :param tool: 切割体
        :rtype: :py:class:`TopoShapeList`
        :return: 切割结果，切割体内部分位于数组首位，切割体外部分位于数组第二位
        """
        return _PyAnyCAD.BooleanTool_SliceApart(*args)

    @staticmethod
    def Unify(shape, unifyEdges, unifyFaces, concatBSplines):
        r"""
        使得在相同几何对象的上的边、面成为一体.
        :type shape: :py:class:`TopoShape`
        :param shape: 输入对象.
        :type unifyEdges: boolean
        :param unifyEdges: 是否使得边成为一体
        :type unifyFaces: boolean
        :param unifyFaces: 是否使得面成为一体
        :type concatBSplines: boolean
        :param concatBSplines: 是否连接BSplines
        :rtype: :py:class:`TopoShape`
        :return: 结合后的对象
        """
        return _PyAnyCAD.BooleanTool_Unify(shape, unifyEdges, unifyFaces, concatBSplines)

    @staticmethod
    def Split(shape, tool):
        r"""
        分离几何对象.
        :type shape: :py:class:`TopoShape`
        :param shape: 被分离的几何对象.
        :type tool: :py:class:`TopoShape`
        :param tool: 分离工具，如面对象.
        :rtype: :py:class:`TopoShape`
        :return: 分离的结果, 可能是组合体.
        """
        return _PyAnyCAD.BooleanTool_Split(shape, tool)

    @staticmethod
    def SplitCurve(curve, point):
        r"""
        Split 使用点分离曲线
        :type curve: :py:class:`TopoShape`
        :param curve: 被分离的曲线
        :type point: :py:class:`gp_Pnt`
        :param point: 分离的位置
        :rtype: :py:class:`TopoShapeList`
        :return: 曲线列表.
        """
        return _PyAnyCAD.BooleanTool_SplitCurve(curve, point)

    @staticmethod
    def Sewing(*args):
        r"""
        *Overload 1:*

        缝合两个物体
        :type shapeA: :py:class:`TopoShape`
        :param shapeA: 对象1
        :type shapeB: :py:class:`TopoShape`
        :param shapeB: 对象2
        :rtype: :py:class:`TopoShape`
        :return: 结果

        |

        *Overload 2:*

        缝合多个物体
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: 对象列表
        :rtype: :py:class:`TopoShape`
        :return: 结果
        """
        return _PyAnyCAD.BooleanTool_Sewing(*args)
    __swig_destroy__ = _PyAnyCAD.delete_BooleanTool

# Register BooleanTool in _PyAnyCAD:
_PyAnyCAD.BooleanTool_swigregister(BooleanTool)
class TransformTool(object):
    r"""
    Author: Geometry
    TransformTool
    用于对TopoShape进行空间变换、复制
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Translate(*args):
        return _PyAnyCAD.TransformTool_Translate(*args)

    @staticmethod
    def Rotation(pShape, axis, angle, copyGeom=False):
        r"""
        Rotate the shape.
        :type pShape: :py:class:`TopoShape`
        :param pShape: the input shape.
        :type axis: :py:class:`gp_Ax1`
        :param axis: the axis.
        :type angle: float
        :param angle: the angle to rotate. by radians
        :rtype: :py:class:`TopoShape`
        :return: the new shape.
        """
        return _PyAnyCAD.TransformTool_Rotation(pShape, axis, angle, copyGeom)

    @staticmethod
    def Scale(pShape, center, scale, copyGeom=False):
        r"""
        Scale the shape.
        :type pShape: :py:class:`TopoShape`
        :param pShape: the input shape.
        :type center: :py:class:`gp_Pnt`
        :param center: the scale center.
        :type scale: float
        :param scale: the scale value.
        :rtype: :py:class:`TopoShape`
        :return: the new shape.
        """
        return _PyAnyCAD.TransformTool_Scale(pShape, center, scale, copyGeom)

    @staticmethod
    def Mirror(shape, axis, copyGeom=False):
        r"""
        Mirror the shape.
        :type shape: :py:class:`TopoShape`
        :param shape: the input shape.
        :type axis: :py:class:`gp_Ax1`
        :param axis: the axis to mirror.
        :rtype: :py:class:`TopoShape`
        :return: the new shape.
        """
        return _PyAnyCAD.TransformTool_Mirror(shape, axis, copyGeom)

    @staticmethod
    def MirrorByAx2(shape, axis, copyGeom=False):
        r"""
        以平面镜像
        :type shape: :py:class:`TopoShape`
        :param shape: 几何
        :type axis: :py:class:`gp_Ax2`
        :param axis: 坐标系
        :rtype: :py:class:`TopoShape`
        :return: 新对象
        """
        return _PyAnyCAD.TransformTool_MirrorByAx2(shape, axis, copyGeom)

    @staticmethod
    def MirrorByPoint(shape, point, copyGeom=False):
        r"""
        以点为中心镜像
        :type shape: :py:class:`TopoShape`
        :param shape: 几何
        :type point: :py:class:`gp_Pnt`
        :param point: 点
        :rtype: :py:class:`TopoShape`
        :return: 新的对象
        """
        return _PyAnyCAD.TransformTool_MirrorByPoint(shape, point, copyGeom)

    @staticmethod
    def Copy(shape):
        r"""
        复制一个新的Shape
        :type shape: :py:class:`TopoShape`
        :param shape: 母体
        :rtype: :py:class:`TopoShape`
        :return: 新的Shape
        """
        return _PyAnyCAD.TransformTool_Copy(shape)

    @staticmethod
    def Transform(*args):
        return _PyAnyCAD.TransformTool_Transform(*args)

    @staticmethod
    def TransformByMatrix(*args):
        return _PyAnyCAD.TransformTool_TransformByMatrix(*args)

    @staticmethod
    def ToMatrix4(*args):
        return _PyAnyCAD.TransformTool_ToMatrix4(*args)

    @staticmethod
    def ToMatrix4d(*args):
        return _PyAnyCAD.TransformTool_ToMatrix4d(*args)

    @staticmethod
    def ToTransform(*args):
        return _PyAnyCAD.TransformTool_ToTransform(*args)

    @staticmethod
    def Decompose(mat, pos, rot, scale):
        r"""
        矩阵分解
        :type mat: :py:class:`mat4`
        :param mat: 矩阵
        :type pos: :py:class:`vec3`
        :param pos: 平移
        :type rot: :py:class:`quat`
        :param rot: 旋转
        :type scale: :py:class:`vec3`
        :param scale: 缩放
        """
        return _PyAnyCAD.TransformTool_Decompose(mat, pos, rot, scale)

    @staticmethod
    def ComputeAxis(p1, p2, p3):
        return _PyAnyCAD.TransformTool_ComputeAxis(p1, p2, p3)
    __swig_destroy__ = _PyAnyCAD.delete_TransformTool

# Register TransformTool in _PyAnyCAD:
_PyAnyCAD.TransformTool_swigregister(TransformTool)
class ProjSurfaceResult(object):
    r"""
    Author: Geometry

      投影结果.
    See also: ProjectionTool
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ProjSurfaceResult_swiginit(self, _PyAnyCAD.new_ProjSurfaceResult(*args))

    def GetPoint(self):
        r"""
        获取投影点.
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ProjSurfaceResult_GetPoint(self)

    def GetParameterU(self):
        r"""
        Get the U parameter.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ProjSurfaceResult_GetParameterU(self)

    def GetParameterV(self):
        r"""
        Get the V parameter.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ProjSurfaceResult_GetParameterV(self)
    __swig_destroy__ = _PyAnyCAD.delete_ProjSurfaceResult

# Register ProjSurfaceResult in _PyAnyCAD:
_PyAnyCAD.ProjSurfaceResult_swigregister(ProjSurfaceResult)
class ProjCurveResult(object):
    r"""
    Author: Geometry

        投影结果.
    See also: ProjectionTool
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ProjCurveResult_swiginit(self, _PyAnyCAD.new_ProjCurveResult(*args))

    def GetPoint(self):
        r"""
        曲线上点.
        :rtype: :py:class:`gp_Pnt`
        :return: the point.
        """
        return _PyAnyCAD.ProjCurveResult_GetPoint(self)

    def GetParameter(self):
        r"""
        Get the parameter of the curve.
        :rtype: float
        :return: the parameter.
        """
        return _PyAnyCAD.ProjCurveResult_GetParameter(self)

    def GetEdgeIndex(self):
        r"""
        Get the edge index for wire case.
        :rtype: int
        :return: the index.
        """
        return _PyAnyCAD.ProjCurveResult_GetEdgeIndex(self)
    __swig_destroy__ = _PyAnyCAD.delete_ProjCurveResult

# Register ProjCurveResult in _PyAnyCAD:
_PyAnyCAD.ProjCurveResult_swigregister(ProjCurveResult)
class ProjectionTool(object):
    r"""
    Author: Geometry

       投影相关的工具.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def ProjectOnPlane(*args):
        r"""
        *Overload 1:*

        Project the edge/wire to plane surface.
        :type curve: :py:class:`TopoShape`
        :param curve: the edge/wire shape
        :type planePosition: :py:class:`gp_Pnt`
        :param planePosition: the position of the plane.
        :type planeDir: :py:class:`gp_Dir`
        :param planeDir: the direction of the plane.
        :type projDir: :py:class:`gp_Dir`
        :param projDir: the projection direction.
        :type keepParams: boolean, optional
        :param keepParams: 保留原曲线的参数
        :rtype: :py:class:`TopoShape`
        :return: the projected curve.

        |

        *Overload 2:*

        Project the edge/wire to plane surface.
        :type curve: :py:class:`TopoShape`
        :param curve: the edge/wire shape
        :type planePosition: :py:class:`gp_Pnt`
        :param planePosition: the position of the plane.
        :type planeDir: :py:class:`gp_Dir`
        :param planeDir: the direction of the plane.
        :rtype: :py:class:`TopoShape`
        :return: the projected curve.

        |

        *Overload 3:*

        Project the edge/wire to plane surface.
        :type curve: :py:class:`TopoShape`
        :param curve: the edge/wire shape
        :type plane: :py:class:`gp_Pln`
        :param plane: the projection plane
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.ProjectionTool_ProjectOnPlane(*args)

    @staticmethod
    def ProjectOnSurface(*args):
        r"""
        *Overload 1:*

        Project the edge/wire to surface.
        :type curve: :py:class:`TopoShape`
        :param curve: the edge/wire shape
        :type surface: :py:class:`TopoShape`
        :param surface: the surface.
        :type faceBoundaries: boolean, optional
        :param faceBoundaries: if bound by the surface.
        :rtype: :py:class:`TopoShape`
        :return: the projected curve.

        |

        *Overload 2:*

        Project the point to surface.
        :type point: :py:class:`gp_Pnt`
        :param point: the point
        :type surface: :py:class:`TopoShape`
        :param surface: the surface.
        :type tolerance: float
        :param tolerance: the tolerance.
        :rtype: :py:class:`ProjSurfaceResult`
        :return: the projected result.
        """
        return _PyAnyCAD.ProjectionTool_ProjectOnSurface(*args)

    @staticmethod
    def ProjectOnCurve(point, curve, tolerance):
        r"""
        Project the point to edge or wire.
        :type point: :py:class:`gp_Pnt`
        :param point: the point
        :type curve: :py:class:`TopoShape`
        :param curve: the curve.
        :type tolerance: float
        :param tolerance: the tolerance.
        :rtype: :py:class:`ProjCurveResult`
        :return: the projected result.
        """
        return _PyAnyCAD.ProjectionTool_ProjectOnCurve(point, curve, tolerance)

    @staticmethod
    def ProjectOnShape(*args):
        r"""
        *Overload 1:*

        Makes a Cylindrical projection of Wire om Shape
        :type wire: :py:class:`TopoShape`
        :param wire: the input
        :type shape: :py:class:`TopoShape`
        :param shape: the shape
        :type dir: :py:class:`gp_Dir`
        :param dir: the direction
        :rtype: :py:class:`TopoShape`
        :return: the compound shape of wires.

        |

        *Overload 2:*

        Makes a Conical projection of Wire om Shape
        :type wire: :py:class:`TopoShape`
        :param wire: the input
        :type shape: :py:class:`TopoShape`
        :param shape: the shape
        :type pt: :py:class:`gp_Pnt`
        :param pt: the point
        :rtype: :py:class:`TopoShape`
        :return: the compound shape of wires.
        """
        return _PyAnyCAD.ProjectionTool_ProjectOnShape(*args)
    __swig_destroy__ = _PyAnyCAD.delete_ProjectionTool

# Register ProjectionTool in _PyAnyCAD:
_PyAnyCAD.ProjectionTool_swigregister(ProjectionTool)
class SurfaceBuilder(object):
    r"""
    Author: Geometry

     曲面相关工具.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeBSplineSurface(bsplineList, buildAlgo):
        r"""
        Construct BSpline Surface by BSpline curves
        :type bsplineList: :py:class:`TopoShapeList`
        :param bsplineList: the BSpline curves
        :type buildAlgo: int
        :param buildAlgo: the build method to be used.
        :rtype: :py:class:`TopoShape`
        :return: TopoShape
        See also: EnumSurfaceBuildAlgorithm
        """
        return _PyAnyCAD.SurfaceBuilder_MakeBSplineSurface(bsplineList, buildAlgo)

    @staticmethod
    def PointsToBSplineSurface(*args):
        return _PyAnyCAD.SurfaceBuilder_PointsToBSplineSurface(*args)

    @staticmethod
    def MakeBezierSurface(arr2Points):
        return _PyAnyCAD.SurfaceBuilder_MakeBezierSurface(arr2Points)

    @staticmethod
    def MakeRuledSurface(pEdge1, pEdge2):
        r"""
        基于曲线生成直纹面
        :type pEdge1: :py:class:`TopoShape`
        :param pEdge1: the curves
        :type pEdge2: :py:class:`TopoShape`
        :param pEdge2: the curves
        :rtype: :py:class:`TopoShape`
        :return: TopoShape the surface
        """
        return _PyAnyCAD.SurfaceBuilder_MakeRuledSurface(pEdge1, pEdge2)

    @staticmethod
    def AddHole(face, wireOfHole):
        r"""
        在曲面上挖孔
        :type face: :py:class:`TopoShape`
        :param face: 面
        :type wireOfHole: :py:class:`TopoShape`
        :param wireOfHole: 孔轮廓线
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.SurfaceBuilder_AddHole(face, wireOfHole)

    @staticmethod
    def AddHoles(face, wiresOfHoles):
        r"""
        曲面上挖多个孔
        :type face: :py:class:`TopoShape`
        :param face: 面
        :type wiresOfHoles: :py:class:`TopoShapeList`
        :param wiresOfHoles: 孔轮廓线
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.SurfaceBuilder_AddHoles(face, wiresOfHoles)

    @staticmethod
    def MakeSurface(face, wire):
        r"""
        基于轮廓线生成曲面
        :type face: :py:class:`TopoShape`
        :param face: 曲面
        :type wire: :py:class:`TopoShape`
        :param wire: 轮廓线
        :rtype: :py:class:`TopoShape`
        :return: 新的曲面
        """
        return _PyAnyCAD.SurfaceBuilder_MakeSurface(face, wire)

    @staticmethod
    def MakeFaces(edges, angleTol):
        r"""
        根据边创建平面
        :type edges: :py:class:`TopoShapeList`
        :param edges: 边的列表
        :type angleTol: float
        :param angleTol: 误差，如1.e-8
        :rtype: :py:class:`TopoShape`
        :return: 面的复合对象。
        """
        return _PyAnyCAD.SurfaceBuilder_MakeFaces(edges, angleTol)
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceBuilder

# Register SurfaceBuilder in _PyAnyCAD:
_PyAnyCAD.SurfaceBuilder_swigregister(SurfaceBuilder)
class Curve2dBuilder(object):
    r"""
    Author: Geometry
    构造平面二维曲线相关的方法
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeLine(*args):
        r"""
        *Overload 1:*

        Make line with two points.
        :type start: :py:class:`gp_Pnt2d`
        :param start: the start position.
        :type end: :py:class:`gp_Pnt2d`
        :param end: the end position.
        :rtype: :py:class:`TopoShape`
        :return: the line.

        |

        *Overload 2:*

        Make line with line objet between two paramters.
        :type line: :py:class:`gp_Lin2d`
        :param line: the line object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the sectiond parameter.
        :rtype: :py:class:`TopoShape`
        :return: the line shape.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeLine(*args)

    @staticmethod
    def MakeArcByLines(line1, line2, radius, tol, keepMinor):
        r"""
        Make arc between two lines.
        :type line1: :py:class:`TopoShape`
        :param line1: the first line.
        :type line2: :py:class:`TopoShape`
        :param line2: the second line.
        :type radius: float
        :param radius: the radius.
        :type tol: float
        :param tol: the tolerance.
        :type keepMinor: boolean
        :param keepMinor: keep the minor arc.
        :rtype: :py:class:`TopoShape`
        :return: the arc.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeArcByLines(line1, line2, radius, tol, keepMinor)

    @staticmethod
    def MakeCircle(cirlce):
        r"""
        Make circle shape.
        :type cirlce: :py:class:`gp_Circ2d`
        :param cirlce: the circle object.
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeCircle(cirlce)

    @staticmethod
    def MakePolygon(center, dirx, radius, cornerCount):
        r"""
        构造等边多边形
        :type center: :py:class:`gp_Pnt2d`
        :param center: 中心
        :type dirx: :py:class:`gp_Dir2d`
        :param dirx: 起点方向
        :type radius: float
        :param radius: 半径
        :type cornerCount: int
        :param cornerCount: 个数
        :rtype: :py:class:`TopoShape`
        :return: Wire
        """
        return _PyAnyCAD.Curve2dBuilder_MakePolygon(center, dirx, radius, cornerCount)

    @staticmethod
    def MakePolyline(points):
        r"""
        构造多线段
        :type points: :py:class:`GPnt2dList`
        :param points: 点
        :rtype: :py:class:`TopoShape`
        :return: Shape
        """
        return _PyAnyCAD.Curve2dBuilder_MakePolyline(points)

    @staticmethod
    def MakeArc(*args):
        return _PyAnyCAD.Curve2dBuilder_MakeArc(*args)

    @staticmethod
    def MakeArcBy3Points(start, end, middle):
        return _PyAnyCAD.Curve2dBuilder_MakeArcBy3Points(start, end, middle)

    @staticmethod
    def MakeElips(elips):
        r"""
        Make ellipse shape.
        :type elips: :py:class:`gp_Elips2d`
        :param elips: the ellipse object.
        :rtype: :py:class:`TopoShape`
        :return: the ellipse shape.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeElips(elips)

    @staticmethod
    def MakeElipsArc(elips, p1, p2):
        r"""
        Make ellipse arc.
        :type elips: :py:class:`gp_Elips2d`
        :param elips: the ellipse object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the second parameter.
        :rtype: :py:class:`TopoShape`
        :return: the ellipse arc.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeElipsArc(elips, p1, p2)

    @staticmethod
    def MakeHypr(hypr, p1, p2):
        r"""
        Make hyperbola curve.
        :type hypr: :py:class:`gp_Hypr2d`
        :param hypr: the hyperbola object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the second parameter.
        :rtype: :py:class:`TopoShape`
        :return: the hyperbola curve.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeHypr(hypr, p1, p2)

    @staticmethod
    def MakeParab(parab, p1, p2):
        r"""
        Make parabola curve.
        :type parab: :py:class:`gp_Parab2d`
        :param parab: the parabola object.
        :type p1: float
        :param p1: the first parameter.
        :type p2: float
        :param p2: the second parameter.
        :rtype: :py:class:`TopoShape`
        :return: the parabola curve.
        """
        return _PyAnyCAD.Curve2dBuilder_MakeParab(parab, p1, p2)

    @staticmethod
    def MakeBSpline(*args):
        return _PyAnyCAD.Curve2dBuilder_MakeBSpline(*args)

    @staticmethod
    def To3D(curve, plane):
        r"""
        二维曲线转换成平面上的三维曲线
        :type curve: :py:class:`TopoShape`
        :param curve: 二维曲线
        :type plane: :py:class:`gp_Pln`
        :param plane: 平面
        :rtype: :py:class:`TopoShape`
        :return: 三维曲线
        """
        return _PyAnyCAD.Curve2dBuilder_To3D(curve, plane)

    @staticmethod
    def MakeFace(outerwire, holes):
        r"""
        创建带孔的面
        :type outerwire: :py:class:`TopoShape`
        :param outerwire: 面的外轮廓
        :type holes: :py:class:`TopoShapeList`
        :param holes: 孔
        :rtype: :py:class:`TopoShape`
        :return: 面
        """
        return _PyAnyCAD.Curve2dBuilder_MakeFace(outerwire, holes)

    @staticmethod
    def TrimCurve(*args):
        r"""
        *Overload 1:*

        裁剪曲线
        :type curve: :py:class:`TopoShape`
        :param curve: 2D Curve
        :type startP: float
        :param startP: 起始点
        :type endP: float
        :param endP: 终止点
        :rtype: :py:class:`TopoShape`
        :return: 新的Curve

        |

        *Overload 2:*

        使用点分离曲线, 2D版本
        :type curve: :py:class:`TopoShape`
        :param curve: 被分离的曲线
        :type point: :py:class:`gp_Pnt2d`
        :param point: 分离的位置
        :rtype: :py:class:`TopoShapeList`
        :return: 曲线列表.
        """
        return _PyAnyCAD.Curve2dBuilder_TrimCurve(*args)

    @staticmethod
    def Split(curve, toolCurve, tol):
        r"""
        使用曲线拆分曲线
        :type curve: :py:class:`TopoShape`
        :param curve: 被拆分的曲线
        :param tool: 拆分工具
        :type tol: float
        :param tol: 容差
        :rtype: :py:class:`TopoShapeList`
        :return: 拆分结果
        """
        return _PyAnyCAD.Curve2dBuilder_Split(curve, toolCurve, tol)
    __swig_destroy__ = _PyAnyCAD.delete_Curve2dBuilder

# Register Curve2dBuilder in _PyAnyCAD:
_PyAnyCAD.Curve2dBuilder_swigregister(Curve2dBuilder)
class Sketch2dBuilder(Curve2dBuilder):
    r"""
    Author: Geometry

    Sketch2dBuilder 遗弃。请使用Curve2dBuilder
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Sketch2dBuilder

# Register Sketch2dBuilder in _PyAnyCAD:
_PyAnyCAD.Sketch2dBuilder_swigregister(Sketch2dBuilder)
class FixShapeTool(object):
    r"""
    Author: Geometry

    FixShapeTool
    对TopoShape进行修复的工具类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def RemoveInternalWires(shape, minArea):
        r"""
        移除面积小于指定面积的内部的Wires
        :type shape: :py:class:`TopoShape`
        :param shape: 输入的Shape
        :type minArea: float
        :param minArea: 面积
        :rtype: :py:class:`TopoShape`
        :return: 新生成的Shape
        """
        return _PyAnyCAD.FixShapeTool_RemoveInternalWires(shape, minArea)

    @staticmethod
    def FixSolid(solid):
        r"""
        Fix the potentional issues of the solid.
        :type solid: :py:class:`TopoShape`
        :param solid: the input solid.
        :rtype: :py:class:`TopoShape`
        :return: the shape.
        """
        return _PyAnyCAD.FixShapeTool_FixSolid(solid)

    @staticmethod
    def FixShape(shape):
        r"""
        Fix the shape.
        :type shape: :py:class:`TopoShape`
        :param shape: the shape.
        :rtype: :py:class:`TopoShape`
        :return: the new Shape.
        """
        return _PyAnyCAD.FixShapeTool_FixShape(shape)

    @staticmethod
    def Defeaturing(solid, faceToRemove):
        r"""
        特征消除：包括holes, protrusions, gaps, chamfers, fillets等
        :type solid: :py:class:`TopoShape`
        :param solid: 体对象
        :type faceToRemove: :py:class:`TopoShapeList`
        :param faceToRemove: 特征所在的面。
        :rtype: :py:class:`TopoShape`
        :return: 新对象
        """
        return _PyAnyCAD.FixShapeTool_Defeaturing(solid, faceToRemove)

    @staticmethod
    def RemoveHoles(solid):
        return _PyAnyCAD.FixShapeTool_RemoveHoles(solid)
    __swig_destroy__ = _PyAnyCAD.delete_FixShapeTool

# Register FixShapeTool in _PyAnyCAD:
_PyAnyCAD.FixShapeTool_swigregister(FixShapeTool)
class SurfaceAnalysisTool(object):
    r"""
    Author: Geometry

    SurfaceAnalysisTool
    分析曲面的工具.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face):
        _PyAnyCAD.SurfaceAnalysisTool_swiginit(self, _PyAnyCAD.new_SurfaceAnalysisTool(face))
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceAnalysisTool

    def GetFace(self):
        return _PyAnyCAD.SurfaceAnalysisTool_GetFace(self)

    def SetFace(self, val):
        return _PyAnyCAD.SurfaceAnalysisTool_SetFace(self, val)

    def ValueOfUV(self, pt):
        r"""
        计算点在曲面上的UV.
        :type pt: :py:class:`gp_Pnt`
        :param pt: the point.
        :rtype: :py:class:`gp_Pnt2d`
        :return: the UV values
        """
        return _PyAnyCAD.SurfaceAnalysisTool_ValueOfUV(self, pt)

    def GetUVBounds(self):
        r"""
        Get the UV bounds.
        :rtype: :py:class:`DoubleList`
        :return: [minU, maxU, minV, maxV]
        """
        return _PyAnyCAD.SurfaceAnalysisTool_GetUVBounds(self)

    def ComputeBoundIsos(self):
        r"""计算UV等值线."""
        return _PyAnyCAD.SurfaceAnalysisTool_ComputeBoundIsos(self)

    def UIso(self, u):
        r"""
        Get the U Iso line.
        :type u: float
        :param u:  the u parameter.
        :rtype: :py:class:`ParametricCurve`
        :return: the curve.
        """
        return _PyAnyCAD.SurfaceAnalysisTool_UIso(self, u)

    def VIso(self, u):
        r"""
        Get the V Iso line.
        :param v:  the v parameter.
        :rtype: :py:class:`ParametricCurve`
        :return: the curve.
        """
        return _PyAnyCAD.SurfaceAnalysisTool_VIso(self, u)

# Register SurfaceAnalysisTool in _PyAnyCAD:
_PyAnyCAD.SurfaceAnalysisTool_swigregister(SurfaceAnalysisTool)
class IgesIO(object):
    r"""
    Author: Exchange
    IgesIO
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.IgesIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.IgesIO_Save(shape, fileName)

# Register IgesIO in _PyAnyCAD:
_PyAnyCAD.IgesIO_swigregister(IgesIO)
class StepIO(object):
    r"""
    Author: Exchange
    StepIO
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName, useSystemUnit=False):
        return _PyAnyCAD.StepIO_Open(fileName, useSystemUnit)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.StepIO_Save(shape, fileName)

# Register StepIO in _PyAnyCAD:
_PyAnyCAD.StepIO_swigregister(StepIO)
class BrepIO(object):
    r"""
    Author: Exchange
    BrepIO
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.BrepIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.BrepIO_Save(shape, fileName)

# Register BrepIO in _PyAnyCAD:
_PyAnyCAD.BrepIO_swigregister(BrepIO)
class StlIO(object):
    r"""
    Author: Exchange
    StlIO
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Deflection = property(_PyAnyCAD.StlIO_Deflection_get, _PyAnyCAD.StlIO_Deflection_set)

    @staticmethod
    def Open(fileName):
        return _PyAnyCAD.StlIO_Open(fileName)

    @staticmethod
    def Save(shape, fileName):
        return _PyAnyCAD.StlIO_Save(shape, fileName)

# Register StlIO in _PyAnyCAD:
_PyAnyCAD.StlIO_swigregister(StlIO)
class ShapeIO(object):
    r"""
    Author: Exchange
    ShapeIO
    加载模型，如STEP、IGES、BREP格式
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Open(*args):
        r"""
        *Overload 1:*

        加载模型文件
        :type fileName: anycore::StringW
        :param fileName: 文件名称
        :type useSystemUnit: boolean, optional
        :param useSystemUnit: 是否转换为系统单位。默认为m
        :rtype: :py:class:`TopoShape`
        :return: 模型

        |

        *Overload 2:*

        加载模型文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名称
        :type useSystemUnit: boolean, optional
        :param useSystemUnit: 是否转换为系统单位。默认为m
        :rtype: :py:class:`TopoShape`
        :return: 模型

        |

        *Overload 3:*

        加载模型文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名称
        :param useSystemUnit: 是否转换为系统单位。默认为m
        :rtype: :py:class:`TopoShape`
        :return: 模型
        """
        return _PyAnyCAD.ShapeIO_Open(*args)

    @staticmethod
    def Save(*args):
        r"""
        *Overload 1:*

        将TopoShape保存为模型文件
        :type shape: :py:class:`TopoShape`
        :param shape: 需要导出的TopoShape对象
        :type fileName: anycore::StringW
        :param fileName: 保存文件路径，通过后缀名指定模型文件格式
                                   目前支持的格式有：".stp", ".step", ".igs", ".iges", ".stl", ".stb"
                                   未提供后缀或后缀不支持时导出BRep格式：https://dev.opencascade.org/doc/occt-6.7.0/overview/html/occt_brep_format.html
        :rtype: boolean
        :return: 是否保存成功

        |

        *Overload 2:*

        整体保存
        :type group: :py:class:`TopoShapeList`
        :param group: TopoShape列表
        :type fileName: anycore::StringW
        :param fileName: 文件名
        :rtype: boolean
        :return: 是否成功

        |

        *Overload 3:*

        将TopoShape保存为模型文件
        :type shape: :py:class:`TopoShape`
        :param shape: 需要导出的TopoShape对象
        :type fileName: :py:class:`Path`
        :param fileName: 保存文件路径，通过后缀名指定模型文件格式
                                   目前支持的格式有：".stp", ".step", ".igs", ".iges", ".stl", ".stb"
                                   未提供后缀或后缀不支持时导出BRep格式：https://dev.opencascade.org/doc/occt-6.7.0/overview/html/occt_brep_format.html
        :rtype: boolean
        :return: 是否保存成功
        """
        return _PyAnyCAD.ShapeIO_Save(*args)

# Register ShapeIO in _PyAnyCAD:
_PyAnyCAD.ShapeIO_swigregister(ShapeIO)
class DxfIO(object):
    r"""DXF文件解析"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Load(*args):
        r"""
        *Overload 1:*

        加载DXF文件
        :type fileName: string
        :param fileName: 文件名
        :rtype: :py:class:`TopoShapeList`
        :return: Shape列表


        |

        *Overload 2:*

        加载DXF文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名
        :rtype: :py:class:`TopoShapeList`
        :return: Shape列表
        """
        return _PyAnyCAD.DxfIO_Load(*args)

    @staticmethod
    def Save(*args):
        r"""
        *Overload 1:*

        保存DXF文件
        :type fileName: string
        :param fileName: 文件名
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: Shape列表
        :rtype: boolean
        :return: 


        |

        *Overload 2:*

        保存DXF文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: Shape列表
        :rtype: boolean
        :return: 


        |

        *Overload 3:*

        保存DXF文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名
        :type shapes: :py:class:`TopoShapeList`
        :param shapes: Shape列表
        :rtype: boolean
        :return: 


        |

        *Overload 4:*

        保存DXF文件
        :type fileName: string
        :param fileName: 文件名
        :type node: :py:class:`SceneNode`
        :param node: SceneNode
        :rtype: boolean
        :return: 


        |

        *Overload 5:*

        保存DXF文件
        :type fileName: string
        :param fileName: 文件名
        :type node: :py:class:`SceneNode`
        :param node: SceneNode
        :rtype: boolean
        :return: 


        |

        *Overload 6:*

        保存DXF文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名
        :type node: :py:class:`SceneNode`
        :param node: SceneNode
        :rtype: boolean
        :return: 


        |

        *Overload 7:*

        保存DXF文件
        :type fileName: :py:class:`Path`
        :param fileName: 文件名
        :type node: :py:class:`SceneNode`
        :param node: SceneNode
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.DxfIO_Save(*args)
    __swig_destroy__ = _PyAnyCAD.delete_DxfIO

# Register DxfIO in _PyAnyCAD:
_PyAnyCAD.DxfIO_swigregister(DxfIO)
EnumXdeShapeType_Empty = _PyAnyCAD.EnumXdeShapeType_Empty
EnumXdeShapeType_Free = _PyAnyCAD.EnumXdeShapeType_Free
EnumXdeShapeType_Simple = _PyAnyCAD.EnumXdeShapeType_Simple
EnumXdeShapeType_Assembly = _PyAnyCAD.EnumXdeShapeType_Assembly
EnumXdeShapeType_Reference = _PyAnyCAD.EnumXdeShapeType_Reference
class XdeNode(object):
    r"""
    Author: Exchange
    XdeNode
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_XdeNode

    def SetName(self, name):
        return _PyAnyCAD.XdeNode_SetName(self, name)

    def GetName(self):
        return _PyAnyCAD.XdeNode_GetName(self)

    def IsNullLabel(self):
        return _PyAnyCAD.XdeNode_IsNullLabel(self)

    def HasChild(self):
        return _PyAnyCAD.XdeNode_HasChild(self)

    def NbChildren(self):
        return _PyAnyCAD.XdeNode_NbChildren(self)

    def GetDepth(self):
        return _PyAnyCAD.XdeNode_GetDepth(self)

    def GetTag(self):
        return _PyAnyCAD.XdeNode_GetTag(self)

# Register XdeNode in _PyAnyCAD:
_PyAnyCAD.XdeNode_swigregister(XdeNode)
class XdeDocument(object):
    r"""
    Author: Exchange
    XdeDocument
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.XdeDocument_swiginit(self, _PyAnyCAD.new_XdeDocument())
    __swig_destroy__ = _PyAnyCAD.delete_XdeDocument

    def New(self):
        return _PyAnyCAD.XdeDocument_New(self)

    def AddShape(self, shape):
        return _PyAnyCAD.XdeDocument_AddShape(self, shape)

    def SetSurfaceColor(self, shape, color):
        return _PyAnyCAD.XdeDocument_SetSurfaceColor(self, shape, color)

    def SetCurveColor(self, shape, color):
        return _PyAnyCAD.XdeDocument_SetCurveColor(self, shape, color)

    def Save(self, fileName):
        return _PyAnyCAD.XdeDocument_Save(self, fileName)

    def Open(self, fileName):
        return _PyAnyCAD.XdeDocument_Open(self, fileName)

    def GetShapeCount(self):
        return _PyAnyCAD.XdeDocument_GetShapeCount(self)

    def GetShapeNode(self, idx):
        return _PyAnyCAD.XdeDocument_GetShapeNode(self, idx)

    def GetRootNode(self):
        return _PyAnyCAD.XdeDocument_GetRootNode(self)

    def IsSimpleShape(self, label):
        return _PyAnyCAD.XdeDocument_IsSimpleShape(self, label)

    def IsAssembly(self, label):
        return _PyAnyCAD.XdeDocument_IsAssembly(self, label)

    def IsReference(self, label):
        return _PyAnyCAD.XdeDocument_IsReference(self, label)

    def GetShapeType(self, label):
        return _PyAnyCAD.XdeDocument_GetShapeType(self, label)

    def GetShape(self, label):
        return _PyAnyCAD.XdeDocument_GetShape(self, label)

    def GetReferencedShape(self, label):
        return _PyAnyCAD.XdeDocument_GetReferencedShape(self, label)

    def GetColor(self, label, defaultClr):
        return _PyAnyCAD.XdeDocument_GetColor(self, label, defaultClr)

    def GetFaceColor(self, shape, defaultClr):
        return _PyAnyCAD.XdeDocument_GetFaceColor(self, shape, defaultClr)

    def GetEdgeColor(self, shape, defaultClr):
        return _PyAnyCAD.XdeDocument_GetEdgeColor(self, shape, defaultClr)

# Register XdeDocument in _PyAnyCAD:
_PyAnyCAD.XdeDocument_swigregister(XdeDocument)
class XdeNodeIterator(object):
    r"""
    Author: Exchange
    XdeNodeIterator
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, impl):
        _PyAnyCAD.XdeNodeIterator_swiginit(self, _PyAnyCAD.new_XdeNodeIterator(impl))
    __swig_destroy__ = _PyAnyCAD.delete_XdeNodeIterator

    def More(self):
        return _PyAnyCAD.XdeNodeIterator_More(self)

    def Next(self):
        return _PyAnyCAD.XdeNodeIterator_Next(self)

    def Value(self):
        return _PyAnyCAD.XdeNodeIterator_Value(self)

# Register XdeNodeIterator in _PyAnyCAD:
_PyAnyCAD.XdeNodeIterator_swigregister(XdeNodeIterator)
class XdeLabelSequence(object):
    r"""
    Author: Exchange
    XdeLabelSequence
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parent):
        _PyAnyCAD.XdeLabelSequence_swiginit(self, _PyAnyCAD.new_XdeLabelSequence(parent))
    __swig_destroy__ = _PyAnyCAD.delete_XdeLabelSequence

    def More(self):
        return _PyAnyCAD.XdeLabelSequence_More(self)

    def Next(self):
        return _PyAnyCAD.XdeLabelSequence_Next(self)

    def Value(self):
        return _PyAnyCAD.XdeLabelSequence_Value(self)

# Register XdeLabelSequence in _PyAnyCAD:
_PyAnyCAD.XdeLabelSequence_swigregister(XdeLabelSequence)
class ParameterValue(AObject):
    r"""
    Author: DataManage

    基本数据的基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterValue_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterValue_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterValue_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterValue

    def GetUnit(self):
        return _PyAnyCAD.ParameterValue_GetUnit(self)

    def SetUnit(self, val):
        return _PyAnyCAD.ParameterValue_SetUnit(self, val)

    def GetGroupName(self):
        return _PyAnyCAD.ParameterValue_GetGroupName(self)

    def SetGroupName(self, val):
        return _PyAnyCAD.ParameterValue_SetGroupName(self, val)

    def GetShortName(self):
        return _PyAnyCAD.ParameterValue_GetShortName(self)

    def IsEqual(self, other):
        r"""
        数值是否相同
        :type other: :py:class:`ParameterValue`
        :param other: 比较的对象
        :rtype: boolean
        :return: 是否相同
        """
        return _PyAnyCAD.ParameterValue_IsEqual(self, other)

    def IsSameType(self, other):
        r"""
        数据类型是否相同
        :type other: :py:class:`ParameterValue`
        :param other:
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.ParameterValue_IsSameType(self, other)

    def ToStr(self):
        r"""
        转换成字符串
        :rtype: string
        :return: 字符串
        """
        return _PyAnyCAD.ParameterValue_ToStr(self)

    def Parse(self, str):
        r"""
        解析字符串
        :type str: string
        :param str: 字符串
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ParameterValue_Parse(self, str)

    def Copy(self, other):
        r"""
        从来源对象复制数据
        :type other: :py:class:`ParameterValue`
        :param other: 来源数据
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ParameterValue_Copy(self, other)

# Register ParameterValue in _PyAnyCAD:
_PyAnyCAD.ParameterValue_swigregister(ParameterValue)
class ParameterDict(AObject):
    r"""
    Author: DataManage

    ParameterDict

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDict_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDict_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterDict_Cast(obj)

    def __init__(self):
        _PyAnyCAD.ParameterDict_swiginit(self, _PyAnyCAD.new_ParameterDict())
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDict

    def ToJSON(self):
        return _PyAnyCAD.ParameterDict_ToJSON(self)

    def FromJSON(self, json):
        return _PyAnyCAD.ParameterDict_FromJSON(self, json)

    def LoadFile(self, fileName):
        return _PyAnyCAD.ParameterDict_LoadFile(self, fileName)

    def SaveFile(self, fileName):
        return _PyAnyCAD.ParameterDict_SaveFile(self, fileName)

    def Find(self, name):
        return _PyAnyCAD.ParameterDict_Find(self, name)

    def Remove(self, name):
        return _PyAnyCAD.ParameterDict_Remove(self, name)

    def IsExist(self, name):
        return _PyAnyCAD.ParameterDict_IsExist(self, name)

    def Clear(self):
        return _PyAnyCAD.ParameterDict_Clear(self)

    def GetFloat(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetFloat(self, name, failback)

    def GetFloatList(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetFloatList(self, name, failback)

    def GetDouble(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetDouble(self, name, failback)

    def GetDoubleList(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetDoubleList(self, name, failback)

    def GetInt32(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetInt32(self, name, failback)

    def GetInt32List(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetInt32List(self, name, failback)

    def GetBool(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetBool(self, name, failback)

    def GetObjectId(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetObjectId(self, name, failback)

    def GetObjectIdList(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetObjectIdList(self, name, failback)

    def GetString(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetString(self, name, failback)

    def GetStringList(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetStringList(self, name, failback)

    def GetVector3f(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetVector3f(self, name, failback)

    def GetGPnt(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGPnt(self, name, failback)

    def GetGPntList(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGPntList(self, name, failback)

    def GetGVec(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGVec(self, name, failback)

    def GetGDir(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGDir(self, name, failback)

    def GetGAx1(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGAx1(self, name, failback)

    def GetGAx2(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGAx2(self, name, failback)

    def GetGAx3(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGAx3(self, name, failback)

    def GetGPnt2d(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGPnt2d(self, name, failback)

    def GetGVec2d(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGVec2d(self, name, failback)

    def GetGDir2d(self, name, failback):
        return _PyAnyCAD.ParameterDict_GetGDir2d(self, name, failback)

    def AddFloat(self, name, val):
        return _PyAnyCAD.ParameterDict_AddFloat(self, name, val)

    def AddFloatList(self, name, val):
        return _PyAnyCAD.ParameterDict_AddFloatList(self, name, val)

    def AddDouble(self, name, val):
        return _PyAnyCAD.ParameterDict_AddDouble(self, name, val)

    def AddDoubleList(self, name, val):
        return _PyAnyCAD.ParameterDict_AddDoubleList(self, name, val)

    def AddInt32(self, name, val):
        return _PyAnyCAD.ParameterDict_AddInt32(self, name, val)

    def AddInt32List(self, name, val):
        return _PyAnyCAD.ParameterDict_AddInt32List(self, name, val)

    def AddBool(self, name, val):
        return _PyAnyCAD.ParameterDict_AddBool(self, name, val)

    def AddObjectId(self, name, val):
        return _PyAnyCAD.ParameterDict_AddObjectId(self, name, val)

    def AddObjectIdList(self, name, val):
        return _PyAnyCAD.ParameterDict_AddObjectIdList(self, name, val)

    def AddString(self, name, val):
        return _PyAnyCAD.ParameterDict_AddString(self, name, val)

    def AddStringList(self, name, val):
        return _PyAnyCAD.ParameterDict_AddStringList(self, name, val)

    def AddVector3f(self, name, val):
        return _PyAnyCAD.ParameterDict_AddVector3f(self, name, val)

    def AddGPnt(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGPnt(self, name, val)

    def AddGPntList(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGPntList(self, name, val)

    def AddGVec(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGVec(self, name, val)

    def AddGDir(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGDir(self, name, val)

    def AddGAx1(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGAx1(self, name, val)

    def AddGAx2(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGAx2(self, name, val)

    def AddGAx3(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGAx3(self, name, val)

    def AddGPnt2d(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGPnt2d(self, name, val)

    def AddGVec2d(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGVec2d(self, name, val)

    def AddGDir2d(self, name, val):
        return _PyAnyCAD.ParameterDict_AddGDir2d(self, name, val)

# Register ParameterDict in _PyAnyCAD:
_PyAnyCAD.ParameterDict_swigregister(ParameterDict)
EnumUpdateElementFlag_Add = _PyAnyCAD.EnumUpdateElementFlag_Add
r"""在添加阶段调用更新"""
EnumUpdateElementFlag_Modify = _PyAnyCAD.EnumUpdateElementFlag_Modify
r"""在修改阶段调用更新"""
class DocumentEventArgs(object):
    r"""
    Author: DataManage

    文档事件参数

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.DocumentEventArgs_swiginit(self, _PyAnyCAD.new_DocumentEventArgs())
    __swig_destroy__ = _PyAnyCAD.delete_DocumentEventArgs

    def GetAddedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetAddedIds(self)

    def GetRemovedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetRemovedIds(self)

    def GetChangedIds(self):
        return _PyAnyCAD.DocumentEventArgs_GetChangedIds(self)

    def GetPreviewing(self):
        return _PyAnyCAD.DocumentEventArgs_GetPreviewing(self)

    def SetPreviewing(self, val):
        return _PyAnyCAD.DocumentEventArgs_SetPreviewing(self, val)

    def SetUpdateAll(self, val):
        return _PyAnyCAD.DocumentEventArgs_SetUpdateAll(self, val)

    def GetUpdateAll(self):
        r"""是否全量更新。如加载文档后，则需要全量更新。"""
        return _PyAnyCAD.DocumentEventArgs_GetUpdateAll(self)

    def NeedUpdateUI(self):
        r"""
        是否需要更新界面
        :rtype: boolean
        :return: true则需要
        """
        return _PyAnyCAD.DocumentEventArgs_NeedUpdateUI(self)

    def NeedUpdateView(self, *args):
        r"""
        *Overload 1:*

        是否需要更新视图
        :rtype: boolean
        :return: true则需要

        |

        *Overload 2:*

        指定的DbView是否需要更新
        :type viewId: :py:class:`ObjectId`
        :param viewId: DbView Id
        :rtype: boolean
        :return: true则需要更新
        """
        return _PyAnyCAD.DocumentEventArgs_NeedUpdateView(self, *args)

# Register DocumentEventArgs in _PyAnyCAD:
_PyAnyCAD.DocumentEventArgs_swigregister(DocumentEventArgs)
class Element(AObject):
    r"""
    Author: DataManage

    保存在文档的对象的基类。支持事务、关联更新等功能
    See also: Document
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Element_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Element_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Element_Cast(obj)

    def __init__(self):
        _PyAnyCAD.Element_swiginit(self, _PyAnyCAD.new_Element())
    __swig_destroy__ = _PyAnyCAD.delete_Element

    def GetUserId(self):
        return _PyAnyCAD.Element_GetUserId(self)

    def SetUserId(self, val):
        return _PyAnyCAD.Element_SetUserId(self, val)

    def GetName(self):
        return _PyAnyCAD.Element_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Element_SetName(self, val)

    def GetSchemaName(self):
        return _PyAnyCAD.Element_GetSchemaName(self)

    def SetSchemaName(self, val):
        return _PyAnyCAD.Element_SetSchemaName(self, val)

    def GetUserFlags(self):
        return _PyAnyCAD.Element_GetUserFlags(self)

    def SetUserFlags(self, val):
        return _PyAnyCAD.Element_SetUserFlags(self, val)

    def GetId(self):
        return _PyAnyCAD.Element_GetId(self)

    def GetAliasName(self):
        return _PyAnyCAD.Element_GetAliasName(self)

    def SetAliasName(self, val):
        return _PyAnyCAD.Element_SetAliasName(self, val)

    def MakeUniqueName(self, *args):
        r"""
        *Overload 1:*

        设置唯一的名称
        :type base: string
        :param base: 基础，如根据"构件"，生成"构件1"

        |

        *Overload 2:*

        根据ElementNames配置生成唯一名称。
        """
        return _PyAnyCAD.Element_MakeUniqueName(self, *args)

    def RequestUpdate(self, *args):
        r"""在被添加到文档时候调用，或者后动调用以触发更新。"""
        return _PyAnyCAD.Element_RequestUpdate(self, *args)

    def ListParameters(self, parameters):
        r"""
        列出界面可见的参数
        :type parameters: :py:class:`ParameterDict`
        :param parameters:
        """
        return _PyAnyCAD.Element_ListParameters(self, parameters)

    def SetParameter(self, parameters, key):
        r"""
        根据参数修改属性
        :type parameters: :py:class:`ParameterDict`
        :param parameters: 参数集
        :type key: string
        :param key: 修改的参数
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.Element_SetParameter(self, parameters, key)

# Register Element in _PyAnyCAD:
_PyAnyCAD.Element_swigregister(Element)
class Component(Element):
    r"""
    Author: DataManage

    组件，用于动态给Entity增加特性
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Component_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Component_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Component_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.Component_swiginit(self, _PyAnyCAD.new_Component(*args))
    __swig_destroy__ = _PyAnyCAD.delete_Component

    def GetEntityId(self):
        return _PyAnyCAD.Component_GetEntityId(self)

    def SetEntityId(self, val):
        return _PyAnyCAD.Component_SetEntityId(self, val)

    def GetEntity(self):
        r"""
        获取实体对象
        :rtype: :py:class:`Element`
        :return: 
        """
        return _PyAnyCAD.Component_GetEntity(self)

# Register Component in _PyAnyCAD:
_PyAnyCAD.Component_swigregister(Component)
class ElementIterator(object):
    r"""
    Author: DataManage

    Element遍历器。
    使用方法：

    .. code-block:: c++

        for(var itr = ElementIterator.Create(doc); itr.More(); itr.Next())
        {
            var e = itr.Current();
        ...
        }
    Remarks: 
    在遍历过程中不允许删除文档里的对象，否则行为未知。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ElementIterator

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        创建迭代器
        :type doc: :py:class:`Document`
        :param doc: 文档
        :rtype: :py:class:`ElementIterator`
        :return: 迭代器

        |

        *Overload 2:*

        创建查找某一类型的对象的迭代器
        :type doc: :py:class:`Document`
        :param doc: 文档
        :type classId: :py:class:`ClassId`
        :param classId: 对象的ClassId
        :rtype: :py:class:`ElementIterator`
        :return: 返回迭代器。可能为null。
        """
        return _PyAnyCAD.ElementIterator_Create(*args)

    def More(self):
        r"""
        是否遍历结束
        :rtype: boolean
        :return: true则未结束
        """
        return _PyAnyCAD.ElementIterator_More(self)

    def Next(self):
        r"""
        下一个对象
        :rtype: boolean
        :return: true则存在下一个对象
        """
        return _PyAnyCAD.ElementIterator_Next(self)

    def Current(self):
        r"""
        当前对象
        :rtype: :py:class:`Element`
        :return: 对象
        """
        return _PyAnyCAD.ElementIterator_Current(self)

# Register ElementIterator in _PyAnyCAD:
_PyAnyCAD.ElementIterator_swigregister(ElementIterator)
class ElementTable(object):
    r"""
    Author: DataManage

    ElementTable 对Element按类型分表管理，提升查询速度。

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ElementTable

    def GetName(self):
        return _PyAnyCAD.ElementTable_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ElementTable_SetName(self, val)

    def GetOwner(self):
        return _PyAnyCAD.ElementTable_GetOwner(self)

    def SetOwner(self, val):
        return _PyAnyCAD.ElementTable_SetOwner(self, val)

    def CreateIterator(self):
        r"""
        创建遍历器，遍历表中的对象
        :rtype: :py:class:`ElementIterator`
        :return: 遍历器
        """
        return _PyAnyCAD.ElementTable_CreateIterator(self)

    def FindElement(self, id):
        r"""
        根据ID查找对象
        :type id: :py:class:`ObjectId`
        :param id: ID
        :rtype: :py:class:`Element`
        :return: 对象
        """
        return _PyAnyCAD.ElementTable_FindElement(self, id)

    def GetIds(self):
        r"""
        获取所有的对象ID集合
        :rtype: :py:class:`ObjectIdSet`
        :return: 
        """
        return _PyAnyCAD.ElementTable_GetIds(self)

    def GetSize(self):
        r"""
        获取对象个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.ElementTable_GetSize(self)

    def FindByName(self, name):
        r"""
        根据名称查找对象。比ID要慢点。
        :type name: string
        :param name: 名字
        :rtype: :py:class:`Element`
        :return: 对象
        """
        return _PyAnyCAD.ElementTable_FindByName(self, name)

    def FindIdByName(self, name):
        r"""
        根据名称查找对象。
        :type name: string
        :param name: 名字
        :rtype: :py:class:`ObjectId`
        :return: 对象ID
        """
        return _PyAnyCAD.ElementTable_FindIdByName(self, name)

    def MakeUniqueName(self, name):
        r"""
        根据name生成唯一的名字，以后缀1,2,3区分
        :type name: string
        :param name: 基本名字
        :rtype: string
        :return: 新的名字
        """
        return _PyAnyCAD.ElementTable_MakeUniqueName(self, name)

    def CountName(self, name):
        r"""
        获取同名对象的个数
        :type name: string
        :param name: 名称
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.ElementTable_CountName(self, name)

    def FindComponent(self, *args):
        r"""
        *Overload 1:*

        根据EntityID查找Component
        :type entityId: :py:class:`ObjectId`
        :param entityId: EntityID
        :rtype: :py:class:`Component`
        :return: Component对象

        |

        *Overload 2:*

        根据名字查找Component
        :type entityId: :py:class:`ObjectId`
        :param entityId:
        :type name: string
        :param name: Component的SchemaName
        :rtype: :py:class:`Component`
        :return: 
        """
        return _PyAnyCAD.ElementTable_FindComponent(self, *args)

    def FindComponents(self, entityId):
        r"""
        查找Components的ID
        :type entityId: :py:class:`ObjectId`
        :param entityId:
        :rtype: :py:class:`ObjectIdSet`
        :return: ID列表
        """
        return _PyAnyCAD.ElementTable_FindComponents(self, entityId)

# Register ElementTable in _PyAnyCAD:
_PyAnyCAD.ElementTable_swigregister(ElementTable)
class Document(AObject):
    r"""
    Author: DataManage

    管理各种需要被保存的内容，包括几何、材质、属性等；操作的支持Undo/Redo。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Document_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Document_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Document_Cast(obj)

    def __init__(self):
        _PyAnyCAD.Document_swiginit(self, _PyAnyCAD.new_Document())
    __swig_destroy__ = _PyAnyCAD.delete_Document

    def GetName(self):
        return _PyAnyCAD.Document_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Document_SetName(self, val)

    def GetActiveDbViewId(self):
        return _PyAnyCAD.Document_GetActiveDbViewId(self)

    def GetId(self):
        return _PyAnyCAD.Document_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.Document_SetId(self, val)

    def GetLastestSketchId(self):
        return _PyAnyCAD.Document_GetLastestSketchId(self)

    def SetLastestSketchId(self, val):
        return _PyAnyCAD.Document_SetLastestSketchId(self, val)

    def GetDocType(self):
        return _PyAnyCAD.Document_GetDocType(self)

    def SetDocType(self, val):
        return _PyAnyCAD.Document_SetDocType(self, val)

    def GetPropertyId(self):
        return _PyAnyCAD.Document_GetPropertyId(self)

    def SetPropertyId(self, val):
        return _PyAnyCAD.Document_SetPropertyId(self, val)

    def GetTextEncoding(self):
        return _PyAnyCAD.Document_GetTextEncoding(self)

    def SetTextEncoding(self, val):
        return _PyAnyCAD.Document_SetTextEncoding(self, val)

    def GetVersion(self):
        return _PyAnyCAD.Document_GetVersion(self)

    def SetVersion(self, val):
        return _PyAnyCAD.Document_SetVersion(self, val)

    def GetUndoing(self):
        return _PyAnyCAD.Document_GetUndoing(self)

    def SetUndoing(self, val):
        return _PyAnyCAD.Document_SetUndoing(self, val)

    def GetRegenerating(self):
        return _PyAnyCAD.Document_GetRegenerating(self)

    def SetRegenerating(self, val):
        return _PyAnyCAD.Document_SetRegenerating(self, val)

    def GetFileName(self):
        return _PyAnyCAD.Document_GetFileName(self)

    def SetFileName(self, val):
        return _PyAnyCAD.Document_SetFileName(self, val)

    def GetModified(self):
        return _PyAnyCAD.Document_GetModified(self)

    def SetModified(self, val):
        return _PyAnyCAD.Document_SetModified(self, val)

    def GetThumbnailFileName(self):
        return _PyAnyCAD.Document_GetThumbnailFileName(self)

    def SetThumbnailFileName(self, val):
        return _PyAnyCAD.Document_SetThumbnailFileName(self, val)

    def GetPartId(self):
        return _PyAnyCAD.Document_GetPartId(self)

    def SetPartId(self, val):
        return _PyAnyCAD.Document_SetPartId(self, val)

    def Initialize(self, viewName):
        r"""
        初始化默认的文档对象
        :rtype: :py:class:`ObjectId`
        :return: 返回视图对象ID
        """
        return _PyAnyCAD.Document_Initialize(self, viewName)

    def SetActiveDbViewId(self, dbViewId):
        r"""
        设置当前的DbView
        :type dbViewId: :py:class:`ObjectId`
        :param dbViewId: DbView的ID
        """
        return _PyAnyCAD.Document_SetActiveDbViewId(self, dbViewId)

    def SetActiveSketchId(self, sketchId):
        r"""
        设置当前的草图工作平面
        :type sketchId: :py:class:`ObjectId`
        :param sketchId: 草图平面的ID
        """
        return _PyAnyCAD.Document_SetActiveSketchId(self, sketchId)

    def GetActiveSketchId(self):
        return _PyAnyCAD.Document_GetActiveSketchId(self)

    def IsSubDocument(self):
        r"""
        是否为子文档，被PartElement管理的
        :rtype: boolean
        :return: true 为子文档。
        """
        return _PyAnyCAD.Document_IsSubDocument(self)

    def RemoveElement(self, *args):
        return _PyAnyCAD.Document_RemoveElement(self, *args)

    def NotifyElementChanged(self, id, flags):
        r"""
        通知图元被修改了。由用户手动触发。
        :type id: :py:class:`ObjectId`
        :param id: ID
        :type flags: int
        :param flags:  标识
        """
        return _PyAnyCAD.Document_NotifyElementChanged(self, id, flags)

    def Select(self, ids, viewId):
        r"""
        选择对象
        :type ids: :py:class:`PickedIdList`
        :param ids: 对象ID
        :type viewId: :py:class:`ObjectId`
        :param viewId: 触发选择的视图ID。
        """
        return _PyAnyCAD.Document_Select(self, ids, viewId)

    def SelectByIds(self, ids, viewId):
        return _PyAnyCAD.Document_SelectByIds(self, ids, viewId)

    def Highlight(self, ids):
        r"""
        高亮对象
        :type ids: :py:class:`PickedIdList`
        :param ids: 对象ID
        """
        return _PyAnyCAD.Document_Highlight(self, ids)

    def HighlightByIds(self, ids):
        return _PyAnyCAD.Document_HighlightByIds(self, ids)

    def CreateElementIterator(self):
        r"""
        创建遍历文档的迭代器
        :rtype: :py:class:`ElementIterator`
        :return: 迭代器
        """
        return _PyAnyCAD.Document_CreateElementIterator(self)

    def FindElement(self, *args):
        r"""
        *Overload 1:*

        根据ID查找图元
        :type id: :py:class:`ObjectId`
        :param id: ID
        :rtype: :py:class:`Element`
        :return: 图元

        |

        *Overload 2:*

        查找图元
        :type id: :py:class:`PickedId`
        :param id: ID
        :type leafFirst: boolean, optional
        :param leafFirst: 叶子节点优先。默认
        :rtype: :py:class:`Element`
        :return: 对象

        |

        *Overload 3:*

        查找图元
        :type id: :py:class:`PickedId`
        :param id: ID
        :param leafFirst: 叶子节点优先。默认
        :rtype: :py:class:`Element`
        :return: 对象
        """
        return _PyAnyCAD.Document_FindElement(self, *args)

    def FindTable(self, *args):
        return _PyAnyCAD.Document_FindTable(self, *args)

    def Create(self, className):
        r"""
        根据类名创建对象
        :type className: string
        :param className: 类型
        :rtype: :py:class:`Element`
        :return: 对象
        """
        return _PyAnyCAD.Document_Create(self, className)

    def EnableTransaction(self, enabled):
        r"""
        控制是否启用事务
        :type enabled: boolean
        :param enabled: true则启用
        """
        return _PyAnyCAD.Document_EnableTransaction(self, enabled)

    def IsTransactionEnabled(self):
        r"""
        判断事务是否启用。
        :rtype: boolean
        :return: true则被启用
        """
        return _PyAnyCAD.Document_IsTransactionEnabled(self)

    def IsPreviewing(self):
        r"""
        判断是否在预览模式，即事务未完全提交，文档还处于不稳定状态。
        :rtype: boolean
        :return: true则还在预览模式
        """
        return _PyAnyCAD.Document_IsPreviewing(self)

    def CanUndo(self):
        r"""
        是否可以Undo
        :rtype: boolean
        :return: true则可以
        """
        return _PyAnyCAD.Document_CanUndo(self)

    def CanRedo(self):
        r"""
        是否可以Redo
        :rtype: boolean
        :return: true则可以
        """
        return _PyAnyCAD.Document_CanRedo(self)

    def Undo(self):
        r"""执行Undo操作。"""
        return _PyAnyCAD.Document_Undo(self)

    def Redo(self):
        r"""执行Redo操作"""
        return _PyAnyCAD.Document_Redo(self)

    def ClearUndoList(self):
        r"""手动清空Undo/Redo的历史列表。"""
        return _PyAnyCAD.Document_ClearUndoList(self)

    def GetSelection(self):
        r"""
        获取选择集
        :rtype: :py:class:`PickedIdList`
        :return: 高亮的对象ID
        """
        return _PyAnyCAD.Document_GetSelection(self)

    def GetHighlightion(self):
        r"""
        获取高亮的对象
        :rtype: :py:class:`PickedIdList`
        :return: 高亮的对象ID
        """
        return _PyAnyCAD.Document_GetHighlightion(self)

    def MarkAtom(self, id, pid):
        r"""
        标记对象更改
        :type id: :py:class:`ObjectId`
        :param id: ID
        :type pid: int
        :param pid: 属性ID
        """
        return _PyAnyCAD.Document_MarkAtom(self, id, pid)

    def GetReference(self, id):
        r"""
        获取被引用的Id集合
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        :rtype: :py:class:`ObjectIdSet`
        :return: 引用id的集合。
        """
        return _PyAnyCAD.Document_GetReference(self, id)

    def ResolveFilePath(self, fileName):
        r"""
        根据文档的目录来查找文件的完整路径。
        :type fileName: string
        :param fileName: 文件名称
        :rtype: string
        :return: 空则未找到
        """
        return _PyAnyCAD.Document_ResolveFilePath(self, fileName)

# Register Document in _PyAnyCAD:
_PyAnyCAD.Document_swigregister(Document)
class DocumentSceneNode(GeneralSceneNode):
    r"""
    Author: DataManage

    DocumentSceneNode
    文档对象在场景中的表达.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DocumentSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.DocumentSceneNode_swiginit(self, _PyAnyCAD.new_DocumentSceneNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_DocumentSceneNode

    def GetDocument(self):
        return _PyAnyCAD.DocumentSceneNode_GetDocument(self)

    def GetViewer(self):
        return _PyAnyCAD.DocumentSceneNode_GetViewer(self)

    def SetViewer(self, val):
        return _PyAnyCAD.DocumentSceneNode_SetViewer(self, val)

    def GetDBViewId(self):
        return _PyAnyCAD.DocumentSceneNode_GetDBViewId(self)

    def SetDBViewId(self, val):
        return _PyAnyCAD.DocumentSceneNode_SetDBViewId(self, val)

    def GetAsViewport(self):
        return _PyAnyCAD.DocumentSceneNode_GetAsViewport(self)

    def SetDocument(self, doc, viewId):
        r"""
        设置文档
        :type doc: :py:class:`Document`
        :param doc: 文档
        :type viewId: :py:class:`ObjectId`
        :param viewId: DbViewBase视图Id
        """
        return _PyAnyCAD.DocumentSceneNode_SetDocument(self, doc, viewId)

    @staticmethod
    def Create(document, viewer, dbViewId, asViewport=False):
        return _PyAnyCAD.DocumentSceneNode_Create(document, viewer, dbViewId, asViewport)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.DocumentSceneNode_ComputeBoundingBox(self)

    def FindElement(self, id):
        r"""
        根据ID获取图元对象
        :param item: ID
        :rtype: :py:class:`Element`
        :return: 图元对象
        """
        return _PyAnyCAD.DocumentSceneNode_FindElement(self, id)

    def FindShape(self, *args):
        r"""
        *Overload 1:*

        根据对象ID查找对应的拓扑几何对象
        :type id: :py:class:`ObjectId`
        :param id: ID
        :rtype: :py:class:`TopoShape`
        :return: 拓扑几何对象

        |

        *Overload 2:*

        根据选择信息获取拓扑几何对象
        :type item: :py:class:`PickedItem`
        :param item: 选择信息
        :rtype: :py:class:`TopoShape`
        :return: 拓扑几何对象
        """
        return _PyAnyCAD.DocumentSceneNode_FindShape(self, *args)

    def FindSubShape(self, item):
        r"""
        根据选择信息获取子的拓扑几何对象
        :type item: :py:class:`PickedItem`
        :param item: 选择信息
        :rtype: :py:class:`TopoShape`
        :return: 拓扑几何对象
        """
        return _PyAnyCAD.DocumentSceneNode_FindSubShape(self, item)

# Register DocumentSceneNode in _PyAnyCAD:
_PyAnyCAD.DocumentSceneNode_swigregister(DocumentSceneNode)
EnumRedrawResult_Idle = _PyAnyCAD.EnumRedrawResult_Idle
r"""没有绘制发生"""
EnumRedrawResult_Complete = _PyAnyCAD.EnumRedrawResult_Complete
r"""完成一帧的绘制"""
EnumRedrawResult_Partial = _PyAnyCAD.EnumRedrawResult_Partial
r"""增量绘制，未绘制完整"""
EnumRedrawResult_Animation = _PyAnyCAD.EnumRedrawResult_Animation
r"""绘制完成，但需要继续绘制下一帧，比如动画未完成"""
class ViewContext(object):
    r"""
    Author: Rendering

    视图上下文，用于保存渲染视图的状态.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, viewer):
        _PyAnyCAD.ViewContext_swiginit(self, _PyAnyCAD.new_ViewContext(viewer))
    __swig_destroy__ = _PyAnyCAD.delete_ViewContext

    def GetSceneManager(self):
        return _PyAnyCAD.ViewContext_GetSceneManager(self)

    def GetDocument(self):
        return _PyAnyCAD.ViewContext_GetDocument(self)

    def SetDocument(self, val):
        return _PyAnyCAD.ViewContext_SetDocument(self, val)

    def GetUpdateTicket(self):
        return _PyAnyCAD.ViewContext_GetUpdateTicket(self)

    def SetUpdateTicket(self, val):
        return _PyAnyCAD.ViewContext_SetUpdateTicket(self, val)

    def GetOrbitPivot(self):
        return _PyAnyCAD.ViewContext_GetOrbitPivot(self)

    def GetFixedOrbitPivot(self):
        return _PyAnyCAD.ViewContext_GetFixedOrbitPivot(self)

    def SetFixedOrbitPivot(self, val):
        return _PyAnyCAD.ViewContext_SetFixedOrbitPivot(self, val)

    def GetOrbitAxis(self):
        return _PyAnyCAD.ViewContext_GetOrbitAxis(self)

    def SetOrbitAxis(self, val):
        return _PyAnyCAD.ViewContext_SetOrbitAxis(self, val)

    def GetPanButton(self):
        return _PyAnyCAD.ViewContext_GetPanButton(self)

    def SetPanButton(self, val):
        return _PyAnyCAD.ViewContext_SetPanButton(self, val)

    def GetOrbitButton(self):
        return _PyAnyCAD.ViewContext_GetOrbitButton(self)

    def SetOrbitButton(self, val):
        return _PyAnyCAD.ViewContext_SetOrbitButton(self, val)

    def GetPickButton(self):
        return _PyAnyCAD.ViewContext_GetPickButton(self)

    def SetPickButton(self, val):
        return _PyAnyCAD.ViewContext_SetPickButton(self, val)

    def GetPanKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetPanKeyModifier(self)

    def SetPanKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetPanKeyModifier(self, val)

    def GetOrbitKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetOrbitKeyModifier(self)

    def SetOrbitKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetOrbitKeyModifier(self, val)

    def GetPickKeyModifier(self):
        return _PyAnyCAD.ViewContext_GetPickKeyModifier(self)

    def SetPickKeyModifier(self, val):
        return _PyAnyCAD.ViewContext_SetPickKeyModifier(self, val)

    def GetMultiPickModifier(self):
        return _PyAnyCAD.ViewContext_GetMultiPickModifier(self)

    def SetMultiPickModifier(self, val):
        return _PyAnyCAD.ViewContext_SetMultiPickModifier(self, val)

    def GetRectPick(self):
        return _PyAnyCAD.ViewContext_GetRectPick(self)

    def SetRectPick(self, val):
        return _PyAnyCAD.ViewContext_SetRectPick(self, val)

    def GetFreeOrbit(self):
        return _PyAnyCAD.ViewContext_GetFreeOrbit(self)

    def SetFreeOrbit(self, val):
        return _PyAnyCAD.ViewContext_SetFreeOrbit(self, val)

    def GetZoomByWheel(self):
        return _PyAnyCAD.ViewContext_GetZoomByWheel(self)

    def SetZoomByWheel(self, val):
        return _PyAnyCAD.ViewContext_SetZoomByWheel(self, val)

    def GetSnapGrid(self):
        return _PyAnyCAD.ViewContext_GetSnapGrid(self)

    def SetSnapGrid(self, val):
        return _PyAnyCAD.ViewContext_SetSnapGrid(self, val)

    def GetWorldUp(self):
        return _PyAnyCAD.ViewContext_GetWorldUp(self)

    def SetWorldUp(self, val):
        return _PyAnyCAD.ViewContext_SetWorldUp(self, val)

    def GetViewId(self):
        return _PyAnyCAD.ViewContext_GetViewId(self)

    def SetViewId(self, val):
        return _PyAnyCAD.ViewContext_SetViewId(self, val)

    def IsSame(self, ctx):
        r"""判断是否相等"""
        return _PyAnyCAD.ViewContext_IsSame(self, ctx)

    def Destroy(self):
        r"""释放所有资源。内部调用"""
        return _PyAnyCAD.ViewContext_Destroy(self)

    def GetScene(self):
        r"""
        获取场景
        :rtype: :py:class:`Scene`
        :return: Scene
        """
        return _PyAnyCAD.ViewContext_GetScene(self)

    def GetTempScene(self):
        r"""
        获取管理临时对象的场景
        :rtype: :py:class:`Scene`
        :return: 场景对象
        """
        return _PyAnyCAD.ViewContext_GetTempScene(self)

    def GetScene2D(self):
        r"""
        获取2D场景
        :rtype: :py:class:`Scene`
        :return: Scene2D
        """
        return _PyAnyCAD.ViewContext_GetScene2D(self)

    def GetSelectionManager(self):
        r"""
        获取选择管理器
        :rtype: :py:class:`SelectionManager`
        :return: SelectionManager
        """
        return _PyAnyCAD.ViewContext_GetSelectionManager(self)

    def GetCamera(self):
        r"""
        获取相机
        :rtype: :py:class:`Camera`
        :return: Camera
        """
        return _PyAnyCAD.ViewContext_GetCamera(self)

    def SetOrbitPivot(self, center):
        r"""
        设置旋转中心
        :type center: :py:class:`vec3`
        :param center: 旋转中心坐标.
        """
        return _PyAnyCAD.ViewContext_SetOrbitPivot(self, center)

    def SetUserOrbitPivot(self, center):
        r"""
        设置用户指定的固定旋转中心.
        :type center: :py:class:`vec3`
        :param center: 旋转中心坐标.
        """
        return _PyAnyCAD.ViewContext_SetUserOrbitPivot(self, center)

    def ResetOrbitPivot(self):
        r"""重置以场景中心作为旋转中心。"""
        return _PyAnyCAD.ViewContext_ResetOrbitPivot(self)

    def ClearPickFilters(self):
        r"""清空选择过滤器"""
        return _PyAnyCAD.ViewContext_ClearPickFilters(self)

    def ResetPickFilters(self):
        r"""重置选择过滤器"""
        return _PyAnyCAD.ViewContext_ResetPickFilters(self)

    def AddPickFilter(self, filter):
        r"""
        添加选择过滤条件
        :type filter: int
        :param filter: fiter
        """
        return _PyAnyCAD.ViewContext_AddPickFilter(self, filter)

    def ClearPickFilter(self, filter):
        r"""
        清除指定的选择过滤条件
        :type filter: int
        :param filter: filter
        """
        return _PyAnyCAD.ViewContext_ClearPickFilter(self, filter)

    def SetPickFilter(self, filter):
        r"""
        设置选择过滤条件
        :type filter: int
        :param filter: 可以是多个组合
        """
        return _PyAnyCAD.ViewContext_SetPickFilter(self, filter)

    def GetPickFilter(self):
        r"""
        获取选择过滤条件
        :rtype: int
        :return: 
        """
        return _PyAnyCAD.ViewContext_GetPickFilter(self)

    def ResetDisplayFilters(self):
        r"""重置显示过滤器"""
        return _PyAnyCAD.ViewContext_ResetDisplayFilters(self)

    def SetDisplayFilter(self, filter):
        r"""
        设置显示过滤条件
        :type filter: int
        :param filter:
        """
        return _PyAnyCAD.ViewContext_SetDisplayFilter(self, filter)

    def AddDisplayFilter(self, filter):
        r"""
        添加显示过滤条件
        :type filter: int
        :param filter:
        """
        return _PyAnyCAD.ViewContext_AddDisplayFilter(self, filter)

    def ClearDisplayFilter(self, filter):
        r"""
        清除指定的过滤条件
        :type filter: int
        :param filter: 需要显示的类型
        """
        return _PyAnyCAD.ViewContext_ClearDisplayFilter(self, filter)

    def ClearAll(self):
        r"""清空所有的场景"""
        return _PyAnyCAD.ViewContext_ClearAll(self)

    def ClearSelection(self):
        r"""清空选择集"""
        return _PyAnyCAD.ViewContext_ClearSelection(self)

    def ClearTemp(self):
        r"""清空临时场景"""
        return _PyAnyCAD.ViewContext_ClearTemp(self)

    def SetDisplayMode(self, mode):
        r"""
        设置显示模式
        :type mode: int
        :param mode: 模式
        """
        return _PyAnyCAD.ViewContext_SetDisplayMode(self, mode)

    def GetDisplayMode(self):
        r"""
        获取显示模式
        :rtype: int
        :return: 模式
        """
        return _PyAnyCAD.ViewContext_GetDisplayMode(self)

    def SetDefaultMaterial(self, type, material):
        r"""
        设置默认的材质
        :type type: int
        :param type: 类型
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.ViewContext_SetDefaultMaterial(self, type, material)

    def GetDefaultMaterial(self, type):
        r"""
        获取默认的材质
        :type type: int
        :param type: 类型
        :rtype: :py:class:`MaterialInstance`
        :return: 材质对象
        """
        return _PyAnyCAD.ViewContext_GetDefaultMaterial(self, type)

    def SetPreviewMaterial(self, type, material):
        r"""
        设置默认的材质
        :type type: int
        :param type: 类型
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.ViewContext_SetPreviewMaterial(self, type, material)

    def GetPreviewMaterial(self, type):
        r"""
        获取默认的材质
        :type type: int
        :param type: 类型
        :rtype: :py:class:`MaterialInstance`
        :return: 材质对象
        """
        return _PyAnyCAD.ViewContext_GetPreviewMaterial(self, type)

    def GetTempContext(self):
        r"""
        获取临时的视图上下文
        :rtype: :py:class:`TempViewContext`
        :return: TempViewContext
        """
        return _PyAnyCAD.ViewContext_GetTempContext(self)

    def GetSnapEngine(self):
        r"""
        获取捕捉引擎
        :rtype: :py:class:`SnapEngine`
        :return: 对象
        """
        return _PyAnyCAD.ViewContext_GetSnapEngine(self)

    def GetCursorPosition(self):
        r"""
        获取目前光标的位置
        :rtype: :py:class:`vec2`
        :return: 窗口坐标
        """
        return _PyAnyCAD.ViewContext_GetCursorPosition(self)

    def SetCursorPosition(self, position):
        r"""
        设置光标位置
        :type position: :py:class:`vec2`
        :param position: 窗口坐标
        """
        return _PyAnyCAD.ViewContext_SetCursorPosition(self, position)

    def GetCursorWidget(self):
        r"""
        获取鼠标光标组件
        :rtype: :py:class:`CursorWidget`
        :return: CursorWidget
        """
        return _PyAnyCAD.ViewContext_GetCursorWidget(self)

    def UseEngineCursor(self, enabled):
        r"""
        是否启用引擎自绘制光标
        :type enabled: boolean
        :param enabled: true启用
        """
        return _PyAnyCAD.ViewContext_UseEngineCursor(self, enabled)

    def GetRenderSettings(self):
        r"""
        获取渲染器设置
        :rtype: :py:class:`RenderSettings`
        :return: 
        """
        return _PyAnyCAD.ViewContext_GetRenderSettings(self)

    def Resize(self, width, height):
        return _PyAnyCAD.ViewContext_Resize(self, width, height)

    def RequestUpdate(self, flag):
        r"""
        请求更新场景
        :type flag: int
        :param flag: 状态
        """
        return _PyAnyCAD.ViewContext_RequestUpdate(self, flag)

    def ZoomToExtend(self, ratio=1.2):
        r"""缩放视图适应窗口"""
        return _PyAnyCAD.ViewContext_ZoomToExtend(self, ratio)

    def ZoomToBox(self, bbox, ratio=1.2):
        r"""
        缩放到指定的包围盒
        :type bbox: :py:class:`AABox`
        :param bbox: 包围盒
        :type ratio: float, optional
        :param ratio: 比例。1.2为默认比例
        """
        return _PyAnyCAD.ViewContext_ZoomToBox(self, bbox, ratio)

    def Zoom(self, x, y, delta):
        r"""
        在指定的位置缩放视图，一般是鼠标的位置。
        :type x: int
        :param x: 相对窗口的X坐标
        :type y: int
        :param y: 相对窗口的Y坐标。
        :type delta: int
        :param delta: 缩放步进。
        """
        return _PyAnyCAD.ViewContext_Zoom(self, x, y, delta)

    def Pan(self, offsetX, offsetY):
        r"""
        平移视图
        :type offsetX: int
        :param offsetX: X方向偏移位置
        :type offsetY: int
        :param offsetY: Y方向偏移位置
        """
        return _PyAnyCAD.ViewContext_Pan(self, offsetX, offsetY)

    def Orbit(self, offsetX, offsetY, fixedAxis=False):
        r"""
        旋转视图
        :type offsetX: int
        :param offsetX: X方向
        :type offsetY: int
        :param offsetY: Y方向
        :type fixedAxis: boolean, optional
        :param fixedAxis: 是否固定轴
        """
        return _PyAnyCAD.ViewContext_Orbit(self, offsetX, offsetY, fixedAxis)

    def UpdateWorld(self):
        r"""更新场景的包围盒。内部调用"""
        return _PyAnyCAD.ViewContext_UpdateWorld(self)

    def ScreenPointToWorldPoint(self, x, y, z):
        r"""
        屏幕坐标转换成三维世界坐标
        :type x: int
        :param x: 鼠标的x坐标，相对窗口
        :type y: int
        :param y: 鼠标的y坐标，相对窗口
        :type z: float
        :param z: 深度。取值范围[0, 1]
        :rtype: :py:class:`vec3`
        :return: 三维坐标位置
        """
        return _PyAnyCAD.ViewContext_ScreenPointToWorldPoint(self, x, y, z)

    def WorldPointToSceenPoint(self, pt):
        r"""
        三维世界坐标转换成二维的屏幕坐标
        :type pt: :py:class:`vec3`
        :param pt: 世界坐标
        :rtype: :py:class:`vec3`
        :return: 屏幕坐标。z对应深度信息。
        """
        return _PyAnyCAD.ViewContext_WorldPointToSceenPoint(self, pt)

    def WindowPointToRay(self, x, y):
        r"""
        窗口的坐标转换成射线。
        :type x: int
        :param x: X坐标
        :type y: int
        :param y: Y坐标
        :rtype: :py:class:`Ray`
        :return: 射线对象
        """
        return _PyAnyCAD.ViewContext_WindowPointToRay(self, x, y)

    def SnapPoint(self, x, y):
        r"""
        捕捉三维的位置
        :type x: int
        :param x: 鼠标的x坐标，相对窗口
        :type y: int
        :param y: 鼠标的y坐标，相对窗口
        :rtype: :py:class:`PickedItem`
        :return: 三维坐标
        """
        return _PyAnyCAD.ViewContext_SnapPoint(self, x, y)

    def GetWorkingPlane(self):
        r"""
        获取当前工作平面坐标系
        :rtype: :py:class:`gp_Ax2`
        :return: 坐标系
        """
        return _PyAnyCAD.ViewContext_GetWorkingPlane(self)

# Register ViewContext in _PyAnyCAD:
_PyAnyCAD.ViewContext_swigregister(ViewContext)
class TempViewContext(object):
    r"""
    Author: Rendering

    临时对象管理.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, context):
        _PyAnyCAD.TempViewContext_swiginit(self, _PyAnyCAD.new_TempViewContext(context))
    __swig_destroy__ = _PyAnyCAD.delete_TempViewContext

    def Start(self):
        return _PyAnyCAD.TempViewContext_Start(self)

    def Close(self):
        return _PyAnyCAD.TempViewContext_Close(self)

    def DrawRectangle2D(self, start, end):
        return _PyAnyCAD.TempViewContext_DrawRectangle2D(self, start, end)

    def ShowRectangle2D(self, bShow):
        return _PyAnyCAD.TempViewContext_ShowRectangle2D(self, bShow)

    def ShowPoint(self, pt):
        return _PyAnyCAD.TempViewContext_ShowPoint(self, pt)

    def DrawLine(self, start, end):
        return _PyAnyCAD.TempViewContext_DrawLine(self, start, end)

    def AddNode(self, node):
        return _PyAnyCAD.TempViewContext_AddNode(self, node)

    def RemoveNode(self, node):
        return _PyAnyCAD.TempViewContext_RemoveNode(self, node)

    def AddPoint(self, pt):
        return _PyAnyCAD.TempViewContext_AddPoint(self, pt)

    def Clear(self):
        return _PyAnyCAD.TempViewContext_Clear(self)

    def Remove(self, userId):
        return _PyAnyCAD.TempViewContext_Remove(self, userId)

    def SetPickFilter(self, filter):
        return _PyAnyCAD.TempViewContext_SetPickFilter(self, filter)

# Register TempViewContext in _PyAnyCAD:
_PyAnyCAD.TempViewContext_swigregister(TempViewContext)
class ScreenShot(object):
    r"""
    Author: Rendering

    屏幕快照对象.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, img, camera):
        _PyAnyCAD.ScreenShot_swiginit(self, _PyAnyCAD.new_ScreenShot(img, camera))
    __swig_destroy__ = _PyAnyCAD.delete_ScreenShot

    def GetImage(self):
        return _PyAnyCAD.ScreenShot_GetImage(self)

    def GetCamera(self):
        return _PyAnyCAD.ScreenShot_GetCamera(self)

    def ReadColor(self, *args):
        return _PyAnyCAD.ScreenShot_ReadColor(self, *args)

    def ToBGR(self):
        r"""转成BGR格式。"""
        return _PyAnyCAD.ScreenShot_ToBGR(self)

    def CreateMemoryImage(self):
        r"""
        转成内存字节流
        :rtype: std::vector< uint8_t,std::allocator< uint8_t > >
        :return: 
        """
        return _PyAnyCAD.ScreenShot_CreateMemoryImage(self)

    def SampleGBR(self, worldPt, offset):
        r"""
        Get the RGB color
        :type worldPt: :py:class:`vec3`
        :param worldPt: the position
        :type offset: int
        :param offset: the offset
        :rtype: int
        :return: 0: R, 1:B, 2:G
        """
        return _PyAnyCAD.ScreenShot_SampleGBR(self, worldPt, offset)

    def SaveFile(self, *args):
        r"""
        *Overload 1:*

        保存文件
        :type fileName: string
        :param fileName: 文件名称
        :rtype: boolean
        :return: 是否成功

        |

        *Overload 2:*

        根据指定的大小来保存文件
        :type fileName: string
        :param fileName: 文件名
        :type width: int
        :param width: 宽度
        :type height: int
        :param height: 高度
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ScreenShot_SaveFile(self, *args)

# Register ScreenShot in _PyAnyCAD:
_PyAnyCAD.ScreenShot_swigregister(ScreenShot)
class SnapEngine(object):
    r"""
    Author: Interaction
    SnapEngine.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SnapEngine_swiginit(self, _PyAnyCAD.new_SnapEngine())
    __swig_destroy__ = _PyAnyCAD.delete_SnapEngine

    def Run(self, ctx, x, y):
        return _PyAnyCAD.SnapEngine_Run(self, ctx, x, y)

    def PickEdge(self, ctx, x, y):
        return _PyAnyCAD.SnapEngine_PickEdge(self, ctx, x, y)

    def PickFace(self, ctx, x, y):
        return _PyAnyCAD.SnapEngine_PickFace(self, ctx, x, y)

    def DeleteSelection(self, ctx):
        return _PyAnyCAD.SnapEngine_DeleteSelection(self, ctx)

# Register SnapEngine in _PyAnyCAD:
_PyAnyCAD.SnapEngine_swigregister(SnapEngine)
EnumKeyModifier_KMOD_NONE = _PyAnyCAD.EnumKeyModifier_KMOD_NONE
EnumKeyModifier_KMOD_LSHIFT = _PyAnyCAD.EnumKeyModifier_KMOD_LSHIFT
EnumKeyModifier_KMOD_RSHIFT = _PyAnyCAD.EnumKeyModifier_KMOD_RSHIFT
EnumKeyModifier_KMOD_LCTRL = _PyAnyCAD.EnumKeyModifier_KMOD_LCTRL
EnumKeyModifier_KMOD_RCTRL = _PyAnyCAD.EnumKeyModifier_KMOD_RCTRL
EnumKeyModifier_KMOD_LALT = _PyAnyCAD.EnumKeyModifier_KMOD_LALT
EnumKeyModifier_KMOD_RALT = _PyAnyCAD.EnumKeyModifier_KMOD_RALT
EnumKeyModifier_KMOD_LGUI = _PyAnyCAD.EnumKeyModifier_KMOD_LGUI
EnumKeyModifier_KMOD_RGUI = _PyAnyCAD.EnumKeyModifier_KMOD_RGUI
EnumKeyModifier_KMOD_NUM = _PyAnyCAD.EnumKeyModifier_KMOD_NUM
EnumKeyModifier_KMOD_CAPS = _PyAnyCAD.EnumKeyModifier_KMOD_CAPS
EnumKeyModifier_KMOD_MODE = _PyAnyCAD.EnumKeyModifier_KMOD_MODE
EnumKeyModifier_KMOD_RESERVED = _PyAnyCAD.EnumKeyModifier_KMOD_RESERVED
EnumKeyCode_Zero = _PyAnyCAD.EnumKeyCode_Zero
EnumKeyCode_KEY_DELETE = _PyAnyCAD.EnumKeyCode_KEY_DELETE
EnumKeyCode_KEY_RETURN = _PyAnyCAD.EnumKeyCode_KEY_RETURN
EnumKeyCode_KEY_ESCAPE = _PyAnyCAD.EnumKeyCode_KEY_ESCAPE
EnumKeyCode_KEY_BACKSPACE = _PyAnyCAD.EnumKeyCode_KEY_BACKSPACE
EnumKeyCode_KEY_TAB = _PyAnyCAD.EnumKeyCode_KEY_TAB
EnumKeyCode_KEY_SPACE = _PyAnyCAD.EnumKeyCode_KEY_SPACE
EnumKeyCode_KEY_EXCLAIM = _PyAnyCAD.EnumKeyCode_KEY_EXCLAIM
EnumKeyCode_KEY_QUOTEDBL = _PyAnyCAD.EnumKeyCode_KEY_QUOTEDBL
EnumKeyCode_KEY_HASH = _PyAnyCAD.EnumKeyCode_KEY_HASH
EnumKeyCode_KEY_PERCENT = _PyAnyCAD.EnumKeyCode_KEY_PERCENT
EnumKeyCode_KEY_DOLLAR = _PyAnyCAD.EnumKeyCode_KEY_DOLLAR
EnumKeyCode_KEY_AMPERSAND = _PyAnyCAD.EnumKeyCode_KEY_AMPERSAND
EnumKeyCode_KEY_QUOTE = _PyAnyCAD.EnumKeyCode_KEY_QUOTE
EnumKeyCode_KEY_LEFTPAREN = _PyAnyCAD.EnumKeyCode_KEY_LEFTPAREN
EnumKeyCode_KEY_RIGHTPAREN = _PyAnyCAD.EnumKeyCode_KEY_RIGHTPAREN
EnumKeyCode_KEY_ASTERISK = _PyAnyCAD.EnumKeyCode_KEY_ASTERISK
EnumKeyCode_KEY_PLUS = _PyAnyCAD.EnumKeyCode_KEY_PLUS
EnumKeyCode_KEY_COMMA = _PyAnyCAD.EnumKeyCode_KEY_COMMA
EnumKeyCode_KEY_MINUS = _PyAnyCAD.EnumKeyCode_KEY_MINUS
EnumKeyCode_KEY_PERIOD = _PyAnyCAD.EnumKeyCode_KEY_PERIOD
EnumKeyCode_KEY_SLASH = _PyAnyCAD.EnumKeyCode_KEY_SLASH
EnumKeyCode_KEY_0 = _PyAnyCAD.EnumKeyCode_KEY_0
EnumKeyCode_KEY_1 = _PyAnyCAD.EnumKeyCode_KEY_1
EnumKeyCode_KEY_2 = _PyAnyCAD.EnumKeyCode_KEY_2
EnumKeyCode_KEY_3 = _PyAnyCAD.EnumKeyCode_KEY_3
EnumKeyCode_KEY_4 = _PyAnyCAD.EnumKeyCode_KEY_4
EnumKeyCode_KEY_5 = _PyAnyCAD.EnumKeyCode_KEY_5
EnumKeyCode_KEY_6 = _PyAnyCAD.EnumKeyCode_KEY_6
EnumKeyCode_KEY_7 = _PyAnyCAD.EnumKeyCode_KEY_7
EnumKeyCode_KEY_8 = _PyAnyCAD.EnumKeyCode_KEY_8
EnumKeyCode_KEY_9 = _PyAnyCAD.EnumKeyCode_KEY_9
EnumKeyCode_KEY_COLON = _PyAnyCAD.EnumKeyCode_KEY_COLON
EnumKeyCode_KEY_SEMICOLON = _PyAnyCAD.EnumKeyCode_KEY_SEMICOLON
EnumKeyCode_KEY_LESS = _PyAnyCAD.EnumKeyCode_KEY_LESS
EnumKeyCode_KEY_EQUALS = _PyAnyCAD.EnumKeyCode_KEY_EQUALS
EnumKeyCode_KEY_GREATER = _PyAnyCAD.EnumKeyCode_KEY_GREATER
EnumKeyCode_KEY_QUESTION = _PyAnyCAD.EnumKeyCode_KEY_QUESTION
EnumKeyCode_KEY_AT = _PyAnyCAD.EnumKeyCode_KEY_AT
EnumKeyCode_KEY_LEFTBRACKET = _PyAnyCAD.EnumKeyCode_KEY_LEFTBRACKET
EnumKeyCode_KEY_BACKSLASH = _PyAnyCAD.EnumKeyCode_KEY_BACKSLASH
EnumKeyCode_KEY_RIGHTBRACKET = _PyAnyCAD.EnumKeyCode_KEY_RIGHTBRACKET
EnumKeyCode_KEY_CARET = _PyAnyCAD.EnumKeyCode_KEY_CARET
EnumKeyCode_KEY_UNDERSCORE = _PyAnyCAD.EnumKeyCode_KEY_UNDERSCORE
EnumKeyCode_KEY_BACKQUOTE = _PyAnyCAD.EnumKeyCode_KEY_BACKQUOTE
EnumKeyCode_KEY_a = _PyAnyCAD.EnumKeyCode_KEY_a
EnumKeyCode_KEY_b = _PyAnyCAD.EnumKeyCode_KEY_b
EnumKeyCode_KEY_c = _PyAnyCAD.EnumKeyCode_KEY_c
EnumKeyCode_KEY_d = _PyAnyCAD.EnumKeyCode_KEY_d
EnumKeyCode_KEY_e = _PyAnyCAD.EnumKeyCode_KEY_e
EnumKeyCode_KEY_f = _PyAnyCAD.EnumKeyCode_KEY_f
EnumKeyCode_KEY_g = _PyAnyCAD.EnumKeyCode_KEY_g
EnumKeyCode_KEY_h = _PyAnyCAD.EnumKeyCode_KEY_h
EnumKeyCode_KEY_i = _PyAnyCAD.EnumKeyCode_KEY_i
EnumKeyCode_KEY_j = _PyAnyCAD.EnumKeyCode_KEY_j
EnumKeyCode_KEY_k = _PyAnyCAD.EnumKeyCode_KEY_k
EnumKeyCode_KEY_l = _PyAnyCAD.EnumKeyCode_KEY_l
EnumKeyCode_KEY_m = _PyAnyCAD.EnumKeyCode_KEY_m
EnumKeyCode_KEY_n = _PyAnyCAD.EnumKeyCode_KEY_n
EnumKeyCode_KEY_o = _PyAnyCAD.EnumKeyCode_KEY_o
EnumKeyCode_KEY_p = _PyAnyCAD.EnumKeyCode_KEY_p
EnumKeyCode_KEY_q = _PyAnyCAD.EnumKeyCode_KEY_q
EnumKeyCode_KEY_r = _PyAnyCAD.EnumKeyCode_KEY_r
EnumKeyCode_KEY_s = _PyAnyCAD.EnumKeyCode_KEY_s
EnumKeyCode_KEY_t = _PyAnyCAD.EnumKeyCode_KEY_t
EnumKeyCode_KEY_u = _PyAnyCAD.EnumKeyCode_KEY_u
EnumKeyCode_KEY_v = _PyAnyCAD.EnumKeyCode_KEY_v
EnumKeyCode_KEY_w = _PyAnyCAD.EnumKeyCode_KEY_w
EnumKeyCode_KEY_x = _PyAnyCAD.EnumKeyCode_KEY_x
EnumKeyCode_KEY_y = _PyAnyCAD.EnumKeyCode_KEY_y
EnumKeyCode_KEY_z = _PyAnyCAD.EnumKeyCode_KEY_z
EnumEditorCode_Ignored = _PyAnyCAD.EnumEditorCode_Ignored
EnumEditorCode_Processed = _PyAnyCAD.EnumEditorCode_Processed
EnumEditorCode_Failed = _PyAnyCAD.EnumEditorCode_Failed
EnumEditorCode_Exit = _PyAnyCAD.EnumEditorCode_Exit
EnumMouseButton_Zero = _PyAnyCAD.EnumMouseButton_Zero
EnumMouseButton_Left = _PyAnyCAD.EnumMouseButton_Left
EnumMouseButton_Middle = _PyAnyCAD.EnumMouseButton_Middle
EnumMouseButton_Right = _PyAnyCAD.EnumMouseButton_Right
EnumMouseButton_LeftRight = _PyAnyCAD.EnumMouseButton_LeftRight
EnumMouseButton_LeftMiddle = _PyAnyCAD.EnumMouseButton_LeftMiddle
EnumMouseButton_RightMiddle = _PyAnyCAD.EnumMouseButton_RightMiddle
EnumMouseButton_All = _PyAnyCAD.EnumMouseButton_All
class InputEvent(object):
    r"""
    Author: Interaction
    Used to get mouse/keyboard input.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.InputEvent_swiginit(self, _PyAnyCAD.new_InputEvent())
    __swig_destroy__ = _PyAnyCAD.delete_InputEvent

    def GetX(self):
        return _PyAnyCAD.InputEvent_GetX(self)

    def SetX(self, val):
        return _PyAnyCAD.InputEvent_SetX(self, val)

    def GetY(self):
        return _PyAnyCAD.InputEvent_GetY(self)

    def SetY(self, val):
        return _PyAnyCAD.InputEvent_SetY(self, val)

    def GetFlags(self):
        return _PyAnyCAD.InputEvent_GetFlags(self)

    def SetFlags(self, val):
        return _PyAnyCAD.InputEvent_SetFlags(self, val)

    def GetButtons(self):
        return _PyAnyCAD.InputEvent_GetButtons(self)

    def SetButtons(self, val):
        return _PyAnyCAD.InputEvent_SetButtons(self, val)

    def GetKey(self):
        return _PyAnyCAD.InputEvent_GetKey(self)

    def SetKey(self, val):
        return _PyAnyCAD.InputEvent_SetKey(self, val)

    def GetVKey(self):
        return _PyAnyCAD.InputEvent_GetVKey(self)

    def SetVKey(self, val):
        return _PyAnyCAD.InputEvent_SetVKey(self, val)

    def GetClicks(self):
        return _PyAnyCAD.InputEvent_GetClicks(self)

    def SetClicks(self, val):
        return _PyAnyCAD.InputEvent_SetClicks(self, val)

    def GetTouch(self):
        return _PyAnyCAD.InputEvent_GetTouch(self)

    def SetTouch(self, val):
        return _PyAnyCAD.InputEvent_SetTouch(self, val)

    def SetCtrlKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetCtrlKey(self, enabled)

    def HasCtrlKey(self):
        return _PyAnyCAD.InputEvent_HasCtrlKey(self)

    def SetAltKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetAltKey(self, enabled)

    def HasAltKey(self):
        return _PyAnyCAD.InputEvent_HasAltKey(self)

    def SetShiftKey(self, enabled):
        return _PyAnyCAD.InputEvent_SetShiftKey(self, enabled)

    def HasShiftKey(self):
        return _PyAnyCAD.InputEvent_HasShiftKey(self)

    def SetLeftButtonDown(self):
        return _PyAnyCAD.InputEvent_SetLeftButtonDown(self)

    def SetMiddleButtonDown(self):
        return _PyAnyCAD.InputEvent_SetMiddleButtonDown(self)

    def SetRightButtonDown(self):
        return _PyAnyCAD.InputEvent_SetRightButtonDown(self)

    def TestFlags(self, button, key):
        return _PyAnyCAD.InputEvent_TestFlags(self, button, key)

# Register InputEvent in _PyAnyCAD:
_PyAnyCAD.InputEvent_swigregister(InputEvent)
class MultiTouchEvent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.MultiTouchEvent_swiginit(self, _PyAnyCAD.new_MultiTouchEvent())

    def GetCount(self):
        return _PyAnyCAD.MultiTouchEvent_GetCount(self)

    def GetPoint(self, idx):
        return _PyAnyCAD.MultiTouchEvent_GetPoint(self, idx)

    def AddPoint(self, positon):
        return _PyAnyCAD.MultiTouchEvent_AddPoint(self, positon)
    __swig_destroy__ = _PyAnyCAD.delete_MultiTouchEvent

# Register MultiTouchEvent in _PyAnyCAD:
_PyAnyCAD.MultiTouchEvent_swigregister(MultiTouchEvent)
class Editor(object):
    r"""
    Author: Interaction
    基于鼠标、键盘、Touch等方式输入进行交互编辑的基类.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Editor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.Editor_swiginit(self, _PyAnyCAD.new_Editor(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_Editor

    def GetName(self):
        return _PyAnyCAD.Editor_GetName(self)

    def GetSubEditor(self):
        return _PyAnyCAD.Editor_GetSubEditor(self)

    def SetSubEditor(self, val):
        return _PyAnyCAD.Editor_SetSubEditor(self, val)

    @staticmethod
    def CreateMode():
        r"""定义标准参数名称"""
        return _PyAnyCAD.Editor_CreateMode()

    @staticmethod
    def InputName():
        return _PyAnyCAD.Editor_InputName()

    @staticmethod
    def InputMethod():
        return _PyAnyCAD.Editor_InputMethod()

    @staticmethod
    def EditStep():
        return _PyAnyCAD.Editor_EditStep()

    @staticmethod
    def SelectionList():
        return _PyAnyCAD.Editor_SelectionList()

    def SetName(self, name):
        r"""设置名称"""
        return _PyAnyCAD.Editor_SetName(self, name)

    def Start(self, ctx):
        r"""
        开始
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_Start(self, ctx)

    def Finish(self, ctx):
        r"""
        结束
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.Editor_Finish(self, ctx)

    def Reset(self, ctx):
        r"""
        重置
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.Editor_Reset(self, ctx)

    def Commit(self, ctx):
        r"""
        提交修改
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下问
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.Editor_Commit(self, ctx)

    def OnMouseDown(self, ctx, evt):
        r"""
        鼠标按下
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        r"""
        鼠标松开
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        r"""
        鼠标移动
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnMouseMove(self, ctx, evt)

    def OnMouseWheel(self, ctx, evt, delta):
        r"""
        鼠标中键滚动
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :type delta: int
        :param delta: 变化量
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnMouseWheel(self, ctx, evt, delta)

    def OnKeyDown(self, ctx, evt):
        r"""
        键盘按下
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnKeyDown(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        r"""
        键盘松开
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`InputEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnKeyUp(self, ctx, evt)

    def OnMultiTouch(self, ctx, evt):
        r"""
        多点触摸
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`MultiTouchEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnMultiTouch(self, ctx, evt)

    def OnBeginMultiTouch(self, ctx, evt):
        r"""
        开始多点触摸
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`MultiTouchEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnBeginMultiTouch(self, ctx, evt)

    def OnEndMultiTouch(self, ctx, evt):
        r"""
        结束多点触摸
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type evt: :py:class:`MultiTouchEvent`
        :param evt: 事件
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnEndMultiTouch(self, ctx, evt)

    def OnInput(self, ctx, input):
        r"""
        应用输入参数，如输入框输入
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type input: :py:class:`ParameterDict`
        :param input: 参数
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnInput(self, ctx, input)

    def OnAction(self, ctx, name, parameters):
        r"""
        执行动作
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type name: string
        :param name: 名称
        :type parameters: :py:class:`ParameterDict`
        :param parameters: 参数
        :rtype: int
        :return: 状态
        """
        return _PyAnyCAD.Editor_OnAction(self, ctx, name, parameters)

    def BeforeRendering(self, ctx):
        r"""
        渲染前调用
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.Editor_BeforeRendering(self, ctx)

    def AfterRendering(self, ctx):
        r"""
        渲染后调用
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.Editor_AfterRendering(self, ctx)

    def OnDocumentChanged(self, ctx, args):
        r"""
        文档发生变化
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type args: :py:class:`DocumentEventArgs`
        :param args: 参数
        """
        return _PyAnyCAD.Editor_OnDocumentChanged(self, ctx, args)

    def OnSelectionChanged(self, ctx):
        r"""
        选择集发生变化
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.Editor_OnSelectionChanged(self, ctx)

    def NotifyParamsChanged(self, *args):
        r"""
        通知参数发生变化
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type propertyName: string, optional
        :param propertyName: 变化的属性，可为空。
        """
        return _PyAnyCAD.Editor_NotifyParamsChanged(self, *args)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_Editor(self)
        return weakref.proxy(self)

# Register Editor in _PyAnyCAD:
_PyAnyCAD.Editor_swigregister(Editor)
class EditMode(object):
    r"""
    Author: Interaction
    用来管理Editor.
    See also: Editor
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == EditMode:
            _self = None
        else:
            _self = self
        _PyAnyCAD.EditMode_swiginit(self, _PyAnyCAD.new_EditMode(_self, *args))
    __swig_destroy__ = _PyAnyCAD.delete_EditMode

    def GetName(self):
        return _PyAnyCAD.EditMode_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.EditMode_SetName(self, val)

    def GetDefaultEditor(self):
        return _PyAnyCAD.EditMode_GetDefaultEditor(self)

    def SetDefaultEditor(self, val):
        return _PyAnyCAD.EditMode_SetDefaultEditor(self, val)

    def GetActiveEditor(self):
        return _PyAnyCAD.EditMode_GetActiveEditor(self)

    def Start(self, ctx):
        r"""
        开始EditMode
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.EditMode_Start(self, ctx)

    def Finish(self, ctx):
        r"""
        结束EditMode
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.EditMode_Finish(self, ctx)

    def Push(self, editor, ctx):
        r"""
        压栈Editor
        :type editor: :py:class:`Editor`
        :param editor: 新的编辑器
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.EditMode_Push(self, editor, ctx)

    def Pop(self, ctx):
        r"""
        出栈
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.EditMode_Pop(self, ctx)

    def Clear(self, ctx):
        r"""
        情况压栈的Editor
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        """
        return _PyAnyCAD.EditMode_Clear(self, ctx)

    def OnTime(self, ctx, timeTick):
        return _PyAnyCAD.EditMode_OnTime(self, ctx, timeTick)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMouseMove(self, ctx, evt)

    def OnMouseWheel(self, ctx, evt, delta):
        return _PyAnyCAD.EditMode_OnMouseWheel(self, ctx, evt, delta)

    def OnKeyDown(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnKeyDown(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnKeyUp(self, ctx, evt)

    def OnBeginMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnBeginMultiTouch(self, ctx, evt)

    def OnMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnMultiTouch(self, ctx, evt)

    def OnEndMultiTouch(self, ctx, evt):
        return _PyAnyCAD.EditMode_OnEndMultiTouch(self, ctx, evt)

    def OnInput(self, ctx, parameters):
        return _PyAnyCAD.EditMode_OnInput(self, ctx, parameters)

    def OnAction(self, ctx, name, parameters):
        return _PyAnyCAD.EditMode_OnAction(self, ctx, name, parameters)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.EditMode_BeforeRendering(self, ctx)

    def AfterRendering(self, ctx):
        return _PyAnyCAD.EditMode_AfterRendering(self, ctx)

    def OnDocumentChanged(self, ctx, args):
        r"""
        文档更新
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type args: :py:class:`DocumentEventArgs`
        :param args: 消息
        """
        return _PyAnyCAD.EditMode_OnDocumentChanged(self, ctx, args)

    def OnSelectionChanged(self, ctx):
        return _PyAnyCAD.EditMode_OnSelectionChanged(self, ctx)

    def ComputePivotPoint(self, ctx, x, y):
        return _PyAnyCAD.EditMode_ComputePivotPoint(self, ctx, x, y)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_EditMode(self)
        return weakref.proxy(self)

# Register EditMode in _PyAnyCAD:
_PyAnyCAD.EditMode_swigregister(EditMode)
class GuiRenderer(object):
    r"""
    Author: Rendering
    Gui界面外挂. 内部使用
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == GuiRenderer:
            _self = None
        else:
            _self = self
        _PyAnyCAD.GuiRenderer_swiginit(self, _PyAnyCAD.new_GuiRenderer(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_GuiRenderer

    def GetSlaveGui(self):
        return _PyAnyCAD.GuiRenderer_GetSlaveGui(self)

    def SetSlaveGui(self, val):
        return _PyAnyCAD.GuiRenderer_SetSlaveGui(self, val)

    def GetFocused(self):
        return _PyAnyCAD.GuiRenderer_GetFocused(self)

    def Initialize(self, pVewer):
        return _PyAnyCAD.GuiRenderer_Initialize(self, pVewer)

    def Destroy(self):
        return _PyAnyCAD.GuiRenderer_Destroy(self)

    def DrawGUI(self, viewer):
        return _PyAnyCAD.GuiRenderer_DrawGUI(self, viewer)

    def OnTimer(self, pViewer, tick):
        return _PyAnyCAD.GuiRenderer_OnTimer(self, pViewer, tick)

    def OnPostDraw(self, pViewer, tick):
        return _PyAnyCAD.GuiRenderer_OnPostDraw(self, pViewer, tick)

    def OnDrawUI(self, viewer):
        return _PyAnyCAD.GuiRenderer_OnDrawUI(self, viewer)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_GuiRenderer(self)
        return weakref.proxy(self)

# Register GuiRenderer in _PyAnyCAD:
_PyAnyCAD.GuiRenderer_swigregister(GuiRenderer)
class Viewer(object):
    r"""
    三维渲染视图
    Author: Rendering
    渲染视图的基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_Viewer

    def GetUuid(self):
        return _PyAnyCAD.Viewer_GetUuid(self)

    def GetWidth(self):
        return _PyAnyCAD.Viewer_GetWidth(self)

    def GetHeight(self):
        return _PyAnyCAD.Viewer_GetHeight(self)

    def GetZoomFactor(self):
        return _PyAnyCAD.Viewer_GetZoomFactor(self)

    def SetZoomFactor(self, val):
        return _PyAnyCAD.Viewer_SetZoomFactor(self, val)

    def GetFPS(self):
        return _PyAnyCAD.Viewer_GetFPS(self)

    def SetFPS(self, val):
        return _PyAnyCAD.Viewer_SetFPS(self, val)

    def GetViewMode2D(self):
        return _PyAnyCAD.Viewer_GetViewMode2D(self)

    def SetViewMode2D(self, val):
        return _PyAnyCAD.Viewer_SetViewMode2D(self, val)

    def GetCameraDriver(self):
        return _PyAnyCAD.Viewer_GetCameraDriver(self)

    def SetCameraDriver(self, val):
        return _PyAnyCAD.Viewer_SetCameraDriver(self, val)

    def Destroy(self):
        r"""内部方法。释放资源"""
        return _PyAnyCAD.Viewer_Destroy(self)

    def Clear(self):
        r"""清空场景"""
        return _PyAnyCAD.Viewer_Clear(self)

    def SetDocument(self, doc):
        r"""
        设置关联的文档
        :type doc: :py:class:`Document`
        :param doc: 文档对象
        """
        return _PyAnyCAD.Viewer_SetDocument(self, doc)

    def GetDocument(self):
        r"""
        获取文档对象
        :rtype: :py:class:`Document`
        :return: 文档对象
        """
        return _PyAnyCAD.Viewer_GetDocument(self)

    def SetViewId(self, viewId):
        r"""
        设置View的Id
        :type viewId: :py:class:`ObjectId`
        :param viewId: ID
        """
        return _PyAnyCAD.Viewer_SetViewId(self, viewId)

    def GetViewId(self):
        r"""
        获取View的ID
        :rtype: :py:class:`ObjectId`
        :return: Id
        """
        return _PyAnyCAD.Viewer_GetViewId(self)

    def PushEditMode(self, name, editor):
        r"""
        设置编辑模式, editor作为默认的编辑器
        :type name: string
        :param name: 名称
        :type editor: :py:class:`Editor`
        :param editor: EditMode对象
        """
        return _PyAnyCAD.Viewer_PushEditMode(self, name, editor)

    def PopEditMode(self):
        r"""EditMode出栈。"""
        return _PyAnyCAD.Viewer_PopEditMode(self)

    def InternalPushEditor(self, editor, bClearOld):
        r"""
        内部方法，禁止调用
        :type editor: :py:class:`Editor`
        :param editor: 编辑器
        :type bClearOld: boolean
        :param bClearOld: 是否清空
        See also: IRenderView.SetEditor
        """
        return _PyAnyCAD.Viewer_InternalPushEditor(self, editor, bClearOld)

    def GetEditor(self):
        r"""
        得到Editor
        :rtype: :py:class:`Editor`
        :return: Editor
        """
        return _PyAnyCAD.Viewer_GetEditor(self)

    def ClearEditor(self):
        r"""清空设置的编辑器。"""
        return _PyAnyCAD.Viewer_ClearEditor(self)

    def GetTimeTicks(self):
        r"""
        获取时间间隔
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.Viewer_GetTimeTicks(self)

    def OnTime(self, timeTick):
        r"""
        时间事件处理。
        :type timeTick: float
        :param timeTick:
        """
        return _PyAnyCAD.Viewer_OnTime(self, timeTick)

    def Run(self, gui):
        r"""
        以模态运行。循环执行，直至程序退出。仅在独立窗口模式下调用
        :type gui: :py:class:`GuiRenderer`
        :param gui: 界面外挂，可为null。
        """
        return _PyAnyCAD.Viewer_Run(self, gui)

    def ProcessEvent(self, gui):
        r"""
        处理消息。。仅在独立窗口模式下调用
        :type gui: :py:class:`GuiRenderer`
        :param gui: 界面外挂，可为null。
        """
        return _PyAnyCAD.Viewer_ProcessEvent(self, gui)

    def Redraw(self, timeTick, force=False):
        r"""
        绘制画面
        :type timeTick: float
        :param timeTick: 时间间隔
        :param forece: 强制绘制，默认false
        :rtype: int
        :return: 0 if no drawing needed. 1：绘制完成 2：增量绘制 3：相机动画
        """
        return _PyAnyCAD.Viewer_Redraw(self, timeTick, force)

    def RequestUpdate(self, flag):
        r"""
        请求更新视图
        :type flag: int
        :param flag: 更新标记
        """
        return _PyAnyCAD.Viewer_RequestUpdate(self, flag)

    def GetContext(self):
        r"""
        获取视图上下文。
        :rtype: :py:class:`ViewContext`
        :return: 返回ViewContext
        """
        return _PyAnyCAD.Viewer_GetContext(self)

    def ZoomToExtend(self, ratio=1.2):
        r"""缩放视图适应窗口"""
        return _PyAnyCAD.Viewer_ZoomToExtend(self, ratio)

    def ZoomToBox(self, bbox, ratio=1.2):
        r"""
        缩放到指定的包围盒
        :type bbox: :py:class:`AABox`
        :param bbox: 包围盒
        :type ratio: float, optional
        :param ratio: 比例。1.2为默认比例
        """
        return _PyAnyCAD.Viewer_ZoomToBox(self, bbox, ratio)

    def CreateScreenShot(self):
        r"""
        创建屏幕截图
        :rtype: :py:class:`ScreenShot`
        :return: ScreenShot对象
        """
        return _PyAnyCAD.Viewer_CreateScreenShot(self)

    def SetBackgroundColor(self, clr):
        r"""
        设置背景颜色
        :type clr: :py:class:`vec4`
        :param clr: 颜色
        """
        return _PyAnyCAD.Viewer_SetBackgroundColor(self, clr)

    def SetBackground(self, background):
        r"""
        设置背景对象。
        :type background: :py:class:`Background`
        :param background: 对象
        """
        return _PyAnyCAD.Viewer_SetBackground(self, background)

    def GetBackground(self):
        r"""
        获取当前的背景对象
        :rtype: :py:class:`Background`
        :return: Background
        """
        return _PyAnyCAD.Viewer_GetBackground(self)

    def SetCoordinateGrid(self, grid):
        r"""
        设置工作轴网
        :type grid: :py:class:`CoordinateGridWidget`
        :param grid: 轴网对象
        """
        return _PyAnyCAD.Viewer_SetCoordinateGrid(self, grid)

    def SetWorkingPlane(self, ax):
        r"""
        设置工作平面坐标系
        :type ax: :py:class:`gp_Ax2`
        :param ax: 坐标系
        """
        return _PyAnyCAD.Viewer_SetWorkingPlane(self, ax)

    def GetWorkingPlane(self):
        r"""
        获取工作平面坐标系
        :rtype: :py:class:`gp_Ax2`
        :return: 坐标系
        """
        return _PyAnyCAD.Viewer_GetWorkingPlane(self)

    def GetCoordinateGrid(self):
        r"""
        获取轴网组件
        :rtype: :py:class:`CoordinateGridWidget`
        :return: CoordinateGridWidget
        """
        return _PyAnyCAD.Viewer_GetCoordinateGrid(self)

    def ShowCoordinateGrid(self, bShow):
        r"""
        设置轴网可见性
        :type bShow: boolean
        :param bShow:
        """
        return _PyAnyCAD.Viewer_ShowCoordinateGrid(self, bShow)

    def SetCoordinateWidget(self, type):
        r"""
        设置坐标系组件样式
        :type type: int
        :param type: 类型
        """
        return _PyAnyCAD.Viewer_SetCoordinateWidget(self, type)

    def GetCoordinateWidget(self):
        return _PyAnyCAD.Viewer_GetCoordinateWidget(self)

    def SetCoordinateWidgetPosition(self, position):
        r"""
        设置坐标系组件的位置
        :type position: uint8_t
        :param position: 位置序号. [0, 1, 2, 3]
        """
        return _PyAnyCAD.Viewer_SetCoordinateWidgetPosition(self, position)

    def SetCoordinateWidgetText(self, textX, textY, textZ):
        r"""
        设置坐标系三个轴的名称
        :type textX: anycore::StringW
        :param textX: X轴名称
        :type textY: anycore::StringW
        :param textY: Y轴名称
        :type textZ: anycore::StringW
        :param textZ: Z轴名称
        """
        return _PyAnyCAD.Viewer_SetCoordinateWidgetText(self, textX, textY, textZ)

    def SetRulerWidget(self, type):
        r"""
        设置刻度尺，仅在ViewMode2D开启时有效
        :type type: int
        :param type: 刻度尺类型，支持下述选项：
            		  Empty: 无刻度尺
            		  Default: 默认刻度尺样式
        """
        return _PyAnyCAD.Viewer_SetRulerWidget(self, type)

    def ScreenPointToWorldPoint(self, x, y, z):
        r"""
        屏幕坐标转换成三维世界坐标
        :type x: int
        :param x: 鼠标的x坐标，相对窗口
        :type y: int
        :param y: 鼠标的y坐标，相对窗口
        :type z: float
        :param z: 深度。取值范围[0, 1]
        :rtype: :py:class:`vec3`
        :return: 三维坐标位置
        """
        return _PyAnyCAD.Viewer_ScreenPointToWorldPoint(self, x, y, z)

    def WorldPointToSceenPoint(self, pt):
        r"""
        三维世界坐标转换成二维的屏幕坐标
        :type pt: :py:class:`vec3`
        :param pt: 世界坐标
        :rtype: :py:class:`vec3`
        :return: 屏幕坐标。z对应深度信息。
        """
        return _PyAnyCAD.Viewer_WorldPointToSceenPoint(self, pt)

    def WindowPointToRay(self, x, y):
        r"""
        窗口的坐标转换成射线。
        :type x: int
        :param x: X坐标
        :type y: int
        :param y: Y坐标
        :rtype: :py:class:`Ray`
        :return: 射线对象
        """
        return _PyAnyCAD.Viewer_WindowPointToRay(self, x, y)

    def SetStandardView(self, view, bAnimation=True):
        r"""
        设置相机方向。
        :type view: int
        :param view: 标准方向
        :type bAnimation: boolean, optional
        :param bAnimation: 是否动画
        """
        return _PyAnyCAD.Viewer_SetStandardView(self, view, bAnimation)

    def LookAt(self, target, dir, up, bAnimation):
        r"""
        设置相机方向
        :type target: :py:class:`vec3`
        :param target: 目标位置
        :type dir: :py:class:`vec3`
        :param dir: 方向
        :type up: :py:class:`vec3`
        :param up: Z朝向
        :type bAnimation: boolean
        :param bAnimation: 是否启用动画方式
        """
        return _PyAnyCAD.Viewer_LookAt(self, target, dir, up, bAnimation)

    def ReloadSettings(self):
        return _PyAnyCAD.Viewer_ReloadSettings(self)

    def OnResized(self, width, height):
        r"""
        窗口大小变化后调用.
        :type width: int
        :param width: 窗口宽度
        :type height: int
        :param height: 窗口高度
        """
        return _PyAnyCAD.Viewer_OnResized(self, width, height)

    def OnDocumentChanged(self, args):
        r"""
        文档有更新时调用
        :type args: :py:class:`DocumentEventArgs`
        :param args: Document事件参数
        """
        return _PyAnyCAD.Viewer_OnDocumentChanged(self, args)

    def OnMouseDown(self, evt):
        r"""
        处理鼠标按下消息
        :type evt: :py:class:`InputEvent`
        :param evt: 参数
        """
        return _PyAnyCAD.Viewer_OnMouseDown(self, evt)

    def OnMouseUp(self, evt):
        r"""
        处理鼠标松开消息
        :type evt: :py:class:`InputEvent`
        :param evt: 参数
        """
        return _PyAnyCAD.Viewer_OnMouseUp(self, evt)

    def OnMouseMove(self, evt):
        r"""
        处理鼠标移动消息
        :type evt: :py:class:`InputEvent`
        :param evt: 参数
        """
        return _PyAnyCAD.Viewer_OnMouseMove(self, evt)

    def OnMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnMultiTouch(self, evt)

    def OnBeginMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnBeginMultiTouch(self, evt)

    def OnEndMultiTouch(self, evt):
        return _PyAnyCAD.Viewer_OnEndMultiTouch(self, evt)

    def OnMouseWheel(self, evt, delta):
        r"""
        :type delta: int
        :param delta:: > 0 scroll up,  < 0 scroll down
        """
        return _PyAnyCAD.Viewer_OnMouseWheel(self, evt, delta)

    def OnKeyDown(self, evt):
        r"""
        处理键盘按下消息
        :type evt: :py:class:`InputEvent`
        :param evt: 参数
        """
        return _PyAnyCAD.Viewer_OnKeyDown(self, evt)

    def OnKeyUp(self, evt):
        r"""
        处理键盘松开消息
        :type evt: :py:class:`InputEvent`
        :param evt: 参数
        """
        return _PyAnyCAD.Viewer_OnKeyUp(self, evt)

    def OnInput(self, parameters):
        r"""
        处理用户输入消息
        :type parameters: :py:class:`ParameterDict`
        :param parameters: 参数
        """
        return _PyAnyCAD.Viewer_OnInput(self, parameters)

    def OnEditorAction(self, name, parameters):
        r"""
        执行Editor的动作
        :type name: string
        :param name: 名称
        :type parameters: :py:class:`ParameterDict`
        :param parameters: 参数
        """
        return _PyAnyCAD.Viewer_OnEditorAction(self, name, parameters)

    def ResizeWindow(self, width, height):
        r"""
        设置窗口大小
        :type width: int
        :param width: 宽度
        :type height: int
        :param height: 高度
        """
        return _PyAnyCAD.Viewer_ResizeWindow(self, width, height)

    def InstallEventHandlers(self):
        r"""内部方法。设置事件处理器"""
        return _PyAnyCAD.Viewer_InstallEventHandlers(self)

    def ReadDepthBuffer(self, posX, posY, width, height):
        r"""
        内部方法
        :type posX: int
        :param posX:
        :type posY: int
        :param posY:
        :type width: int
        :param width:
        :type height: int
        :param height:
        :rtype: std::vector< float,std::allocator< float > >
        :return: 
        """
        return _PyAnyCAD.Viewer_ReadDepthBuffer(self, posX, posY, width, height)

    def WndProc(self, hWnd, msg, wparam, lparam):
        r"""
        内部方法
        :type hWnd: int
        :param hWnd:
        :type msg: int
        :param msg:
        :type wparam: int
        :param wparam:
        :type lparam: int
        :param lparam:
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.Viewer_WndProc(self, hWnd, msg, wparam, lparam)

    def OnDeviceLost(self, hParent):
        r"""
        内部方法
        :type hParent: int
        :param hParent:
        """
        return _PyAnyCAD.Viewer_OnDeviceLost(self, hParent)

    @staticmethod
    def SetZoomFacotr(zoomOut, zoomIn):
        return _PyAnyCAD.Viewer_SetZoomFacotr(zoomOut, zoomIn)

# Register Viewer in _PyAnyCAD:
_PyAnyCAD.Viewer_swigregister(Viewer)
EnumCommandType_CommandStart = _PyAnyCAD.EnumCommandType_CommandStart
EnumCommandType_CommandEnd = _PyAnyCAD.EnumCommandType_CommandEnd
EnumCommandType_CommandInput = _PyAnyCAD.EnumCommandType_CommandInput
class CommandContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.CommandContext_swiginit(self, _PyAnyCAD.new_CommandContext(*args))

    def GetViewer(self):
        return _PyAnyCAD.CommandContext_GetViewer(self)

    def SetViewer(self, val):
        return _PyAnyCAD.CommandContext_SetViewer(self, val)

    def GetDocument(self):
        return _PyAnyCAD.CommandContext_GetDocument(self)

    def SetDocument(self, val):
        return _PyAnyCAD.CommandContext_SetDocument(self, val)

    def GetParameters(self):
        return _PyAnyCAD.CommandContext_GetParameters(self)

    def SetParameters(self, val):
        return _PyAnyCAD.CommandContext_SetParameters(self, val)

    def GetObjectId(self):
        return _PyAnyCAD.CommandContext_GetObjectId(self)

    def GetSelectionManager(self):
        return _PyAnyCAD.CommandContext_GetSelectionManager(self)
    __swig_destroy__ = _PyAnyCAD.delete_CommandContext

# Register CommandContext in _PyAnyCAD:
_PyAnyCAD.CommandContext_swigregister(CommandContext)
class Command(object):
    r"""
    Author: Interaction
    命令基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Command:
            _self = None
        else:
            _self = self
        _PyAnyCAD.Command_swiginit(self, _PyAnyCAD.new_Command(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_Command

    def GetName(self):
        return _PyAnyCAD.Command_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.Command_SetName(self, val)

    def GetHasEditor(self):
        return _PyAnyCAD.Command_GetHasEditor(self)

    def SetHasEditor(self, val):
        return _PyAnyCAD.Command_SetHasEditor(self, val)

    def GetNeedViewer(self):
        return _PyAnyCAD.Command_GetNeedViewer(self)

    def SetNeedViewer(self, val):
        return _PyAnyCAD.Command_SetNeedViewer(self, val)

    def Run(self, *args):
        r"""
        *Overload 1:*

        执行
        :type ctx: :py:class:`CommandContext`
        :param ctx: 上下文信息
        :type notify: boolean
        :param notify: 是否通知命令


        |

        *Overload 2:*

        子类重载此方法实现命令的行为
        :type ctx: :py:class:`CommandContext`
        :param ctx: 上下文信息
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.Command_Run(self, *args)

    def Query(self, ctx):
        r"""
        查询命令
        :type ctx: :py:class:`CommandContext`
        :param ctx: 上下文
        :rtype: string
        :return: 查询结果。采用JSON格式
        """
        return _PyAnyCAD.Command_Query(self, ctx)

    def IsVisible(self, ctx):
        r"""
        是否可以执行。
        :type ctx: :py:class:`CommandContext`
        :param ctx: 上下文
        :rtype: boolean
        :return: true则可以执行
        """
        return _PyAnyCAD.Command_IsVisible(self, ctx)

    def IsChecked(self, ctx):
        r"""
        是否仍在执行。
        :type ctx: :py:class:`CommandContext`
        :param ctx: 上下文
        :rtype: boolean
        :return: true则还是执行状态
        """
        return _PyAnyCAD.Command_IsChecked(self, ctx)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_Command(self)
        return weakref.proxy(self)

# Register Command in _PyAnyCAD:
_PyAnyCAD.Command_swigregister(Command)
class CommandListener(object):
    r"""
    Author: Interaction
    Command.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == CommandListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.CommandListener_swiginit(self, _PyAnyCAD.new_CommandListener(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_CommandListener

    def OnMessage(self, viewer, type, msg, content):
        return _PyAnyCAD.CommandListener_OnMessage(self, viewer, type, msg, content)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_CommandListener(self)
        return weakref.proxy(self)

# Register CommandListener in _PyAnyCAD:
_PyAnyCAD.CommandListener_swigregister(CommandListener)
class CommandManager(object):
    r"""
    Author: Interaction
    CommandManager.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.CommandManager_Instance()

    def Add(self, *args):
        return _PyAnyCAD.CommandManager_Add(self, *args)

    def Remove(self, name):
        return _PyAnyCAD.CommandManager_Remove(self, name)

    def Find(self, name):
        return _PyAnyCAD.CommandManager_Find(self, name)

    def AddListener(self, listener):
        return _PyAnyCAD.CommandManager_AddListener(self, listener)

    def RemoveListener(self, listener):
        return _PyAnyCAD.CommandManager_RemoveListener(self, listener)

    def Execute(self, command, parameters, viewer, document):
        return _PyAnyCAD.CommandManager_Execute(self, command, parameters, viewer, document)

    def Query(self, command, parameters, viewer, document):
        return _PyAnyCAD.CommandManager_Query(self, command, parameters, viewer, document)

    def OnMessage(self, *args):
        return _PyAnyCAD.CommandManager_OnMessage(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_CommandManager

# Register CommandManager in _PyAnyCAD:
_PyAnyCAD.CommandManager_swigregister(CommandManager)
class ClipPlaneView(object):
    r"""
    Author: Interaction
    ClipPlaneView
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ClipPlaneView_swiginit(self, _PyAnyCAD.new_ClipPlaneView())
    __swig_destroy__ = _PyAnyCAD.delete_ClipPlaneView

    def GetDirection(self):
        return _PyAnyCAD.ClipPlaneView_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.ClipPlaneView_SetDirection(self, val)

    def GetStartPoint(self):
        return _PyAnyCAD.ClipPlaneView_GetStartPoint(self)

    def SetStartPoint(self, val):
        return _PyAnyCAD.ClipPlaneView_SetStartPoint(self, val)

    def Start(self, ctx):
        return _PyAnyCAD.ClipPlaneView_Start(self, ctx)

    def Finish(self, ctx):
        return _PyAnyCAD.ClipPlaneView_Finish(self, ctx)

    def Update(self, ctx):
        return _PyAnyCAD.ClipPlaneView_Update(self, ctx)

# Register ClipPlaneView in _PyAnyCAD:
_PyAnyCAD.ClipPlaneView_swigregister(ClipPlaneView)
class RenderingEngine(object):
    r"""
    Author: Rendering
    内部使用的渲染引擎.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RenderingEngine_swiginit(self, _PyAnyCAD.new_RenderingEngine())
    __swig_destroy__ = _PyAnyCAD.delete_RenderingEngine

    @staticmethod
    def Initialize(baseDirectory, appName, createGLContext=True):
        r"""
        初始化
        :type baseDirectory: :py:class:`Path`
        :param baseDirectory: 根目录
        :type appName: string
        :param appName: 应用名称
        :type createGLContext: boolean, optional
        :param createGLContext: 创建GL上下文
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.RenderingEngine_Initialize(baseDirectory, appName, createGLContext)

    @staticmethod
    def Destroy():
        r"""释放资源"""
        return _PyAnyCAD.RenderingEngine_Destroy()

    @staticmethod
    def GetProgramPath():
        r"""
        获取程序根路径
        :rtype: string
        :return: 目录
        """
        return _PyAnyCAD.RenderingEngine_GetProgramPath()

    @staticmethod
    def CreateView(hwndHost, width, height):
        r"""
        基于已有的窗口控件上创建三维显示视图
        :type hwndHost: int
        :param hwndHost: the host window handle.
        :type width: int
        :param width: the width
        :type height: int
        :param height: the height
        :rtype: :py:class:`Viewer`
        :return: the viewer.
        """
        return _PyAnyCAD.RenderingEngine_CreateView(hwndHost, width, height)

    @staticmethod
    def CreateWindow3D(title, width, height, visible):
        r"""
        创建一个独立的三维窗口.
        :type title: string
        :param title: the title
        :type width: int
        :param width: the width
        :type height: int
        :param height: the height
        :type visible: boolean
        :param visible: if visible.
        :rtype: :py:class:`Viewer`
        :return: 
        """
        return _PyAnyCAD.RenderingEngine_CreateWindow3D(title, width, height, visible)

    @staticmethod
    def CreateChildWindow(parent, width, height):
        return _PyAnyCAD.RenderingEngine_CreateChildWindow(parent, width, height)

    @staticmethod
    def DestoryChildWindow(child):
        return _PyAnyCAD.RenderingEngine_DestoryChildWindow(child)

    @staticmethod
    def GetDpiScale():
        return _PyAnyCAD.RenderingEngine_GetDpiScale()

    @staticmethod
    def SetDpiScaling(ratio):
        r"""
        自定义屏幕缩放系数
        :type ratio: float
        :param ratio: 比例
        """
        return _PyAnyCAD.RenderingEngine_SetDpiScaling(ratio)

    @staticmethod
    def RegisterSdk(a, b, d, e, f):
        return _PyAnyCAD.RenderingEngine_RegisterSdk(a, b, d, e, f)

    @staticmethod
    def Log(*args):
        return _PyAnyCAD.RenderingEngine_Log(*args)

# Register RenderingEngine in _PyAnyCAD:
_PyAnyCAD.RenderingEngine_swigregister(RenderingEngine)
class ModelingEngine(object):
    r"""
    Author: Geometry
    ModelingEngine
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Initialize():
        return _PyAnyCAD.ModelingEngine_Initialize()

    @staticmethod
    def EnableSnapShape():
        return _PyAnyCAD.ModelingEngine_EnableSnapShape()

    @staticmethod
    def SetDeviationCoefficient(v):
        return _PyAnyCAD.ModelingEngine_SetDeviationCoefficient(v)

    @staticmethod
    def GetDeviationCoefficient():
        return _PyAnyCAD.ModelingEngine_GetDeviationCoefficient()

    @staticmethod
    def SetDeviationAngle(v):
        return _PyAnyCAD.ModelingEngine_SetDeviationAngle(v)

    @staticmethod
    def GetDeviationAngle():
        return _PyAnyCAD.ModelingEngine_GetDeviationAngle()
    __swig_destroy__ = _PyAnyCAD.delete_ModelingEngine

# Register ModelingEngine in _PyAnyCAD:
_PyAnyCAD.ModelingEngine_swigregister(ModelingEngine)
class SnapShapeEngine(SnapEngine):
    r"""
    Author: Interaction
    SnapShapeEngine.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.SnapShapeEngine_swiginit(self, _PyAnyCAD.new_SnapShapeEngine())
    __swig_destroy__ = _PyAnyCAD.delete_SnapShapeEngine

    @staticmethod
    def Get(ctx):
        return _PyAnyCAD.SnapShapeEngine_Get(ctx)

    def Run(self, ctx, x, y):
        return _PyAnyCAD.SnapShapeEngine_Run(self, ctx, x, y)

    def PickEdge(self, ctx, x, y):
        return _PyAnyCAD.SnapShapeEngine_PickEdge(self, ctx, x, y)

    def PickFace(self, ctx, x, y):
        return _PyAnyCAD.SnapShapeEngine_PickFace(self, ctx, x, y)

    def ParseShape(self, ctx, item):
        return _PyAnyCAD.SnapShapeEngine_ParseShape(self, ctx, item)

    def ParseSubShape(self, ctx, item):
        r"""
        解析子的Shape
        :type ctx: :py:class:`ViewContext`
        :param ctx: 上下文
        :type item: :py:class:`PickedItem`
        :param item: picker
        :rtype: :py:class:`TopoShape`
        :return: 子Shape
        """
        return _PyAnyCAD.SnapShapeEngine_ParseSubShape(self, ctx, item)

# Register SnapShapeEngine in _PyAnyCAD:
_PyAnyCAD.SnapShapeEngine_swigregister(SnapShapeEngine)
class GRepShape(object):
    r"""
    Author: Geometry
    GRepShape
     基于TopoShape生成显示对象，以便在引擎中显示。 创建后调用对象的Build方法进行离散。
    See also: GRepIterator
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_GRepShape

    def GetBoundingBox(self):
        return _PyAnyCAD.GRepShape_GetBoundingBox(self)

    def SetBoundingBox(self, val):
        return _PyAnyCAD.GRepShape_SetBoundingBox(self, val)

    def GetDeflection(self):
        return _PyAnyCAD.GRepShape_GetDeflection(self)

    def SetDeflection(self, val):
        return _PyAnyCAD.GRepShape_SetDeflection(self, val)

    def GetBuildVertex(self):
        return _PyAnyCAD.GRepShape_GetBuildVertex(self)

    def SetBuildVertex(self, val):
        return _PyAnyCAD.GRepShape_SetBuildVertex(self, val)

    def GetDisplayFilter(self):
        return _PyAnyCAD.GRepShape_GetDisplayFilter(self)

    def SetDisplayFilter(self, val):
        return _PyAnyCAD.GRepShape_SetDisplayFilter(self, val)

    def GetChildrenPickable(self):
        return _PyAnyCAD.GRepShape_GetChildrenPickable(self)

    def SetChildrenPickable(self, val):
        return _PyAnyCAD.GRepShape_SetChildrenPickable(self, val)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.GRepShape_GetEdgeMaterial(self)

    def GetFaceMaterial(self):
        return _PyAnyCAD.GRepShape_GetFaceMaterial(self)

    def GetShape(self):
        return _PyAnyCAD.GRepShape_GetShape(self)

    def GetReady(self):
        return _PyAnyCAD.GRepShape_GetReady(self)

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        创建GRepShape实例，生成后需要调用Build来生成显示对象
        :type shape: :py:class:`TopoShape`
        :param shape: 几何拓扑对象
        :type material: :py:class:`MaterialInstance`
        :param material: 面材质
        :type edgeMaterial: :py:class:`MaterialInstance`
        :param edgeMaterial: 边线材质
        :type deflection: float
        :param deflection: 显示精度
        :type optimized: boolean
        :param optimized: 是否需要优化显示性能。对于有多个面、边的对象，建议开启优化，简单的无需开启。


        |

        *Overload 2:*

        创建空的GRep对象。
        :type optimized: boolean
        :param optimized:
        :rtype: :py:class:`GRepShape`
        :return: 返回GRepShape
        """
        return _PyAnyCAD.GRepShape_Create(*args)

    def Clone(self):
        r"""
        复制一份，共享离散数据。
        :rtype: :py:class:`GRepShape`
        :return: 新的对象
        """
        return _PyAnyCAD.GRepShape_Clone(self)

    def IsNull(self):
        r"""
        是否为空
        :rtype: boolean
        :return: true则为空
        """
        return _PyAnyCAD.GRepShape_IsNull(self)

    def Build(self):
        r"""
        执行生成
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.GRepShape_Build(self)

    def SetShape(self, shape, update=True):
        r"""
        更新TopoShape。
        :type shape: :py:class:`TopoShape`
        :param shape: the new shape.
        :type update: boolean, optional
        :param update: request update.
        """
        return _PyAnyCAD.GRepShape_SetShape(self, shape, update)

    def GetFaceIndex(self, faceTopoId):
        r"""
        根据Face的几何ID获取对应的显示索引
        :type faceTopoId: int
        :param faceTopoId:
        :rtype: int
        :return: -1没有找到
        """
        return _PyAnyCAD.GRepShape_GetFaceIndex(self, faceTopoId)

    def GetFaceCount(self):
        r"""
        获得面的个数
        :rtype: int
        :return: 面的个数
        """
        return _PyAnyCAD.GRepShape_GetFaceCount(self)

    def SetFaceMaterial(self, *args):
        r"""
        *Overload 1:*

        设置面的材质
        :type material: :py:class:`MaterialInstance`
        :param material: 材质对象

        |

        *Overload 2:*

        设置指定面的材质
        :type idx: int
        :param idx: 面的索引
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.GRepShape_SetFaceMaterial(self, *args)

    def GetEdgeIndex(self, edgeTopoId):
        r"""
        根据Edge的几何ID获取对应的显示索引
        :type edgeTopoId: int
        :param edgeTopoId:
        :rtype: int
        :return: -1没有找到
        """
        return _PyAnyCAD.GRepShape_GetEdgeIndex(self, edgeTopoId)

    def GetEdgeCount(self):
        r"""
        获取边的个数
        :rtype: int
        :return: 边的个数
        """
        return _PyAnyCAD.GRepShape_GetEdgeCount(self)

    def SetEdgeMaterial(self, *args):
        r"""
        *Overload 1:*

        设置边的材质
        :type material: :py:class:`MaterialInstance`
        :param material: 边的材质

        |

        *Overload 2:*

        设置指定边的材质
        :type idx: int
        :param idx: 边的索引
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.GRepShape_SetEdgeMaterial(self, *args)

    def RequestUpdate(self):
        r"""请求更新重新生成对象."""
        return _PyAnyCAD.GRepShape_RequestUpdate(self)

    def ComputeBoundingBox(self):
        r"""计算包围盒"""
        return _PyAnyCAD.GRepShape_ComputeBoundingBox(self)

    def Transform(self, trf):
        r"""
        整体偏移，修改顶点数据
        :type trf: :py:class:`mat4`
        :param trf: 变换矩阵
        """
        return _PyAnyCAD.GRepShape_Transform(self, trf)

    def GetUV(self, faceId):
        r"""
        获取面的UV数据
        :type faceId: int
        :param faceId: 索引
        :rtype: :py:class:`Float32Array`
        :return: 索引Buffer
        """
        return _PyAnyCAD.GRepShape_GetUV(self, faceId)

# Register GRepShape in _PyAnyCAD:
_PyAnyCAD.GRepShape_swigregister(GRepShape)
class GRepIterator(object):
    r"""
    Author: Geometry

    用来遍历GRepShape里的内容。面对应的是TRIANGLES； 边对应的为LINE_STRIP，即多折线。
     for(itr.Initialize(shape, EnumShapeFilter.Edge);itr.More(); itr.Next())
     {
       var postions = itr.Positions();
     }
    See also: GRepShape
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.GRepIterator_swiginit(self, _PyAnyCAD.new_GRepIterator())
    __swig_destroy__ = _PyAnyCAD.delete_GRepIterator

    def Initialize(self, shape, faceOrEdge):
        r"""
        初始化
        :type shape: :py:class:`GRepShape`
        :param shape: GRepShape对象
        :type faceOrEdge: int
        :param faceOrEdge: 遍历面还是边。
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.GRepIterator_Initialize(self, shape, faceOrEdge)

    def More(self):
        r"""
        是否遍历结束
        :rtype: boolean
        :return: true则存在。
        """
        return _PyAnyCAD.GRepIterator_More(self)

    def Next(self):
        r"""下一个元素。"""
        return _PyAnyCAD.GRepIterator_Next(self)

    def Current(self):
        return _PyAnyCAD.GRepIterator_Current(self)

    def GetPositions(self):
        r"""
        获取顶点列表。
        :param geometry: 对象
        :rtype: :py:class:`Float32Array`
        :return: 数组，三个元素代表一个点。
        """
        return _PyAnyCAD.GRepIterator_GetPositions(self)

    def GetIndex(self):
        r"""
        获取面的索引列表
        :param geometry: 对象
        :rtype: :py:class:`Uint16Array`
        :return: 数组。三个一组。
        """
        return _PyAnyCAD.GRepIterator_GetIndex(self)

    def GetNormals(self):
        r"""
        获取面的法向
        :param geometry: 对象
        :rtype: :py:class:`Float32Array`
        :return: 数组，三个元素一组
        """
        return _PyAnyCAD.GRepIterator_GetNormals(self)

    def GetTexCoords(self):
        r"""
        获取面的纹理坐标
        :param geometry: 对象
        :rtype: :py:class:`Float32Array`
        :return: 数组，两个元素一组
        """
        return _PyAnyCAD.GRepIterator_GetTexCoords(self)

# Register GRepIterator in _PyAnyCAD:
_PyAnyCAD.GRepIterator_swigregister(GRepIterator)
class BufferShape(GRepShape):
    r"""
    Author: Geometry

    BufferShape

    The bridge between BufferGeometry and SceneNode.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BufferShape_swiginit(self, _PyAnyCAD.new_BufferShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_BufferShape

    def GetFaces(self):
        return _PyAnyCAD.BufferShape_GetFaces(self)

    def GetEdges(self):
        return _PyAnyCAD.BufferShape_GetEdges(self)

    def Build(self):
        r"""
        triangulate the shape.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.BufferShape_Build(self)

    def GetFaceIndex(self, faceTopoId):
        return _PyAnyCAD.BufferShape_GetFaceIndex(self, faceTopoId)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BufferShape_SetFaceMaterial(self, *args)

    def GetEdgeIndex(self, edgeTopoId):
        return _PyAnyCAD.BufferShape_GetEdgeIndex(self, edgeTopoId)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BufferShape_SetEdgeMaterial(self, *args)

    @staticmethod
    def Cast(bs):
        return _PyAnyCAD.BufferShape_Cast(bs)

    def GetFaceCount(self):
        return _PyAnyCAD.BufferShape_GetFaceCount(self)

    def SetVertexColors(self, faceIdx, colorBuffer):
        return _PyAnyCAD.BufferShape_SetVertexColors(self, faceIdx, colorBuffer)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BufferShape_ComputeBoundingBox(self)

    def Transform(self, trf):
        return _PyAnyCAD.BufferShape_Transform(self, trf)

    def GetUV(self, faceId):
        return _PyAnyCAD.BufferShape_GetUV(self, faceId)

    def CloneMe(self):
        return _PyAnyCAD.BufferShape_CloneMe(self)

# Register BufferShape in _PyAnyCAD:
_PyAnyCAD.BufferShape_swigregister(BufferShape)
class BatchedBufferShape(GRepShape):
    r"""
    Author: Geometry

    BatchedBufferShape

    The bridge between BufferGeometry and SceneNode.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.BatchedBufferShape_swiginit(self, _PyAnyCAD.new_BatchedBufferShape(*args))
    __swig_destroy__ = _PyAnyCAD.delete_BatchedBufferShape

    def GetFaces(self):
        return _PyAnyCAD.BatchedBufferShape_GetFaces(self)

    def GetEdges(self):
        return _PyAnyCAD.BatchedBufferShape_GetEdges(self)

    def Build(self):
        r"""
        triangulate the shape.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.BatchedBufferShape_Build(self)

    def CloneMe(self):
        return _PyAnyCAD.BatchedBufferShape_CloneMe(self)

    def GetFaceIndex(self, faceTopoId):
        return _PyAnyCAD.BatchedBufferShape_GetFaceIndex(self, faceTopoId)

    def GetFaceCount(self):
        return _PyAnyCAD.BatchedBufferShape_GetFaceCount(self)

    def SetFaceMaterial(self, *args):
        return _PyAnyCAD.BatchedBufferShape_SetFaceMaterial(self, *args)

    def GetEdgeIndex(self, edgeTopoId):
        return _PyAnyCAD.BatchedBufferShape_GetEdgeIndex(self, edgeTopoId)

    def GetEdgeCount(self):
        return _PyAnyCAD.BatchedBufferShape_GetEdgeCount(self)

    def SetEdgeMaterial(self, *args):
        return _PyAnyCAD.BatchedBufferShape_SetEdgeMaterial(self, *args)

    def ComputeBoundingBox(self):
        return _PyAnyCAD.BatchedBufferShape_ComputeBoundingBox(self)

    @staticmethod
    def Cast(bs):
        return _PyAnyCAD.BatchedBufferShape_Cast(bs)

    def Transform(self, trf):
        return _PyAnyCAD.BatchedBufferShape_Transform(self, trf)

    def GetUV(self, faceId):
        return _PyAnyCAD.BatchedBufferShape_GetUV(self, faceId)

# Register BatchedBufferShape in _PyAnyCAD:
_PyAnyCAD.BatchedBufferShape_swigregister(BatchedBufferShape)
class BrepSceneNode(GeneralSceneNode):
    r"""
    Author: Geometry

    BrepSceneNode

    The bridge between BufferGeometry and TopShape.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.BrepSceneNode_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.BrepSceneNode_swiginit(self, _PyAnyCAD.new_BrepSceneNode(*args))

    def GetShape(self):
        return _PyAnyCAD.BrepSceneNode_GetShape(self)

    def SetSubShapePickable(self, pickable):
        return _PyAnyCAD.BrepSceneNode_SetSubShapePickable(self, pickable)

    def GetSubShapePickable(self):
        return _PyAnyCAD.BrepSceneNode_GetSubShapePickable(self)

    def SetDisplayFilter(self, filter):
        r"""
        设置显示过滤器
        :type filter: int
        :param filter: 过滤器
        """
        return _PyAnyCAD.BrepSceneNode_SetDisplayFilter(self, filter)

    def GetDisplayFilter(self):
        r"""
        得到显示过滤器
        :rtype: int
        :return: 过滤器
        """
        return _PyAnyCAD.BrepSceneNode_GetDisplayFilter(self)

    @staticmethod
    def Create(*args):
        return _PyAnyCAD.BrepSceneNode_Create(*args)

    def GetTopoShape(self):
        r"""
        获取几何对象
        :rtype: :py:class:`TopoShape`
        :return: 几何对象
        """
        return _PyAnyCAD.BrepSceneNode_GetTopoShape(self)

    def SetTopoShape(self, shape):
        r"""
        重新设置拓扑几何对象
        :type shape: :py:class:`TopoShape`
        :param shape:
        """
        return _PyAnyCAD.BrepSceneNode_SetTopoShape(self, shape)

    def SetShape(self, shape):
        r"""
        设置离散面片对象
        :type shape: :py:class:`GRepShape`
        :param shape: 离散对象
        """
        return _PyAnyCAD.BrepSceneNode_SetShape(self, shape)

    def GetFaceCount(self):
        r"""
        设置面的个数
        :rtype: int
        :return: 面个数
        """
        return _PyAnyCAD.BrepSceneNode_GetFaceCount(self)

    def SetFaceMaterial(self, *args):
        r"""
        *Overload 1:*

        设置指定面的材质
        :type idx: int
        :param idx: 面的索引
        :type material: :py:class:`MaterialInstance`
        :param material: 材质

        |

        *Overload 2:*

        设置整体的面材质
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.BrepSceneNode_SetFaceMaterial(self, *args)

    def GetEdgeCount(self):
        r"""
        获取边的个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.BrepSceneNode_GetEdgeCount(self)

    def SetEdgeMaterial(self, *args):
        r"""
        *Overload 1:*

        设置边的材质
        :type idx: int
        :param idx: 索引
        :type material: :py:class:`MaterialInstance`
        :param material: 材质

        |

        *Overload 2:*

        设置边材质
        :type material: :py:class:`MaterialInstance`
        :param material: 材质
        """
        return _PyAnyCAD.BrepSceneNode_SetEdgeMaterial(self, *args)

    def ReComputeBoundingBox(self):
        r"""重新计算包围盒"""
        return _PyAnyCAD.BrepSceneNode_ReComputeBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.BrepSceneNode_Clone(self)
    __swig_destroy__ = _PyAnyCAD.delete_BrepSceneNode

# Register BrepSceneNode in _PyAnyCAD:
_PyAnyCAD.BrepSceneNode_swigregister(BrepSceneNode)
class DraggableWidget(GeneralSceneNode):
    r"""
    Author: Interaction
    DraggableWidget.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DraggableWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_DraggableWidget

    def GetName(self):
        return _PyAnyCAD.DraggableWidget_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.DraggableWidget_SetName(self, val)

    def GetDragGrip(self):
        return _PyAnyCAD.DraggableWidget_GetDragGrip(self)

    def GetDragPosition(self):
        return _PyAnyCAD.DraggableWidget_GetDragPosition(self)

    def GetStartFrame(self):
        return _PyAnyCAD.DraggableWidget_GetStartFrame(self)

    def SetStartFrame(self, val):
        return _PyAnyCAD.DraggableWidget_SetStartFrame(self, val)

    def GetTargetFrame(self):
        return _PyAnyCAD.DraggableWidget_GetTargetFrame(self)

    def GetPosition(self):
        return _PyAnyCAD.DraggableWidget_GetPosition(self)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.DraggableWidget_BeforeRendering(self, ctx)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.DraggableWidget_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.DraggableWidget_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.DraggableWidget_OnMouseMove(self, ctx, evt)

    def SetDragGrip(self, id):
        return _PyAnyCAD.DraggableWidget_SetDragGrip(self, id)

    def BeginDrag(self):
        return _PyAnyCAD.DraggableWidget_BeginDrag(self)

    def Dragging(self, pick):
        return _PyAnyCAD.DraggableWidget_Dragging(self, pick)

    def EndDrag(self):
        return _PyAnyCAD.DraggableWidget_EndDrag(self)

# Register DraggableWidget in _PyAnyCAD:
_PyAnyCAD.DraggableWidget_swigregister(DraggableWidget)
class FrameWidget(DraggableWidget):
    r"""
    Author: Interaction
    FrameWidget.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.FrameWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_FrameWidget

    def GetCenter(self):
        return _PyAnyCAD.FrameWidget_GetCenter(self)

    def SetCenter(self, val):
        return _PyAnyCAD.FrameWidget_SetCenter(self, val)

    def GetRadius(self):
        return _PyAnyCAD.FrameWidget_GetRadius(self)

    def GetDirection(self):
        return _PyAnyCAD.FrameWidget_GetDirection(self)

    def GetValue(self):
        return _PyAnyCAD.FrameWidget_GetValue(self)

    def Initialize(self, frame):
        return _PyAnyCAD.FrameWidget_Initialize(self, frame)

    def SetValue(self, val):
        return _PyAnyCAD.FrameWidget_SetValue(self, val)

# Register FrameWidget in _PyAnyCAD:
_PyAnyCAD.FrameWidget_swigregister(FrameWidget)
class MoveWidget(FrameWidget):
    r"""
    Author: Interaction

    The Axis object.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MoveWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_MoveWidget

    def GetOffset(self):
        return _PyAnyCAD.MoveWidget_GetOffset(self)

    def GetNodes(self):
        return _PyAnyCAD.MoveWidget_GetNodes(self)

    @staticmethod
    def Create(length):
        return _PyAnyCAD.MoveWidget_Create(length)

    def ShowArrow(self, userId):
        return _PyAnyCAD.MoveWidget_ShowArrow(self, userId)

    def Initialize(self, frame):
        return _PyAnyCAD.MoveWidget_Initialize(self, frame)

    def SetDragGrip(self, id):
        return _PyAnyCAD.MoveWidget_SetDragGrip(self, id)

    def BeginDrag(self):
        return _PyAnyCAD.MoveWidget_BeginDrag(self)

    def Dragging(self, pick):
        return _PyAnyCAD.MoveWidget_Dragging(self, pick)

    def EndDrag(self):
        return _PyAnyCAD.MoveWidget_EndDrag(self)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.MoveWidget_BeforeRendering(self, ctx)

    def Translate(self, distance):
        return _PyAnyCAD.MoveWidget_Translate(self, distance)

    def SetValue(self, val):
        return _PyAnyCAD.MoveWidget_SetValue(self, val)

    def CloneMoveWidget(self):
        return _PyAnyCAD.MoveWidget_CloneMoveWidget(self)

    def Clone(self):
        return _PyAnyCAD.MoveWidget_Clone(self)

# Register MoveWidget in _PyAnyCAD:
_PyAnyCAD.MoveWidget_swigregister(MoveWidget)
class RotateWidget(FrameWidget):
    r"""
    Author: Interaction
    RotateWidget.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RotateWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_RotateWidget

    def GetNodes(self):
        return _PyAnyCAD.RotateWidget_GetNodes(self)

    def GetXDirection(self):
        return _PyAnyCAD.RotateWidget_GetXDirection(self)

    @staticmethod
    def Create(size):
        return _PyAnyCAD.RotateWidget_Create(size)

    def Initialize(self, frame):
        r"""
        初始化
        :type frame: :py:class:`mat4`
        :param frame: 对象的矩阵
        """
        return _PyAnyCAD.RotateWidget_Initialize(self, frame)

    def SetDragGrip(self, id):
        return _PyAnyCAD.RotateWidget_SetDragGrip(self, id)

    def BeginDrag(self):
        return _PyAnyCAD.RotateWidget_BeginDrag(self)

    def Dragging(self, pick):
        return _PyAnyCAD.RotateWidget_Dragging(self, pick)

    def EndDrag(self):
        return _PyAnyCAD.RotateWidget_EndDrag(self)

    def SetValue(self, val):
        return _PyAnyCAD.RotateWidget_SetValue(self, val)

    def CloneRotateWidget(self):
        return _PyAnyCAD.RotateWidget_CloneRotateWidget(self)

    def Clone(self):
        return _PyAnyCAD.RotateWidget_Clone(self)

# Register RotateWidget in _PyAnyCAD:
_PyAnyCAD.RotateWidget_swigregister(RotateWidget)
class TransformWidget(FrameWidget):
    r"""
    Author: Interaction
    TransformWidget.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TransformWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_TransformWidget

    def GetOffset(self):
        return _PyAnyCAD.TransformWidget_GetOffset(self)

    def GetNodes(self):
        return _PyAnyCAD.TransformWidget_GetNodes(self)

    def GetXDirection(self):
        return _PyAnyCAD.TransformWidget_GetXDirection(self)

    @staticmethod
    def Create(size):
        return _PyAnyCAD.TransformWidget_Create(size)

    def Initialize(self, frame):
        r"""
        初始化
        :type frame: :py:class:`mat4`
        :param frame: 对象的矩阵
        """
        return _PyAnyCAD.TransformWidget_Initialize(self, frame)

    def SetDragGrip(self, id):
        return _PyAnyCAD.TransformWidget_SetDragGrip(self, id)

    def BeginDrag(self):
        return _PyAnyCAD.TransformWidget_BeginDrag(self)

    def Dragging(self, pick):
        return _PyAnyCAD.TransformWidget_Dragging(self, pick)

    def EndDrag(self):
        return _PyAnyCAD.TransformWidget_EndDrag(self)

    def SetValue(self, val):
        return _PyAnyCAD.TransformWidget_SetValue(self, val)

    def Translate(self, length):
        return _PyAnyCAD.TransformWidget_Translate(self, length)

    def Rotate(self, angle):
        return _PyAnyCAD.TransformWidget_Rotate(self, angle)

    def CloneTransformWidget(self):
        return _PyAnyCAD.TransformWidget_CloneTransformWidget(self)

    def Clone(self):
        return _PyAnyCAD.TransformWidget_Clone(self)

# Register TransformWidget in _PyAnyCAD:
_PyAnyCAD.TransformWidget_swigregister(TransformWidget)
class ScaleWidget(FrameWidget):
    r"""
    Author: Interaction

    The Axis object.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ScaleWidget_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_ScaleWidget

    def GetScale(self):
        return _PyAnyCAD.ScaleWidget_GetScale(self)

    def GetStartScale(self):
        return _PyAnyCAD.ScaleWidget_GetStartScale(self)

    def GetNodes(self):
        return _PyAnyCAD.ScaleWidget_GetNodes(self)

    @staticmethod
    def Create(length):
        return _PyAnyCAD.ScaleWidget_Create(length)

    def ShowArrow(self, userId):
        return _PyAnyCAD.ScaleWidget_ShowArrow(self, userId)

    def Initialize(self, frame):
        return _PyAnyCAD.ScaleWidget_Initialize(self, frame)

    def SetDragGrip(self, id):
        return _PyAnyCAD.ScaleWidget_SetDragGrip(self, id)

    def BeginDrag(self):
        return _PyAnyCAD.ScaleWidget_BeginDrag(self)

    def Dragging(self, pick):
        return _PyAnyCAD.ScaleWidget_Dragging(self, pick)

    def EndDrag(self):
        return _PyAnyCAD.ScaleWidget_EndDrag(self)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.ScaleWidget_BeforeRendering(self, ctx)

    def SetValue(self, val):
        return _PyAnyCAD.ScaleWidget_SetValue(self, val)

    def CloneScaleWidget(self):
        return _PyAnyCAD.ScaleWidget_CloneScaleWidget(self)

    def Clone(self):
        return _PyAnyCAD.ScaleWidget_Clone(self)

# Register ScaleWidget in _PyAnyCAD:
_PyAnyCAD.ScaleWidget_swigregister(ScaleWidget)
class FrameEditor(Editor):
    r"""
    Author: Interaction
    FrameEditor.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, widget, name):
        if self.__class__ == FrameEditor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.FrameEditor_swiginit(self, _PyAnyCAD.new_FrameEditor(_self, widget, name))
    __swig_destroy__ = _PyAnyCAD.delete_FrameEditor

    def GetWidget(self):
        return _PyAnyCAD.FrameEditor_GetWidget(self)

    def EndInput(self):
        return _PyAnyCAD.FrameEditor_EndInput(self)

    def Start(self, ctx):
        return _PyAnyCAD.FrameEditor_Start(self, ctx)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.FrameEditor_BeforeRendering(self, ctx)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.FrameEditor_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.FrameEditor_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.FrameEditor_OnMouseMove(self, ctx, evt)

    def OnInput(self, ctx, input):
        return _PyAnyCAD.FrameEditor_OnInput(self, ctx, input)

    def PreviewTransform(self, ctx, trf):
        return _PyAnyCAD.FrameEditor_PreviewTransform(self, ctx, trf)

    def ApplyTransform(self, ctx, trf):
        return _PyAnyCAD.FrameEditor_ApplyTransform(self, ctx, trf)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_FrameEditor(self)
        return weakref.proxy(self)

# Register FrameEditor in _PyAnyCAD:
_PyAnyCAD.FrameEditor_swigregister(FrameEditor)
class NodeFrameEidtor(FrameEditor):
    r"""
     Author: Interaction
    SceneNode编辑器
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pNode, widget, name):
        if self.__class__ == NodeFrameEidtor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.NodeFrameEidtor_swiginit(self, _PyAnyCAD.new_NodeFrameEidtor(_self, pNode, widget, name))

    def UpdateWidget(self):
        return _PyAnyCAD.NodeFrameEidtor_UpdateWidget(self)

    def Start(self, ctx):
        return _PyAnyCAD.NodeFrameEidtor_Start(self, ctx)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.NodeFrameEidtor_OnKeyUp(self, ctx, evt)

    def ApplyTransform(self, ctx, trf):
        return _PyAnyCAD.NodeFrameEidtor_ApplyTransform(self, ctx, trf)

    def PreviewTransform(self, ctx, trf):
        return _PyAnyCAD.NodeFrameEidtor_PreviewTransform(self, ctx, trf)

    def SetWidgetCenter(self, positionId):
        return _PyAnyCAD.NodeFrameEidtor_SetWidgetCenter(self, positionId)
    __swig_destroy__ = _PyAnyCAD.delete_NodeFrameEidtor
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_NodeFrameEidtor(self)
        return weakref.proxy(self)

# Register NodeFrameEidtor in _PyAnyCAD:
_PyAnyCAD.NodeFrameEidtor_swigregister(NodeFrameEidtor)
class StackEditor(Editor):
    r"""
    Author: Interaction
    支持Editor堆栈，嵌套Editor.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == StackEditor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.StackEditor_swiginit(self, _PyAnyCAD.new_StackEditor(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_StackEditor

    def GetRepeat(self):
        return _PyAnyCAD.StackEditor_GetRepeat(self)

    def SetRepeat(self, val):
        return _PyAnyCAD.StackEditor_SetRepeat(self, val)

    def BeforeRendering(self, ctx):
        return _PyAnyCAD.StackEditor_BeforeRendering(self, ctx)

    def Start(self, ctx):
        return _PyAnyCAD.StackEditor_Start(self, ctx)

    def Finish(self, ctx):
        return _PyAnyCAD.StackEditor_Finish(self, ctx)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.StackEditor_OnMouseDown(self, ctx, evt)

    def OnMouseUp(self, ctx, evt):
        return _PyAnyCAD.StackEditor_OnMouseUp(self, ctx, evt)

    def OnMouseMove(self, ctx, evt):
        return _PyAnyCAD.StackEditor_OnMouseMove(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.StackEditor_OnKeyUp(self, ctx, evt)

    def OnInput(self, ctx, input):
        return _PyAnyCAD.StackEditor_OnInput(self, ctx, input)

    def OnDocumentChanged(self, ctx, args):
        return _PyAnyCAD.StackEditor_OnDocumentChanged(self, ctx, args)

    def OnSelectionChanged(self, ctx):
        return _PyAnyCAD.StackEditor_OnSelectionChanged(self, ctx)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_StackEditor(self)
        return weakref.proxy(self)

# Register StackEditor in _PyAnyCAD:
_PyAnyCAD.StackEditor_swigregister(StackEditor)
class Animation(object):
    r"""
    Author: Simulate
    Animation
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.Animation_swiginit(self, _PyAnyCAD.new_Animation())
    __swig_destroy__ = _PyAnyCAD.delete_Animation

    def GetEnabled(self):
        return _PyAnyCAD.Animation_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.Animation_SetEnabled(self, val)

    def GetPaused(self):
        return _PyAnyCAD.Animation_GetPaused(self)

    def SetPaused(self, val):
        return _PyAnyCAD.Animation_SetPaused(self, val)

    def GetLoop(self):
        return _PyAnyCAD.Animation_GetLoop(self)

    def SetLoop(self, val):
        return _PyAnyCAD.Animation_SetLoop(self, val)

    def GetDuration(self):
        return _PyAnyCAD.Animation_GetDuration(self)

    def Play(self, time):
        r"""
        Play the animation.
        :type time: float
        :param time: the timer.
        :rtype: boolean
        :return: false if finished.
        """
        return _PyAnyCAD.Animation_Play(self, time)

    def Reset(self):
        r"""Reset to initial state."""
        return _PyAnyCAD.Animation_Reset(self)

# Register Animation in _PyAnyCAD:
_PyAnyCAD.Animation_swigregister(Animation)
class RigidAnimationClip(object):
    r"""
    Author: Simulate
    RigidAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RigidAnimationClip_swiginit(self, _PyAnyCAD.new_RigidAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RigidAnimationClip

    def GetStartTime(self):
        return _PyAnyCAD.RigidAnimationClip_GetStartTime(self)

    def SetStartTime(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetStartTime(self, val)

    def GetEndTime(self):
        return _PyAnyCAD.RigidAnimationClip_GetEndTime(self)

    def SetEndTime(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetEndTime(self, val)

    def GetEnabled(self):
        return _PyAnyCAD.RigidAnimationClip_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.RigidAnimationClip_SetEnabled(self, val)

    def Play(self, time):
        return _PyAnyCAD.RigidAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RigidAnimationClip_Reset(self)

# Register RigidAnimationClip in _PyAnyCAD:
_PyAnyCAD.RigidAnimationClip_swigregister(RigidAnimationClip)
class RigidAnimation(Animation):
    r"""
    Author: Simulate
    RigidAnimation
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RigidAnimation_swiginit(self, _PyAnyCAD.new_RigidAnimation())
    __swig_destroy__ = _PyAnyCAD.delete_RigidAnimation

    def GetName(self):
        return _PyAnyCAD.RigidAnimation_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RigidAnimation_SetName(self, val)

    def Add(self, clip):
        return _PyAnyCAD.RigidAnimation_Add(self, clip)

    def Play(self, time):
        return _PyAnyCAD.RigidAnimation_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RigidAnimation_Reset(self)

# Register RigidAnimation in _PyAnyCAD:
_PyAnyCAD.RigidAnimation_swigregister(RigidAnimation)
class MatrixAnimationClip(RigidAnimationClip):
    r"""
    Author: Simulate
    MatrixAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, startTrf, endTrf, startTime, endTime):
        _PyAnyCAD.MatrixAnimationClip_swiginit(self, _PyAnyCAD.new_MatrixAnimationClip(node, startTrf, endTrf, startTime, endTime))
    __swig_destroy__ = _PyAnyCAD.delete_MatrixAnimationClip

    def GetStartMatrix(self):
        return _PyAnyCAD.MatrixAnimationClip_GetStartMatrix(self)

    def SetStartMatrix(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetStartMatrix(self, val)

    def GetEndMatrix(self):
        return _PyAnyCAD.MatrixAnimationClip_GetEndMatrix(self)

    def SetEndMatrix(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetEndMatrix(self, val)

    def GetNode(self):
        return _PyAnyCAD.MatrixAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MatrixAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MatrixAnimationClip_Play(self, time)

# Register MatrixAnimationClip in _PyAnyCAD:
_PyAnyCAD.MatrixAnimationClip_swigregister(MatrixAnimationClip)
class RotateAnimationClip(RigidAnimationClip):
    r"""
    Author: Simulate
    RotateAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RotateAnimationClip_swiginit(self, _PyAnyCAD.new_RotateAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RotateAnimationClip

    def GetDirection(self):
        return _PyAnyCAD.RotateAnimationClip_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetDirection(self, val)

    def GetAngle(self):
        return _PyAnyCAD.RotateAnimationClip_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetAngle(self, val)

    def GetNode(self):
        return _PyAnyCAD.RotateAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.RotateAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.RotateAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.RotateAnimationClip_Reset(self)

# Register RotateAnimationClip in _PyAnyCAD:
_PyAnyCAD.RotateAnimationClip_swigregister(RotateAnimationClip)
class MaterialAnimationClip(RigidAnimationClip):
    r"""
    Author: Simulate
    MaterialAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, faceMaterial, edgeMaterial, duration, startTime, endTime):
        _PyAnyCAD.MaterialAnimationClip_swiginit(self, _PyAnyCAD.new_MaterialAnimationClip(node, faceMaterial, edgeMaterial, duration, startTime, endTime))
    __swig_destroy__ = _PyAnyCAD.delete_MaterialAnimationClip

    def GetDuration(self):
        return _PyAnyCAD.MaterialAnimationClip_GetDuration(self)

    def SetDuration(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetDuration(self, val)

    def GetFaceMaterial(self):
        return _PyAnyCAD.MaterialAnimationClip_GetFaceMaterial(self)

    def SetFaceMaterial(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetFaceMaterial(self, val)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.MaterialAnimationClip_GetEdgeMaterial(self)

    def SetEdgeMaterial(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetEdgeMaterial(self, val)

    def GetNode(self):
        return _PyAnyCAD.MaterialAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MaterialAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MaterialAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.MaterialAnimationClip_Reset(self)

# Register MaterialAnimationClip in _PyAnyCAD:
_PyAnyCAD.MaterialAnimationClip_swigregister(MaterialAnimationClip)
class MoveAnimationClip(RigidAnimationClip):
    r"""
    Author: Simulate
    MoveAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.MoveAnimationClip_swiginit(self, _PyAnyCAD.new_MoveAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_MoveAnimationClip

    def GetDirection(self):
        return _PyAnyCAD.MoveAnimationClip_GetDirection(self)

    def SetDirection(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetDirection(self, val)

    def GetDistance(self):
        return _PyAnyCAD.MoveAnimationClip_GetDistance(self)

    def SetDistance(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetDistance(self, val)

    def GetNode(self):
        return _PyAnyCAD.MoveAnimationClip_GetNode(self)

    def SetNode(self, val):
        return _PyAnyCAD.MoveAnimationClip_SetNode(self, val)

    def Play(self, time):
        return _PyAnyCAD.MoveAnimationClip_Play(self, time)

    def Reset(self):
        return _PyAnyCAD.MoveAnimationClip_Reset(self)

# Register MoveAnimationClip in _PyAnyCAD:
_PyAnyCAD.MoveAnimationClip_swigregister(MoveAnimationClip)
class MeshTool(object):
    r"""
    Author: AdvModeling
    MeshTool
    三角网格相关算法
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeSection(*args):
        return _PyAnyCAD.MeshTool_ComputeSection(*args)

    @staticmethod
    def CreateWireframe(mesh):
        r"""
        根据Mesh构造其线框模式
        :type mesh: :py:class:`BufferGeometry`
        :param mesh: 三角形网格
        :rtype: :py:class:`BufferGeometry`
        :return: 线框模式
        """
        return _PyAnyCAD.MeshTool_CreateWireframe(mesh)

    def __init__(self):
        _PyAnyCAD.MeshTool_swiginit(self, _PyAnyCAD.new_MeshTool())
    __swig_destroy__ = _PyAnyCAD.delete_MeshTool

# Register MeshTool in _PyAnyCAD:
_PyAnyCAD.MeshTool_swigregister(MeshTool)
class NormalCalculator(object):
    r"""
    Author: Rendering
    Normal utilities
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeVertexNormals(pGeometry):
        return _PyAnyCAD.NormalCalculator_ComputeVertexNormals(pGeometry)

    def __init__(self):
        _PyAnyCAD.NormalCalculator_swiginit(self, _PyAnyCAD.new_NormalCalculator())
    __swig_destroy__ = _PyAnyCAD.delete_NormalCalculator

# Register NormalCalculator in _PyAnyCAD:
_PyAnyCAD.NormalCalculator_swigregister(NormalCalculator)
EnumSystemColorMap_Rainbow = _PyAnyCAD.EnumSystemColorMap_Rainbow
EnumSystemColorMap_Cooltowarm = _PyAnyCAD.EnumSystemColorMap_Cooltowarm
EnumSystemColorMap_Blackbody = _PyAnyCAD.EnumSystemColorMap_Blackbody
EnumSystemColorMap_Grayscale = _PyAnyCAD.EnumSystemColorMap_Grayscale
class ColorMapKeyword(object):
    r"""
    Author: Rendering
    ColorMapKeyword
    定义关键颜色
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ColorMapKeyword_swiginit(self, _PyAnyCAD.new_ColorMapKeyword())

    @staticmethod
    def Create(name):
        r"""
        创建系统内置的颜色表
        :type name: int
        :param name: 名称
        :rtype: :py:class:`ColorMapKeyword`
        :return: 对象
        """
        return _PyAnyCAD.ColorMapKeyword_Create(name)

    def Reserve(self, count):
        r"""
        设置元素大小
        :type count: int
        :param count: 数目
        """
        return _PyAnyCAD.ColorMapKeyword_Reserve(self, count)

    def AddItem(self, key, color):
        r"""
        增加颜色段
        :type key: float
        :param key: 取值范围[0, 1]
        :type color: int
        :param color: 颜色RGB组成的颜色
        """
        return _PyAnyCAD.ColorMapKeyword_AddItem(self, key, color)

    def GetCount(self):
        return _PyAnyCAD.ColorMapKeyword_GetCount(self)
    __swig_destroy__ = _PyAnyCAD.delete_ColorMapKeyword

# Register ColorMapKeyword in _PyAnyCAD:
_PyAnyCAD.ColorMapKeyword_swigregister(ColorMapKeyword)
class ColorLookupTable(object):
    r"""
    Author: Rendering
    ColorLookupTable
    定义颜色查找表，设置最小值和最大值，默认颜色数为32
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.ColorLookupTable_swiginit(self, _PyAnyCAD.new_ColorLookupTable(*args))

    def GetMinValue(self):
        return _PyAnyCAD.ColorLookupTable_GetMinValue(self)

    def SetMinValue(self, val):
        return _PyAnyCAD.ColorLookupTable_SetMinValue(self, val)

    def GetMaxValue(self):
        return _PyAnyCAD.ColorLookupTable_GetMaxValue(self)

    def SetMaxValue(self, val):
        return _PyAnyCAD.ColorLookupTable_SetMaxValue(self, val)

    def GetColorNumber(self):
        return _PyAnyCAD.ColorLookupTable_GetColorNumber(self)

    def SetColorNumber(self, val):
        return _PyAnyCAD.ColorLookupTable_SetColorNumber(self, val)

    def GetColorTable(self):
        return _PyAnyCAD.ColorLookupTable_GetColorTable(self)

    def GetColorMap(self):
        return _PyAnyCAD.ColorLookupTable_GetColorMap(self)

    def SetColorMap(self, keyword):
        r"""
        设置颜色样式
        :type keyword: :py:class:`ColorMapKeyword`
        :param keyword: 颜色样式表
        """
        return _PyAnyCAD.ColorLookupTable_SetColorMap(self, keyword)

    def GetValueRange(self):
        r"""
        数值范围
        :rtype: float
        :return: 
        """
        return _PyAnyCAD.ColorLookupTable_GetValueRange(self)

    def GetColor(self, alpha):
        r"""
        根据数值查找颜色
        :type alpha: float
        :param alpha: 数值
        :rtype: :py:class:`vec3`
        :return: 颜色
        """
        return _PyAnyCAD.ColorLookupTable_GetColor(self, alpha)

    def CreateImage(self):
        r"""
        创建颜色表的位图图片
        :rtype: :py:class:`MemoryImage`
        :return: 位图
        """
        return _PyAnyCAD.ColorLookupTable_CreateImage(self)

    def ComputeColors(self, data, scale):
        r"""
        批量计算颜色
        :type data: :py:class:`DoubleList`
        :param data: 数值列表
        :type scale: float
        :param scale: 缩放值
        :rtype: :py:class:`Float32Buffer`
        :return: 颜色值
        """
        return _PyAnyCAD.ColorLookupTable_ComputeColors(self, data, scale)
    __swig_destroy__ = _PyAnyCAD.delete_ColorLookupTable

# Register ColorLookupTable in _PyAnyCAD:
_PyAnyCAD.ColorLookupTable_swigregister(ColorLookupTable)
class PaletteWidget(WindowNode2D):
    r"""
    Author: Interaction
    PaletteWidget
    定义调色板
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PaletteWidget_Cast(obj)

    def __init__(self):
        _PyAnyCAD.PaletteWidget_swiginit(self, _PyAnyCAD.new_PaletteWidget())
    __swig_destroy__ = _PyAnyCAD.delete_PaletteWidget

    def GetWidth(self):
        return _PyAnyCAD.PaletteWidget_GetWidth(self)

    def SetWidth(self, val):
        return _PyAnyCAD.PaletteWidget_SetWidth(self, val)

    def GetHeight(self):
        return _PyAnyCAD.PaletteWidget_GetHeight(self)

    def SetHeight(self, val):
        return _PyAnyCAD.PaletteWidget_SetHeight(self, val)

    def SetTitle(self, title):
        r"""
        设置标题
        :type title: anycore::StringW
        :param title:
        """
        return _PyAnyCAD.PaletteWidget_SetTitle(self, title)

    def SetTextColor(self, clr):
        r"""
        设置文本颜色
        :type clr: :py:class:`vec3`
        :param clr: 颜色
        """
        return _PyAnyCAD.PaletteWidget_SetTextColor(self, clr)

    def AddItemText(self, text):
        r"""
        自定义颜色对应的文本，默认为数值
        :type text: anycore::StringW
        :param text: 文本内容
        """
        return _PyAnyCAD.PaletteWidget_AddItemText(self, text)

    def ClearItems(self):
        r"""清空与颜色对应的文本列表"""
        return _PyAnyCAD.PaletteWidget_ClearItems(self)

    def Update(self, colorTable):
        r"""
        根据颜色表更新调色板显示对象
        :type colorTable: :py:class:`ColorLookupTable`
        :param colorTable:
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.PaletteWidget_Update(self, colorTable)

# Register PaletteWidget in _PyAnyCAD:
_PyAnyCAD.PaletteWidget_swigregister(PaletteWidget)
class PlotCurveFunctor(object):
    r"""
    Author: Interaction
    PlotCurveFunctor.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PlotCurveFunctor

    def f(self, idx, t):
        return _PyAnyCAD.PlotCurveFunctor_f(self, idx, t)

    def __init__(self):
        if self.__class__ == PlotCurveFunctor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PlotCurveFunctor_swiginit(self, _PyAnyCAD.new_PlotCurveFunctor(_self, ))
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PlotCurveFunctor(self)
        return weakref.proxy(self)

# Register PlotCurveFunctor in _PyAnyCAD:
_PyAnyCAD.PlotCurveFunctor_swigregister(PlotCurveFunctor)
class PlotSurfaceFunctor(object):
    r"""
    Author: Interaction
    PlotSurfaceFunctor.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_PlotSurfaceFunctor

    def f(self, idxU, idxV, u, v):
        return _PyAnyCAD.PlotSurfaceFunctor_f(self, idxU, idxV, u, v)

    def __init__(self):
        if self.__class__ == PlotSurfaceFunctor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PlotSurfaceFunctor_swiginit(self, _PyAnyCAD.new_PlotSurfaceFunctor(_self, ))
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PlotSurfaceFunctor(self)
        return weakref.proxy(self)

# Register PlotSurfaceFunctor in _PyAnyCAD:
_PyAnyCAD.PlotSurfaceFunctor_swigregister(PlotSurfaceFunctor)
class PlotRange(object):
    r"""
    Author: Interaction
    PlotRange.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PlotRange_swiginit(self, _PyAnyCAD.new_PlotRange(*args))

    def GetMin(self):
        return _PyAnyCAD.PlotRange_GetMin(self)

    def SetMin(self, val):
        return _PyAnyCAD.PlotRange_SetMin(self, val)

    def GetMax(self):
        return _PyAnyCAD.PlotRange_GetMax(self)

    def SetMax(self, val):
        return _PyAnyCAD.PlotRange_SetMax(self, val)

    def GetStep(self):
        return _PyAnyCAD.PlotRange_GetStep(self)

    def SetStep(self, val):
        return _PyAnyCAD.PlotRange_SetStep(self, val)

    def IsValid(self):
        return _PyAnyCAD.PlotRange_IsValid(self)

    def GetSteps(self):
        return _PyAnyCAD.PlotRange_GetSteps(self)

    def GetRange(self):
        return _PyAnyCAD.PlotRange_GetRange(self)

    def Contains(self, val):
        return _PyAnyCAD.PlotRange_Contains(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_PlotRange

# Register PlotRange in _PyAnyCAD:
_PyAnyCAD.PlotRange_swigregister(PlotRange)
class Matplot(object):
    r"""
    Author: Interaction
    Matplot.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, title):
        _PyAnyCAD.Matplot_swiginit(self, _PyAnyCAD.new_Matplot(title))
    __swig_destroy__ = _PyAnyCAD.delete_Matplot

    def GetTitle(self):
        return _PyAnyCAD.Matplot_GetTitle(self)

    def SetTitle(self, val):
        return _PyAnyCAD.Matplot_SetTitle(self, val)

    def GetMaterial(self):
        return _PyAnyCAD.Matplot_GetMaterial(self)

    def GetColorTable(self):
        return _PyAnyCAD.Matplot_GetColorTable(self)

    def AddCurve(self, range, func, clr):
        return _PyAnyCAD.Matplot_AddCurve(self, range, func, clr)

    def AddSurface(self, uRange, vRange, func, showEdge):
        return _PyAnyCAD.Matplot_AddSurface(self, uRange, vRange, func, showEdge)

    def AddMesh(self, xcount, ycount, func, showEdge):
        r"""
        Create mesh with xcount X ycount
        :type xcount: int
        :param xcount: the X dimension >= 2
        :type ycount: int
        :param ycount: the y dimension >= 2
        :type func: :py:class:`PlotSurfaceFunctor`
        :param func: the callback to provide the vertex data.
        :type showEdge: boolean
        :param showEdge: if build the edges
        :rtype: boolean
        :return: true if successflly.
        """
        return _PyAnyCAD.Matplot_AddMesh(self, xcount, ycount, func, showEdge)

    def Build(self, *args):
        return _PyAnyCAD.Matplot_Build(self, *args)

    def GetSurface(self, idx):
        return _PyAnyCAD.Matplot_GetSurface(self, idx)

# Register Matplot in _PyAnyCAD:
_PyAnyCAD.Matplot_swigregister(Matplot)
class CollisionWorld(object):
    r"""
    Author: Simulate
    碰撞检查。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.CollisionWorld_swiginit(self, _PyAnyCAD.new_CollisionWorld())
    __swig_destroy__ = _PyAnyCAD.delete_CollisionWorld

# Register CollisionWorld in _PyAnyCAD:
_PyAnyCAD.CollisionWorld_swigregister(CollisionWorld)
class NodeCollisionDetector(object):
    r"""
    Author: Simulate
    碰撞检查：对于两个Mesh组成的Scene进行碰撞检查。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nodeA, world=0):
        _PyAnyCAD.NodeCollisionDetector_swiginit(self, _PyAnyCAD.new_NodeCollisionDetector(nodeA, world))
    __swig_destroy__ = _PyAnyCAD.delete_NodeCollisionDetector

    def GetWorld(self):
        return _PyAnyCAD.NodeCollisionDetector_GetWorld(self)

    def Prepare(self):
        return _PyAnyCAD.NodeCollisionDetector_Prepare(self)

    def Test(self, *args):
        return _PyAnyCAD.NodeCollisionDetector_Test(self, *args)

# Register NodeCollisionDetector in _PyAnyCAD:
_PyAnyCAD.NodeCollisionDetector_swigregister(NodeCollisionDetector)
class BBoxUtil(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeStrictBBox(node):
        return _PyAnyCAD.BBoxUtil_ComputeStrictBBox(node)

    def __init__(self):
        _PyAnyCAD.BBoxUtil_swiginit(self, _PyAnyCAD.new_BBoxUtil())
    __swig_destroy__ = _PyAnyCAD.delete_BBoxUtil

# Register BBoxUtil in _PyAnyCAD:
_PyAnyCAD.BBoxUtil_swigregister(BBoxUtil)
EnumRobotJointType_Fixed = _PyAnyCAD.EnumRobotJointType_Fixed
EnumRobotJointType_Revolute = _PyAnyCAD.EnumRobotJointType_Revolute
EnumRobotJointType_Prismatic = _PyAnyCAD.EnumRobotJointType_Prismatic
EnumDHComputeMethod_Standard_DH = _PyAnyCAD.EnumDHComputeMethod_Standard_DH
EnumDHComputeMethod_Modified_DH = _PyAnyCAD.EnumDHComputeMethod_Modified_DH
class RobotDH(object):
    r"""
     Author: Simulate

    定义DH参数
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotDH_swiginit(self, _PyAnyCAD.new_RobotDH(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotDH

    def GetJointType(self):
        return _PyAnyCAD.RobotDH_GetJointType(self)

    def SetJointType(self, val):
        return _PyAnyCAD.RobotDH_SetJointType(self, val)

    def GetAlpha(self):
        return _PyAnyCAD.RobotDH_GetAlpha(self)

    def SetAlpha(self, val):
        return _PyAnyCAD.RobotDH_SetAlpha(self, val)

    def GetA(self):
        return _PyAnyCAD.RobotDH_GetA(self)

    def SetA(self, val):
        return _PyAnyCAD.RobotDH_SetA(self, val)

    def GetD(self):
        return _PyAnyCAD.RobotDH_GetD(self)

    def SetD(self, val):
        return _PyAnyCAD.RobotDH_SetD(self, val)

    def GetTheta(self):
        return _PyAnyCAD.RobotDH_GetTheta(self)

    def SetTheta(self, val):
        return _PyAnyCAD.RobotDH_SetTheta(self, val)

    def GetFrame(self):
        return _PyAnyCAD.RobotDH_GetFrame(self)

    def SetFrame(self, val):
        return _PyAnyCAD.RobotDH_SetFrame(self, val)

# Register RobotDH in _PyAnyCAD:
_PyAnyCAD.RobotDH_swigregister(RobotDH)
class RobotFrameBuilder(object):
    r"""
     Author: Simulate

    根据DH参数计算Frame。RobotFrameBuilder会自动增加冗余的节点参数
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.RobotFrameBuilder_swiginit(self, _PyAnyCAD.new_RobotFrameBuilder())
    __swig_destroy__ = _PyAnyCAD.delete_RobotFrameBuilder

    def Add(self, type, alpha, a, d, theta):
        r"""
        添加DH参数
        :type type: int
        :param type: 节点类型
        :type alpha: float
        :param alpha: alpha/twist
        :type a: float
        :param a:  a/length
        :type d: float
        :param d: d/offset
        :type theta: float
        :param theta: theta/joint
        """
        return _PyAnyCAD.RobotFrameBuilder_Add(self, type, alpha, a, d, theta)

    def Build(self, *args):
        return _PyAnyCAD.RobotFrameBuilder_Build(self, *args)

    def GetCount(self):
        r"""
        获取个数
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.RobotFrameBuilder_GetCount(self)

    def GetFrame(self, idx):
        r"""
        获取节点的矩阵/坐标系
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`Matrix4d`
        :return: 矩阵
        """
        return _PyAnyCAD.RobotFrameBuilder_GetFrame(self, idx)

    def GetJointType(self, idx):
        r"""
        获取节点类型
        :type idx: int
        :param idx: 索引
        :rtype: int
        :return: 矩阵
        """
        return _PyAnyCAD.RobotFrameBuilder_GetJointType(self, idx)

    def GetDH(self, idx):
        r"""
        获取DH参数
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`RobotDH`
        :return: DH参数
        """
        return _PyAnyCAD.RobotFrameBuilder_GetDH(self, idx)

# Register RobotFrameBuilder in _PyAnyCAD:
_PyAnyCAD.RobotFrameBuilder_swigregister(RobotFrameBuilder)
class RobotJoint(object):
    r"""
    Author: Simulate

    机器人关节，轴的定义

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotJoint_swiginit(self, _PyAnyCAD.new_RobotJoint(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotJoint

    def GetJointType(self):
        return _PyAnyCAD.RobotJoint_GetJointType(self)

    def SetJointType(self, val):
        return _PyAnyCAD.RobotJoint_SetJointType(self, val)

    def GetIndex(self):
        return _PyAnyCAD.RobotJoint_GetIndex(self)

    def SetIndex(self, val):
        return _PyAnyCAD.RobotJoint_SetIndex(self, val)

    def GetValue(self):
        return _PyAnyCAD.RobotJoint_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.RobotJoint_SetValue(self, val)

    def GetMaxValue(self):
        return _PyAnyCAD.RobotJoint_GetMaxValue(self)

    def SetMaxValue(self, val):
        return _PyAnyCAD.RobotJoint_SetMaxValue(self, val)

    def GetMinValue(self):
        return _PyAnyCAD.RobotJoint_GetMinValue(self)

    def SetMinValue(self, val):
        return _PyAnyCAD.RobotJoint_SetMinValue(self, val)

    def GetVelocity(self):
        return _PyAnyCAD.RobotJoint_GetVelocity(self)

    def SetVelocity(self, val):
        return _PyAnyCAD.RobotJoint_SetVelocity(self, val)

    def GetAxisNode(self):
        return _PyAnyCAD.RobotJoint_GetAxisNode(self)

    def SetAxisNode(self, val):
        return _PyAnyCAD.RobotJoint_SetAxisNode(self, val)

    def GetFrameTip(self):
        return _PyAnyCAD.RobotJoint_GetFrameTip(self)

    def SetFrameTip(self, val):
        return _PyAnyCAD.RobotJoint_SetFrameTip(self, val)

    def GetWorldFrame(self):
        return _PyAnyCAD.RobotJoint_GetWorldFrame(self)

    def SetWorldFrame(self, val):
        return _PyAnyCAD.RobotJoint_SetWorldFrame(self, val)

    def Clone(self):
        return _PyAnyCAD.RobotJoint_Clone(self)

    def GetFrame(self):
        r"""
        获取局部的矩阵
        :rtype: :py:class:`Matrix4d`
        :return: 局部矩阵
        """
        return _PyAnyCAD.RobotJoint_GetFrame(self)

    def Update(self):
        r"""Upadate the vistual of the joint."""
        return _PyAnyCAD.RobotJoint_Update(self)

    def SetAxisVisible(self, bShow):
        return _PyAnyCAD.RobotJoint_SetAxisVisible(self, bShow)

# Register RobotJoint in _PyAnyCAD:
_PyAnyCAD.RobotJoint_swigregister(RobotJoint)
class RobotLink(object):
    r"""
    Author: Simulate
    RobotLink
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotLink_swiginit(self, _PyAnyCAD.new_RobotLink(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotLink

    def GetName(self):
        return _PyAnyCAD.RobotLink_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RobotLink_SetName(self, val)

    def GetLocalTransform(self):
        return _PyAnyCAD.RobotLink_GetLocalTransform(self)

    def SetLocalTransform(self, val):
        return _PyAnyCAD.RobotLink_SetLocalTransform(self, val)

    def GetWorldInv(self):
        return _PyAnyCAD.RobotLink_GetWorldInv(self)

    def SetWorldInv(self, val):
        return _PyAnyCAD.RobotLink_SetWorldInv(self, val)

    def GetJointIndex(self):
        return _PyAnyCAD.RobotLink_GetJointIndex(self)

    def SetJointIndex(self, val):
        return _PyAnyCAD.RobotLink_SetJointIndex(self, val)

    def GetVisualNode(self):
        return _PyAnyCAD.RobotLink_GetVisualNode(self)

    def SetVisualNode(self, node):
        return _PyAnyCAD.RobotLink_SetVisualNode(self, node)

    def SetVisible(self, bShow):
        return _PyAnyCAD.RobotLink_SetVisible(self, bShow)

    def GetWorldTransform(self):
        return _PyAnyCAD.RobotLink_GetWorldTransform(self)

    def Clone(self):
        return _PyAnyCAD.RobotLink_Clone(self)

# Register RobotLink in _PyAnyCAD:
_PyAnyCAD.RobotLink_swigregister(RobotLink)
class RobotArm(GroupSceneNode):
    r"""
     Author: Simulate

    RobotArm
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RobotArm_Cast(obj)

    def __init__(self):
        _PyAnyCAD.RobotArm_swiginit(self, _PyAnyCAD.new_RobotArm())
    __swig_destroy__ = _PyAnyCAD.delete_RobotArm

    def GetAxisSize(self):
        return _PyAnyCAD.RobotArm_GetAxisSize(self)

    def SetAxisSize(self, val):
        return _PyAnyCAD.RobotArm_SetAxisSize(self, val)

    def AddJoint(self, *args):
        return _PyAnyCAD.RobotArm_AddJoint(self, *args)

    def GetJoint(self, idx):
        r"""
        Get RobotJoint by index
        :type idx: int
        :param idx: the index
        :rtype: :py:class:`RobotJoint`
        :return: the robot joint.
        """
        return _PyAnyCAD.RobotArm_GetJoint(self, idx)

    def GetJointCount(self):
        r"""
        Get the joint count.
        :rtype: int
        :return: the count.
        """
        return _PyAnyCAD.RobotArm_GetJointCount(self)

    def AddLink(self, *args):
        r"""
        Add link to bind the joint.
        :type jointIdx: int
        :param jointIdx: the index of the joint to bind.
        :type bone: :py:class:`SceneNode`
        :param bone: the visual node of the link.
        :rtype: int
        :return: the link index.
        """
        return _PyAnyCAD.RobotArm_AddLink(self, *args)

    def GetLink(self, idx):
        return _PyAnyCAD.RobotArm_GetLink(self, idx)

    def GetLinkCount(self):
        return _PyAnyCAD.RobotArm_GetLinkCount(self)

    def UpdateLink(self, linkIdx, bone):
        r"""
        Update the link.
        :param jointIdx: the link index.
        :type bone: :py:class:`SceneNode`
        :param bone: the new visual node.
        :rtype: boolean
        :return: true if successful.
        """
        return _PyAnyCAD.RobotArm_UpdateLink(self, linkIdx, bone)

    def Apply(self):
        r"""若对关节或Link做了修改，则调用以应用更改."""
        return _PyAnyCAD.RobotArm_Apply(self)

    def SetValue(self, idx, value):
        r"""Update the value of the joint."""
        return _PyAnyCAD.RobotArm_SetValue(self, idx, value)

    def GetValue(self, idx):
        return _PyAnyCAD.RobotArm_GetValue(self, idx)

    def ResetValues(self):
        r"""Set the values to zero."""
        return _PyAnyCAD.RobotArm_ResetValues(self)

    def UpdateFrames(self):
        r"""Compute the transform."""
        return _PyAnyCAD.RobotArm_UpdateFrames(self)

    def GetFinalFrame(self):
        r"""
        获取末端的矩阵
        :rtype: :py:class:`Matrix4d`
        :return: 矩阵
        """
        return _PyAnyCAD.RobotArm_GetFinalFrame(self)

    def ShowLinks(self, bShow):
        r"""
        Show the links.
        :type bShow: boolean
        :param bShow: true to show.
        """
        return _PyAnyCAD.RobotArm_ShowLinks(self, bShow)

    def ShowJoints(self, bShow):
        r"""
        Show the axis.
        :type bShow: boolean
        :param bShow: true to show
        """
        return _PyAnyCAD.RobotArm_ShowJoints(self, bShow)

    def SelfCollisionTest(self):
        r"""
        Self collision testing
        :rtype: std::vector< uint32_t,std::allocator< uint32_t > >
        :return: the link id pair.
        """
        return _PyAnyCAD.RobotArm_SelfCollisionTest(self)

    def CloneRobotArm(self):
        return _PyAnyCAD.RobotArm_CloneRobotArm(self)

    def Clone(self):
        return _PyAnyCAD.RobotArm_Clone(self)

# Register RobotArm in _PyAnyCAD:
_PyAnyCAD.RobotArm_swigregister(RobotArm)
class RobotBody(GroupSceneNode):
    r"""
     Author: Simulate

    RobotBody

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.RobotBody_Cast(obj)

    def __init__(self):
        _PyAnyCAD.RobotBody_swiginit(self, _PyAnyCAD.new_RobotBody())
    __swig_destroy__ = _PyAnyCAD.delete_RobotBody

    def Reset(self):
        return _PyAnyCAD.RobotBody_Reset(self)

    def AddArm(self, arm):
        return _PyAnyCAD.RobotBody_AddArm(self, arm)

    def RemoveArm(self, arm):
        return _PyAnyCAD.RobotBody_RemoveArm(self, arm)

    def GetArmCount(self):
        return _PyAnyCAD.RobotBody_GetArmCount(self)

    def GetArm(self, idx):
        return _PyAnyCAD.RobotBody_GetArm(self, idx)

    def SetValue(self, idxArm, idxJoint, v):
        return _PyAnyCAD.RobotBody_SetValue(self, idxArm, idxJoint, v)

    def GetValue(self, idxArm, idxJoint):
        return _PyAnyCAD.RobotBody_GetValue(self, idxArm, idxJoint)

    def UpdateFrames(self):
        return _PyAnyCAD.RobotBody_UpdateFrames(self)

    def GetFinalFrame(self, idxArm):
        return _PyAnyCAD.RobotBody_GetFinalFrame(self, idxArm)

    def ShowLinks(self, bShow):
        return _PyAnyCAD.RobotBody_ShowLinks(self, bShow)

    def ShowJoints(self, bShow):
        return _PyAnyCAD.RobotBody_ShowJoints(self, bShow)

    def CloneRobot(self):
        return _PyAnyCAD.RobotBody_CloneRobot(self)

    def Clone(self):
        return _PyAnyCAD.RobotBody_Clone(self)

# Register RobotBody in _PyAnyCAD:
_PyAnyCAD.RobotBody_swigregister(RobotBody)
class RobotAnimationClip(object):
    r"""
     Author: Simulate

    RobotAnimationClip
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotAnimationClip_swiginit(self, _PyAnyCAD.new_RobotAnimationClip(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotAnimationClip

    def GetJointIndex(self):
        return _PyAnyCAD.RobotAnimationClip_GetJointIndex(self)

    def SetJointIndex(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetJointIndex(self, val)

    def GetStartVar(self):
        return _PyAnyCAD.RobotAnimationClip_GetStartVar(self)

    def SetStartVar(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetStartVar(self, val)

    def GetEndVar(self):
        return _PyAnyCAD.RobotAnimationClip_GetEndVar(self)

    def SetEndVar(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEndVar(self, val)

    def GetStartTime(self):
        return _PyAnyCAD.RobotAnimationClip_GetStartTime(self)

    def SetStartTime(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetStartTime(self, val)

    def GetEndTime(self):
        return _PyAnyCAD.RobotAnimationClip_GetEndTime(self)

    def SetEndTime(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEndTime(self, val)

    def GetEnabled(self):
        return _PyAnyCAD.RobotAnimationClip_GetEnabled(self)

    def SetEnabled(self, val):
        return _PyAnyCAD.RobotAnimationClip_SetEnabled(self, val)

    def ComputeSpeed(self):
        r"""
        Compute the speed by time duration.
        :rtype: float
        :return: the speed.
        """
        return _PyAnyCAD.RobotAnimationClip_ComputeSpeed(self)

    def Play(self, arm, time):
        return _PyAnyCAD.RobotAnimationClip_Play(self, arm, time)

# Register RobotAnimationClip in _PyAnyCAD:
_PyAnyCAD.RobotAnimationClip_swigregister(RobotAnimationClip)
class RobotAnimation(Animation):
    r"""
    Author: Simulate
    RobotAnimation
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RobotAnimation_swiginit(self, _PyAnyCAD.new_RobotAnimation(*args))
    __swig_destroy__ = _PyAnyCAD.delete_RobotAnimation

    def GetName(self):
        return _PyAnyCAD.RobotAnimation_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.RobotAnimation_SetName(self, val)

    def GetArm(self):
        return _PyAnyCAD.RobotAnimation_GetArm(self)

    def SetArm(self, val):
        return _PyAnyCAD.RobotAnimation_SetArm(self, val)

    def AddClip(self, clip):
        r"""
        Add the animation clip.
        :type clip: :py:class:`RobotAnimationClip`
        :param clip: the clip.
        """
        return _PyAnyCAD.RobotAnimation_AddClip(self, clip)

    def RemoveClip(self, clip):
        r"""
        Remove the clip.
        :type clip: :py:class:`RobotAnimationClip`
        :param clip: the clip to be removed.
        :rtype: boolean
        :return: true if it exists.
        """
        return _PyAnyCAD.RobotAnimation_RemoveClip(self, clip)

    def GetClipCountOfJoint(self, jointIdx):
        return _PyAnyCAD.RobotAnimation_GetClipCountOfJoint(self, jointIdx)

    def GetClip(self, jointIdx, clipIdx):
        return _PyAnyCAD.RobotAnimation_GetClip(self, jointIdx, clipIdx)

    def Play(self, time):
        r"""
        Play the animation.
        :type time: float
        :param time: the timer.
        :rtype: boolean
        :return: false if finished.
        """
        return _PyAnyCAD.RobotAnimation_Play(self, time)

    def Reset(self):
        r"""Reset to initial state."""
        return _PyAnyCAD.RobotAnimation_Reset(self)

# Register RobotAnimation in _PyAnyCAD:
_PyAnyCAD.RobotAnimation_swigregister(RobotAnimation)
class IkSolver(object):
    r"""
    Author: Simulate

     IkSolver基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.IkSolver_swiginit(self, _PyAnyCAD.new_IkSolver())
    __swig_destroy__ = _PyAnyCAD.delete_IkSolver

    def Initialize(self, arm):
        r"""
        初始化
        :type arm: :py:class:`RobotArm`
        :param arm: 需要求解的关节
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.IkSolver_Initialize(self, arm)

    def MoveTo(self, position, rotation):
        r"""
        移动到指定位置
        :type position: :py:class:`Vector3d`
        :param position: 位置
        :type rotation: :py:class:`Matrix3d`
        :param rotation: 角度
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.IkSolver_MoveTo(self, position, rotation)

    def MoveToFrame(self, frame):
        r"""
        MoveTo的另外的形式。
        :type frame: :py:class:`Matrix4d`
        :param frame: 姿态。
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.IkSolver_MoveToFrame(self, frame)

    def GetValue(self, jointIdx):
        r"""
        获取关节的值
        :type jointIdx: int
        :param jointIdx: 索引
        :rtype: float
        :return: 值
        """
        return _PyAnyCAD.IkSolver_GetValue(self, jointIdx)

    def GetTcp(self):
        r"""
        获取工具坐标系的姿态
        :rtype: :py:class:`Matrix4d`
        :return: 姿态
        """
        return _PyAnyCAD.IkSolver_GetTcp(self)

# Register IkSolver in _PyAnyCAD:
_PyAnyCAD.IkSolver_swigregister(IkSolver)
class IkSolverFactory(object):
    r"""
    Author: Simulate

    IkSolver工厂
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.IkSolverFactory_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_IkSolverFactory

    def Create(self, name):
        r"""
        创建IkSolver
        :type name: string
        :param name: 名称
        :rtype: :py:class:`IkSolver`
        :return: IkSolver
        """
        return _PyAnyCAD.IkSolverFactory_Create(self, name)

    def List(self):
        r"""
        获取所有求解名称
        :rtype: :py:class:`StringList`
        :return: 列表
        """
        return _PyAnyCAD.IkSolverFactory_List(self)

# Register IkSolverFactory in _PyAnyCAD:
_PyAnyCAD.IkSolverFactory_swigregister(IkSolverFactory)
class SimulateInstance(object):
    r"""
    Author: Simulate
    仿真模块实例。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.SimulateInstance_Instance()

    def Initialize(self):
        return _PyAnyCAD.SimulateInstance_Initialize(self)

    def Destroy(self):
        return _PyAnyCAD.SimulateInstance_Destroy(self)

    @staticmethod
    def InternalRegisterSdk(a, b, d, e, f):
        return _PyAnyCAD.SimulateInstance_InternalRegisterSdk(a, b, d, e, f)
    __swig_destroy__ = _PyAnyCAD.delete_SimulateInstance

# Register SimulateInstance in _PyAnyCAD:
_PyAnyCAD.SimulateInstance_swigregister(SimulateInstance)
class PointCloud(ShapeSceneNode):
    r"""
    Author: PointCloud

    点云显示对象.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointCloud_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_PointCloud

    def GetMaterial(self):
        return _PyAnyCAD.PointCloud_GetMaterial(self)

    def SetMaterial(self, val):
        return _PyAnyCAD.PointCloud_SetMaterial(self, val)

    def GetNormalMaterial(self):
        return _PyAnyCAD.PointCloud_GetNormalMaterial(self)

    def SetNormalMaterial(self, val):
        return _PyAnyCAD.PointCloud_SetNormalMaterial(self, val)

    @staticmethod
    def Create(points, colors, normals, pointSize):
        r"""
        创建点云对象
        :type points: :py:class:`Float32Buffer`
        :param points: 顶点.
        :type colors: :py:class:`Float32Buffer`
        :param colors: 颜色，可选。
        :type normals: :py:class:`Float32Buffer`
        :param normals: 顶点法向，可选。
        :type pointSize: float
        :param pointSize: 点的大小.
        :rtype: :py:class:`PointCloud`
        :return: the PointCloud
        """
        return _PyAnyCAD.PointCloud_Create(points, colors, normals, pointSize)

    def AddPoints(self, points, colors, normals):
        r"""
        添加点云.
        :type points: :py:class:`Float32Buffer`
        :param points: 顶点.
        :type colors: :py:class:`Float32Buffer`
        :param colors: 颜色.
        :type normals: :py:class:`Float32Buffer`
        :param normals: 顶点法向
        """
        return _PyAnyCAD.PointCloud_AddPoints(self, points, colors, normals)

    def GetPointCount(self):
        r"""
        获取点的个数
        :rtype: int
        :return: 
        """
        return _PyAnyCAD.PointCloud_GetPointCount(self)

    def SetPointSize(self, pointSize):
        r"""
        设置点显示大小.
        :type pointSize: float
        :param pointSize: the point size.
        """
        return _PyAnyCAD.PointCloud_SetPointSize(self, pointSize)

    def UseVertexColors(self, enabled):
        r"""
        启用顶点着色.
        :type enabled: boolean
        :param enabled: true to use the point colors.
        """
        return _PyAnyCAD.PointCloud_UseVertexColors(self, enabled)

    def SetPosition(self, idx, position):
        r"""
        修改某个点的位置
        :type idx: int
        :param idx: 索引
        :type position: :py:class:`vec3`
        :param position: 位置
        """
        return _PyAnyCAD.PointCloud_SetPosition(self, idx, position)

    def GetPosition(self, idx):
        r"""
        获取点的位置
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`vec3`
        :return: 位置
        """
        return _PyAnyCAD.PointCloud_GetPosition(self, idx)

    def SetNormal(self, idx, normal):
        r"""
        修改法线
        :type idx: int
        :param idx: 索引
        :type normal: :py:class:`vec3`
        :param normal: 法线
        """
        return _PyAnyCAD.PointCloud_SetNormal(self, idx, normal)

    def GetNormal(self, idx):
        r"""
        获取法线
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`vec3`
        :return: 法线
        """
        return _PyAnyCAD.PointCloud_GetNormal(self, idx)

    def SetColor(self, idx, color):
        r"""
        修改颜色
        :type idx: int
        :param idx: 索引
        :type color: :py:class:`vec3`
        :param color: 颜色
        """
        return _PyAnyCAD.PointCloud_SetColor(self, idx, color)

    def GetColor(self, idx):
        r"""
        获取颜色
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`vec3`
        :return: 颜色
        """
        return _PyAnyCAD.PointCloud_GetColor(self, idx)

    def UpdateBoundingBox(self):
        r"""修改位置后，需要更新包围盒。"""
        return _PyAnyCAD.PointCloud_UpdateBoundingBox(self)

    def Clone(self):
        return _PyAnyCAD.PointCloud_Clone(self)

# Register PointCloud in _PyAnyCAD:
_PyAnyCAD.PointCloud_swigregister(PointCloud)
class SharedPointCloud(PointCloud):
    r"""
    Author: PointCloud

    进程间可共享内存的点云对象。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SharedPointCloud_Cast(obj)
    __swig_destroy__ = _PyAnyCAD.delete_SharedPointCloud

    @staticmethod
    def Create(shmName, bufferSize):
        r"""
        创建进程间共享内存点云对象
        :type shmName: string
        :param shmName: 共享内存名称
        :type bufferSize: int
        :param bufferSize: 内存的大小
        :rtype: :py:class:`SharedPointCloud`
        :return: 对象
        """
        return _PyAnyCAD.SharedPointCloud_Create(shmName, bufferSize)

    def Clone(self):
        return _PyAnyCAD.SharedPointCloud_Clone(self)

# Register SharedPointCloud in _PyAnyCAD:
_PyAnyCAD.SharedPointCloud_swigregister(SharedPointCloud)
class SharedShapeNode(PrimitiveSceneNode):
    r"""
    Author: PointCloud

    共享内存对象.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SharedShapeNode_Cast(obj)

    def __init__(self, shape):
        _PyAnyCAD.SharedShapeNode_swiginit(self, _PyAnyCAD.new_SharedShapeNode(shape))
    __swig_destroy__ = _PyAnyCAD.delete_SharedShapeNode

    @staticmethod
    def Create(shmName, bufferSize):
        return _PyAnyCAD.SharedShapeNode_Create(shmName, bufferSize)

    def Clone(self):
        return _PyAnyCAD.SharedShapeNode_Clone(self)

# Register SharedShapeNode in _PyAnyCAD:
_PyAnyCAD.SharedShapeNode_swigregister(SharedShapeNode)
class PointCloudComparer(object):
    r"""
    Author: PointCloud

    The point cloud comparer.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.PointCloudComparer_swiginit(self, _PyAnyCAD.new_PointCloudComparer())
    __swig_destroy__ = _PyAnyCAD.delete_PointCloudComparer

    def GetTolerance(self):
        return _PyAnyCAD.PointCloudComparer_GetTolerance(self)

    def SetTolerance(self, val):
        return _PyAnyCAD.PointCloudComparer_SetTolerance(self, val)

    def GetHitOn1(self):
        return _PyAnyCAD.PointCloudComparer_GetHitOn1(self)

    def GetHitOn2(self):
        return _PyAnyCAD.PointCloudComparer_GetHitOn2(self)

    def SetPointCloud1(self, pc1):
        return _PyAnyCAD.PointCloudComparer_SetPointCloud1(self, pc1)

    def SetPointCloud2(self, pc2):
        return _PyAnyCAD.PointCloudComparer_SetPointCloud2(self, pc2)

    def Perform(self):
        return _PyAnyCAD.PointCloudComparer_Perform(self)

    def GetCount(self):
        return _PyAnyCAD.PointCloudComparer_GetCount(self)

# Register PointCloudComparer in _PyAnyCAD:
_PyAnyCAD.PointCloudComparer_swigregister(PointCloudComparer)
class HoleDetector(object):
    r"""
    Author: AdvModeling
    孔特征识别
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.HoleDetector_swiginit(self, _PyAnyCAD.new_HoleDetector())
    __swig_destroy__ = _PyAnyCAD.delete_HoleDetector

    def Initialize(self, shape):
        r"""
        初始化，并快速计算孔信息
        :type shape: :py:class:`TopoShape`
        :param shape: 零件
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.HoleDetector_Initialize(self, shape)

    def Optimize(self):
        r"""进一步计算内面表面边的关系"""
        return _PyAnyCAD.HoleDetector_Optimize(self)

    def GetDirection(self):
        r"""
        获取朝向
        :rtype: :py:class:`gp_Dir`
        :return: 方向
        """
        return _PyAnyCAD.HoleDetector_GetDirection(self)

    def GetHoleCount(self):
        r"""
        Get the hole count.
        :rtype: int
        :return: the number.
        """
        return _PyAnyCAD.HoleDetector_GetHoleCount(self)

    def GetHoleDirection(self, holeIdx):
        r"""
        获取相贯孔的方向。仅对圆孔有效。
        :type holeIdx: int
        :param holeIdx: 孔的索引。
        :rtype: :py:class:`gp_Dir`
        :return: 返回方向
        """
        return _PyAnyCAD.HoleDetector_GetHoleDirection(self, holeIdx)

    def GetHoleExteriorWire(self, holeIdx):
        r"""
        获取孔的外部轮廓线.
        :type holeIdx: int
        :param holeIdx: the hole index.
        :rtype: :py:class:`TopoShape`
        :return: the edge IDs.
        """
        return _PyAnyCAD.HoleDetector_GetHoleExteriorWire(self, holeIdx)

    def GetHoleInteriorWire(self, holeIdx):
        r"""
        获取孔的内部轮廓线
        :type holeIdx: int
        :param holeIdx: the hole index.
        :rtype: :py:class:`TopoShape`
        :return: the edge IDs.
        """
        return _PyAnyCAD.HoleDetector_GetHoleInteriorWire(self, holeIdx)

    def GetHoleExteriorEdges(self, holeIdx):
        r"""
        获取孔的外表面的边的索引
        :type holeIdx: int
        :param holeIdx: 孔索引
        :rtype: :py:class:`Uint32List`
        :return: 
        """
        return _PyAnyCAD.HoleDetector_GetHoleExteriorEdges(self, holeIdx)

    def GetHoleInteriorEdges(self, holeIdx):
        r"""
        获取孔的内部边的索引
        :type holeIdx: int
        :param holeIdx: 孔索引
        :rtype: :py:class:`Uint32List`
        :return: 
        """
        return _PyAnyCAD.HoleDetector_GetHoleInteriorEdges(self, holeIdx)

    def GetFaceOfHole(self, holeIdx):
        r"""
        获取跟孔的内壁面
        :type holeIdx: int
        :param holeIdx: 孔的索引
        :rtype: :py:class:`TopoShapeList`
        :return: 
        """
        return _PyAnyCAD.HoleDetector_GetFaceOfHole(self, holeIdx)

    def GetEdge(self, edgeIdx):
        r"""
        获取边
        :type edgeIdx: int
        :param edgeIdx: 边的索引
        :rtype: :py:class:`TopoShape`
        :return: 边对象
        """
        return _PyAnyCAD.HoleDetector_GetEdge(self, edgeIdx)

    def GetFaceOfEdge(self, edgeIdx):
        r"""
        获取与轮廓边对应的面。仅限内外表面的边。
        :type edgeIdx: int
        :param edgeIdx: 边的索引
        :rtype: :py:class:`TopoShape`
        :return: 面对象
        """
        return _PyAnyCAD.HoleDetector_GetFaceOfEdge(self, edgeIdx)

# Register HoleDetector in _PyAnyCAD:
_PyAnyCAD.HoleDetector_swigregister(HoleDetector)
class HatchHatcher(object):
    r"""
    Author: Geometry

    面上生成填充线
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, face):
        r"""
        construct the hatcher.
        :type face: :py:class:`TopoShape`
        :param face: the input must be face.
        """
        _PyAnyCAD.HatchHatcher_swiginit(self, _PyAnyCAD.new_HatchHatcher(face))
    __swig_destroy__ = _PyAnyCAD.delete_HatchHatcher

    def GetFace(self):
        return _PyAnyCAD.HatchHatcher_GetFace(self)

    def GetDrawUIso(self):
        return _PyAnyCAD.HatchHatcher_GetDrawUIso(self)

    def SetDrawUIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetDrawUIso(self, val)

    def GetNumberUIso(self):
        return _PyAnyCAD.HatchHatcher_GetNumberUIso(self)

    def SetNumberUIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetNumberUIso(self, val)

    def GetDrawVIso(self):
        return _PyAnyCAD.HatchHatcher_GetDrawVIso(self)

    def SetDrawVIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetDrawVIso(self, val)

    def GetNumberVIso(self):
        return _PyAnyCAD.HatchHatcher_GetNumberVIso(self)

    def SetNumberVIso(self, val):
        return _PyAnyCAD.HatchHatcher_SetNumberVIso(self, val)

    def GetDiscretisation(self):
        return _PyAnyCAD.HatchHatcher_GetDiscretisation(self)

    def SetDiscretisation(self, val):
        return _PyAnyCAD.HatchHatcher_SetDiscretisation(self, val)

    def Build(self):
        r"""
        构造曲线.
        :rtype: boolean
        :return: true if done.
        """
        return _PyAnyCAD.HatchHatcher_Build(self)

    def Create(self, material):
        r"""
        Create visible object.
        :type material: :py:class:`MaterialInstance`
        :param material: the material.
        :rtype: :py:class:`SceneNode`
        :return: the SceneNode could be ShapeSceneNode or PrimitiveSceneNode
        """
        return _PyAnyCAD.HatchHatcher_Create(self, material)

    def GetPoints(self, idx):
        r"""
        Get the point buffer of line.
        :type idx: int
        :param idx: the line index.
        :rtype: :py:class:`Float32Buffer`
        :return: the buffer.
        """
        return _PyAnyCAD.HatchHatcher_GetPoints(self, idx)

    def GetUCurveCount(self):
        r"""
        Get the hatch curve counts.
        :rtype: int
        :return: the number.
        """
        return _PyAnyCAD.HatchHatcher_GetUCurveCount(self)

    def GetUCurve(self, idx):
        r"""
        Get the idx curve, start from 0.
        :type idx: int
        :param idx: the index.
        :rtype: :py:class:`ParametricCurve`
        :return: the curve.
        """
        return _PyAnyCAD.HatchHatcher_GetUCurve(self, idx)

    def GetVCurveCount(self):
        r"""
        Get the hatch curve counts.
        :rtype: int
        :return: the number.
        """
        return _PyAnyCAD.HatchHatcher_GetVCurveCount(self)

    def GetVCurve(self, idx):
        r"""
        Get the idx curve, start from 0.
        :type idx: int
        :param idx: the index.
        :rtype: :py:class:`ParametricCurve`
        :return: the curve.
        """
        return _PyAnyCAD.HatchHatcher_GetVCurve(self, idx)

    def ComputeIntersectionPoints(self):
        r"""
        计算相交的
        :rtype: :py:class:`GPntList`
        :return: 点列表
        """
        return _PyAnyCAD.HatchHatcher_ComputeIntersectionPoints(self)

# Register HatchHatcher in _PyAnyCAD:
_PyAnyCAD.HatchHatcher_swigregister(HatchHatcher)
class SurfaceCurvature(object):
    r"""
    Author: Geometry

    SurfaceCurvature
    计算曲面曲率.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, shape):
        _PyAnyCAD.SurfaceCurvature_swiginit(self, _PyAnyCAD.new_SurfaceCurvature(shape))
    __swig_destroy__ = _PyAnyCAD.delete_SurfaceCurvature

    def GetMinValue(self):
        return _PyAnyCAD.SurfaceCurvature_GetMinValue(self)

    def GetMaxValue(self):
        return _PyAnyCAD.SurfaceCurvature_GetMaxValue(self)

    def GetShape(self):
        return _PyAnyCAD.SurfaceCurvature_GetShape(self)

    def GetValues(self):
        return _PyAnyCAD.SurfaceCurvature_GetValues(self)

    def Compute(self, faceIndex, type):
        return _PyAnyCAD.SurfaceCurvature_Compute(self, faceIndex, type)

# Register SurfaceCurvature in _PyAnyCAD:
_PyAnyCAD.SurfaceCurvature_swigregister(SurfaceCurvature)
class WireTreeBuilder(object):
    r"""
    Author: Geometry

    WireTreeBuilder
    根据曲线的包含关系，对曲线进行排序.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.WireTreeBuilder_swiginit(self, _PyAnyCAD.new_WireTreeBuilder())

    def Initialize(self, compound):
        r"""
        使用一个Wire/Edge组合来初始化
        :type compound: :py:class:`TopoShape`
        :param compound:
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.WireTreeBuilder_Initialize(self, compound)

    def AddWire(self, wire):
        r"""
        添加Wire
        :type wire: :py:class:`TopoShape`
        :param wire: Wire对象
        """
        return _PyAnyCAD.WireTreeBuilder_AddWire(self, wire)

    def Build(self):
        r"""排序"""
        return _PyAnyCAD.WireTreeBuilder_Build(self)

    def Normalize(self):
        r"""构造树型结构"""
        return _PyAnyCAD.WireTreeBuilder_Normalize(self)

    def GetCount(self):
        r"""
        获取根节点的数量。Build后调用Normalize
        :rtype: int
        :return: 
        """
        return _PyAnyCAD.WireTreeBuilder_GetCount(self)

    def GetItem(self, idx):
        r"""
        获取根节点对象。
        :type idx: int
        :param idx:
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.WireTreeBuilder_GetItem(self, idx)

    def GetChildCount(self, idx):
        r"""
        获取子对象个数
        :type idx: int
        :param idx: 根节点的索引。
        :rtype: int
        :return: 个数
        """
        return _PyAnyCAD.WireTreeBuilder_GetChildCount(self, idx)

    def GetChildItem(self, idx, childIdx):
        r"""
        获取子对象
        :type idx: int
        :param idx: 根节点索引
        :type childIdx: int
        :param childIdx: 子节点索引
        :rtype: :py:class:`TopoShape`
        :return: 对象
        """
        return _PyAnyCAD.WireTreeBuilder_GetChildItem(self, idx, childIdx)
    __swig_destroy__ = _PyAnyCAD.delete_WireTreeBuilder

# Register WireTreeBuilder in _PyAnyCAD:
_PyAnyCAD.WireTreeBuilder_swigregister(WireTreeBuilder)
class CurveTools(object):
    r"""
    Author: Geometry

      结合显示对象和拓扑对象的曲线工具
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeWires(geometry, tol):
        r"""
        根据显示数据构造拓扑对象
        :type geometry: :py:class:`BufferGeometry`
        :param geometry: 由顶点组成的线段对象
        :type tol: float
        :param tol: 精度
        :rtype: :py:class:`TopoShapeList`
        :return: 生成的环的列表
        """
        return _PyAnyCAD.CurveTools_MakeWires(geometry, tol)
    __swig_destroy__ = _PyAnyCAD.delete_CurveTools

# Register CurveTools in _PyAnyCAD:
_PyAnyCAD.CurveTools_swigregister(CurveTools)
class SurfacePointsTool(object):
    r"""
    Author: Geometry

    SurfacePointsTool
    分析曲面的工具.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetTolerance():
        r"""
        获取精度
        :rtype: float
        :return: 精度
        """
        return _PyAnyCAD.SurfacePointsTool_GetTolerance()

    @staticmethod
    def SetTolerance(tol):
        r"""
        设置精度
        :type tol: float
        :param tol: 精度
        """
        return _PyAnyCAD.SurfacePointsTool_SetTolerance(tol)

    @staticmethod
    def ComputeMinDistance(face, points, threadCount=8):
        r"""
        计算点到面的最小距离
        :type face: :py:class:`TopoShape`
        :param face: 面
        :type points: :py:class:`GPntList`
        :param points: 点的列表
        :type threadCount: int, optional
        :param threadCount: 线程个数
        :rtype: :py:class:`DoubleList`
        :return: 与点对于的距离
        """
        return _PyAnyCAD.SurfacePointsTool_ComputeMinDistance(face, points, threadCount)

    @staticmethod
    def ComputePointsByStep(face, stepU, stepV, thread=8, discretisation=30):
        return _PyAnyCAD.SurfacePointsTool_ComputePointsByStep(face, stepU, stepV, thread, discretisation)

    @staticmethod
    def ComputePoints(face, countU, countV, thread=8, discretisation=30):
        return _PyAnyCAD.SurfacePointsTool_ComputePoints(face, countU, countV, thread, discretisation)
    __swig_destroy__ = _PyAnyCAD.delete_SurfacePointsTool

# Register SurfacePointsTool in _PyAnyCAD:
_PyAnyCAD.SurfacePointsTool_swigregister(SurfacePointsTool)
class ShapeAnalysisTool(object):
    r"""
    Author: AdvModeling

    ShapeAnalysisTool

    Method to analysis shapes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def CheckEdgeOverlapping(edge1, edge2, tol):
        return _PyAnyCAD.ShapeAnalysisTool_CheckEdgeOverlapping(edge1, edge2, tol)

    @staticmethod
    def Unwrap(face):
        r"""
        曲面展开
        :type face: :py:class:`TopoShape`
        :param face: 面
        :rtype: :py:class:`TopoShapeList`
        :return: 边界
        """
        return _PyAnyCAD.ShapeAnalysisTool_Unwrap(face)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeAnalysisTool

# Register ShapeAnalysisTool in _PyAnyCAD:
_PyAnyCAD.ShapeAnalysisTool_swigregister(ShapeAnalysisTool)
class AdvCurveBuilder(object):
    r"""
    Author: AdvModeling

    曲线方法。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeClosedWire(wire, fixGap):
        r"""
        创建闭合曲线
        :type wire: :py:class:`TopoShape`
        :param wire: 输入的曲线
        :type fixGap: boolean
        :param fixGap: 是否修复缝隙
        :rtype: :py:class:`TopoShape`
        :return: 新的曲线
        """
        return _PyAnyCAD.AdvCurveBuilder_MakeClosedWire(wire, fixGap)

    @staticmethod
    def SplineToArcsByNumber(spline, n):
        r"""
        使用n条arcs和lines拟合spline
        :type spline: :py:class:`TopoShape`
        :param spline:
        :type n: int
        :param n:: 用于替代spline的arcs和lines总量，n需要是偶数，n过小时效果不佳, n>=2
        :rtype: :py:class:`TopoShapeList`
        :return: 圆弧和直线的列表
        """
        return _PyAnyCAD.AdvCurveBuilder_SplineToArcsByNumber(spline, n)

    @staticmethod
    def SplineToArcs(spline, tol):
        r"""
        使用arcs和lines拟合spline
        :type spline: :py:class:`TopoShape`
        :param spline:
        :type tol: float
        :param tol: 原曲线和拟合后曲线误差小于tol结束
        :rtype: :py:class:`TopoShapeList`
        :return: 圆弧和直线的列表
        """
        return _PyAnyCAD.AdvCurveBuilder_SplineToArcs(spline, tol)

    @staticmethod
    def MakeText(text, fontName, config=None):
        r"""
        创建文字曲线
        :type text: anycore::StringW
        :param text: 文字内容
        :type fontName: string
        :param fontName: 字体名称
        :type config: :py:class:`TextConfig`, optional
        :param config: 文字配置
        :rtype: :py:class:`TopoShape`
        :return: 曲线的复合体
        """
        return _PyAnyCAD.AdvCurveBuilder_MakeText(text, fontName, config)
    __swig_destroy__ = _PyAnyCAD.delete_AdvCurveBuilder

# Register AdvCurveBuilder in _PyAnyCAD:
_PyAnyCAD.AdvCurveBuilder_swigregister(AdvCurveBuilder)
class AdvSurfaceBuilder(object):
    r"""
    Author: AdvModeling

    ShapeBuilder 主要用于创建三维点、曲线、平面等。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeNetworkSurface(profiles, guides, spatialTol):
        r"""
        基于曲线网格插值，生成Gordon 曲面
        :type profiles: :py:class:`TopoShapeList`
        :param profiles: 轮廓线
        :type guides: :py:class:`TopoShapeList`
        :param guides:  导向曲线
        :type spatialTol: float
        :param spatialTol: 导向曲线与轮廓线允许的最大距离，理论上必须相交。
        :rtype: :py:class:`TopoShape`
        :return: 新对象.
        """
        return _PyAnyCAD.AdvSurfaceBuilder_MakeNetworkSurface(profiles, guides, spatialTol)
    __swig_destroy__ = _PyAnyCAD.delete_AdvSurfaceBuilder

# Register AdvSurfaceBuilder in _PyAnyCAD:
_PyAnyCAD.AdvSurfaceBuilder_swigregister(AdvSurfaceBuilder)
class AdvShapeBuilder(object):
    r"""
    Author: AdvModeling

    高级实体造型方法。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def MakeTube(ax, radius, thickness, len):
        r"""
        构件圆管
        :type ax: :py:class:`gp_Ax2`
        :param ax: 起始位置
        :type radius: float
        :param radius: 外径
        :type thickness: float
        :param thickness: 厚度
        :type len: float
        :param len: 长度
        :rtype: :py:class:`TopoShape`
        :return: 几何
        """
        return _PyAnyCAD.AdvShapeBuilder_MakeTube(ax, radius, thickness, len)

    @staticmethod
    def MakeRectTube(ax, width, height, radius, thickness, len):
        r"""
        构造矩形管子
        :type ax: :py:class:`gp_Ax2`
        :param ax: 起始位置和朝向
        :type width: float
        :param width: 宽度
        :type height: float
        :param height: 高度
        :type radius: float
        :param radius: 圆角半径
        :type thickness: float
        :param thickness: 厚度
        :type len: float
        :param len: 长度
        :rtype: :py:class:`TopoShape`
        :return: 几何
        """
        return _PyAnyCAD.AdvShapeBuilder_MakeRectTube(ax, width, height, radius, thickness, len)

    @staticmethod
    def MakeRectSolid(ax, width, height, radius, len):
        r"""
        构造实心的长方形柱
        :type ax: :py:class:`gp_Ax2`
        :param ax:
        :type width: float
        :param width:
        :type height: float
        :param height:
        :type radius: float
        :param radius:
        :type len: float
        :param len:
        :rtype: :py:class:`TopoShape`
        :return: 
        """
        return _PyAnyCAD.AdvShapeBuilder_MakeRectSolid(ax, width, height, radius, len)

    @staticmethod
    def MakeWaistTube(ax, width, radius, thickness, length):
        r"""
        构造腰型管
        :type ax: :py:class:`gp_Ax2`
        :param ax: 起始位置和朝向
        :type width: float
        :param width: 中间宽度
        :type radius: float
        :param radius: 半径
        :type thickness: float
        :param thickness: 厚度
        :type length: float
        :param length: 长度
        :rtype: :py:class:`TopoShape`
        :return: 几何
        """
        return _PyAnyCAD.AdvShapeBuilder_MakeWaistTube(ax, width, radius, thickness, length)

    @staticmethod
    def MakeWaistSolid(ax, width, radius, length):
        r"""
        构造腰型柱
        :type ax: :py:class:`gp_Ax2`
        :param ax: 起始位置和朝向
        :type width: float
        :param width: 中间宽度
        :type radius: float
        :param radius: 半径
        :type length: float
        :param length:  长度
        :rtype: :py:class:`TopoShape`
        :return: 几何
        """
        return _PyAnyCAD.AdvShapeBuilder_MakeWaistSolid(ax, width, radius, length)
    __swig_destroy__ = _PyAnyCAD.delete_AdvShapeBuilder

# Register AdvShapeBuilder in _PyAnyCAD:
_PyAnyCAD.AdvShapeBuilder_swigregister(AdvShapeBuilder)
class DistanceMeasureEditor(StackEditor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DistanceMeasureEditor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DistanceMeasureEditor_swiginit(self, _PyAnyCAD.new_DistanceMeasureEditor(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_DistanceMeasureEditor
    EnumStepIndex_Start = _PyAnyCAD.DistanceMeasureEditor_EnumStepIndex_Start
    EnumStepIndex_End = _PyAnyCAD.DistanceMeasureEditor_EnumStepIndex_End

    def GetNode(self):
        return _PyAnyCAD.DistanceMeasureEditor_GetNode(self)

    def Start(self, ctx):
        return _PyAnyCAD.DistanceMeasureEditor_Start(self, ctx)

    def Finish(self, ctx):
        return _PyAnyCAD.DistanceMeasureEditor_Finish(self, ctx)

    def OnMouseDown(self, ctx, evt):
        return _PyAnyCAD.DistanceMeasureEditor_OnMouseDown(self, ctx, evt)

    def OnKeyUp(self, ctx, evt):
        return _PyAnyCAD.DistanceMeasureEditor_OnKeyUp(self, ctx, evt)

    def Apply(self, ctx):
        return _PyAnyCAD.DistanceMeasureEditor_Apply(self, ctx)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DistanceMeasureEditor(self)
        return weakref.proxy(self)

# Register DistanceMeasureEditor in _PyAnyCAD:
_PyAnyCAD.DistanceMeasureEditor_swigregister(DistanceMeasureEditor)
EnumGripType_Vertex = _PyAnyCAD.EnumGripType_Vertex
EnumGripType_Middle = _PyAnyCAD.EnumGripType_Middle
EnumGripType_Cross = _PyAnyCAD.EnumGripType_Cross
class GripNode(object):
    r"""
    Author: DataManage

    GripNode 夹点
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.GripNode_swiginit(self, _PyAnyCAD.new_GripNode(*args))
    __swig_destroy__ = _PyAnyCAD.delete_GripNode

    def GetId(self):
        return _PyAnyCAD.GripNode_GetId(self)

    def SetId(self, val):
        return _PyAnyCAD.GripNode_SetId(self, val)

    def GetGripId(self):
        return _PyAnyCAD.GripNode_GetGripId(self)

    def SetGripId(self, val):
        return _PyAnyCAD.GripNode_SetGripId(self, val)

    def GetGripType(self):
        return _PyAnyCAD.GripNode_GetGripType(self)

    def SetGripType(self, val):
        return _PyAnyCAD.GripNode_SetGripType(self, val)

    def GetPoint(self):
        return _PyAnyCAD.GripNode_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.GripNode_SetPoint(self, val)

    def GetTransform(self):
        return _PyAnyCAD.GripNode_GetTransform(self)

    def SetTransform(self, val):
        return _PyAnyCAD.GripNode_SetTransform(self, val)

# Register GripNode in _PyAnyCAD:
_PyAnyCAD.GripNode_swigregister(GripNode)
class GripCollector(object):
    r"""
    Author: DataManage

    GripCollector

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.GripCollector_swiginit(self, _PyAnyCAD.new_GripCollector())
    __swig_destroy__ = _PyAnyCAD.delete_GripCollector

    def Add(self, grip):
        return _PyAnyCAD.GripCollector_Add(self, grip)

# Register GripCollector in _PyAnyCAD:
_PyAnyCAD.GripCollector_swigregister(GripCollector)
class ParameterIterator(object):
    r"""
    Author: DataManage

    ParameterIterator

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parameters):
        _PyAnyCAD.ParameterIterator_swiginit(self, _PyAnyCAD.new_ParameterIterator(parameters))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterIterator

    def Next(self):
        return _PyAnyCAD.ParameterIterator_Next(self)

    def More(self):
        return _PyAnyCAD.ParameterIterator_More(self)

    def CurrentName(self):
        return _PyAnyCAD.ParameterIterator_CurrentName(self)

    def CurrentValue(self):
        return _PyAnyCAD.ParameterIterator_CurrentValue(self)

# Register ParameterIterator in _PyAnyCAD:
_PyAnyCAD.ParameterIterator_swigregister(ParameterIterator)
class ParameterBool(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterBool_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterBool_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterBool_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterBool_swiginit(self, _PyAnyCAD.new_ParameterBool(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterBool

    def GetValue(self):
        return _PyAnyCAD.ParameterBool_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterBool_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterBool_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterBool_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterBool_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterBool_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterBool_GetShortName(self)

# Register ParameterBool in _PyAnyCAD:
_PyAnyCAD.ParameterBool_swigregister(ParameterBool)
ParameterBool.ShortName = _PyAnyCAD.cvar.ParameterBool_ShortName

class ParameterDouble(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDouble_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDouble_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterDouble_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterDouble_swiginit(self, _PyAnyCAD.new_ParameterDouble(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDouble

    def GetValue(self):
        return _PyAnyCAD.ParameterDouble_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterDouble_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterDouble_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterDouble_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterDouble_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterDouble_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterDouble_GetShortName(self)

# Register ParameterDouble in _PyAnyCAD:
_PyAnyCAD.ParameterDouble_swigregister(ParameterDouble)
ParameterDouble.ShortName = _PyAnyCAD.cvar.ParameterDouble_ShortName

class ParameterObjectId(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterObjectId_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterObjectId_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterObjectId_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterObjectId_swiginit(self, _PyAnyCAD.new_ParameterObjectId(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterObjectId

    def GetValue(self):
        return _PyAnyCAD.ParameterObjectId_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterObjectId_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterObjectId_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterObjectId_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterObjectId_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterObjectId_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterObjectId_GetShortName(self)

# Register ParameterObjectId in _PyAnyCAD:
_PyAnyCAD.ParameterObjectId_swigregister(ParameterObjectId)
ParameterObjectId.ShortName = _PyAnyCAD.cvar.ParameterObjectId_ShortName

class ParameterFloat(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterFloat_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterFloat_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterFloat_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterFloat_swiginit(self, _PyAnyCAD.new_ParameterFloat(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterFloat

    def GetValue(self):
        return _PyAnyCAD.ParameterFloat_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterFloat_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterFloat_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterFloat_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterFloat_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterFloat_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterFloat_GetShortName(self)

# Register ParameterFloat in _PyAnyCAD:
_PyAnyCAD.ParameterFloat_swigregister(ParameterFloat)
ParameterFloat.ShortName = _PyAnyCAD.cvar.ParameterFloat_ShortName

class ParameterInt32(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterInt32_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterInt32_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterInt32_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterInt32_swiginit(self, _PyAnyCAD.new_ParameterInt32(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterInt32

    def GetValue(self):
        return _PyAnyCAD.ParameterInt32_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterInt32_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterInt32_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterInt32_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterInt32_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterInt32_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterInt32_GetShortName(self)

# Register ParameterInt32 in _PyAnyCAD:
_PyAnyCAD.ParameterInt32_swigregister(ParameterInt32)
ParameterInt32.ShortName = _PyAnyCAD.cvar.ParameterInt32_ShortName

class ParameterString(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterString_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterString_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterString_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterString_swiginit(self, _PyAnyCAD.new_ParameterString(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterString

    def GetValue(self):
        return _PyAnyCAD.ParameterString_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterString_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterString_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterString_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterString_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterString_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterString_GetShortName(self)

# Register ParameterString in _PyAnyCAD:
_PyAnyCAD.ParameterString_swigregister(ParameterString)
ParameterString.ShortName = _PyAnyCAD.cvar.ParameterString_ShortName

class ParameterGPnt(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGPnt_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGPnt_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGPnt_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGPnt_swiginit(self, _PyAnyCAD.new_ParameterGPnt(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGPnt

    def GetValue(self):
        return _PyAnyCAD.ParameterGPnt_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGPnt_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGPnt_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGPnt_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGPnt_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGPnt_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGPnt_GetShortName(self)

# Register ParameterGPnt in _PyAnyCAD:
_PyAnyCAD.ParameterGPnt_swigregister(ParameterGPnt)
ParameterGPnt.ShortName = _PyAnyCAD.cvar.ParameterGPnt_ShortName

class ParameterGVec(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGVec_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGVec_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGVec_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGVec_swiginit(self, _PyAnyCAD.new_ParameterGVec(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGVec

    def GetValue(self):
        return _PyAnyCAD.ParameterGVec_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGVec_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGVec_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGVec_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGVec_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGVec_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGVec_GetShortName(self)

# Register ParameterGVec in _PyAnyCAD:
_PyAnyCAD.ParameterGVec_swigregister(ParameterGVec)
ParameterGVec.ShortName = _PyAnyCAD.cvar.ParameterGVec_ShortName

class ParameterGXYZ(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGXYZ_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGXYZ_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGXYZ_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGXYZ_swiginit(self, _PyAnyCAD.new_ParameterGXYZ(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGXYZ

    def GetValue(self):
        return _PyAnyCAD.ParameterGXYZ_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGXYZ_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGXYZ_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGXYZ_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGXYZ_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGXYZ_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGXYZ_GetShortName(self)

# Register ParameterGXYZ in _PyAnyCAD:
_PyAnyCAD.ParameterGXYZ_swigregister(ParameterGXYZ)
ParameterGXYZ.ShortName = _PyAnyCAD.cvar.ParameterGXYZ_ShortName

class ParameterGDir(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGDir_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGDir_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGDir_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGDir_swiginit(self, _PyAnyCAD.new_ParameterGDir(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGDir

    def GetValue(self):
        return _PyAnyCAD.ParameterGDir_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGDir_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGDir_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGDir_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGDir_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGDir_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGDir_GetShortName(self)

# Register ParameterGDir in _PyAnyCAD:
_PyAnyCAD.ParameterGDir_swigregister(ParameterGDir)
ParameterGDir.ShortName = _PyAnyCAD.cvar.ParameterGDir_ShortName

class ParameterGAx1(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx1_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx1_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx1_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx1_swiginit(self, _PyAnyCAD.new_ParameterGAx1(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx1

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx1_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx1_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx1_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx1_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGAx1_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGAx1_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGAx1_GetShortName(self)

# Register ParameterGAx1 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx1_swigregister(ParameterGAx1)
ParameterGAx1.ShortName = _PyAnyCAD.cvar.ParameterGAx1_ShortName

class ParameterGAx2(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx2_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx2_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx2_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx2_swiginit(self, _PyAnyCAD.new_ParameterGAx2(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx2

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx2_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx2_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx2_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx2_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGAx2_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGAx2_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGAx2_GetShortName(self)

# Register ParameterGAx2 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx2_swigregister(ParameterGAx2)
ParameterGAx2.ShortName = _PyAnyCAD.cvar.ParameterGAx2_ShortName

class ParameterGAx3(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGAx3_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGAx3_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGAx3_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGAx3_swiginit(self, _PyAnyCAD.new_ParameterGAx3(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGAx3

    def GetValue(self):
        return _PyAnyCAD.ParameterGAx3_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGAx3_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGAx3_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGAx3_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGAx3_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGAx3_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGAx3_GetShortName(self)

# Register ParameterGAx3 in _PyAnyCAD:
_PyAnyCAD.ParameterGAx3_swigregister(ParameterGAx3)
ParameterGAx3.ShortName = _PyAnyCAD.cvar.ParameterGAx3_ShortName

class ParameterGTrsf(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGTrsf_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGTrsf_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGTrsf_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGTrsf_swiginit(self, _PyAnyCAD.new_ParameterGTrsf(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGTrsf

    def GetValue(self):
        return _PyAnyCAD.ParameterGTrsf_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGTrsf_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGTrsf_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGTrsf_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGTrsf_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGTrsf_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGTrsf_GetShortName(self)

# Register ParameterGTrsf in _PyAnyCAD:
_PyAnyCAD.ParameterGTrsf_swigregister(ParameterGTrsf)
ParameterGTrsf.ShortName = _PyAnyCAD.cvar.ParameterGTrsf_ShortName

class ParameterGPnt2d(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGPnt2d_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGPnt2d_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGPnt2d_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGPnt2d_swiginit(self, _PyAnyCAD.new_ParameterGPnt2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGPnt2d

    def GetValue(self):
        return _PyAnyCAD.ParameterGPnt2d_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGPnt2d_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGPnt2d_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGPnt2d_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGPnt2d_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGPnt2d_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGPnt2d_GetShortName(self)

# Register ParameterGPnt2d in _PyAnyCAD:
_PyAnyCAD.ParameterGPnt2d_swigregister(ParameterGPnt2d)
ParameterGPnt2d.ShortName = _PyAnyCAD.cvar.ParameterGPnt2d_ShortName

class ParameterGVec2d(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGVec2d_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGVec2d_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGVec2d_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGVec2d_swiginit(self, _PyAnyCAD.new_ParameterGVec2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGVec2d

    def GetValue(self):
        return _PyAnyCAD.ParameterGVec2d_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGVec2d_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGVec2d_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGVec2d_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGVec2d_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGVec2d_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGVec2d_GetShortName(self)

# Register ParameterGVec2d in _PyAnyCAD:
_PyAnyCAD.ParameterGVec2d_swigregister(ParameterGVec2d)
ParameterGVec2d.ShortName = _PyAnyCAD.cvar.ParameterGVec2d_ShortName

class ParameterGDir2d(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGDir2d_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGDir2d_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGDir2d_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGDir2d_swiginit(self, _PyAnyCAD.new_ParameterGDir2d(*args))
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGDir2d

    def GetValue(self):
        return _PyAnyCAD.ParameterGDir2d_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.ParameterGDir2d_SetValue(self, val)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGDir2d_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGDir2d_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGDir2d_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGDir2d_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGDir2d_GetShortName(self)

# Register ParameterGDir2d in _PyAnyCAD:
_PyAnyCAD.ParameterGDir2d_swigregister(ParameterGDir2d)
ParameterGDir2d.ShortName = _PyAnyCAD.cvar.ParameterGDir2d_ShortName

class ParameterStringList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterStringList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterStringList_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterStringList_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterStringList_swiginit(self, _PyAnyCAD.new_ParameterStringList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterStringList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterStringList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterStringList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterStringList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterStringList_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterStringList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterStringList_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterStringList_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterStringList_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterStringList_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterStringList

# Register ParameterStringList in _PyAnyCAD:
_PyAnyCAD.ParameterStringList_swigregister(ParameterStringList)
ParameterStringList.ShortName = _PyAnyCAD.cvar.ParameterStringList_ShortName

class ParameterObjectIdList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterObjectIdList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterObjectIdList_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterObjectIdList_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterObjectIdList_swiginit(self, _PyAnyCAD.new_ParameterObjectIdList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterObjectIdList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterObjectIdList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterObjectIdList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterObjectIdList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterObjectIdList_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterObjectIdList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterObjectIdList_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterObjectIdList_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterObjectIdList_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterObjectIdList_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterObjectIdList

# Register ParameterObjectIdList in _PyAnyCAD:
_PyAnyCAD.ParameterObjectIdList_swigregister(ParameterObjectIdList)
ParameterObjectIdList.ShortName = _PyAnyCAD.cvar.ParameterObjectIdList_ShortName

class ParameterDoubleList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterDoubleList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterDoubleList_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterDoubleList_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterDoubleList_swiginit(self, _PyAnyCAD.new_ParameterDoubleList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterDoubleList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterDoubleList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterDoubleList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterDoubleList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterDoubleList_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterDoubleList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterDoubleList_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterDoubleList_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterDoubleList_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterDoubleList_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterDoubleList

# Register ParameterDoubleList in _PyAnyCAD:
_PyAnyCAD.ParameterDoubleList_swigregister(ParameterDoubleList)
ParameterDoubleList.ShortName = _PyAnyCAD.cvar.ParameterDoubleList_ShortName

class ParameterFloatList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterFloatList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterFloatList_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterFloatList_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterFloatList_swiginit(self, _PyAnyCAD.new_ParameterFloatList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterFloatList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterFloatList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterFloatList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterFloatList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterFloatList_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterFloatList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterFloatList_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterFloatList_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterFloatList_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterFloatList_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterFloatList

# Register ParameterFloatList in _PyAnyCAD:
_PyAnyCAD.ParameterFloatList_swigregister(ParameterFloatList)
ParameterFloatList.ShortName = _PyAnyCAD.cvar.ParameterFloatList_ShortName

class ParameterInt32List(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterInt32List_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterInt32List_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterInt32List_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterInt32List_swiginit(self, _PyAnyCAD.new_ParameterInt32List(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterInt32List_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterInt32List_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterInt32List_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterInt32List_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterInt32List_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterInt32List_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterInt32List_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterInt32List_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterInt32List_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterInt32List_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterInt32List

# Register ParameterInt32List in _PyAnyCAD:
_PyAnyCAD.ParameterInt32List_swigregister(ParameterInt32List)
ParameterInt32List.ShortName = _PyAnyCAD.cvar.ParameterInt32List_ShortName

class ParameterGPntList(ParameterValue):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ParameterGPntList_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ParameterGPntList_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ParameterGPntList_Cast(obj)

    def __init__(self, *args):
        _PyAnyCAD.ParameterGPntList_swiginit(self, _PyAnyCAD.new_ParameterGPntList(*args))

    def GetCount(self):
        return _PyAnyCAD.ParameterGPntList_GetCount(self)

    def Reserve(self, count):
        return _PyAnyCAD.ParameterGPntList_Reserve(self, count)

    def AddValue(self, v):
        return _PyAnyCAD.ParameterGPntList_AddValue(self, v)

    def SetValue(self, *args):
        return _PyAnyCAD.ParameterGPntList_SetValue(self, *args)

    def GetValue(self, *args):
        return _PyAnyCAD.ParameterGPntList_GetValue(self, *args)

    def IsEqual(self, other):
        return _PyAnyCAD.ParameterGPntList_IsEqual(self, other)

    def ToStr(self):
        return _PyAnyCAD.ParameterGPntList_ToStr(self)

    def Parse(self, str):
        return _PyAnyCAD.ParameterGPntList_Parse(self, str)

    def Copy(self, other):
        return _PyAnyCAD.ParameterGPntList_Copy(self, other)

    def GetShortName(self):
        return _PyAnyCAD.ParameterGPntList_GetShortName(self)
    __swig_destroy__ = _PyAnyCAD.delete_ParameterGPntList

# Register ParameterGPntList in _PyAnyCAD:
_PyAnyCAD.ParameterGPntList_swigregister(ParameterGPntList)
ParameterGPntList.ShortName = _PyAnyCAD.cvar.ParameterGPntList_ShortName

class ParameterCast(object):
    r"""
    Author: DataManage

    ParameterCast

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ParameterCast_swiginit(self, _PyAnyCAD.new_ParameterCast())
    __swig_destroy__ = _PyAnyCAD.delete_ParameterCast

# Register ParameterCast in _PyAnyCAD:
_PyAnyCAD.ParameterCast_swigregister(ParameterCast)
class ReferenceCollector(object):
    r"""
    Author: DataManage

    ReferenceCollector

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ReferenceCollector:
            _self = None
        else:
            _self = self
        _PyAnyCAD.ReferenceCollector_swiginit(self, _PyAnyCAD.new_ReferenceCollector(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_ReferenceCollector

    def On(self, thisId, memberId):
        return _PyAnyCAD.ReferenceCollector_On(self, thisId, memberId)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_ReferenceCollector(self)
        return weakref.proxy(self)

# Register ReferenceCollector in _PyAnyCAD:
_PyAnyCAD.ReferenceCollector_swigregister(ReferenceCollector)
class DeletionCollector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_DeletionCollector

    def MarkDelete(self, id):
        return _PyAnyCAD.DeletionCollector_MarkDelete(self, id)

# Register DeletionCollector in _PyAnyCAD:
_PyAnyCAD.DeletionCollector_swigregister(DeletionCollector)
class PickedIdCollector(object):
    r"""
    Author: DataManage

    收集与对象关联的视图对象ID
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == PickedIdCollector:
            _self = None
        else:
            _self = self
        _PyAnyCAD.PickedIdCollector_swiginit(self, _PyAnyCAD.new_PickedIdCollector(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_PickedIdCollector

    def GetPickByView(self):
        return _PyAnyCAD.PickedIdCollector_GetPickByView(self)

    def SetPickByView(self, val):
        return _PyAnyCAD.PickedIdCollector_SetPickByView(self, val)

    def GetChildId(self):
        return _PyAnyCAD.PickedIdCollector_GetChildId(self)

    def SetChildId(self, val):
        return _PyAnyCAD.PickedIdCollector_SetChildId(self, val)

    def GetParentIds(self):
        return _PyAnyCAD.PickedIdCollector_GetParentIds(self)

    def SetParentIds(self, val):
        return _PyAnyCAD.PickedIdCollector_SetParentIds(self, val)

    def OnAdd(self, id):
        return _PyAnyCAD.PickedIdCollector_OnAdd(self, id)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_PickedIdCollector(self)
        return weakref.proxy(self)

# Register PickedIdCollector in _PyAnyCAD:
_PyAnyCAD.PickedIdCollector_swigregister(PickedIdCollector)
class DialogAccessor(object):
    r"""
    Author: Common
    对话框访问器
    See also: DialogManager
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DialogAccessor:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DialogAccessor_swiginit(self, _PyAnyCAD.new_DialogAccessor(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_DialogAccessor

    def Show(self, data):
        r"""
        显示
        :type data: :py:class:`ParameterDict`
        :param data: 数据
        :rtype: boolean
        :return: 是否返回OK
        """
        return _PyAnyCAD.DialogAccessor_Show(self, data)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DialogAccessor(self)
        return weakref.proxy(self)

# Register DialogAccessor in _PyAnyCAD:
_PyAnyCAD.DialogAccessor_swigregister(DialogAccessor)
class DialogFactory(object):
    r"""
    Author: Common
    DialogManager
    管理系统内置对话框
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DialogFactory_Instance()

    def InternalAdd(self, name, accessor):
        r"""
        添加。若存在则覆盖。
        :type name: string
        :param name: 名称
        :type accessor: :py:class:`DialogAccessor`
        :param accessor: 对话访问器
        See also: DialogFactory.Register
        """
        return _PyAnyCAD.DialogFactory_InternalAdd(self, name, accessor)

    def Show(self, name, data):
        r"""
        显示
        :type name: string
        :param name: 名称
        :type data: :py:class:`ParameterDict`
        :param data: 参数
        :rtype: boolean
        :return: 确定还是取消
        """
        return _PyAnyCAD.DialogFactory_Show(self, name, data)
    __swig_destroy__ = _PyAnyCAD.delete_DialogFactory

# Register DialogFactory in _PyAnyCAD:
_PyAnyCAD.DialogFactory_swigregister(DialogFactory)
EnumDbViewType_View3D = _PyAnyCAD.EnumDbViewType_View3D
EnumDbViewType_Drawing = _PyAnyCAD.EnumDbViewType_Drawing
EnumDbViewType_Section = _PyAnyCAD.EnumDbViewType_Section
EnumDbViewType_Schedule = _PyAnyCAD.EnumDbViewType_Schedule
EnumDbViewType_Sheet = _PyAnyCAD.EnumDbViewType_Sheet
EnumDbViewType_Unknown = _PyAnyCAD.EnumDbViewType_Unknown
EnumTransformBehaviour_ByWorld = _PyAnyCAD.EnumTransformBehaviour_ByWorld
EnumTransformBehaviour_ByParent = _PyAnyCAD.EnumTransformBehaviour_ByParent
class ElementNames(object):
    r"""
    Author: DataManage

    ElementNames，管理构件默认名称

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.ElementNames_Instance()

    def Add(self, *args):
        r"""
        *Overload 1:*

        添加名称
        :type key: string
        :param key: 索引
        :type name: string
        :param name: 名称


        |

        *Overload 2:*

        更加类名称关联名称
        :type classId: :py:class:`ClassId`
        :param classId: 类名
        :type name: string
        :param name: 名称
        """
        return _PyAnyCAD.ElementNames_Add(self, *args)

    def Get(self, *args):
        r"""
        *Overload 1:*

        根据Key查找Name。
        :type key: string
        :param key: 索引
        :rtype: string
        :return: 名称。若未找到，则返回key


        |

        *Overload 2:*

        根据Key查找名称
        :type key: string
        :param key: 索引
        :type defaultName: string
        :param defaultName: 默认名称
        :rtype: string
        :return: 名称。若未找到，则返回defaultName
        """
        return _PyAnyCAD.ElementNames_Get(self, *args)
    __swig_destroy__ = _PyAnyCAD.delete_ElementNames

# Register ElementNames in _PyAnyCAD:
_PyAnyCAD.ElementNames_swigregister(ElementNames)
class DocumentListener(object):
    r"""
    Author: DataManage

    DocumentListener 监听文档变化的基类

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DocumentListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DocumentListener_swiginit(self, _PyAnyCAD.new_DocumentListener(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_DocumentListener

    def GetName(self):
        return _PyAnyCAD.DocumentListener_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.DocumentListener_SetName(self, val)

    def GetPriority(self):
        return _PyAnyCAD.DocumentListener_GetPriority(self)

    def SetPriority(self, val):
        return _PyAnyCAD.DocumentListener_SetPriority(self, val)

    def OnActiveDocument(self, pDocument):
        r"""
        文档被设置为当前活动状态。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_OnActiveDocument(self, pDocument)

    def OnDeactiveDocument(self, pDocument):
        r"""
        文档被设置为不活动状态。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_OnDeactiveDocument(self, pDocument)

    def AfterDocumentChanged(self, pDocument, args):
        r"""
        文档发生变化。由框架内部自动触发。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type args: :py:class:`DocumentEventArgs`
        :param args: 变化的详细内容
        """
        return _PyAnyCAD.DocumentListener_AfterDocumentChanged(self, pDocument, args)

    def AfterOpenDocument(self, pDocument):
        r"""
        文档被打开了
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_AfterOpenDocument(self, pDocument)

    def AfterSaveDocument(self, pDocument):
        r"""
        文档被保存了
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_AfterSaveDocument(self, pDocument)

    def AfterCreateDocument(self, pDocument):
        r"""
        文档创建好了
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_AfterCreateDocument(self, pDocument)

    def OnSwitchDbView(self, pDocument, oldDbViewId):
        r"""
        当前视图被切换了
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type oldDbViewId: :py:class:`ObjectId`
        :param oldDbViewId: 之前的DbViewId。新的从Document.GetActiveDbViewId()获取。
        """
        return _PyAnyCAD.DocumentListener_OnSwitchDbView(self, pDocument, oldDbViewId)

    def OnSwitchSketch(self, pDocument, viewId):
        r"""
        当前草图被切换了
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type viewId: :py:class:`ObjectId`
        :param viewId: DbView的Id。
        """
        return _PyAnyCAD.DocumentListener_OnSwitchSketch(self, pDocument, viewId)

    def OnChangeElement(self, pDocument, id, flags):
        r"""
        Element发生变化。用户通过Document.NotifyElementChanged触发。触发时机由用户控制。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档对象
        :type id: :py:class:`ObjectId`
        :param id:  变化的ID
        :type flags: int
        :param flags: 自定义的标记信息。
        """
        return _PyAnyCAD.DocumentListener_OnChangeElement(self, pDocument, id, flags)

    def OnSelectionChanged(self, pDocument, viewId):
        r"""
        选择集发生变化
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type viewId: :py:class:`ObjectId`
        :param viewId: 视图ID
        :param ids: 构件ID
        """
        return _PyAnyCAD.DocumentListener_OnSelectionChanged(self, pDocument, viewId)

    def OnUpdateView(self, pDocument, viewId):
        r"""
        冻结对象发生变化/临时对象发生变化
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentListener_OnUpdateView(self, pDocument, viewId)

    def OnViewportChanged(self, pDocument, viewportId):
        r"""
        DbViewport的location或size发生变化
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type viewportId: :py:class:`ObjectId`
        :param viewportId: DbViewport的Id
        """
        return _PyAnyCAD.DocumentListener_OnViewportChanged(self, pDocument, viewportId)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DocumentListener(self)
        return weakref.proxy(self)

# Register DocumentListener in _PyAnyCAD:
_PyAnyCAD.DocumentListener_swigregister(DocumentListener)
class DocumentEvent(object):
    r"""
    Author: DataManage

    DocumentEvent管理DocumentListener

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DocumentEvent_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_DocumentEvent

    def AddListener(self, listener):
        r"""
        添加监听器
        :type listener: :py:class:`DocumentListener`
        :param listener: 监听器
        """
        return _PyAnyCAD.DocumentEvent_AddListener(self, listener)

    def RemoveListener(self, *args):
        r"""
        *Overload 1:*

        移除监听器
        :type listener: :py:class:`DocumentListener`
        :param listener: 监听器

        |

        *Overload 2:*

        根据名称来移除
        :type name: string
        :param name: 名字
        """
        return _PyAnyCAD.DocumentEvent_RemoveListener(self, *args)

# Register DocumentEvent in _PyAnyCAD:
_PyAnyCAD.DocumentEvent_swigregister(DocumentEvent)
EnumEndPreviewAction_Rollback = _PyAnyCAD.EnumEndPreviewAction_Rollback
r"""回退之前的操作"""
EnumEndPreviewAction_Commit = _PyAnyCAD.EnumEndPreviewAction_Commit
r"""提交之前的操作"""
EnumTransactionAction_Defalut = _PyAnyCAD.EnumTransactionAction_Defalut
r"""默认行为"""
EnumTransactionAction_Progress = _PyAnyCAD.EnumTransactionAction_Progress
r"""存在比较耗时的计算，显示进度条"""
class UndoTransaction(object):
    r"""
    Author: DataManage
    事务管理
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.UndoTransaction_swiginit(self, _PyAnyCAD.new_UndoTransaction(*args))
    __swig_destroy__ = _PyAnyCAD.delete_UndoTransaction

    def BeginPreview(self, name):
        r"""
        进入预览模式
        :type name: string
        :param name: 名称
        """
        return _PyAnyCAD.UndoTransaction_BeginPreview(self, name)

    def CommitPreview(self):
        r"""保存已有的修改，仍然在预览模式"""
        return _PyAnyCAD.UndoTransaction_CommitPreview(self)

    def EndPreview(self, *args):
        r"""
        结束预览模式。默认回退之前的修改
        :param rollback: 是否回退在预览模式下做的更改
        """
        return _PyAnyCAD.UndoTransaction_EndPreview(self, *args)

    def Start(self, name):
        r"""
        开始事务
        :type name: string
        :param name: 名称
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.UndoTransaction_Start(self, name)

    def Abort(self):
        r"""放弃所作的修改"""
        return _PyAnyCAD.UndoTransaction_Abort(self)

    def Commit(self, *args):
        r"""提交事务"""
        return _PyAnyCAD.UndoTransaction_Commit(self, *args)

# Register UndoTransaction in _PyAnyCAD:
_PyAnyCAD.UndoTransaction_swigregister(UndoTransaction)
class EntityElement(Element):
    r"""
    Author: DataManage

    实体类，可以动态添加组件

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.EntityElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.EntityElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.EntityElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.EntityElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.EntityElement_swiginit(self, _PyAnyCAD.new_EntityElement())
    __swig_destroy__ = _PyAnyCAD.delete_EntityElement

    def GetState(self):
        return _PyAnyCAD.EntityElement_GetState(self)

    def SetState(self, val):
        return _PyAnyCAD.EntityElement_SetState(self, val)

    def GetParentId(self):
        return _PyAnyCAD.EntityElement_GetParentId(self)

    def SetParentId(self, val):
        return _PyAnyCAD.EntityElement_SetParentId(self, val)

    def GetDbViewId(self):
        return _PyAnyCAD.EntityElement_GetDbViewId(self)

    def SetDbViewId(self, val):
        return _PyAnyCAD.EntityElement_SetDbViewId(self, val)

    def GetMaterialId(self):
        return _PyAnyCAD.EntityElement_GetMaterialId(self)

    def SetMaterialId(self, val):
        return _PyAnyCAD.EntityElement_SetMaterialId(self, val)

    def SetVisible(self, bVisible):
        r"""
        设置可见性
        :type bVisible: boolean
        :param bVisible: 是否可见
        """
        return _PyAnyCAD.EntityElement_SetVisible(self, bVisible)

    def GetVisible(self):
        return _PyAnyCAD.EntityElement_GetVisible(self)

    def SetProvisional(self, enabled):
        r"""
        设置临时可见性
        :type enabled: boolean
        :param enabled: 是否临时可见
        """
        return _PyAnyCAD.EntityElement_SetProvisional(self, enabled)

    def GetProvisional(self):
        return _PyAnyCAD.EntityElement_GetProvisional(self)

    def SetPickable(self, bPickable):
        r"""
        是否可被选择
        :type bPickable: boolean
        :param bPickable:
        """
        return _PyAnyCAD.EntityElement_SetPickable(self, bPickable)

    def GetPickable(self):
        return _PyAnyCAD.EntityElement_GetPickable(self)

    def SetLocked(self, locked):
        r"""
        是否锁定，锁定后则无法编辑
        :param bPickable:
        """
        return _PyAnyCAD.EntityElement_SetLocked(self, locked)

    def GetLocked(self):
        return _PyAnyCAD.EntityElement_GetLocked(self)

    def SetSectionable(self, bSectionable):
        r"""
        是否可用于生成剖切元素
        :type bSectionable: boolean
        :param bSectionable:
        """
        return _PyAnyCAD.EntityElement_SetSectionable(self, bSectionable)

    def GetSectionable(self):
        return _PyAnyCAD.EntityElement_GetSectionable(self)

    def SetBrowserable(self, browserable):
        r"""
        是否在默认的目录树上可见
        :type browserable: boolean
        :param browserable: 是否可见
        """
        return _PyAnyCAD.EntityElement_SetBrowserable(self, browserable)

    def GetBrowserable(self):
        return _PyAnyCAD.EntityElement_GetBrowserable(self)

    def SetEditable(self, editable):
        r"""
        是否可被编辑
        :type editable: boolean
        :param editable:
        """
        return _PyAnyCAD.EntityElement_SetEditable(self, editable)

    def GetEditable(self):
        return _PyAnyCAD.EntityElement_GetEditable(self)

    def SetLODEnabled(self, enabled):
        r"""
        是否支持LoD
        :type enabled: boolean
        :param enabled: 是否启用
        """
        return _PyAnyCAD.EntityElement_SetLODEnabled(self, enabled)

    def GetLODEnabled(self):
        return _PyAnyCAD.EntityElement_GetLODEnabled(self)

    def SetShadowing(self, enabled):
        r"""
        是否为影子对象，显示选择的ID为其父ID
        :type enabled: boolean
        :param enabled: 是否启用
        """
        return _PyAnyCAD.EntityElement_SetShadowing(self, enabled)

    def GetShadowing(self):
        r"""
        是否为影子对象
        :rtype: boolean
        :return: true则是
        """
        return _PyAnyCAD.EntityElement_GetShadowing(self)

    def SetManaged(self, enabled):
        r"""
        设置托管状态。
        :type enabled: boolean
        :param enabled: 若为true，则不会单独绘制，而是依托于其他构件来绘制，如Assembly子构件、Instance的Type。默认为false
        """
        return _PyAnyCAD.EntityElement_SetManaged(self, enabled)

    def GetManaged(self):
        r"""
        获取托管状态
        :rtype: boolean
        :return: 若为true，则不会单独绘制
        """
        return _PyAnyCAD.EntityElement_GetManaged(self)

    def GetComponent(self, className):
        r"""
        根据类名获取组件
        :type className: string
        :param className: 组件的类名
        :rtype: :py:class:`Component`
        :return: 组件对象
        """
        return _PyAnyCAD.EntityElement_GetComponent(self, className)

    def FindComponent(self, className, name):
        r"""
        根据类名获取组件
        :type className: string
        :param className: 组件的类名
        :type name: string
        :param name: 组件的名称
        :rtype: :py:class:`Component`
        :return: 组件对象
        """
        return _PyAnyCAD.EntityElement_FindComponent(self, className, name)

    def CollectChildren(self, collector):
        r"""
        收集子对象
        :type collector: :py:class:`ReferenceCollector`
        :param collector: 收集器
        """
        return _PyAnyCAD.EntityElement_CollectChildren(self, collector)

    def CollectPickedId(self, collector):
        r"""
        收集显示对象ID
        :type collector: :py:class:`PickedIdCollector`
        :param collector: 收集器
        """
        return _PyAnyCAD.EntityElement_CollectPickedId(self, collector)

    def GetUsedMaterialId(self):
        r"""
        自定义查找材质的顺序
        :rtype: :py:class:`ObjectId`
        :return: 材质ID
        """
        return _PyAnyCAD.EntityElement_GetUsedMaterialId(self)

    def Execute(self, action, pParams):
        r"""
        执行自定义的命令。需要在事务范围内执行
        :type action: string
        :param action: 命令标识
        :type pParams: :py:class:`ParameterDict`
        :param pParams: 参数
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.EntityElement_Execute(self, action, pParams)

    def ListParameters(self, parameters):
        return _PyAnyCAD.EntityElement_ListParameters(self, parameters)

    def SetParameter(self, parameters, key):
        return _PyAnyCAD.EntityElement_SetParameter(self, parameters, key)

# Register EntityElement in _PyAnyCAD:
_PyAnyCAD.EntityElement_swigregister(EntityElement)
class GeneralComponent(Component):
    r"""
    Author: DataManage

    扩展属性组件。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.GeneralComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.GeneralComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GeneralComponent_Cast(obj)

    @staticmethod
    def Create(pDoc, entityId):
        return _PyAnyCAD.GeneralComponent_Create(pDoc, entityId)

    def __init__(self, *args):
        _PyAnyCAD.GeneralComponent_swiginit(self, _PyAnyCAD.new_GeneralComponent(*args))
    __swig_destroy__ = _PyAnyCAD.delete_GeneralComponent

    def GetParameterDict(self):
        r"""
        获取属性集合
        :rtype: :py:class:`ParameterDict`
        :return: 属性集
        """
        return _PyAnyCAD.GeneralComponent_GetParameterDict(self)

    def SafeSetParameters(self, src):
        r"""
        从目标属性集中复制已经存在的属性。
        :type src: :py:class:`ParameterDict`
        :param src: 目标集合。src中存在，但Component不存在的属性不会复制。
        """
        return _PyAnyCAD.GeneralComponent_SafeSetParameters(self, src)

    def SetParameters(self, src):
        return _PyAnyCAD.GeneralComponent_SetParameters(self, src)

    def CreateParameterIterator(self):
        r"""
        创建遍历属性的迭代器
        :rtype: :py:class:`ParameterIterator`
        :return: 遍历器
        """
        return _PyAnyCAD.GeneralComponent_CreateParameterIterator(self)

    def RemoveParameter(self, name):
        r"""
        移除属性
        :type name: string
        :param name: 属性名
        """
        return _PyAnyCAD.GeneralComponent_RemoveParameter(self, name)

    def FindParameter(self, name):
        r"""
        查找属性
        :type name: string
        :param name: 属性名
        :rtype: :py:class:`ParameterValue`
        :return: 属性值
        """
        return _PyAnyCAD.GeneralComponent_FindParameter(self, name)

    def SetParameter(self, *args):
        return _PyAnyCAD.GeneralComponent_SetParameter(self, *args)

# Register GeneralComponent in _PyAnyCAD:
_PyAnyCAD.GeneralComponent_swigregister(GeneralComponent)
class SchemaComponent(GeneralComponent):
    r"""
    Author: DataManage

    与Schema绑定的可扩展属性组件。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.SchemaComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.SchemaComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SchemaComponent_Cast(obj)

    @staticmethod
    def Create(pDoc, entityId):
        return _PyAnyCAD.SchemaComponent_Create(pDoc, entityId)

    def __init__(self, *args):
        _PyAnyCAD.SchemaComponent_swiginit(self, _PyAnyCAD.new_SchemaComponent(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SchemaComponent

    @staticmethod
    def Get(pEntity):
        r"""
        获取Entity上的SchemaComponent
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: EntityElement
        :rtype: :py:class:`SchemaComponent`
        :return: SchemaComponent
        """
        return _PyAnyCAD.SchemaComponent_Get(pEntity)

# Register SchemaComponent in _PyAnyCAD:
_PyAnyCAD.SchemaComponent_swigregister(SchemaComponent)
class StreamComponent(Component):
    r"""
    Author: DataManage

    用于保存较大的数据流，如文件。

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.StreamComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.StreamComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.StreamComponent_Cast(obj)

    @staticmethod
    def Create(pDoc, entityId):
        return _PyAnyCAD.StreamComponent_Create(pDoc, entityId)

    def __init__(self, *args):
        _PyAnyCAD.StreamComponent_swiginit(self, _PyAnyCAD.new_StreamComponent(*args))
    __swig_destroy__ = _PyAnyCAD.delete_StreamComponent

    def GetMetadata(self):
        return _PyAnyCAD.StreamComponent_GetMetadata(self)

    def SetMetadata(self, val):
        return _PyAnyCAD.StreamComponent_SetMetadata(self, val)

    def GetDataType(self):
        return _PyAnyCAD.StreamComponent_GetDataType(self)

    def GetDataSize(self):
        return _PyAnyCAD.StreamComponent_GetDataSize(self)

    def GetBuffer(self):
        return _PyAnyCAD.StreamComponent_GetBuffer(self)

    def SetBuffer(self, val):
        return _PyAnyCAD.StreamComponent_SetBuffer(self, val)

    def SetData(self, data):
        r"""
        设置数据流
        :type data: :py:class:`ArrayBuffer`
        :param data: 数据内容
        """
        return _PyAnyCAD.StreamComponent_SetData(self, data)

# Register StreamComponent in _PyAnyCAD:
_PyAnyCAD.StreamComponent_swigregister(StreamComponent)
class TransformComponent(Component):
    r"""
    Author: DataManage

    矩阵变换组件，用于给Drawable对象增加矩阵变换

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TransformComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TransformComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TransformComponent_Cast(obj)

    @staticmethod
    def Create(pDoc, entityId):
        return _PyAnyCAD.TransformComponent_Create(pDoc, entityId)

    def __init__(self, *args):
        _PyAnyCAD.TransformComponent_swiginit(self, _PyAnyCAD.new_TransformComponent(*args))
    __swig_destroy__ = _PyAnyCAD.delete_TransformComponent

    def GetTransform(self):
        return _PyAnyCAD.TransformComponent_GetTransform(self)

    def SetTransform(self, val):
        return _PyAnyCAD.TransformComponent_SetTransform(self, val)

    @staticmethod
    def Get(pEntity):
        r"""
        获取Entity上的TransformComponent
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: EntityElement
        :rtype: :py:class:`TransformComponent`
        :return: TransformComponent
        """
        return _PyAnyCAD.TransformComponent_Get(pEntity)

    def SetLocation(self, position):
        r"""
        设置位置
        :type position: :py:class:`gp_XYZ`
        :param position: 位置
        """
        return _PyAnyCAD.TransformComponent_SetLocation(self, position)

    def GetLocation(self):
        return _PyAnyCAD.TransformComponent_GetLocation(self)

    def SetYawPitchRoll(self, value):
        r"""
        设置选择角度
        :type value: :py:class:`gp_XYZ`
        :param value: 欧拉角
        """
        return _PyAnyCAD.TransformComponent_SetYawPitchRoll(self, value)

    def GetYawPitchRoll(self):
        return _PyAnyCAD.TransformComponent_GetYawPitchRoll(self)

# Register TransformComponent in _PyAnyCAD:
_PyAnyCAD.TransformComponent_swigregister(TransformComponent)
class PropertiesComponent(GeneralComponent):
    r"""
    Author: DataManage

    可扩展属性组件。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PropertiesComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PropertiesComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PropertiesComponent_Cast(obj)

    @staticmethod
    def Create(pDoc, entityId):
        return _PyAnyCAD.PropertiesComponent_Create(pDoc, entityId)

    def __init__(self, *args):
        _PyAnyCAD.PropertiesComponent_swiginit(self, _PyAnyCAD.new_PropertiesComponent(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PropertiesComponent

    @staticmethod
    def Get(pEntity):
        r"""
        获取Entity上的PropertiesComponent
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: EntityElement
        :rtype: :py:class:`PropertiesComponent`
        :return: PropertiesComponent
        """
        return _PyAnyCAD.PropertiesComponent_Get(pEntity)

# Register PropertiesComponent in _PyAnyCAD:
_PyAnyCAD.PropertiesComponent_swigregister(PropertiesComponent)
class PropertiesModel(object):
    r"""
    Author: DataManage

    属性模型ORM类，方便提取属性信息
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.PropertiesModel_swiginit(self, _PyAnyCAD.new_PropertiesModel(*args))
    __swig_destroy__ = _PyAnyCAD.delete_PropertiesModel

    def Initialize(self, pDict):
        r"""
        初始化属性集
        :type pDict: :py:class:`ParameterDict`
        :param pDict: 属性集合
        """
        return _PyAnyCAD.PropertiesModel_Initialize(self, pDict)

    def Load(self, pDoc, id):
        r"""
        使用Entity的Id初始化Model
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :type id: :py:class:`ObjectId`
        :param id: Entity的Id
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.PropertiesModel_Load(self, pDoc, id)

# Register PropertiesModel in _PyAnyCAD:
_PyAnyCAD.PropertiesModel_swigregister(PropertiesModel)
EnumLevelOfDetail_Rough = _PyAnyCAD.EnumLevelOfDetail_Rough
EnumLevelOfDetail_Medium = _PyAnyCAD.EnumLevelOfDetail_Medium
EnumLevelOfDetail_Fine = _PyAnyCAD.EnumLevelOfDetail_Fine
class DrawableElement(EntityElement):
    r"""
    Author: DataManage

    可绘制对象的基类.
    - Managed: 若为true，则不会单独绘制，而是依托于其他构件来绘制，如Assembly子构件、Instance的Type。默认为false
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DrawableElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DrawableElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DrawableElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.DrawableElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.DrawableElement_swiginit(self, _PyAnyCAD.new_DrawableElement())
    __swig_destroy__ = _PyAnyCAD.delete_DrawableElement

    def GetLayerId(self):
        return _PyAnyCAD.DrawableElement_GetLayerId(self)

    def SetLayerId(self, val):
        return _PyAnyCAD.DrawableElement_SetLayerId(self, val)

    def GetDisplayFilter(self):
        return _PyAnyCAD.DrawableElement_GetDisplayFilter(self)

    def SetDisplayFilter(self, val):
        return _PyAnyCAD.DrawableElement_SetDisplayFilter(self, val)

    def GetFunctionId(self):
        return _PyAnyCAD.DrawableElement_GetFunctionId(self)

    def SetFunctionId(self, val):
        return _PyAnyCAD.DrawableElement_SetFunctionId(self, val)
    PID_Transform = _PyAnyCAD.DrawableElement_PID_Transform
    PID_RegenParameter = _PyAnyCAD.DrawableElement_PID_RegenParameter
    PID_Graphics = _PyAnyCAD.DrawableElement_PID_Graphics

    def GetLocalBBox(self):
        return _PyAnyCAD.DrawableElement_GetLocalBBox(self)

    def SetTransformBehaviour(self, behaviour):
        r"""设置矩阵变化的行为。默认相对系统坐标系变换。"""
        return _PyAnyCAD.DrawableElement_SetTransformBehaviour(self, behaviour)

    def GetTransformBehaviour(self):
        return _PyAnyCAD.DrawableElement_GetTransformBehaviour(self)

    def GetWorldBBox(self):
        r"""获取全局的包围盒"""
        return _PyAnyCAD.DrawableElement_GetWorldBBox(self)

    def GetFinalShape(self, *args):
        return _PyAnyCAD.DrawableElement_GetFinalShape(self, *args)

    def SetTransform(self, trf):
        r"""
        设置全局矩阵变换
        :type trf: :py:class:`gp_Trsf`
        :param trf: 变换
        """
        return _PyAnyCAD.DrawableElement_SetTransform(self, trf)

    def GetTransform(self):
        r"""
        获取全局矩阵变换
        :rtype: :py:class:`gp_Trsf`
        :return: 变换
        """
        return _PyAnyCAD.DrawableElement_GetTransform(self)

    def GetParentTransform(self):
        r"""
        获取父节点的矩阵变换
        :rtype: :py:class:`gp_Trsf`
        :return: 变换
        """
        return _PyAnyCAD.DrawableElement_GetParentTransform(self)

    def GetLocalTransform(self):
        r"""
        获取局部变换
        :rtype: :py:class:`gp_Trsf`
        :return: 变换
        """
        return _PyAnyCAD.DrawableElement_GetLocalTransform(self)

    def SetLocalTransform(self, trf):
        r"""
        设置局部变换
        :type trf: :py:class:`gp_Trsf`
        :param trf: 变换
        """
        return _PyAnyCAD.DrawableElement_SetLocalTransform(self, trf)

    def GetUsedMaterialId(self):
        r"""
        自定义查找材质的顺序
        :rtype: :py:class:`ObjectId`
        :return: 材质ID
        """
        return _PyAnyCAD.DrawableElement_GetUsedMaterialId(self)

    def RequestUpdate(self, *args):
        r"""更新显示"""
        return _PyAnyCAD.DrawableElement_RequestUpdate(self, *args)

# Register DrawableElement in _PyAnyCAD:
_PyAnyCAD.DrawableElement_swigregister(DrawableElement)
class GroupElement(EntityElement):
    r"""
    Author: DataManage

    GroupElement 分组
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.GroupElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.GroupElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.GroupElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.GroupElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.GroupElement_swiginit(self, _PyAnyCAD.new_GroupElement())
    __swig_destroy__ = _PyAnyCAD.delete_GroupElement

    def GetChildren(self):
        return _PyAnyCAD.GroupElement_GetChildren(self)

    def SetChildren(self, val):
        return _PyAnyCAD.GroupElement_SetChildren(self, val)

    def SetVisible(self, bVisible):
        r"""
        设置可见性
        :type bVisible: boolean
        :param bVisible: 是否可见
        """
        return _PyAnyCAD.GroupElement_SetVisible(self, bVisible)

    def AddChild(self, id):
        r"""
        添加子对象
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        """
        return _PyAnyCAD.GroupElement_AddChild(self, id)

    def AddChildren(self, ids):
        r"""
        添加子对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: 对象ID集合
        """
        return _PyAnyCAD.GroupElement_AddChildren(self, ids)

    def RemoveChild(self, id):
        r"""
        删除子对象
        :type id: :py:class:`ObjectId`
        :param id: 对象ID
        """
        return _PyAnyCAD.GroupElement_RemoveChild(self, id)

    def RemoveChildren(self, ids):
        r"""
        删除子对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: 子对象集合
        :rtype: int
        :return: 删除的个数
        """
        return _PyAnyCAD.GroupElement_RemoveChildren(self, ids)

    def Clear(self):
        r"""清空"""
        return _PyAnyCAD.GroupElement_Clear(self)

    @staticmethod
    def FindGroup(doc, id):
        r"""
        查找id所在的组
        :type id: :py:class:`ObjectId`
        :param id: Element的Id
        :rtype: :py:class:`ObjectIdSet`
        :return: 组的Id列表
        """
        return _PyAnyCAD.GroupElement_FindGroup(doc, id)

# Register GroupElement in _PyAnyCAD:
_PyAnyCAD.GroupElement_swigregister(GroupElement)
class ShapeElement(DrawableElement):
    r"""
    Author: DataManage

    用来管理几何对象。
    - SetDeflection 可以控制显示对象的离散精度。
    - SetOptimized 可以控制是否开启中小模型的优化模式，以提升显示效率。
    - SetChildrenPickable 可以控制是否允许选择点、线、面。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ShapeElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ShapeElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ShapeElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.ShapeElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.ShapeElement_swiginit(self, _PyAnyCAD.new_ShapeElement())
    __swig_destroy__ = _PyAnyCAD.delete_ShapeElement

    def GetShape(self):
        return _PyAnyCAD.ShapeElement_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.ShapeElement_SetShape(self, val)

    def GetDeflection(self):
        return _PyAnyCAD.ShapeElement_GetDeflection(self)

    def SetDeflection(self, val):
        return _PyAnyCAD.ShapeElement_SetDeflection(self, val)

    def GetOptimized(self):
        return _PyAnyCAD.ShapeElement_GetOptimized(self)

    def SetOptimized(self, val):
        return _PyAnyCAD.ShapeElement_SetOptimized(self, val)

    def GetChildrenPickable(self):
        return _PyAnyCAD.ShapeElement_GetChildrenPickable(self)

    def SetChildrenPickable(self, val):
        return _PyAnyCAD.ShapeElement_SetChildrenPickable(self, val)

    def SetFaceColor(self, faceId, materialId):
        r"""
        设置颜色和透明度
        :type faceId: int
        :param faceId: 面的ID
        :type materialId: :py:class:`ObjectId`
        :param materialId: 材质ID
        """
        return _PyAnyCAD.ShapeElement_SetFaceColor(self, faceId, materialId)

    def ClearFaceColor(self, faceId):
        r"""
        清除指定面的颜色
        :type faceId: int
        :param faceId: 面的ID
        """
        return _PyAnyCAD.ShapeElement_ClearFaceColor(self, faceId)

    def ClearFaceColors(self):
        r"""清除所有的颜色"""
        return _PyAnyCAD.ShapeElement_ClearFaceColors(self)

# Register ShapeElement in _PyAnyCAD:
_PyAnyCAD.ShapeElement_swigregister(ShapeElement)
class LayerElement(EntityElement):
    r"""
    Author: DataManage

    LayerElement图层管理， 图层上的样式从与之关联的MaterialElement上获取。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.LayerElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.LayerElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LayerElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.LayerElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.LayerElement_swiginit(self, _PyAnyCAD.new_LayerElement())
    __swig_destroy__ = _PyAnyCAD.delete_LayerElement

    def GetItems(self, doc):
        r"""
        查找在当前层的ID列表
        :type doc: :py:class:`Document`
        :param doc: 文档
        :rtype: :py:class:`ObjectIdSet`
        :return: 组的Id列表
        """
        return _PyAnyCAD.LayerElement_GetItems(self, doc)

# Register LayerElement in _PyAnyCAD:
_PyAnyCAD.LayerElement_swigregister(LayerElement)
class FunctionElement(EntityElement):
    r"""
    Author: DataManage

    FunctionElement
    根据一个或多个输入经过计算，生成新的对象。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.FunctionElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.FunctionElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.FunctionElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.FunctionElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.FunctionElement_swiginit(self, _PyAnyCAD.new_FunctionElement())
    __swig_destroy__ = _PyAnyCAD.delete_FunctionElement

    def GetOutputs(self):
        return _PyAnyCAD.FunctionElement_GetOutputs(self)

    def SetOutputs(self, val):
        return _PyAnyCAD.FunctionElement_SetOutputs(self, val)

    def GetInputKeys(self):
        r"""
        获取输入的Key列表
        :rtype: :py:class:`StringList`
        :return: Key列表
        """
        return _PyAnyCAD.FunctionElement_GetInputKeys(self)

    def GetInput(self, key):
        r"""
        获取输入对象
        :type key: string
        :param key: 标识
        :rtype: :py:class:`ObjectIdList`
        :return: 对象列表
        """
        return _PyAnyCAD.FunctionElement_GetInput(self, key)

    def GetInputId(self, key):
        r"""
        获取ID，简单写法。方便只有一个ID的情况获取。
        :type key: string
        :param key: 标识
        :rtype: :py:class:`ObjectId`
        :return: 第一个ID
        """
        return _PyAnyCAD.FunctionElement_GetInputId(self, key)

    def AddInput(self, key, ids):
        r"""
        增加输入对象
        :type key: string
        :param key: 标识
        :type ids: :py:class:`ObjectIdList`
        :param ids: 对象ID
        """
        return _PyAnyCAD.FunctionElement_AddInput(self, key, ids)

    def SetInputId(self, key, id):
        r"""
        设置只需要一个Id的输入。简单写法
        :type key: string
        :param key: 标识
        :type id: :py:class:`ObjectId`
        :param id: ID
        """
        return _PyAnyCAD.FunctionElement_SetInputId(self, key, id)

    def RemoveInput(self, key):
        r"""
        移除输入
        :type key: string
        :param key: 标识
        """
        return _PyAnyCAD.FunctionElement_RemoveInput(self, key)

    def IsEqual(self, key, ids):
        r"""
        是否与已有的相同
        :type key: string
        :param key: 标识
        :type ids: :py:class:`ObjectIdList`
        :param ids: 比较的对象ID
        :rtype: boolean
        :return: true相同
        """
        return _PyAnyCAD.FunctionElement_IsEqual(self, key, ids)

    def Contains(self, key):
        r"""
        是否存在Key
        :type key: string
        :param key: Key
        :rtype: boolean
        :return: true则存在
        """
        return _PyAnyCAD.FunctionElement_Contains(self, key)

    def ListVisualChildren(self):
        r"""
        收集可视化对象
        :rtype: :py:class:`ObjectIdList`
        :return: 对象ID列表
        """
        return _PyAnyCAD.FunctionElement_ListVisualChildren(self)

# Register FunctionElement in _PyAnyCAD:
_PyAnyCAD.FunctionElement_swigregister(FunctionElement)
class NodeComponent(GeneralComponent):
    r"""
    Author: DataManage

    NodeComponent
    删Node会删Entity，删Entity 不会删Node
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.NodeComponent_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.NodeComponent_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.NodeComponent_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.NodeComponent_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.NodeComponent_swiginit(self, _PyAnyCAD.new_NodeComponent())
    __swig_destroy__ = _PyAnyCAD.delete_NodeComponent

    def GetLocation(self):
        return _PyAnyCAD.NodeComponent_GetLocation(self)

    def SetLocation(self, val):
        return _PyAnyCAD.NodeComponent_SetLocation(self, val)

# Register NodeComponent in _PyAnyCAD:
_PyAnyCAD.NodeComponent_swigregister(NodeComponent)
class NodeConnection(Element):
    r"""
    Author: DataManage

    NodeConnection

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.NodeConnection_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.NodeConnection_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.NodeConnection_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.NodeConnection_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.NodeConnection_swiginit(self, _PyAnyCAD.new_NodeConnection())
    __swig_destroy__ = _PyAnyCAD.delete_NodeConnection

    def GetSourceId(self):
        return _PyAnyCAD.NodeConnection_GetSourceId(self)

    def SetSourceId(self, val):
        return _PyAnyCAD.NodeConnection_SetSourceId(self, val)

    def GetSourcePropertyName(self):
        return _PyAnyCAD.NodeConnection_GetSourcePropertyName(self)

    def SetSourcePropertyName(self, val):
        return _PyAnyCAD.NodeConnection_SetSourcePropertyName(self, val)

    def GetTargetId(self):
        return _PyAnyCAD.NodeConnection_GetTargetId(self)

    def SetTargetId(self, val):
        return _PyAnyCAD.NodeConnection_SetTargetId(self, val)

    def GetTargetPropertyName(self):
        return _PyAnyCAD.NodeConnection_GetTargetPropertyName(self)

    def SetTargetPropertyName(self, val):
        return _PyAnyCAD.NodeConnection_SetTargetPropertyName(self, val)

# Register NodeConnection in _PyAnyCAD:
_PyAnyCAD.NodeConnection_swigregister(NodeConnection)
class StyleElement(Element):
    r"""
    Author: DataManage

    样式的基类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.StyleElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.StyleElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.StyleElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.StyleElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.StyleElement_swiginit(self, _PyAnyCAD.new_StyleElement())
    __swig_destroy__ = _PyAnyCAD.delete_StyleElement

    def GetLocked(self):
        return _PyAnyCAD.StyleElement_GetLocked(self)

    def SetLocked(self, val):
        return _PyAnyCAD.StyleElement_SetLocked(self, val)

    def IsUsed(self):
        r"""
        判断是否被其他对象使用
        :rtype: boolean
        :return: true则被使用
        """
        return _PyAnyCAD.StyleElement_IsUsed(self)

# Register StyleElement in _PyAnyCAD:
_PyAnyCAD.StyleElement_swigregister(StyleElement)
class TextureElement(StyleElement):
    r"""
    Author: DataManage

    纹理贴图对象
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TextureElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TextureElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextureElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.TextureElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.TextureElement_swiginit(self, _PyAnyCAD.new_TextureElement())
    __swig_destroy__ = _PyAnyCAD.delete_TextureElement

    def GetTexture(self):
        return _PyAnyCAD.TextureElement_GetTexture(self)

    def SetTexture(self, val):
        return _PyAnyCAD.TextureElement_SetTexture(self, val)

    def GetParentId(self):
        return _PyAnyCAD.TextureElement_GetParentId(self)

    def SetParentId(self, val):
        return _PyAnyCAD.TextureElement_SetParentId(self, val)

    def GetFileName(self):
        return _PyAnyCAD.TextureElement_GetFileName(self)

    def SetFileName(self, val):
        return _PyAnyCAD.TextureElement_SetFileName(self, val)

    def GetOffset(self):
        return _PyAnyCAD.TextureElement_GetOffset(self)

    def SetOffset(self, val):
        return _PyAnyCAD.TextureElement_SetOffset(self, val)

    def GetAngle(self):
        return _PyAnyCAD.TextureElement_GetAngle(self)

    def SetAngle(self, val):
        return _PyAnyCAD.TextureElement_SetAngle(self, val)

    def GetRepeat(self):
        return _PyAnyCAD.TextureElement_GetRepeat(self)

    def SetRepeat(self, val):
        return _PyAnyCAD.TextureElement_SetRepeat(self, val)

    def GetCenter(self):
        return _PyAnyCAD.TextureElement_GetCenter(self)

    def SetCenter(self, val):
        return _PyAnyCAD.TextureElement_SetCenter(self, val)

    def GetGenerateMipmap(self):
        return _PyAnyCAD.TextureElement_GetGenerateMipmap(self)

    def SetGenerateMipmap(self, val):
        return _PyAnyCAD.TextureElement_SetGenerateMipmap(self, val)
    PID_UpdateTexture = _PyAnyCAD.TextureElement_PID_UpdateTexture
    PID_UpdatedTexture = _PyAnyCAD.TextureElement_PID_UpdatedTexture

    def RequestUpdate(self, *args):
        return _PyAnyCAD.TextureElement_RequestUpdate(self, *args)

    def UpdateMaterial(self):
        return _PyAnyCAD.TextureElement_UpdateMaterial(self)

    def Initialize(self):
        return _PyAnyCAD.TextureElement_Initialize(self)

# Register TextureElement in _PyAnyCAD:
_PyAnyCAD.TextureElement_swigregister(TextureElement)
EnumStyleUsage_ByEntity = _PyAnyCAD.EnumStyleUsage_ByEntity
EnumStyleUsage_ByLayer = _PyAnyCAD.EnumStyleUsage_ByLayer
class MaterialElement(Element):
    r"""
    Author: DataManage

    材质，包括面、边、点的外观显示设置，线型、字体等设置
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.MaterialElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.MaterialElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MaterialElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.MaterialElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.MaterialElement_swiginit(self, _PyAnyCAD.new_MaterialElement())
    __swig_destroy__ = _PyAnyCAD.delete_MaterialElement

    def GetFaceMaterial(self):
        return _PyAnyCAD.MaterialElement_GetFaceMaterial(self)

    def SetFaceMaterial(self, val):
        return _PyAnyCAD.MaterialElement_SetFaceMaterial(self, val)

    def GetEdgeMaterial(self):
        return _PyAnyCAD.MaterialElement_GetEdgeMaterial(self)

    def GetPointMaterial(self):
        return _PyAnyCAD.MaterialElement_GetPointMaterial(self)

    def SetPointMaterial(self, val):
        return _PyAnyCAD.MaterialElement_SetPointMaterial(self, val)

    def GetFaceColor(self):
        return _PyAnyCAD.MaterialElement_GetFaceColor(self)

    def SetFaceColor(self, val):
        return _PyAnyCAD.MaterialElement_SetFaceColor(self, val)

    def GetLineWidth(self):
        return _PyAnyCAD.MaterialElement_GetLineWidth(self)

    def SetLineWidth(self, val):
        return _PyAnyCAD.MaterialElement_SetLineWidth(self, val)

    def GetEdgeColor(self):
        return _PyAnyCAD.MaterialElement_GetEdgeColor(self)

    def SetEdgeColor(self, val):
        return _PyAnyCAD.MaterialElement_SetEdgeColor(self, val)

    def GetMetalness(self):
        return _PyAnyCAD.MaterialElement_GetMetalness(self)

    def SetMetalness(self, val):
        return _PyAnyCAD.MaterialElement_SetMetalness(self, val)

    def GetRoughness(self):
        return _PyAnyCAD.MaterialElement_GetRoughness(self)

    def SetRoughness(self, val):
        return _PyAnyCAD.MaterialElement_SetRoughness(self, val)

    def GetOpacity(self):
        return _PyAnyCAD.MaterialElement_GetOpacity(self)

    def SetOpacity(self, val):
        return _PyAnyCAD.MaterialElement_SetOpacity(self, val)

    def GetPointColor(self):
        return _PyAnyCAD.MaterialElement_GetPointColor(self)

    def SetPointColor(self, val):
        return _PyAnyCAD.MaterialElement_SetPointColor(self, val)

    def GetPointSize(self):
        return _PyAnyCAD.MaterialElement_GetPointSize(self)

    def SetPointSize(self, val):
        return _PyAnyCAD.MaterialElement_SetPointSize(self, val)

    def GetPointStyle(self):
        return _PyAnyCAD.MaterialElement_GetPointStyle(self)

    def SetPointStyle(self, val):
        return _PyAnyCAD.MaterialElement_SetPointStyle(self, val)

    def GetParentId(self):
        return _PyAnyCAD.MaterialElement_GetParentId(self)

    def SetParentId(self, val):
        return _PyAnyCAD.MaterialElement_SetParentId(self, val)

    def GetUserData(self):
        return _PyAnyCAD.MaterialElement_GetUserData(self)

    def SetUserData(self, val):
        return _PyAnyCAD.MaterialElement_SetUserData(self, val)

    def GetRenderOrder(self):
        return _PyAnyCAD.MaterialElement_GetRenderOrder(self)

    def SetRenderOrder(self, val):
        return _PyAnyCAD.MaterialElement_SetRenderOrder(self, val)

    def GetColorTextureId(self):
        return _PyAnyCAD.MaterialElement_GetColorTextureId(self)

    def SetColorTextureId(self, val):
        return _PyAnyCAD.MaterialElement_SetColorTextureId(self, val)

    def GetDepthTest(self):
        return _PyAnyCAD.MaterialElement_GetDepthTest(self)

    def SetDepthTest(self, val):
        return _PyAnyCAD.MaterialElement_SetDepthTest(self, val)

    def GetFaceSide(self):
        return _PyAnyCAD.MaterialElement_GetFaceSide(self)

    def SetFaceSide(self, val):
        return _PyAnyCAD.MaterialElement_SetFaceSide(self, val)

    def GetLineStyleId(self):
        return _PyAnyCAD.MaterialElement_GetLineStyleId(self)

    def SetLineStyleId(self, val):
        return _PyAnyCAD.MaterialElement_SetLineStyleId(self, val)

    def GetTextStyleId(self):
        return _PyAnyCAD.MaterialElement_GetTextStyleId(self)

    def SetTextStyleId(self, val):
        return _PyAnyCAD.MaterialElement_SetTextStyleId(self, val)

    def GetLineWidthW(self):
        return _PyAnyCAD.MaterialElement_GetLineWidthW(self)

    def SetLineWidthW(self, val):
        return _PyAnyCAD.MaterialElement_SetLineWidthW(self, val)

    def GetLayerId(self):
        return _PyAnyCAD.MaterialElement_GetLayerId(self)

    def SetLayerId(self, val):
        return _PyAnyCAD.MaterialElement_SetLayerId(self, val)

    def GetColorUsage(self):
        return _PyAnyCAD.MaterialElement_GetColorUsage(self)

    def SetColorUsage(self, val):
        return _PyAnyCAD.MaterialElement_SetColorUsage(self, val)

    def GetLineStyleUsage(self):
        return _PyAnyCAD.MaterialElement_GetLineStyleUsage(self)

    def SetLineStyleUsage(self, val):
        return _PyAnyCAD.MaterialElement_SetLineStyleUsage(self, val)

    def GetLineWidthUsage(self):
        return _PyAnyCAD.MaterialElement_GetLineWidthUsage(self)

    def SetLineWidthUsage(self, val):
        return _PyAnyCAD.MaterialElement_SetLineWidthUsage(self, val)

    def GetUseDashed(self):
        return _PyAnyCAD.MaterialElement_GetUseDashed(self)

    def SetUseDashed(self, val):
        return _PyAnyCAD.MaterialElement_SetUseDashed(self, val)
    PID_MaterialFinish = _PyAnyCAD.MaterialElement_PID_MaterialFinish

    def RequestUpdate(self, *args):
        return _PyAnyCAD.MaterialElement_RequestUpdate(self, *args)

    def SetColor(self, clr):
        r"""
        同时设置边和面的颜色
        :type clr: :py:class:`vec3`
        :param clr: 颜色
        """
        return _PyAnyCAD.MaterialElement_SetColor(self, clr)

    def UpdateMaterial(self):
        return _PyAnyCAD.MaterialElement_UpdateMaterial(self)

    def Initialize(self):
        return _PyAnyCAD.MaterialElement_Initialize(self)

    def IsUsed(self):
        r"""
        判断是否被其他对象使用
        :rtype: boolean
        :return: true则被使用
        """
        return _PyAnyCAD.MaterialElement_IsUsed(self)

# Register MaterialElement in _PyAnyCAD:
_PyAnyCAD.MaterialElement_swigregister(MaterialElement)
class TextStyleElement(StyleElement):
    r"""
    Author: DataManage

    文本样式

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TextStyleElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TextStyleElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextStyleElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.TextStyleElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.TextStyleElement_swiginit(self, _PyAnyCAD.new_TextStyleElement())
    __swig_destroy__ = _PyAnyCAD.delete_TextStyleElement

    @staticmethod
    def DefaultTextHeight():
        return _PyAnyCAD.TextStyleElement_DefaultTextHeight()

    def GetFontName(self):
        return _PyAnyCAD.TextStyleElement_GetFontName(self)

    def SetFontName(self, val):
        return _PyAnyCAD.TextStyleElement_SetFontName(self, val)

    def GetTextHeight(self):
        return _PyAnyCAD.TextStyleElement_GetTextHeight(self)

    def SetTextHeight(self, val):
        return _PyAnyCAD.TextStyleElement_SetTextHeight(self, val)

    def GetXScale(self):
        return _PyAnyCAD.TextStyleElement_GetXScale(self)

    def SetXScale(self, val):
        return _PyAnyCAD.TextStyleElement_SetXScale(self, val)

    def GetTiltAngle(self):
        return _PyAnyCAD.TextStyleElement_GetTiltAngle(self)

    def SetTiltAngle(self, val):
        return _PyAnyCAD.TextStyleElement_SetTiltAngle(self, val)

# Register TextStyleElement in _PyAnyCAD:
_PyAnyCAD.TextStyleElement_swigregister(TextStyleElement)
class DbViewBase(Element):
    r"""
    Author: DataManage

    DbViewBase：View基类

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DbViewBase_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DbViewBase_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DbViewBase_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.DbViewBase_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.DbViewBase_swiginit(self, _PyAnyCAD.new_DbViewBase())
    __swig_destroy__ = _PyAnyCAD.delete_DbViewBase

    def GetReferencePlane(self):
        return _PyAnyCAD.DbViewBase_GetReferencePlane(self)

    def SetReferencePlane(self, val):
        return _PyAnyCAD.DbViewBase_SetReferencePlane(self, val)

    def GetPropertyId(self):
        return _PyAnyCAD.DbViewBase_GetPropertyId(self)

    def SetPropertyId(self, val):
        return _PyAnyCAD.DbViewBase_SetPropertyId(self, val)

    def GetActiveLayerId(self):
        return _PyAnyCAD.DbViewBase_GetActiveLayerId(self)

    def SetActiveLayerId(self, val):
        return _PyAnyCAD.DbViewBase_SetActiveLayerId(self, val)

    def GetViewType(self):
        return _PyAnyCAD.DbViewBase_GetViewType(self)

    def SetViewType(self, val):
        return _PyAnyCAD.DbViewBase_SetViewType(self, val)

    def GetLevelOfDetail(self):
        return _PyAnyCAD.DbViewBase_GetLevelOfDetail(self)

    def SetLevelOfDetail(self, val):
        return _PyAnyCAD.DbViewBase_SetLevelOfDetail(self, val)

    def GetFrozenObjectIds(self):
        return _PyAnyCAD.DbViewBase_GetFrozenObjectIds(self)

    def GetFreezeType(self):
        return _PyAnyCAD.DbViewBase_GetFreezeType(self)

    def SetFreezeType(self, val):
        return _PyAnyCAD.DbViewBase_SetFreezeType(self, val)

    def GetHiddenType(self):
        return _PyAnyCAD.DbViewBase_GetHiddenType(self)

    def SetHiddenType(self, val):
        return _PyAnyCAD.DbViewBase_SetHiddenType(self, val)

    def GetProvisionalIds(self):
        return _PyAnyCAD.DbViewBase_GetProvisionalIds(self)

    def SaveCamera(self, pCamera):
        r"""
        保存相机信息
        :type pCamera: :py:class:`Camera`
        :param pCamera: 相机
        """
        return _PyAnyCAD.DbViewBase_SaveCamera(self, pCamera)

    def RestoreCamera(self, pCamera):
        r"""
        恢复相机信息
        :type pCamera: :py:class:`Camera`
        :param pCamera: 相机
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.DbViewBase_RestoreCamera(self, pCamera)

    def IsVisible(self, pElement):
        r"""
        对象是否在当前视图可见
        :type pElement: :py:class:`DrawableElement`
        :param pElement: 对象
        :rtype: boolean
        :return: true可见
        """
        return _PyAnyCAD.DbViewBase_IsVisible(self, pElement)

    def CanShow(self, pElement):
        r"""
        是否能够在当前DbView中显示
        :type pElement: :py:class:`DrawableElement`
        :param pElement: 对象
        :rtype: boolean
        :return: true可以
        """
        return _PyAnyCAD.DbViewBase_CanShow(self, pElement)

    def FreezeObjects(self, ids):
        r"""
        被冻结的对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: ID
        """
        return _PyAnyCAD.DbViewBase_FreezeObjects(self, ids)

    def HideObjects(self, ids):
        r"""
        隐藏对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: ID
        """
        return _PyAnyCAD.DbViewBase_HideObjects(self, ids)

    def ShowObjects(self, ids):
        r"""
        显示对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: ID
        """
        return _PyAnyCAD.DbViewBase_ShowObjects(self, ids)

    def SetProvisionalObjects(self, ids):
        r"""
        临时显示对象
        :type ids: :py:class:`ObjectIdSet`
        :param ids: 对象ID集合
        """
        return _PyAnyCAD.DbViewBase_SetProvisionalObjects(self, ids)

    def GetBoundingBox(self, *args):
        return _PyAnyCAD.DbViewBase_GetBoundingBox(self, *args)

# Register DbViewBase in _PyAnyCAD:
_PyAnyCAD.DbViewBase_swigregister(DbViewBase)
class DbView(DbViewBase):
    r"""
    Author: DataManage

    DbView: 默认的三维View

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.DbView_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.DbView_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.DbView_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.DbView_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.DbView_swiginit(self, _PyAnyCAD.new_DbView())
    __swig_destroy__ = _PyAnyCAD.delete_DbView
    PID_RegenViewport = _PyAnyCAD.DbView_PID_RegenViewport

    def GetActiveSketchId(self):
        return _PyAnyCAD.DbView_GetActiveSketchId(self)

    def GetViewAxis(self):
        return _PyAnyCAD.DbView_GetViewAxis(self)

    def SetViewAxis(self, val):
        return _PyAnyCAD.DbView_SetViewAxis(self, val)

    def GetCropBox(self):
        return _PyAnyCAD.DbView_GetCropBox(self)

    def SetCropBox(self, val):
        return _PyAnyCAD.DbView_SetCropBox(self, val)

    def GetCropBoxActive(self):
        return _PyAnyCAD.DbView_GetCropBoxActive(self)

    def SetCropBoxActive(self, val):
        return _PyAnyCAD.DbView_SetCropBoxActive(self, val)

    def GetCropBoxVisible(self):
        return _PyAnyCAD.DbView_GetCropBoxVisible(self)

    def SetCropBoxVisible(self, val):
        return _PyAnyCAD.DbView_SetCropBoxVisible(self, val)

    def GetScale(self):
        return _PyAnyCAD.DbView_GetScale(self)

    def SetScale(self, val):
        return _PyAnyCAD.DbView_SetScale(self, val)

    def SetActiveSketchId(self, sketchId):
        r"""
        设置当前的草图工作平面
        :type sketchId: :py:class:`ObjectId`
        :param sketchId: 草图平面的ID
        """
        return _PyAnyCAD.DbView_SetActiveSketchId(self, sketchId)

    def GetViewDirection(self):
        r"""
        获取视图方向，即相机的朝向
        :rtype: :py:class:`gp_Dir`
        :return: gp_Dir 视图方向
        """
        return _PyAnyCAD.DbView_GetViewDirection(self)

    def GetWorldCropBox(self):
        r"""
        获取视图范围CropBox在世界坐标系下的轴对齐包围盒
               当视图坐标系(ViewAxis)与世界坐标系非轴对齐时，包围盒比实际范围更大
        :rtype: :py:class:`AABox`
        :return: WCS cropbox
        """
        return _PyAnyCAD.DbView_GetWorldCropBox(self)

    def GetWorldCropBoxCorners(self):
        r"""
        获取视图范围CropBox所有顶点在世界坐标系下的表达
        :rtype: :py:class:`Vec3List`
        :return: list of corners in WCS
        """
        return _PyAnyCAD.DbView_GetWorldCropBoxCorners(self)

    def ComputeCameraInfo(self, position, target, up, dir):
        r"""
        计算视图的相机参数
        :type position: :py:class:`vec3`
        :param position:
        :type target: :py:class:`vec3`
        :param target:
        :type up: :py:class:`vec3`
        :param up:
        :type dir: :py:class:`vec3`
        :param dir:
        """
        return _PyAnyCAD.DbView_ComputeCameraInfo(self, position, target, up, dir)

# Register DbView in _PyAnyCAD:
_PyAnyCAD.DbView_swigregister(DbView)
class UserElement(EntityElement):
    r"""
    Author: DataManage

    用与扩展无法自主显示的Entity类，或者保存用户自己的数据。
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.UserElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.UserElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.UserElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.UserElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.UserElement_swiginit(self, _PyAnyCAD.new_UserElement())
    __swig_destroy__ = _PyAnyCAD.delete_UserElement

# Register UserElement in _PyAnyCAD:
_PyAnyCAD.UserElement_swigregister(UserElement)
class VisualElement(DrawableElement):
    r"""
    Author: DataManage

        VisualElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.VisualElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.VisualElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.VisualElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.VisualElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.VisualElement_swiginit(self, _PyAnyCAD.new_VisualElement())
    __swig_destroy__ = _PyAnyCAD.delete_VisualElement

    @staticmethod
    def InitRx():
        return _PyAnyCAD.VisualElement_InitRx()

    def GetSourceId(self):
        return _PyAnyCAD.VisualElement_GetSourceId(self)

    def SetSourceId(self, val):
        return _PyAnyCAD.VisualElement_SetSourceId(self, val)

    def GetPrimitive(self):
        return _PyAnyCAD.VisualElement_GetPrimitive(self)

    def GetCompound(self):
        return _PyAnyCAD.VisualElement_GetCompound(self)

    def GetNode(self):
        return _PyAnyCAD.VisualElement_GetNode(self)

    def SetPrimitive(self, shape):
        return _PyAnyCAD.VisualElement_SetPrimitive(self, shape)

    def SetCompound(self, shape):
        return _PyAnyCAD.VisualElement_SetCompound(self, shape)

    def SetNode(self, shape):
        return _PyAnyCAD.VisualElement_SetNode(self, shape)

    def RequestUpdate(self, *args):
        return _PyAnyCAD.VisualElement_RequestUpdate(self, *args)

# Register VisualElement in _PyAnyCAD:
_PyAnyCAD.VisualElement_swigregister(VisualElement)
class PointElement(DrawableElement):
    r"""
    Author: DataManage

    PointElement 简单的点对象
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PointElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PointElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PointElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PointElement_swiginit(self, _PyAnyCAD.new_PointElement())
    __swig_destroy__ = _PyAnyCAD.delete_PointElement

    def GetValue(self):
        return _PyAnyCAD.PointElement_GetValue(self)

    def GetReferencePointId(self):
        return _PyAnyCAD.PointElement_GetReferencePointId(self)

    def SetReferencePointId(self, val):
        return _PyAnyCAD.PointElement_SetReferencePointId(self, val)

    def SetValue(self, v):
        r"""
        设置点的位置
        :type v: :py:class:`gp_Pnt`
        :param v: 值
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.PointElement_SetValue(self, v)

    def SetLocalTransform(self, trf):
        return _PyAnyCAD.PointElement_SetLocalTransform(self, trf)

    def RequestUpdate(self, *args):
        return _PyAnyCAD.PointElement_RequestUpdate(self, *args)

# Register PointElement in _PyAnyCAD:
_PyAnyCAD.PointElement_swigregister(PointElement)
class PointsElement(DrawableElement):
    r"""
    Author: DataManage

    PointsElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PointsElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PointsElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointsElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PointsElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PointsElement_swiginit(self, _PyAnyCAD.new_PointsElement())
    __swig_destroy__ = _PyAnyCAD.delete_PointsElement

    def GetValue(self):
        return _PyAnyCAD.PointsElement_GetValue(self)

    def SetValue(self, val):
        return _PyAnyCAD.PointsElement_SetValue(self, val)

# Register PointsElement in _PyAnyCAD:
_PyAnyCAD.PointsElement_swigregister(PointsElement)
class BBoxElement(DrawableElement):
    r"""
    Author: DataManage

    BBoxElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.BBoxElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.BBoxElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.BBoxElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.BBoxElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.BBoxElement_swiginit(self, _PyAnyCAD.new_BBoxElement())
    __swig_destroy__ = _PyAnyCAD.delete_BBoxElement

    def GetByWorldBBox(self):
        return _PyAnyCAD.BBoxElement_GetByWorldBBox(self)

    def SetByWorldBBox(self, val):
        return _PyAnyCAD.BBoxElement_SetByWorldBBox(self, val)

    def GetPrimitive(self):
        return _PyAnyCAD.BBoxElement_GetPrimitive(self)

    def SetPrimitive(self, val):
        return _PyAnyCAD.BBoxElement_SetPrimitive(self, val)

# Register BBoxElement in _PyAnyCAD:
_PyAnyCAD.BBoxElement_swigregister(BBoxElement)
class TextElement(DrawableElement):
    r"""
    Author: DataManage

    TextElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TextElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TextElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TextElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.TextElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.TextElement_swiginit(self, _PyAnyCAD.new_TextElement())
    __swig_destroy__ = _PyAnyCAD.delete_TextElement

    def GetText(self):
        return _PyAnyCAD.TextElement_GetText(self)

    def SetText(self, val):
        return _PyAnyCAD.TextElement_SetText(self, val)

    def GetTextStyleId(self):
        return _PyAnyCAD.TextElement_GetTextStyleId(self)

    def SetTextStyleId(self, val):
        return _PyAnyCAD.TextElement_SetTextStyleId(self, val)

    def GetLocation(self):
        return _PyAnyCAD.TextElement_GetLocation(self)

    def SetLocation(self, val):
        return _PyAnyCAD.TextElement_SetLocation(self, val)

    def GetAlignment(self):
        return _PyAnyCAD.TextElement_GetAlignment(self)

    def SetAlignment(self, val):
        return _PyAnyCAD.TextElement_SetAlignment(self, val)

    def GetFontType(self):
        return _PyAnyCAD.TextElement_GetFontType(self)

    def SetFontType(self, val):
        return _PyAnyCAD.TextElement_SetFontType(self, val)

    def SetLocalTransform(self, trf):
        return _PyAnyCAD.TextElement_SetLocalTransform(self, trf)

    def GetLocalTransform(self):
        return _PyAnyCAD.TextElement_GetLocalTransform(self)

    def SetPosition(self, position):
        return _PyAnyCAD.TextElement_SetPosition(self, position)

    def SetTextW(self, text):
        r"""
        设置文本
        :type text: anycore::StringW
        :param text: UTF-16格式的文本
        """
        return _PyAnyCAD.TextElement_SetTextW(self, text)

    def RequestUpdate(self, *args):
        return _PyAnyCAD.TextElement_RequestUpdate(self, *args)

    def GetTextHeight(self, pDbView):
        return _PyAnyCAD.TextElement_GetTextHeight(self, pDbView)

    def GetTextWidth(self, pDbView, height):
        return _PyAnyCAD.TextElement_GetTextWidth(self, pDbView, height)

# Register TextElement in _PyAnyCAD:
_PyAnyCAD.TextElement_swigregister(TextElement)
class CurveElement(DrawableElement):
    r"""
    Author: DataManage

    曲线对象基类

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.CurveElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.CurveElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CurveElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.CurveElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.CurveElement_swiginit(self, _PyAnyCAD.new_CurveElement())
    __swig_destroy__ = _PyAnyCAD.delete_CurveElement

    def GetShape(self):
        return _PyAnyCAD.CurveElement_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.CurveElement_SetShape(self, val)

# Register CurveElement in _PyAnyCAD:
_PyAnyCAD.CurveElement_swigregister(CurveElement)
class SimpleCurveElement(CurveElement):
    r"""
    Author: DataManage

    SimpleCurveElement：简单的曲线

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.SimpleCurveElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.SimpleCurveElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SimpleCurveElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.SimpleCurveElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.SimpleCurveElement_swiginit(self, _PyAnyCAD.new_SimpleCurveElement())
    __swig_destroy__ = _PyAnyCAD.delete_SimpleCurveElement

    def GetCurveType(self):
        return _PyAnyCAD.SimpleCurveElement_GetCurveType(self)

    def SetCurveType(self, val):
        return _PyAnyCAD.SimpleCurveElement_SetCurveType(self, val)
    PID_StartPoint = _PyAnyCAD.SimpleCurveElement_PID_StartPoint
    PID_EndPoint = _PyAnyCAD.SimpleCurveElement_PID_EndPoint
    PID_MiddlePoint = _PyAnyCAD.SimpleCurveElement_PID_MiddlePoint
    PID_CenterPoint = _PyAnyCAD.SimpleCurveElement_PID_CenterPoint
    PID_VertexStart = _PyAnyCAD.SimpleCurveElement_PID_VertexStart

    def SetCurve(self, curve):
        return _PyAnyCAD.SimpleCurveElement_SetCurve(self, curve)

    def IsClosed(self):
        return _PyAnyCAD.SimpleCurveElement_IsClosed(self)

# Register SimpleCurveElement in _PyAnyCAD:
_PyAnyCAD.SimpleCurveElement_swigregister(SimpleCurveElement)
class PolylineElement(CurveElement):
    r"""
    Author: DataManage

    PolygonElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PolylineElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PolylineElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PolylineElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PolylineElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PolylineElement_swiginit(self, _PyAnyCAD.new_PolylineElement())
    __swig_destroy__ = _PyAnyCAD.delete_PolylineElement

    def GetPoints(self):
        return _PyAnyCAD.PolylineElement_GetPoints(self)

    def SetPoints(self, val):
        return _PyAnyCAD.PolylineElement_SetPoints(self, val)

    def GetClosed(self):
        return _PyAnyCAD.PolylineElement_GetClosed(self)

    def SetClosed(self, val):
        return _PyAnyCAD.PolylineElement_SetClosed(self, val)

    def SetPoint(self, idx, pt):
        return _PyAnyCAD.PolylineElement_SetPoint(self, idx, pt)

# Register PolylineElement in _PyAnyCAD:
_PyAnyCAD.PolylineElement_swigregister(PolylineElement)
class LinkElement(CurveElement):
    r"""
    Author: DataManage

    LinkElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.LinkElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.LinkElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.LinkElement_Cast(obj)

    def __init__(self):
        _PyAnyCAD.LinkElement_swiginit(self, _PyAnyCAD.new_LinkElement())
    __swig_destroy__ = _PyAnyCAD.delete_LinkElement

    def GetPointIds(self):
        return _PyAnyCAD.LinkElement_GetPointIds(self)

    def SetPointIds(self, val):
        return _PyAnyCAD.LinkElement_SetPointIds(self, val)
    PID_UpdateGeometry = _PyAnyCAD.LinkElement_PID_UpdateGeometry

    @staticmethod
    def Create(*args):
        return _PyAnyCAD.LinkElement_Create(*args)

    def GetPoint(self, idx):
        return _PyAnyCAD.LinkElement_GetPoint(self, idx)

    def SetPoint(self, idx, pt):
        return _PyAnyCAD.LinkElement_SetPoint(self, idx, pt)

# Register LinkElement in _PyAnyCAD:
_PyAnyCAD.LinkElement_swigregister(LinkElement)
class AssemblyElement(DrawableElement):
    r"""
    Author: DataManage

    装配体，支持整体移动。

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.AssemblyElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.AssemblyElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AssemblyElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.AssemblyElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.AssemblyElement_swiginit(self, _PyAnyCAD.new_AssemblyElement())
    __swig_destroy__ = _PyAnyCAD.delete_AssemblyElement

    def GetChildren(self):
        return _PyAnyCAD.AssemblyElement_GetChildren(self)

    def SetChildren(self, val):
        return _PyAnyCAD.AssemblyElement_SetChildren(self, val)

    def AddChild(self, id):
        r"""
        添加子对象
        :type id: :py:class:`ObjectId`
        :param id: ID
        """
        return _PyAnyCAD.AssemblyElement_AddChild(self, id)

    def RemoveChild(self, id):
        r"""
        移除子对象
        :type id: :py:class:`ObjectId`
        :param id:
        """
        return _PyAnyCAD.AssemblyElement_RemoveChild(self, id)

# Register AssemblyElement in _PyAnyCAD:
_PyAnyCAD.AssemblyElement_swigregister(AssemblyElement)
class PartElement(DrawableElement):
    r"""
    Author: DataManage

    从文件中加载，作为PartElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PartElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PartElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PartElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PartElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PartElement_swiginit(self, _PyAnyCAD.new_PartElement())
    __swig_destroy__ = _PyAnyCAD.delete_PartElement

    def GetDocumentId(self):
        return _PyAnyCAD.PartElement_GetDocumentId(self)

    def SetDocumentId(self, val):
        return _PyAnyCAD.PartElement_SetDocumentId(self, val)

    def GetDocument(self):
        return _PyAnyCAD.PartElement_GetDocument(self)

    def SetDocument(self, source):
        r"""
        设置子文档对象
        :type source: :py:class:`Document`
        :param source:
        """
        return _PyAnyCAD.PartElement_SetDocument(self, source)

    def GetSubDoc(self):
        r"""
        获取子文档指针
        :rtype: :py:class:`Document`
        :return: 文档指针
        """
        return _PyAnyCAD.PartElement_GetSubDoc(self)

# Register PartElement in _PyAnyCAD:
_PyAnyCAD.PartElement_swigregister(PartElement)
class InstanceElement(DrawableElement):
    r"""
    Author: DataManage

    实例化图元
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.InstanceElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.InstanceElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.InstanceElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.InstanceElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.InstanceElement_swiginit(self, _PyAnyCAD.new_InstanceElement())
    __swig_destroy__ = _PyAnyCAD.delete_InstanceElement

    def GetPrototypeId(self):
        return _PyAnyCAD.InstanceElement_GetPrototypeId(self)

    def SetPrototypeId(self, val):
        return _PyAnyCAD.InstanceElement_SetPrototypeId(self, val)

# Register InstanceElement in _PyAnyCAD:
_PyAnyCAD.InstanceElement_swigregister(InstanceElement)
class CoordinateSystemElement(DrawableElement):
    r"""
    Author: DataManage

    基于已有的对象，创建自定义坐标系
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.CoordinateSystemElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.CoordinateSystemElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CoordinateSystemElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.CoordinateSystemElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.CoordinateSystemElement_swiginit(self, _PyAnyCAD.new_CoordinateSystemElement())
    __swig_destroy__ = _PyAnyCAD.delete_CoordinateSystemElement

    def GetHostId(self):
        return _PyAnyCAD.CoordinateSystemElement_GetHostId(self)

    def SetHostId(self, val):
        return _PyAnyCAD.CoordinateSystemElement_SetHostId(self, val)

    def GetCoodinate(self):
        return _PyAnyCAD.CoordinateSystemElement_GetCoodinate(self)

    def SetCoodinate(self, val):
        return _PyAnyCAD.CoordinateSystemElement_SetCoodinate(self, val)

    def GetLength(self):
        return _PyAnyCAD.CoordinateSystemElement_GetLength(self)

    def SetLength(self, val):
        return _PyAnyCAD.CoordinateSystemElement_SetLength(self, val)

    def GetParentTransform(self):
        r"""
        获取父节点矩阵
        :rtype: :py:class:`gp_Trsf`
        :return: 矩阵
        """
        return _PyAnyCAD.CoordinateSystemElement_GetParentTransform(self)

    def ComputeWorldAx(self):
        r"""
        计算世界坐标系
        :rtype: :py:class:`gp_Ax3`
        :return: 
        """
        return _PyAnyCAD.CoordinateSystemElement_ComputeWorldAx(self)

    def TransformHost(self, trf):
        r"""
        更新父对象的矩阵
        :type trf: :py:class:`gp_Trsf`
        :param trf:
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.CoordinateSystemElement_TransformHost(self, trf)

# Register CoordinateSystemElement in _PyAnyCAD:
_PyAnyCAD.CoordinateSystemElement_swigregister(CoordinateSystemElement)
class ConstraintElement(Element):
    r"""
    Author: DataManage

    ConstraintElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ConstraintElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ConstraintElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ConstraintElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.ConstraintElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.ConstraintElement_swiginit(self, _PyAnyCAD.new_ConstraintElement())
    __swig_destroy__ = _PyAnyCAD.delete_ConstraintElement

# Register ConstraintElement in _PyAnyCAD:
_PyAnyCAD.ConstraintElement_swigregister(ConstraintElement)
class CoordinateConstraint(ConstraintElement):
    r"""
    Author: DataManage

    CoodinateConstraint

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.CoordinateConstraint_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.CoordinateConstraint_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CoordinateConstraint_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.CoordinateConstraint_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.CoordinateConstraint_swiginit(self, _PyAnyCAD.new_CoordinateConstraint())
    __swig_destroy__ = _PyAnyCAD.delete_CoordinateConstraint

    def GetTarget1(self):
        return _PyAnyCAD.CoordinateConstraint_GetTarget1(self)

    def SetTarget1(self, val):
        return _PyAnyCAD.CoordinateConstraint_SetTarget1(self, val)

    def GetTarget2(self):
        return _PyAnyCAD.CoordinateConstraint_GetTarget2(self)

    def SetTarget2(self, val):
        return _PyAnyCAD.CoordinateConstraint_SetTarget2(self, val)

    def Connect(self, target1, target2):
        return _PyAnyCAD.CoordinateConstraint_Connect(self, target1, target2)

    def UpdateTarget1(self):
        return _PyAnyCAD.CoordinateConstraint_UpdateTarget1(self)

    def UpdateTarget2(self):
        return _PyAnyCAD.CoordinateConstraint_UpdateTarget2(self)

# Register CoordinateConstraint in _PyAnyCAD:
_PyAnyCAD.CoordinateConstraint_swigregister(CoordinateConstraint)
EnumMirrorType_Zero = _PyAnyCAD.EnumMirrorType_Zero
EnumMirrorType_X = _PyAnyCAD.EnumMirrorType_X
EnumMirrorType_Y = _PyAnyCAD.EnumMirrorType_Y
EnumMirrorType_Z = _PyAnyCAD.EnumMirrorType_Z
EnumMirrorType_XY = _PyAnyCAD.EnumMirrorType_XY
EnumMirrorType_YZ = _PyAnyCAD.EnumMirrorType_YZ
EnumMirrorType_XZ = _PyAnyCAD.EnumMirrorType_XZ
EnumMirrorType_XYZ = _PyAnyCAD.EnumMirrorType_XYZ
class MirrorConstraint(ConstraintElement):
    r"""
    Author: DataManage

    MirrorConstraint 用于PointElement的约束

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.MirrorConstraint_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.MirrorConstraint_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MirrorConstraint_Cast(obj)

    def __init__(self):
        _PyAnyCAD.MirrorConstraint_swiginit(self, _PyAnyCAD.new_MirrorConstraint())
    __swig_destroy__ = _PyAnyCAD.delete_MirrorConstraint

    def GetSourceId(self):
        return _PyAnyCAD.MirrorConstraint_GetSourceId(self)

    def SetSourceId(self, val):
        return _PyAnyCAD.MirrorConstraint_SetSourceId(self, val)

    def GetTargetId(self):
        return _PyAnyCAD.MirrorConstraint_GetTargetId(self)

    def SetTargetId(self, val):
        return _PyAnyCAD.MirrorConstraint_SetTargetId(self, val)

    def GetMirrorType(self):
        return _PyAnyCAD.MirrorConstraint_GetMirrorType(self)

    def SetMirrorType(self, val):
        return _PyAnyCAD.MirrorConstraint_SetMirrorType(self, val)

    def GetSourceFixed(self):
        return _PyAnyCAD.MirrorConstraint_GetSourceFixed(self)

    def SetSourceFixed(self, val):
        return _PyAnyCAD.MirrorConstraint_SetSourceFixed(self, val)

    @staticmethod
    def Create(*args):
        return _PyAnyCAD.MirrorConstraint_Create(*args)

    def HasMirrorX(self):
        return _PyAnyCAD.MirrorConstraint_HasMirrorX(self)

    def HasMirrorY(self):
        return _PyAnyCAD.MirrorConstraint_HasMirrorY(self)

    def HasMirrorZ(self):
        return _PyAnyCAD.MirrorConstraint_HasMirrorZ(self)

# Register MirrorConstraint in _PyAnyCAD:
_PyAnyCAD.MirrorConstraint_swigregister(MirrorConstraint)
class ReferenceElement(Element):
    r"""
    Author: DataManage

    引用拓扑对象的子元素：点、边、面
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ReferenceElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ReferenceElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ReferenceElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.ReferenceElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.ReferenceElement_swiginit(self, _PyAnyCAD.new_ReferenceElement())
    __swig_destroy__ = _PyAnyCAD.delete_ReferenceElement

# Register ReferenceElement in _PyAnyCAD:
_PyAnyCAD.ReferenceElement_swigregister(ReferenceElement)
class ReferenceShape(ReferenceElement):
    r"""
    Author: DataManage

    引用拓扑对象的子元素：点、边、面
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ReferenceShape_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ReferenceShape_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ReferenceShape_Cast(obj)

    def __init__(self):
        _PyAnyCAD.ReferenceShape_swiginit(self, _PyAnyCAD.new_ReferenceShape())
    __swig_destroy__ = _PyAnyCAD.delete_ReferenceShape

    def GetShapeId(self):
        return _PyAnyCAD.ReferenceShape_GetShapeId(self)

    def SetShapeId(self, val):
        return _PyAnyCAD.ReferenceShape_SetShapeId(self, val)

    def GetShapeType(self):
        return _PyAnyCAD.ReferenceShape_GetShapeType(self)

    def SetShapeType(self, val):
        return _PyAnyCAD.ReferenceShape_SetShapeType(self, val)

    def GetShapeIndex(self):
        return _PyAnyCAD.ReferenceShape_GetShapeIndex(self)

    def SetShapeIndex(self, val):
        return _PyAnyCAD.ReferenceShape_SetShapeIndex(self, val)

    @staticmethod
    def Create(*args):
        r"""
        *Overload 1:*

        若已经创建了对应Shape的参考对象，则重用已有的。否则重新创建。
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :type id: :py:class:`PickedId`
        :param id: 被引用的主对象
        :type type: int
        :param type: 拓扑类型
        :type idx: int
        :param idx: 索引
        :rtype: :py:class:`ReferenceShape`
        :return: 对象

        |

        *Overload 2:*

        根据选择对象创建
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :type item: :py:class:`PickedItem`
        :param item: 选择项
        :rtype: :py:class:`ReferenceShape`
        :return: 引用对象
        """
        return _PyAnyCAD.ReferenceShape_Create(*args)

    def GetShape(self):
        r"""引用的子Shape"""
        return _PyAnyCAD.ReferenceShape_GetShape(self)

    def GetHostShape(self):
        r"""
        主模型
        :rtype: :py:class:`TopoShape`
        :return: Shape
        """
        return _PyAnyCAD.ReferenceShape_GetHostShape(self)

# Register ReferenceShape in _PyAnyCAD:
_PyAnyCAD.ReferenceShape_swigregister(ReferenceShape)
class ReferencePoint(ReferenceShape):
    r"""
    Author: DataManage

    引用边、面上的点

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.ReferencePoint_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.ReferencePoint_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.ReferencePoint_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.ReferencePoint_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.ReferencePoint_swiginit(self, _PyAnyCAD.new_ReferencePoint())
    __swig_destroy__ = _PyAnyCAD.delete_ReferencePoint

    def GetParamU(self):
        return _PyAnyCAD.ReferencePoint_GetParamU(self)

    def SetParamU(self, val):
        return _PyAnyCAD.ReferencePoint_SetParamU(self, val)

    def GetParamV(self):
        return _PyAnyCAD.ReferencePoint_GetParamV(self)

    def SetParamV(self, val):
        return _PyAnyCAD.ReferencePoint_SetParamV(self, val)

    def GetPoint(self):
        return _PyAnyCAD.ReferencePoint_GetPoint(self)

    def SetPoint(self, val):
        return _PyAnyCAD.ReferencePoint_SetPoint(self, val)

    def GetNormal(self):
        return _PyAnyCAD.ReferencePoint_GetNormal(self)

    def SetNormal(self, val):
        return _PyAnyCAD.ReferencePoint_SetNormal(self, val)
    PID_UpdatePoint = _PyAnyCAD.ReferencePoint_PID_UpdatePoint

# Register ReferencePoint in _PyAnyCAD:
_PyAnyCAD.ReferencePoint_swigregister(ReferencePoint)
class EntityAction(object):
    r"""
    Author: DataManage

    定义EntityElement的行为
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == EntityAction:
            _self = None
        else:
            _self = self
        _PyAnyCAD.EntityAction_swiginit(self, _PyAnyCAD.new_EntityAction(_self, ))
    __swig_destroy__ = _PyAnyCAD.delete_EntityAction

    def GetName(self):
        return _PyAnyCAD.EntityAction_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.EntityAction_SetName(self, val)

    def OnExecute(self, doc, pEntity, pParams):
        r"""
        执行命令
        :type doc: :py:class:`Document`
        :param doc: 文档
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: 实体对象
        :type pParams: :py:class:`ParameterDict`
        :param pParams: 自定义参数
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.EntityAction_OnExecute(self, doc, pEntity, pParams)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_EntityAction(self)
        return weakref.proxy(self)

# Register EntityAction in _PyAnyCAD:
_PyAnyCAD.EntityAction_swigregister(EntityAction)
class EntityActionManager(object):
    r"""
    Author: DataManage

    EntityAction管理器

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.EntityActionManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_EntityActionManager

    def InternalAdd(self, action):
        r"""
        内部方法，禁止调用。
        :type action: :py:class:`EntityAction`
        :param action: 对象
        :rtype: boolean
        :return: 是否成功
        See also: EntityActionManager.Register
        """
        return _PyAnyCAD.EntityActionManager_InternalAdd(self, action)

    def Remove(self, name):
        r"""
        删除
        :type name: string
        :param name: 名称
        """
        return _PyAnyCAD.EntityActionManager_Remove(self, name)

    def Find(self, name):
        r"""
        查找
        :type name: string
        :param name: 名称
        :rtype: :py:class:`EntityAction`
        :return: 对象
        """
        return _PyAnyCAD.EntityActionManager_Find(self, name)

# Register EntityActionManager in _PyAnyCAD:
_PyAnyCAD.EntityActionManager_swigregister(EntityActionManager)
class ElementSchema(object):
    r"""
    Author: DataManage

    Element扩展模板
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == ElementSchema:
            _self = None
        else:
            _self = self
        _PyAnyCAD.ElementSchema_swiginit(self, _PyAnyCAD.new_ElementSchema(_self, *args))
    __swig_destroy__ = _PyAnyCAD.delete_ElementSchema

    def GetName(self):
        return _PyAnyCAD.ElementSchema_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.ElementSchema_SetName(self, val)

    def GetTitle(self):
        return _PyAnyCAD.ElementSchema_GetTitle(self)

    def SetTitle(self, val):
        return _PyAnyCAD.ElementSchema_SetTitle(self, val)

    def GetIcon(self):
        return _PyAnyCAD.ElementSchema_GetIcon(self)

    def SetIcon(self, val):
        return _PyAnyCAD.ElementSchema_SetIcon(self, val)

    def GetCategory(self):
        return _PyAnyCAD.ElementSchema_GetCategory(self)

    def SetCategory(self, val):
        return _PyAnyCAD.ElementSchema_SetCategory(self, val)

    def GetComponentClass(self):
        return _PyAnyCAD.ElementSchema_GetComponentClass(self)

    def SetComponentClass(self, val):
        return _PyAnyCAD.ElementSchema_SetComponentClass(self, val)

    def GetModifier(self):
        return _PyAnyCAD.ElementSchema_GetModifier(self)

    def SetModifier(self, val):
        return _PyAnyCAD.ElementSchema_SetModifier(self, val)

    def GetSector(self):
        return _PyAnyCAD.ElementSchema_GetSector(self)

    def SetSector(self, val):
        return _PyAnyCAD.ElementSchema_SetSector(self, val)

    def AddPropertyItem(self, itemName):
        r"""
        添加属性标识。标识由应用层自己定义。
        :type itemName: string
        :param itemName: 标识名称
        """
        return _PyAnyCAD.ElementSchema_AddPropertyItem(self, itemName)

    def HasPropertyItem(self, itemName):
        r"""
        是否存在某个属性的标识。
        :type itemName: string
        :param itemName: 标识名称
        :rtype: boolean
        :return: true存在
        """
        return _PyAnyCAD.ElementSchema_HasPropertyItem(self, itemName)

    def GetParameterDict(self):
        r"""获取参数列表"""
        return _PyAnyCAD.ElementSchema_GetParameterDict(self)

    def RemoveParameter(self, name):
        r"""
        移除参数
        :type name: string
        :param name: 参数名
        """
        return _PyAnyCAD.ElementSchema_RemoveParameter(self, name)

    def FindParameter(self, name):
        r"""
        查找参数
        :type name: string
        :param name: 参数名
        :rtype: :py:class:`ParameterValue`
        :return: 参数值
        """
        return _PyAnyCAD.ElementSchema_FindParameter(self, name)

    def CreateParameterIterator(self):
        r"""
        创建参数迭代器
        :rtype: :py:class:`ParameterIterator`
        :return: 参数遍历器
        """
        return _PyAnyCAD.ElementSchema_CreateParameterIterator(self)

    def AddAction(self, name, action):
        r"""
        定义实体的行为
        :type name: string
        :param name: 名字
        :type action: :py:class:`EntityAction`
        :param action: 行为对象
        """
        return _PyAnyCAD.ElementSchema_AddAction(self, name, action)

    def RemoveAction(self, name):
        r"""
        移除行为
        :type name: string
        :param name: 名字
        """
        return _PyAnyCAD.ElementSchema_RemoveAction(self, name)

    def GetActionNames(self):
        r"""
        获取关联的EntityAction名称列表
        :rtype: :py:class:`StringList`
        :return: 名称列表
        """
        return _PyAnyCAD.ElementSchema_GetActionNames(self)

    def OnChangingEntity(self, document, pEntity):
        r"""
        Entity正在被修改
        :type document: :py:class:`Document`
        :param document: 文档
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: FunctionElement对象
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ElementSchema_OnChangingEntity(self, document, pEntity)

    def OnParameterChanged(self, *args):
        r"""
        *Overload 1:*

        当对象的参数发生更改的时候调用。一般用于重新生成几何。
        :type document: :py:class:`Document`
        :param document: 文档
        :param instance: 对象
        :type properties: :py:class:`SchemaComponent`
        :param properties: 几何参数表
        :rtype: boolean
        :return: 是否成功

        |

        *Overload 2:*

        当对象的参数发生更改的时候调用。一般用于更新关联的属性。
        :type document: :py:class:`Document`
        :param document: 文档
        :type properties: :py:class:`PropertiesComponent`
        :param properties: 属性
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.ElementSchema_OnParameterChanged(self, *args)

    def CreateInstance(self, name, pOwner):
        r"""
        创建实体实例，并做初始化。
        :type name: string
        :param name: 名称
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档
        :rtype: :py:class:`Element`
        :return: 对象ID
        """
        return _PyAnyCAD.ElementSchema_CreateInstance(self, name, pOwner)

    def CreateNodeComponent(self, name, pOwner):
        r"""
        创建Node组件。
        :type name: string
        :param name: 名称
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档
        :rtype: :py:class:`NodeComponent`
        :return: 对象ID
        """
        return _PyAnyCAD.ElementSchema_CreateNodeComponent(self, name, pOwner)

    def AddComponent(self, entityId, pOwner):
        r"""
        增加组件: SchemaComponent, PropertiesComponent
        :type entityId: :py:class:`ObjectId`
        :param entityId: 实体ID
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档
        :rtype: :py:class:`GeneralComponent`
        :return: 组件
        """
        return _PyAnyCAD.ElementSchema_AddComponent(self, entityId, pOwner)

    def CreateComponent(self, name, pOwner):
        r"""
        创建组件和实例
        :type name: string
        :param name: 实例的名字
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档
        :rtype: :py:class:`GeneralComponent`
        :return: 组件
        """
        return _PyAnyCAD.ElementSchema_CreateComponent(self, name, pOwner)

    def OnCreateInstance(self, pOwner):
        r"""
        创建实例。默认根据OnGetInstanceClassName返回的类名称来创建。
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档。
        :rtype: :py:class:`ObjectId`
        :return: 对象的ID
        """
        return _PyAnyCAD.ElementSchema_OnCreateInstance(self, pOwner)

    def OnGetInstanceClassName(self):
        r"""
        返回自定义对象的类名。必须是从Element继承的类的名称
        :rtype: string
        :return: 类名称
        """
        return _PyAnyCAD.ElementSchema_OnGetInstanceClassName(self)

    def OnInitializeElement(self, pOwner, pElement):
        r"""
        在Element加载初始化的时候调用
        :type pOwner: :py:class:`Document`
        :param pOwner: 文档
        :type pElement: :py:class:`Element`
        :param pElement: 对象
        """
        return _PyAnyCAD.ElementSchema_OnInitializeElement(self, pOwner, pElement)

    def OnExecuteAction(self, doc, pEntity, action, pParams):
        r"""
        执行自定义命令
        :type doc: :py:class:`Document`
        :param doc: 文档
        :type pEntity: :py:class:`EntityElement`
        :param pEntity: Entity对象
        :type action: string
        :param action: 命令
        :type pParams: :py:class:`ParameterDict`
        :param pParams: 参数
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.ElementSchema_OnExecuteAction(self, doc, pEntity, action, pParams)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_ElementSchema(self)
        return weakref.proxy(self)

# Register ElementSchema in _PyAnyCAD:
_PyAnyCAD.ElementSchema_swigregister(ElementSchema)
class ElementSchemaIterator(object):
    r"""
    Author: DataManage

    ElementSchemaIterator

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyAnyCAD.delete_ElementSchemaIterator

    def More(self):
        return _PyAnyCAD.ElementSchemaIterator_More(self)

    def Next(self):
        return _PyAnyCAD.ElementSchemaIterator_Next(self)

    def Current(self):
        return _PyAnyCAD.ElementSchemaIterator_Current(self)

# Register ElementSchemaIterator in _PyAnyCAD:
_PyAnyCAD.ElementSchemaIterator_swigregister(ElementSchemaIterator)
class ElementSchemaManager(object):
    r"""
    Author: DataManage

    ElementSchema管理器
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.ElementSchemaManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_ElementSchemaManager

    def CreateIterator(self):
        r"""
        创建遍历器
        :rtype: :py:class:`ElementSchemaIterator`
        :return: 对象
        """
        return _PyAnyCAD.ElementSchemaManager_CreateIterator(self)

    def RemoveSchema(self, name):
        r"""
        移除
        :type name: string
        :param name: 名称
        """
        return _PyAnyCAD.ElementSchemaManager_RemoveSchema(self, name)

    def FindSchema(self, name):
        r"""
        查找
        :type name: string
        :param name: 名称
        :rtype: :py:class:`ElementSchema`
        :return: 对象
        """
        return _PyAnyCAD.ElementSchemaManager_FindSchema(self, name)

    def InternalAdd(self, schema):
        r"""
        内部方法，禁止调用。
        :type schema: :py:class:`ElementSchema`
        :param schema: Schema对象
        :rtype: boolean
        :return: 是否成功，若已经存在则返回
        See also: ElementSchemaManager.Register
        """
        return _PyAnyCAD.ElementSchemaManager_InternalAdd(self, schema)

# Register ElementSchemaManager in _PyAnyCAD:
_PyAnyCAD.ElementSchemaManager_swigregister(ElementSchemaManager)
class DrawableModifier(object):
    r"""
    Author: DataManage

    基于夹点的对象修改器
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DrawableModifier:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DrawableModifier_swiginit(self, _PyAnyCAD.new_DrawableModifier(_self, *args))
    __swig_destroy__ = _PyAnyCAD.delete_DrawableModifier

    def GetName(self):
        return _PyAnyCAD.DrawableModifier_GetName(self)

    def SetName(self, val):
        return _PyAnyCAD.DrawableModifier_SetName(self, val)

    def CollectGrips(self, pElement, collector):
        return _PyAnyCAD.DrawableModifier_CollectGrips(self, pElement, collector)

    def ChangeByGrip(self, pElement, grip):
        return _PyAnyCAD.DrawableModifier_ChangeByGrip(self, pElement, grip)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DrawableModifier(self)
        return weakref.proxy(self)

# Register DrawableModifier in _PyAnyCAD:
_PyAnyCAD.DrawableModifier_swigregister(DrawableModifier)
class DrawableModifierManager(object):
    r"""
    Author: DataManage

    DrawableModifier管理器

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DrawableModifierManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_DrawableModifierManager

    def InternalAdd(self, modifier):
        r"""
        内部方法，禁止调用。
        :type modifier: :py:class:`DrawableModifier`
        :param modifier: 对象
        :rtype: boolean
        :return: 是否成功
        See also: DrawableModifierManager.Register
        """
        return _PyAnyCAD.DrawableModifierManager_InternalAdd(self, modifier)

    def Remove(self, name):
        r"""
        删除
        :type name: string
        :param name: 名称
        """
        return _PyAnyCAD.DrawableModifierManager_Remove(self, name)

    def Find(self, name):
        r"""
        查找
        :type name: string
        :param name: 名称
        :rtype: :py:class:`DrawableModifier`
        :return: 对象
        """
        return _PyAnyCAD.DrawableModifierManager_Find(self, name)

    def FindBySchemaName(self, schemaName):
        r"""
        根据Schema名称来查找
        :type schemaName: string
        :param schemaName: 名称
        :rtype: :py:class:`DrawableModifier`
        :return: 对象
        """
        return _PyAnyCAD.DrawableModifierManager_FindBySchemaName(self, schemaName)

# Register DrawableModifierManager in _PyAnyCAD:
_PyAnyCAD.DrawableModifierManager_swigregister(DrawableModifierManager)
class DocumentTemplate(object):
    r"""
    Author: DataManage

    文档模板，用来定义文档的初始内容
    FileFilter: "AnyCAD Files (.acad)"
    FileExts: "*.acad"
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, docType):
        if self.__class__ == DocumentTemplate:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DocumentTemplate_swiginit(self, _PyAnyCAD.new_DocumentTemplate(_self, docType))
    __swig_destroy__ = _PyAnyCAD.delete_DocumentTemplate

    def GetTitle(self):
        return _PyAnyCAD.DocumentTemplate_GetTitle(self)

    def SetTitle(self, val):
        return _PyAnyCAD.DocumentTemplate_SetTitle(self, val)

    def GetDescription(self):
        return _PyAnyCAD.DocumentTemplate_GetDescription(self)

    def SetDescription(self, val):
        return _PyAnyCAD.DocumentTemplate_SetDescription(self, val)

    def GetDocType(self):
        return _PyAnyCAD.DocumentTemplate_GetDocType(self)

    def GetFileFilter(self):
        return _PyAnyCAD.DocumentTemplate_GetFileFilter(self)

    def SetFileFilter(self, val):
        return _PyAnyCAD.DocumentTemplate_SetFileFilter(self, val)

    def GetFileExts(self):
        return _PyAnyCAD.DocumentTemplate_GetFileExts(self)

    def SetFileExts(self, val):
        return _PyAnyCAD.DocumentTemplate_SetFileExts(self, val)

    def GetVersion(self):
        return _PyAnyCAD.DocumentTemplate_GetVersion(self)

    def SetVersion(self, val):
        return _PyAnyCAD.DocumentTemplate_SetVersion(self, val)

    def Initialize(self, pDocument, viewName):
        r"""
        初始化文档。在文档创建的时候调用。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档对象
        :type viewName: string
        :param viewName: 默认视图名称
        """
        return _PyAnyCAD.DocumentTemplate_Initialize(self, pDocument, viewName)

    def InitilizeElement(self, pDocument, pElement):
        r"""
        初始化对象。在对象加入文档的时候调用。
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type pElement: :py:class:`Element`
        :param pElement: 对象
        Deprecated: 该方法将在后续版本中移除，请使用OnElementCreated
        """
        return _PyAnyCAD.DocumentTemplate_InitilizeElement(self, pDocument, pElement)

    def OnElementCreated(self, pDocument, pElement):
        r"""
        确定创建对象调用，统一处理
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        :type pElement: :py:class:`Element`
        :param pElement: 对象
        """
        return _PyAnyCAD.DocumentTemplate_OnElementCreated(self, pDocument, pElement)

    def OnDocumentUpgrading(self, pDocument):
        r"""
        文档版本更新
        :type pDocument: :py:class:`Document`
        :param pDocument: 文档
        """
        return _PyAnyCAD.DocumentTemplate_OnDocumentUpgrading(self, pDocument)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DocumentTemplate(self)
        return weakref.proxy(self)

# Register DocumentTemplate in _PyAnyCAD:
_PyAnyCAD.DocumentTemplate_swigregister(DocumentTemplate)
class DrawingDocumentTemplate(DocumentTemplate):
    r"""二维图纸文档模板"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == DrawingDocumentTemplate:
            _self = None
        else:
            _self = self
        _PyAnyCAD.DrawingDocumentTemplate_swiginit(self, _PyAnyCAD.new_DrawingDocumentTemplate(_self, ))

    def Initialize(self, pDocument, viewName):
        return _PyAnyCAD.DrawingDocumentTemplate_Initialize(self, pDocument, viewName)

    def InitilizeElement(self, pDocument, pElement):
        return _PyAnyCAD.DrawingDocumentTemplate_InitilizeElement(self, pDocument, pElement)
    __swig_destroy__ = _PyAnyCAD.delete_DrawingDocumentTemplate
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_DrawingDocumentTemplate(self)
        return weakref.proxy(self)

# Register DrawingDocumentTemplate in _PyAnyCAD:
_PyAnyCAD.DrawingDocumentTemplate_swigregister(DrawingDocumentTemplate)
class DocumentManager(object):
    r"""
    Author: DataManage

    DocumentManager 管理文档模板

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DocumentManager_Instance()
    __swig_destroy__ = _PyAnyCAD.delete_DocumentManager

    def GetTextEncoding(self):
        return _PyAnyCAD.DocumentManager_GetTextEncoding(self)

    def SetTextEncoding(self, val):
        return _PyAnyCAD.DocumentManager_SetTextEncoding(self, val)

    def GetDocType(self):
        return _PyAnyCAD.DocumentManager_GetDocType(self)

    def SetDocType(self, val):
        return _PyAnyCAD.DocumentManager_SetDocType(self, val)

    def GetActiveDocument(self):
        return _PyAnyCAD.DocumentManager_GetActiveDocument(self)

    def CreateDocument(self, *args):
        return _PyAnyCAD.DocumentManager_CreateDocument(self, *args)

    def SetActiveDocument(self, doc):
        r"""
        设置当前活动的文档
        :type doc: :py:class:`Document`
        :param doc: 文档对象
        """
        return _PyAnyCAD.DocumentManager_SetActiveDocument(self, doc)

    def InternalAdd(self, pTemplate):
        r"""
        内部方法，禁止调用
        :type pTemplate: :py:class:`DocumentTemplate`
        :param pTemplate: 模板
        :rtype: boolean
        :return: 是否成功
        See also: DocumentManager.Register
        """
        return _PyAnyCAD.DocumentManager_InternalAdd(self, pTemplate)

    def FindTemplate(self, docType):
        r"""
        查找文档模板
        :type docType: string
        :param docType: 名字
        :rtype: :py:class:`DocumentTemplate`
        :return: 文档模板对象
        """
        return _PyAnyCAD.DocumentManager_FindTemplate(self, docType)

    def GetTemplateNames(self):
        r"""
        获取已有的文档模板列表
        :rtype: :py:class:`StringList`
        :return: 模板名称列表
        """
        return _PyAnyCAD.DocumentManager_GetTemplateNames(self)

# Register DocumentManager in _PyAnyCAD:
_PyAnyCAD.DocumentManager_swigregister(DocumentManager)
EnumSolveResult_OKAY = _PyAnyCAD.EnumSolveResult_OKAY
EnumSolveResult_DIDNT_CONVERGE = _PyAnyCAD.EnumSolveResult_DIDNT_CONVERGE
EnumSolveResult_REDUNDANT_OKAY = _PyAnyCAD.EnumSolveResult_REDUNDANT_OKAY
EnumSolveResult_REDUNDANT_DIDNT_CONVERGE = _PyAnyCAD.EnumSolveResult_REDUNDANT_DIDNT_CONVERGE
EnumSolveResult_TOO_MANY_UNKNOWNS = _PyAnyCAD.EnumSolveResult_TOO_MANY_UNKNOWNS
EnumEntityType_POINT_IN_3D = _PyAnyCAD.EnumEntityType_POINT_IN_3D
EnumEntityType_POINT_IN_2D = _PyAnyCAD.EnumEntityType_POINT_IN_2D
EnumEntityType_POINT_N_TRANS = _PyAnyCAD.EnumEntityType_POINT_N_TRANS
EnumEntityType_POINT_N_ROT_TRANS = _PyAnyCAD.EnumEntityType_POINT_N_ROT_TRANS
EnumEntityType_POINT_N_COPY = _PyAnyCAD.EnumEntityType_POINT_N_COPY
EnumEntityType_POINT_N_ROT_AA = _PyAnyCAD.EnumEntityType_POINT_N_ROT_AA
EnumEntityType_POINT_N_ROT_AXIS_TRANS = _PyAnyCAD.EnumEntityType_POINT_N_ROT_AXIS_TRANS
EnumEntityType_NORMAL_IN_3D = _PyAnyCAD.EnumEntityType_NORMAL_IN_3D
EnumEntityType_NORMAL_IN_2D = _PyAnyCAD.EnumEntityType_NORMAL_IN_2D
EnumEntityType_NORMAL_N_COPY = _PyAnyCAD.EnumEntityType_NORMAL_N_COPY
EnumEntityType_NORMAL_N_ROT = _PyAnyCAD.EnumEntityType_NORMAL_N_ROT
EnumEntityType_NORMAL_N_ROT_AA = _PyAnyCAD.EnumEntityType_NORMAL_N_ROT_AA
EnumEntityType_DISTANCE = _PyAnyCAD.EnumEntityType_DISTANCE
EnumEntityType_DISTANCE_N_COPY = _PyAnyCAD.EnumEntityType_DISTANCE_N_COPY
EnumEntityType_FACE_NORMAL_PT = _PyAnyCAD.EnumEntityType_FACE_NORMAL_PT
EnumEntityType_FACE_XPROD = _PyAnyCAD.EnumEntityType_FACE_XPROD
EnumEntityType_FACE_N_ROT_TRANS = _PyAnyCAD.EnumEntityType_FACE_N_ROT_TRANS
EnumEntityType_FACE_N_TRANS = _PyAnyCAD.EnumEntityType_FACE_N_TRANS
EnumEntityType_FACE_N_ROT_AA = _PyAnyCAD.EnumEntityType_FACE_N_ROT_AA
EnumEntityType_FACE_ROT_NORMAL_PT = _PyAnyCAD.EnumEntityType_FACE_ROT_NORMAL_PT
EnumEntityType_FACE_N_ROT_AXIS_TRANS = _PyAnyCAD.EnumEntityType_FACE_N_ROT_AXIS_TRANS
EnumEntityType_WORKPLANE = _PyAnyCAD.EnumEntityType_WORKPLANE
EnumEntityType_LINE_SEGMENT = _PyAnyCAD.EnumEntityType_LINE_SEGMENT
EnumEntityType_CUBIC = _PyAnyCAD.EnumEntityType_CUBIC
EnumEntityType_CUBIC_PERIODIC = _PyAnyCAD.EnumEntityType_CUBIC_PERIODIC
EnumEntityType_CIRCLE = _PyAnyCAD.EnumEntityType_CIRCLE
EnumEntityType_ARC_OF_CIRCLE = _PyAnyCAD.EnumEntityType_ARC_OF_CIRCLE
EnumEntityType_TTF_TEXT = _PyAnyCAD.EnumEntityType_TTF_TEXT
EnumEntityType_IMAGE = _PyAnyCAD.EnumEntityType_IMAGE
EnumConstraintType_POINTS_COINCIDENT = _PyAnyCAD.EnumConstraintType_POINTS_COINCIDENT
EnumConstraintType_PT_PT_DISTANCE = _PyAnyCAD.EnumConstraintType_PT_PT_DISTANCE
EnumConstraintType_PT_PLANE_DISTANCE = _PyAnyCAD.EnumConstraintType_PT_PLANE_DISTANCE
EnumConstraintType_PT_LINE_DISTANCE = _PyAnyCAD.EnumConstraintType_PT_LINE_DISTANCE
EnumConstraintType_PT_FACE_DISTANCE = _PyAnyCAD.EnumConstraintType_PT_FACE_DISTANCE
EnumConstraintType_PROJ_PT_DISTANCE = _PyAnyCAD.EnumConstraintType_PROJ_PT_DISTANCE
EnumConstraintType_PT_IN_PLANE = _PyAnyCAD.EnumConstraintType_PT_IN_PLANE
EnumConstraintType_PT_ON_LINE = _PyAnyCAD.EnumConstraintType_PT_ON_LINE
EnumConstraintType_PT_ON_FACE = _PyAnyCAD.EnumConstraintType_PT_ON_FACE
EnumConstraintType_EQUAL_LENGTH_LINES = _PyAnyCAD.EnumConstraintType_EQUAL_LENGTH_LINES
EnumConstraintType_LENGTH_RATIO = _PyAnyCAD.EnumConstraintType_LENGTH_RATIO
EnumConstraintType_EQ_LEN_PT_LINE_D = _PyAnyCAD.EnumConstraintType_EQ_LEN_PT_LINE_D
EnumConstraintType_EQ_PT_LN_DISTANCES = _PyAnyCAD.EnumConstraintType_EQ_PT_LN_DISTANCES
EnumConstraintType_EQUAL_ANGLE = _PyAnyCAD.EnumConstraintType_EQUAL_ANGLE
EnumConstraintType_EQUAL_LINE_ARC_LEN = _PyAnyCAD.EnumConstraintType_EQUAL_LINE_ARC_LEN
EnumConstraintType_LENGTH_DIFFERENCE = _PyAnyCAD.EnumConstraintType_LENGTH_DIFFERENCE
EnumConstraintType_SYMMETRIC = _PyAnyCAD.EnumConstraintType_SYMMETRIC
EnumConstraintType_SYMMETRIC_HORIZ = _PyAnyCAD.EnumConstraintType_SYMMETRIC_HORIZ
EnumConstraintType_SYMMETRIC_VERT = _PyAnyCAD.EnumConstraintType_SYMMETRIC_VERT
EnumConstraintType_SYMMETRIC_LINE = _PyAnyCAD.EnumConstraintType_SYMMETRIC_LINE
EnumConstraintType_AT_MIDPOINT = _PyAnyCAD.EnumConstraintType_AT_MIDPOINT
EnumConstraintType_HORIZONTAL = _PyAnyCAD.EnumConstraintType_HORIZONTAL
EnumConstraintType_VERTICAL = _PyAnyCAD.EnumConstraintType_VERTICAL
EnumConstraintType_DIAMETER = _PyAnyCAD.EnumConstraintType_DIAMETER
EnumConstraintType_PT_ON_CIRCLE = _PyAnyCAD.EnumConstraintType_PT_ON_CIRCLE
EnumConstraintType_SAME_ORIENTATION = _PyAnyCAD.EnumConstraintType_SAME_ORIENTATION
EnumConstraintType_ANGLE = _PyAnyCAD.EnumConstraintType_ANGLE
EnumConstraintType_PARALLEL = _PyAnyCAD.EnumConstraintType_PARALLEL
EnumConstraintType_PERPENDICULAR = _PyAnyCAD.EnumConstraintType_PERPENDICULAR
EnumConstraintType_ARC_LINE_TANGENT = _PyAnyCAD.EnumConstraintType_ARC_LINE_TANGENT
EnumConstraintType_CUBIC_LINE_TANGENT = _PyAnyCAD.EnumConstraintType_CUBIC_LINE_TANGENT
EnumConstraintType_CURVE_CURVE_TANGENT = _PyAnyCAD.EnumConstraintType_CURVE_CURVE_TANGENT
EnumConstraintType_EQUAL_RADIUS = _PyAnyCAD.EnumConstraintType_EQUAL_RADIUS
EnumConstraintType_WHERE_DRAGGED = _PyAnyCAD.EnumConstraintType_WHERE_DRAGGED
EnumConstraintType_ARC_ARC_LEN_RATIO = _PyAnyCAD.EnumConstraintType_ARC_ARC_LEN_RATIO
EnumConstraintType_ARC_LINE_LEN_RATIO = _PyAnyCAD.EnumConstraintType_ARC_LINE_LEN_RATIO
EnumConstraintType_ARC_ARC_DIFFERENCE = _PyAnyCAD.EnumConstraintType_ARC_ARC_DIFFERENCE
EnumConstraintType_ARC_LINE_DIFFERENCE = _PyAnyCAD.EnumConstraintType_ARC_LINE_DIFFERENCE
EnumConstraintType_COMMENT = _PyAnyCAD.EnumConstraintType_COMMENT
EnumExprOp_PARAM = _PyAnyCAD.EnumExprOp_PARAM
EnumExprOp_PARAM_PTR = _PyAnyCAD.EnumExprOp_PARAM_PTR
EnumExprOp_CONSTANT = _PyAnyCAD.EnumExprOp_CONSTANT
EnumExprOp_VARIABLE = _PyAnyCAD.EnumExprOp_VARIABLE
EnumExprOp_PLUS = _PyAnyCAD.EnumExprOp_PLUS
EnumExprOp_MINUS = _PyAnyCAD.EnumExprOp_MINUS
EnumExprOp_TIMES = _PyAnyCAD.EnumExprOp_TIMES
EnumExprOp_DIV = _PyAnyCAD.EnumExprOp_DIV
EnumExprOp_NEGATE = _PyAnyCAD.EnumExprOp_NEGATE
EnumExprOp_SQRT = _PyAnyCAD.EnumExprOp_SQRT
EnumExprOp_SQUARE = _PyAnyCAD.EnumExprOp_SQUARE
EnumExprOp_SIN = _PyAnyCAD.EnumExprOp_SIN
EnumExprOp_COS = _PyAnyCAD.EnumExprOp_COS
EnumExprOp_ASIN = _PyAnyCAD.EnumExprOp_ASIN
EnumExprOp_ACOS = _PyAnyCAD.EnumExprOp_ACOS
class SketchElement(DrawableElement):
    r"""
    Author: DataManage

    SketchElement

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.SketchElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.SketchElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SketchElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.SketchElement_Create(pDoc)

    def __init__(self, *args):
        _PyAnyCAD.SketchElement_swiginit(self, _PyAnyCAD.new_SketchElement(*args))
    __swig_destroy__ = _PyAnyCAD.delete_SketchElement

    def GetSketchId(self):
        return _PyAnyCAD.SketchElement_GetSketchId(self)

    def SetSketchId(self, val):
        return _PyAnyCAD.SketchElement_SetSketchId(self, val)

# Register SketchElement in _PyAnyCAD:
_PyAnyCAD.SketchElement_swigregister(SketchElement)
class SketchCurve(SketchElement):
    r"""
    Author: DataManage

    SketchCurve

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.SketchCurve_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.SketchCurve_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SketchCurve_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.SketchCurve_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.SketchCurve_swiginit(self, _PyAnyCAD.new_SketchCurve())
    __swig_destroy__ = _PyAnyCAD.delete_SketchCurve

    def GetShape(self):
        return _PyAnyCAD.SketchCurve_GetShape(self)

    def SetShape(self, val):
        return _PyAnyCAD.SketchCurve_SetShape(self, val)

    def Validate(self):
        r"""
        是否有效
        :rtype: boolean
        :return: 
        """
        return _PyAnyCAD.SketchCurve_Validate(self)

    def GetParameter(self, pid):
        return _PyAnyCAD.SketchCurve_GetParameter(self, pid)

    def SetParameter(self, *args):
        r"""
        *Overload 1:*

        设置参数
        :type pid: int
        :param pid: 参数ID
        :type pt: :py:class:`gp_Pnt2d`
        :param pt: 参数的值

        |

        *Overload 2:*

        设置参数
        :type pid: int
        :param pid: 参数ID
        :type param: float
        :param param: 参数的值
        """
        return _PyAnyCAD.SketchCurve_SetParameter(self, *args)

    def Drag(self, pid, offset, to):
        r"""
        拖动
        :type pid: int
        :param pid: 参数ID。 0表示整体移动
        :type offset: :py:class:`gp_Vec2d`
        :param offset: 偏移
        :type to: :py:class:`gp_Pnt2d`
        :param to: 终点
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.SketchCurve_Drag(self, pid, offset, to)

# Register SketchCurve in _PyAnyCAD:
_PyAnyCAD.SketchCurve_swigregister(SketchCurve)
class SketchPlane(CurveElement):
    r"""
    Author: DataManage

    草图平面对象

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.SketchPlane_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.SketchPlane_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.SketchPlane_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.SketchPlane_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.SketchPlane_swiginit(self, _PyAnyCAD.new_SketchPlane())
    __swig_destroy__ = _PyAnyCAD.delete_SketchPlane

    def GetCoordinate(self):
        return _PyAnyCAD.SketchPlane_GetCoordinate(self)

    def SetCoordinate(self, val):
        return _PyAnyCAD.SketchPlane_SetCoordinate(self, val)

    def GetFill(self):
        return _PyAnyCAD.SketchPlane_GetFill(self)

    def SetFill(self, val):
        return _PyAnyCAD.SketchPlane_SetFill(self, val)

    def GetRefPointId(self):
        return _PyAnyCAD.SketchPlane_GetRefPointId(self)

    def SetRefPointId(self, val):
        return _PyAnyCAD.SketchPlane_SetRefPointId(self, val)

    def SetLocation(self, position):
        return _PyAnyCAD.SketchPlane_SetLocation(self, position)

    def GetLocation(self):
        return _PyAnyCAD.SketchPlane_GetLocation(self)

    def SetDirection(self, dir):
        return _PyAnyCAD.SketchPlane_SetDirection(self, dir)

    def GetDirection(self):
        return _PyAnyCAD.SketchPlane_GetDirection(self)

    def SetDirectionX(self, dir):
        return _PyAnyCAD.SketchPlane_SetDirectionX(self, dir)

    def GetDirectionX(self):
        return _PyAnyCAD.SketchPlane_GetDirectionX(self)

    def GetPlane(self):
        return _PyAnyCAD.SketchPlane_GetPlane(self)

    def Open(self):
        return _PyAnyCAD.SketchPlane_Open(self)

    def Close(self):
        return _PyAnyCAD.SketchPlane_Close(self)

    def AddConstraint(self, type, srcId, srcPId, targetId, targetPid, val, removeIfExist=False):
        return _PyAnyCAD.SketchPlane_AddConstraint(self, type, srcId, srcPId, targetId, targetPid, val, removeIfExist)

    def GetShape2d(self):
        return _PyAnyCAD.SketchPlane_GetShape2d(self)

    def ToLocalPoint(self, *args):
        return _PyAnyCAD.SketchPlane_ToLocalPoint(self, *args)

    def WorldPointOnPlane(self, pt):
        return _PyAnyCAD.SketchPlane_WorldPointOnPlane(self, pt)

    def ToWorldPoint(self, pt, z):
        return _PyAnyCAD.SketchPlane_ToWorldPoint(self, pt, z)

# Register SketchPlane in _PyAnyCAD:
_PyAnyCAD.SketchPlane_swigregister(SketchPlane)
class FeatureElement(ShapeElement):
    r"""
    Author: DataManage

    FeatureElement
    特征对象的基类，被遗弃的对象。迁移到FunctionElement
    See also: FunctionElement
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.FeatureElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.FeatureElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.FeatureElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.FeatureElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.FeatureElement_swiginit(self, _PyAnyCAD.new_FeatureElement())
    __swig_destroy__ = _PyAnyCAD.delete_FeatureElement

    def GetInputIds(self):
        return _PyAnyCAD.FeatureElement_GetInputIds(self)

    def SetInputIds(self, val):
        return _PyAnyCAD.FeatureElement_SetInputIds(self, val)

    def GetSecondInputIds(self):
        return _PyAnyCAD.FeatureElement_GetSecondInputIds(self)

    def SetSecondInputIds(self, val):
        return _PyAnyCAD.FeatureElement_SetSecondInputIds(self, val)

    def AddInput(self, inputId):
        r"""
        添加一个输入依赖项
        :type inputId: :py:class:`ObjectId`
        :param inputId:
        """
        return _PyAnyCAD.FeatureElement_AddInput(self, inputId)

    def ClearInputs(self):
        r"""清空输入依赖项"""
        return _PyAnyCAD.FeatureElement_ClearInputs(self)

    def AddSecondInput(self, inputId):
        r"""
        添加一个输入依赖项
        :type inputId: :py:class:`ObjectId`
        :param inputId:
        """
        return _PyAnyCAD.FeatureElement_AddSecondInput(self, inputId)

    def ClearSecondInputs(self):
        r"""
        添加一个输入依赖项
        :param inputId:
        """
        return _PyAnyCAD.FeatureElement_ClearSecondInputs(self)

# Register FeatureElement in _PyAnyCAD:
_PyAnyCAD.FeatureElement_swigregister(FeatureElement)
EnumCraftPathMethod_UniformLength = _PyAnyCAD.EnumCraftPathMethod_UniformLength
EnumCraftPathMethod_UniformLengthByCount = _PyAnyCAD.EnumCraftPathMethod_UniformLengthByCount
EnumCraftPathMethod_UniformAbscissa = _PyAnyCAD.EnumCraftPathMethod_UniformAbscissa
class CraftPathFeature(FeatureElement):
    r"""
    Author: DataManage

    加工路径对象

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.CraftPathFeature_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.CraftPathFeature_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.CraftPathFeature_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.CraftPathFeature_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.CraftPathFeature_swiginit(self, _PyAnyCAD.new_CraftPathFeature())
    __swig_destroy__ = _PyAnyCAD.delete_CraftPathFeature

    def GetStartParameter(self):
        return _PyAnyCAD.CraftPathFeature_GetStartParameter(self)

    def SetStartParameter(self, val):
        return _PyAnyCAD.CraftPathFeature_SetStartParameter(self, val)

    def GetEcoLeadLength(self):
        return _PyAnyCAD.CraftPathFeature_GetEcoLeadLength(self)

    def SetEcoLeadLength(self, val):
        return _PyAnyCAD.CraftPathFeature_SetEcoLeadLength(self, val)

    def GetReverse(self):
        return _PyAnyCAD.CraftPathFeature_GetReverse(self)

    def SetReverse(self, val):
        return _PyAnyCAD.CraftPathFeature_SetReverse(self, val)

    def GetMicroGaps(self):
        return _PyAnyCAD.CraftPathFeature_GetMicroGaps(self)

    def SetMicroGaps(self, val):
        return _PyAnyCAD.CraftPathFeature_SetMicroGaps(self, val)

    def GetSegementLength(self):
        return _PyAnyCAD.CraftPathFeature_GetSegementLength(self)

    def SetSegementLength(self, val):
        return _PyAnyCAD.CraftPathFeature_SetSegementLength(self, val)

    def GetSegementCount(self):
        return _PyAnyCAD.CraftPathFeature_GetSegementCount(self)

    def SetSegementCount(self, val):
        return _PyAnyCAD.CraftPathFeature_SetSegementCount(self, val)

    def GetSplitMethod(self):
        return _PyAnyCAD.CraftPathFeature_GetSplitMethod(self)

    def SetSplitMethod(self, val):
        return _PyAnyCAD.CraftPathFeature_SetSplitMethod(self, val)

    def GetPointSize(self):
        return _PyAnyCAD.CraftPathFeature_GetPointSize(self)

    def SetPointSize(self, val):
        return _PyAnyCAD.CraftPathFeature_SetPointSize(self, val)

    def GetPoints(self):
        return _PyAnyCAD.CraftPathFeature_GetPoints(self)

    def SetPoints(self, val):
        return _PyAnyCAD.CraftPathFeature_SetPoints(self, val)

    def AddMicroGapByLength(self, u0, length):
        return _PyAnyCAD.CraftPathFeature_AddMicroGapByLength(self, u0, length)

    def ClearMicroGaps(self):
        return _PyAnyCAD.CraftPathFeature_ClearMicroGaps(self)

    def Split(self, pCurve, firstP, lastP):
        return _PyAnyCAD.CraftPathFeature_Split(self, pCurve, firstP, lastP)

# Register CraftPathFeature in _PyAnyCAD:
_PyAnyCAD.CraftPathFeature_swigregister(CraftPathFeature)
class PlaneCutFeature(FeatureElement):
    r"""
    Author: DataManage

    PlaneCutFeature

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PlaneCutFeature_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PlaneCutFeature_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PlaneCutFeature_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PlaneCutFeature_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PlaneCutFeature_swiginit(self, _PyAnyCAD.new_PlaneCutFeature())
    __swig_destroy__ = _PyAnyCAD.delete_PlaneCutFeature

    def GetWorldCoordinate(self):
        return _PyAnyCAD.PlaneCutFeature_GetWorldCoordinate(self)

    def SetWorldCoordinate(self, val):
        return _PyAnyCAD.PlaneCutFeature_SetWorldCoordinate(self, val)

    def GetLocalCoordinate(self):
        return _PyAnyCAD.PlaneCutFeature_GetLocalCoordinate(self)

    def SetLocalCoordinate(self, val):
        return _PyAnyCAD.PlaneCutFeature_SetLocalCoordinate(self, val)

    def SetPlaneLocation(self, position):
        return _PyAnyCAD.PlaneCutFeature_SetPlaneLocation(self, position)

    def GetPlaneLocation(self):
        return _PyAnyCAD.PlaneCutFeature_GetPlaneLocation(self)

    def SetPlaneYawPitchRoll(self, value):
        return _PyAnyCAD.PlaneCutFeature_SetPlaneYawPitchRoll(self, value)

    def GetPlaneYawPitchRoll(self):
        return _PyAnyCAD.PlaneCutFeature_GetPlaneYawPitchRoll(self)

# Register PlaneCutFeature in _PyAnyCAD:
_PyAnyCAD.PlaneCutFeature_swigregister(PlaneCutFeature)
class AnnotationModel(PropertiesModel):
    r"""
    Author: DataManage

    标注ORM基类
    - Text：显示的文本
    - FontHeight：文字高度
    - ExtensionBeyond：延伸
    - ExtensionOffset：延伸
    - ArrowLength：箭头长度
    - TextFontType：文字类型
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.AnnotationModel_swiginit(self, _PyAnyCAD.new_AnnotationModel(*args))

    def Initialize(self, pDict):
        return _PyAnyCAD.AnnotationModel_Initialize(self, pDict)

    @staticmethod
    def Text():
        return _PyAnyCAD.AnnotationModel_Text()

    def GetText(self, *args):
        return _PyAnyCAD.AnnotationModel_GetText(self, *args)

    def SetText(self, val):
        return _PyAnyCAD.AnnotationModel_SetText(self, val)

    @staticmethod
    def FontHeight():
        return _PyAnyCAD.AnnotationModel_FontHeight()

    def GetFontHeight(self, *args):
        return _PyAnyCAD.AnnotationModel_GetFontHeight(self, *args)

    def SetFontHeight(self, val):
        return _PyAnyCAD.AnnotationModel_SetFontHeight(self, val)

    @staticmethod
    def ExtensionBeyond():
        return _PyAnyCAD.AnnotationModel_ExtensionBeyond()

    def GetExtensionBeyond(self, *args):
        return _PyAnyCAD.AnnotationModel_GetExtensionBeyond(self, *args)

    def SetExtensionBeyond(self, val):
        return _PyAnyCAD.AnnotationModel_SetExtensionBeyond(self, val)

    @staticmethod
    def ExtensionOffset():
        return _PyAnyCAD.AnnotationModel_ExtensionOffset()

    def GetExtensionOffset(self, *args):
        return _PyAnyCAD.AnnotationModel_GetExtensionOffset(self, *args)

    def SetExtensionOffset(self, val):
        return _PyAnyCAD.AnnotationModel_SetExtensionOffset(self, val)

    @staticmethod
    def ArrowLength():
        return _PyAnyCAD.AnnotationModel_ArrowLength()

    def GetArrowLength(self, *args):
        return _PyAnyCAD.AnnotationModel_GetArrowLength(self, *args)

    def SetArrowLength(self, val):
        return _PyAnyCAD.AnnotationModel_SetArrowLength(self, val)

    @staticmethod
    def TextFontType():
        return _PyAnyCAD.AnnotationModel_TextFontType()

    def GetTextFontType(self, *args):
        return _PyAnyCAD.AnnotationModel_GetTextFontType(self, *args)

    def SetTextFontType(self, val):
        return _PyAnyCAD.AnnotationModel_SetTextFontType(self, val)

    def GetTextW(self):
        return _PyAnyCAD.AnnotationModel_GetTextW(self)

    def SetTextW(self, text):
        return _PyAnyCAD.AnnotationModel_SetTextW(self, text)
    __swig_destroy__ = _PyAnyCAD.delete_AnnotationModel

# Register AnnotationModel in _PyAnyCAD:
_PyAnyCAD.AnnotationModel_swigregister(AnnotationModel)
class LinearAnnotationModel(AnnotationModel):
    r"""
    Author: DataManage

    线性标注ORM基类
    - StartPoint: 起始点位置
    - EndPoint: 终点问题
    - Location：文字位置
    - Value：长度值，不显示
    - Angle：倾斜的角度，以角度[0, 360)表示
    - Coordinate：坐标系
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.LinearAnnotationModel_swiginit(self, _PyAnyCAD.new_LinearAnnotationModel(*args))

    def Initialize(self, pDict):
        return _PyAnyCAD.LinearAnnotationModel_Initialize(self, pDict)

    def Create(self, pDoc):
        r"""
        构造图元对象
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :rtype: :py:class:`ObjectId`
        :return: Entity的Id
        """
        return _PyAnyCAD.LinearAnnotationModel_Create(self, pDoc)

    @staticmethod
    def StartPoint():
        return _PyAnyCAD.LinearAnnotationModel_StartPoint()

    def GetStartPoint(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetStartPoint(self, *args)

    def SetStartPoint(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetStartPoint(self, val)

    @staticmethod
    def EndPoint():
        return _PyAnyCAD.LinearAnnotationModel_EndPoint()

    def GetEndPoint(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetEndPoint(self, *args)

    def SetEndPoint(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetEndPoint(self, val)

    @staticmethod
    def Location():
        return _PyAnyCAD.LinearAnnotationModel_Location()

    def GetLocation(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetLocation(self, *args)

    def SetLocation(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetLocation(self, val)

    @staticmethod
    def Value():
        return _PyAnyCAD.LinearAnnotationModel_Value()

    def GetValue(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetValue(self, *args)

    def SetValue(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetValue(self, val)

    @staticmethod
    def Angle():
        return _PyAnyCAD.LinearAnnotationModel_Angle()

    def GetAngle(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetAngle(self, *args)

    def SetAngle(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetAngle(self, val)

    @staticmethod
    def Coordinate():
        return _PyAnyCAD.LinearAnnotationModel_Coordinate()

    def GetCoordinate(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetCoordinate(self, *args)

    def SetCoordinate(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetCoordinate(self, val)

    @staticmethod
    def OnPlane():
        return _PyAnyCAD.LinearAnnotationModel_OnPlane()

    def GetOnPlane(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetOnPlane(self, *args)

    def SetOnPlane(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetOnPlane(self, val)

    @staticmethod
    def Billboard():
        return _PyAnyCAD.LinearAnnotationModel_Billboard()

    def GetBillboard(self, *args):
        return _PyAnyCAD.LinearAnnotationModel_GetBillboard(self, *args)

    def SetBillboard(self, val):
        return _PyAnyCAD.LinearAnnotationModel_SetBillboard(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_LinearAnnotationModel

# Register LinearAnnotationModel in _PyAnyCAD:
_PyAnyCAD.LinearAnnotationModel_swigregister(LinearAnnotationModel)
class RadiusAnnotationModel(AnnotationModel):
    r"""
    Author: DataManage
    半径标注
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.RadiusAnnotationModel_swiginit(self, _PyAnyCAD.new_RadiusAnnotationModel(*args))

    def Initialize(self, pDict):
        return _PyAnyCAD.RadiusAnnotationModel_Initialize(self, pDict)

    def Create(self, pDoc):
        r"""
        构造图元对象
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :rtype: :py:class:`ObjectId`
        :return: Entity的Id
        """
        return _PyAnyCAD.RadiusAnnotationModel_Create(self, pDoc)

    @staticmethod
    def StartPoint():
        return _PyAnyCAD.RadiusAnnotationModel_StartPoint()

    def GetStartPoint(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetStartPoint(self, *args)

    def SetStartPoint(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetStartPoint(self, val)

    @staticmethod
    def EndPoint():
        return _PyAnyCAD.RadiusAnnotationModel_EndPoint()

    def GetEndPoint(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetEndPoint(self, *args)

    def SetEndPoint(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetEndPoint(self, val)

    @staticmethod
    def Center():
        return _PyAnyCAD.RadiusAnnotationModel_Center()

    def GetCenter(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetCenter(self, *args)

    def SetCenter(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetCenter(self, val)

    @staticmethod
    def Value():
        return _PyAnyCAD.RadiusAnnotationModel_Value()

    def GetValue(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetValue(self, *args)

    def SetValue(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetValue(self, val)

    @staticmethod
    def Coordinate():
        return _PyAnyCAD.RadiusAnnotationModel_Coordinate()

    def GetCoordinate(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetCoordinate(self, *args)

    def SetCoordinate(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetCoordinate(self, val)

    @staticmethod
    def ShowArcLine():
        return _PyAnyCAD.RadiusAnnotationModel_ShowArcLine()

    def GetShowArcLine(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetShowArcLine(self, *args)

    def SetShowArcLine(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetShowArcLine(self, val)

    @staticmethod
    def Billboard():
        return _PyAnyCAD.RadiusAnnotationModel_Billboard()

    def GetBillboard(self, *args):
        return _PyAnyCAD.RadiusAnnotationModel_GetBillboard(self, *args)

    def SetBillboard(self, val):
        return _PyAnyCAD.RadiusAnnotationModel_SetBillboard(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_RadiusAnnotationModel

# Register RadiusAnnotationModel in _PyAnyCAD:
_PyAnyCAD.RadiusAnnotationModel_swigregister(RadiusAnnotationModel)
class TagAnnotationModel(AnnotationModel):
    r"""
    Author: DataManage
    文字引线标注
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyAnyCAD.TagAnnotationModel_swiginit(self, _PyAnyCAD.new_TagAnnotationModel(*args))

    def Initialize(self, pDict):
        return _PyAnyCAD.TagAnnotationModel_Initialize(self, pDict)

    def Create(self, pDoc):
        r"""
        构造图元对象
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :rtype: :py:class:`ObjectId`
        :return: Entity的Id
        """
        return _PyAnyCAD.TagAnnotationModel_Create(self, pDoc)

    @staticmethod
    def TargetPoint():
        return _PyAnyCAD.TagAnnotationModel_TargetPoint()

    def GetTargetPoint(self, *args):
        return _PyAnyCAD.TagAnnotationModel_GetTargetPoint(self, *args)

    def SetTargetPoint(self, val):
        return _PyAnyCAD.TagAnnotationModel_SetTargetPoint(self, val)

    @staticmethod
    def Location():
        return _PyAnyCAD.TagAnnotationModel_Location()

    def GetLocation(self, *args):
        return _PyAnyCAD.TagAnnotationModel_GetLocation(self, *args)

    def SetLocation(self, val):
        return _PyAnyCAD.TagAnnotationModel_SetLocation(self, val)

    @staticmethod
    def Coordinate():
        return _PyAnyCAD.TagAnnotationModel_Coordinate()

    def GetCoordinate(self, *args):
        return _PyAnyCAD.TagAnnotationModel_GetCoordinate(self, *args)

    def SetCoordinate(self, val):
        return _PyAnyCAD.TagAnnotationModel_SetCoordinate(self, val)

    @staticmethod
    def Billboard():
        return _PyAnyCAD.TagAnnotationModel_Billboard()

    def GetBillboard(self, *args):
        return _PyAnyCAD.TagAnnotationModel_GetBillboard(self, *args)

    def SetBillboard(self, val):
        return _PyAnyCAD.TagAnnotationModel_SetBillboard(self, val)
    __swig_destroy__ = _PyAnyCAD.delete_TagAnnotationModel

# Register TagAnnotationModel in _PyAnyCAD:
_PyAnyCAD.TagAnnotationModel_swigregister(TagAnnotationModel)
class DocumentIO(object):
    r"""
    Author: DataManage

    Document的保存和加载辅助类
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.DocumentIO_Instance()

    def GetCacheGRep(self):
        return _PyAnyCAD.DocumentIO_GetCacheGRep(self)

    def SetCacheGRep(self, val):
        return _PyAnyCAD.DocumentIO_SetCacheGRep(self, val)

    @staticmethod
    def Initialize():
        r"""初始化。由平台调用。"""
        return _PyAnyCAD.DocumentIO_Initialize()

    @staticmethod
    def Save(*args):
        return _PyAnyCAD.DocumentIO_Save(*args)

    @staticmethod
    def Load(*args):
        return _PyAnyCAD.DocumentIO_Load(*args)
    __swig_destroy__ = _PyAnyCAD.delete_DocumentIO

# Register DocumentIO in _PyAnyCAD:
_PyAnyCAD.DocumentIO_swigregister(DocumentIO)
class Application(object):
    r"""
    Author: DataManage
    应用程序管理
    全局唯一
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def Instance():
        return _PyAnyCAD.Application_Instance()

    def GetActiveViewer(self):
        return _PyAnyCAD.Application_GetActiveViewer(self)

    def SetActiveViewer(self, val):
        return _PyAnyCAD.Application_SetActiveViewer(self, val)

    def Initialize(self, baseDirectory, useSync):
        r"""
        初始化。内部调用
        :type baseDirectory: :py:class:`Path`
        :param baseDirectory: 程序所在的路径
        :type useSync: boolean
        :param useSync: 是否启用数据同步
        :rtype: boolean
        :return: true成功
        """
        return _PyAnyCAD.Application_Initialize(self, baseDirectory, useSync)

    def Destroy(self):
        r"""释放资源"""
        return _PyAnyCAD.Application_Destroy(self)

    def CreateView(self, hwndHost, width, height):
        r"""
        基于已有的窗口控件上创建三维显示视图
        :type hwndHost: int
        :param hwndHost: the host window handle.
        :type width: int
        :param width: the width
        :type height: int
        :param height: the height
        :rtype: :py:class:`Viewer`
        :return: the viewer.
        """
        return _PyAnyCAD.Application_CreateView(self, hwndHost, width, height)

    def CreateWindow3D(self, title, width, height, visible):
        r"""
        创建一个独立的三维窗口.
        :type title: string
        :param title: the title
        :type width: int
        :param width: the width
        :type height: int
        :param height: the height
        :type visible: boolean
        :param visible: if visible.
        :rtype: :py:class:`Viewer`
        :return: 
        """
        return _PyAnyCAD.Application_CreateWindow3D(self, title, width, height, visible)

    def CreateDocument(self, name):
        r"""
        创建文档。
        :type name: string
        :param name: 文档名称
        :rtype: :py:class:`Document`
        :return: 返回文档对象
        """
        return _PyAnyCAD.Application_CreateDocument(self, name)

    def GetActiveDocument(self):
        r"""
        获取活动的文档
        :rtype: :py:class:`Document`
        :return: 文档
        """
        return _PyAnyCAD.Application_GetActiveDocument(self)

    def SetActiveDocument(self, doc):
        r"""
        设置当前活动的文档
        :type doc: :py:class:`Document`
        :param doc: 文档对象
        """
        return _PyAnyCAD.Application_SetActiveDocument(self, doc)

    def ExecuteCommand(self, *args):
        return _PyAnyCAD.Application_ExecuteCommand(self, *args)

    def QueryCommand(self, *args):
        return _PyAnyCAD.Application_QueryCommand(self, *args)

    def ShowDocument(self, doc):
        r"""
        在当前Viewer中显示文档，文档被设置为活动文档。
        :type doc: :py:class:`Document`
        :param doc: 文档
        """
        return _PyAnyCAD.Application_ShowDocument(self, doc)

    def Input(self, *args):
        return _PyAnyCAD.Application_Input(self, *args)

    def ExecuteEditorAction(self, name, params):
        r"""
        执行Editor的子命令
        :type name: string
        :param name: 命令名称
        :type params: :py:class:`ParameterDict`
        :param params: 参数
        :rtype: boolean
        :return: 是否成功
        """
        return _PyAnyCAD.Application_ExecuteEditorAction(self, name, params)

    def AddEventListener(self, pListener):
        r"""
        增加应用级别的事件监听器
        :type pListener: :py:class:`AppEventListener`
        :param pListener: 监听器
        """
        return _PyAnyCAD.Application_AddEventListener(self, pListener)

    def RemoveEventListener(self, pListener):
        r"""
        移除监听器
        :type pListener: :py:class:`AppEventListener`
        :param pListener: 监听器
        """
        return _PyAnyCAD.Application_RemoveEventListener(self, pListener)

    def GetDpiScale(self):
        r"""
        获取显示器DPI缩放系数。
        :rtype: :py:class:`vec2`
        :return: 缩放系数
        """
        return _PyAnyCAD.Application_GetDpiScale(self)

    @staticmethod
    def InternalRegisterSdk(a, b, d, e, f):
        return _PyAnyCAD.Application_InternalRegisterSdk(a, b, d, e, f)
    __swig_destroy__ = _PyAnyCAD.delete_Application

# Register Application in _PyAnyCAD:
_PyAnyCAD.Application_swigregister(Application)
class SelectionListener(PickListener):
    r"""
    Author: DataManage

    SelectionListener

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pViewer):
        if self.__class__ == SelectionListener:
            _self = None
        else:
            _self = self
        _PyAnyCAD.SelectionListener_swiginit(self, _PyAnyCAD.new_SelectionListener(_self, pViewer))
    __swig_destroy__ = _PyAnyCAD.delete_SelectionListener

    def AfterSelect(self, item):
        return _PyAnyCAD.SelectionListener_AfterSelect(self, item)
    def __disown__(self):
        self.this.disown()
        _PyAnyCAD.disown_SelectionListener(self)
        return weakref.proxy(self)

# Register SelectionListener in _PyAnyCAD:
_PyAnyCAD.SelectionListener_swigregister(SelectionListener)
class ShapeScriptContext(object):
    r"""
    Author: 
    应用程序管理
    全局唯一
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ShapeScriptContext_swiginit(self, _PyAnyCAD.new_ShapeScriptContext())

    def GetEntity(self):
        return _PyAnyCAD.ShapeScriptContext_GetEntity(self)

    def GetComponent(self):
        return _PyAnyCAD.ShapeScriptContext_GetComponent(self)

    def GetDocument(self):
        return _PyAnyCAD.ShapeScriptContext_GetDocument(self)

    def GetViewer(self):
        return _PyAnyCAD.ShapeScriptContext_GetViewer(self)

    def GetParameters(self):
        return _PyAnyCAD.ShapeScriptContext_GetParameters(self)

    def SetShape(self, shape):
        return _PyAnyCAD.ShapeScriptContext_SetShape(self, shape)

    def IsValid(self):
        return _PyAnyCAD.ShapeScriptContext_IsValid(self)
    __swig_destroy__ = _PyAnyCAD.delete_ShapeScriptContext

# Register ShapeScriptContext in _PyAnyCAD:
_PyAnyCAD.ShapeScriptContext_swigregister(ShapeScriptContext)
class ApplicationContext(object):
    r"""
    Author: 
    应用程序管理
    全局唯一
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyAnyCAD.ApplicationContext_swiginit(self, _PyAnyCAD.new_ApplicationContext())

    def GetDocument(self):
        r"""
        获取当前活动的文档对象
        :rtype: :py:class:`Document`
        :return: 文档
        """
        return _PyAnyCAD.ApplicationContext_GetDocument(self)

    def GetViewer(self):
        r"""
        获取当前活动的视图
        :rtype: :py:class:`Viewer`
        :return: 
        """
        return _PyAnyCAD.ApplicationContext_GetViewer(self)
    __swig_destroy__ = _PyAnyCAD.delete_ApplicationContext

# Register ApplicationContext in _PyAnyCAD:
_PyAnyCAD.ApplicationContext_swigregister(ApplicationContext)
class PointCloudElement(DrawableElement):
    r"""
    Author: PointCloud

    点云数据存储对象
    See also: PointCloud
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.PointCloudElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.PointCloudElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.PointCloudElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.PointCloudElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.PointCloudElement_swiginit(self, _PyAnyCAD.new_PointCloudElement())
    __swig_destroy__ = _PyAnyCAD.delete_PointCloudElement

    def GetPositions(self):
        return _PyAnyCAD.PointCloudElement_GetPositions(self)

    def SetPositions(self, val):
        return _PyAnyCAD.PointCloudElement_SetPositions(self, val)

    def GetNormals(self):
        return _PyAnyCAD.PointCloudElement_GetNormals(self)

    def SetNormals(self, val):
        return _PyAnyCAD.PointCloudElement_SetNormals(self, val)

    def GetColors(self):
        return _PyAnyCAD.PointCloudElement_GetColors(self)

    def SetColors(self, val):
        return _PyAnyCAD.PointCloudElement_SetColors(self, val)

    def GetScalarData(self):
        return _PyAnyCAD.PointCloudElement_GetScalarData(self)

    def SetScalarData(self, val):
        return _PyAnyCAD.PointCloudElement_SetScalarData(self, val)

    def GetPointSize(self):
        return _PyAnyCAD.PointCloudElement_GetPointSize(self)

    def SetPointSize(self, val):
        return _PyAnyCAD.PointCloudElement_SetPointSize(self, val)

    def GetPointColor(self):
        return _PyAnyCAD.PointCloudElement_GetPointColor(self)

    def SetPointColor(self, val):
        return _PyAnyCAD.PointCloudElement_SetPointColor(self, val)

    def GetPointNames(self):
        return _PyAnyCAD.PointCloudElement_GetPointNames(self)

    def SetPointNames(self, val):
        return _PyAnyCAD.PointCloudElement_SetPointNames(self, val)

    def DeletePoints(self, ids):
        r"""
        删除指定的点
        :type ids: :py:class:`Uint32List`
        :param ids: 点的索引。
        """
        return _PyAnyCAD.PointCloudElement_DeletePoints(self, ids)

    def AddPoint(self, position, normal, color, data, name):
        r"""
        添加一个点。代价较高。
        :type position: :py:class:`vec3`
        :param position: 位置
        :type normal: :py:class:`vec3`
        :param normal: 法向
        :type color: :py:class:`vec3`
        :param color: 颜色
        :type data: float
        :param data: 值
        """
        return _PyAnyCAD.PointCloudElement_AddPoint(self, position, normal, color, data, name)

# Register PointCloudElement in _PyAnyCAD:
_PyAnyCAD.PointCloudElement_swigregister(PointCloudElement)
EnumAxPointType_Point = _PyAnyCAD.EnumAxPointType_Point
r"""端点"""
EnumAxPointType_Center = _PyAnyCAD.EnumAxPointType_Center
r"""中心点"""
EnumAxPointType_Joint = _PyAnyCAD.EnumAxPointType_Joint
r"""链接到其他路径上的点"""
class AxPointElement(PointElement):
    r"""
    Author: CAM

    AxPointElement 带姿态的点

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.AxPointElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.AxPointElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AxPointElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.AxPointElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.AxPointElement_swiginit(self, _PyAnyCAD.new_AxPointElement())
    __swig_destroy__ = _PyAnyCAD.delete_AxPointElement

    def GetCoodinate(self):
        return _PyAnyCAD.AxPointElement_GetCoodinate(self)

    def GetLength(self):
        return _PyAnyCAD.AxPointElement_GetLength(self)

    def SetLength(self, val):
        return _PyAnyCAD.AxPointElement_SetLength(self, val)

    def GetPointType(self):
        return _PyAnyCAD.AxPointElement_GetPointType(self)

    def SetPointType(self, val):
        return _PyAnyCAD.AxPointElement_SetPointType(self, val)

    def SetCoodinate(self, val):
        r"""
        设置位置和姿态
        :type val: :py:class:`gp_Ax3`
        :param val: 坐标系
        :rtype: boolean
        :return: true是否成功
        """
        return _PyAnyCAD.AxPointElement_SetCoodinate(self, val)

    def SetValue(self, v):
        r"""设置点的位置"""
        return _PyAnyCAD.AxPointElement_SetValue(self, v)

    def SetPoint(self, pos, dirX, dirY):
        return _PyAnyCAD.AxPointElement_SetPoint(self, pos, dirX, dirY)

    def GetEulerAngles(self):
        r"""
        获取姿态信息：欧拉角
        :rtype: :py:class:`gp_XYZ`
        :return: 得到欧拉角
        """
        return _PyAnyCAD.AxPointElement_GetEulerAngles(self)

    def GetPosition(self):
        r"""
        获取位置坐标
        :rtype: :py:class:`gp_Pnt`
        :return: XYZ坐标
        """
        return _PyAnyCAD.AxPointElement_GetPosition(self)

    def UpdatePose(self, pos, eulerAngles):
        return _PyAnyCAD.AxPointElement_UpdatePose(self, pos, eulerAngles)

    def SetLocalTransform(self, trf):
        return _PyAnyCAD.AxPointElement_SetLocalTransform(self, trf)

# Register AxPointElement in _PyAnyCAD:
_PyAnyCAD.AxPointElement_swigregister(AxPointElement)
class AxPathElement(DrawableElement):
    r"""
    Author: CAM

    AxPathElement 由线段和圆弧组成的路径

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.AxPathElement_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.AxPathElement_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.AxPathElement_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.AxPathElement_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.AxPathElement_swiginit(self, _PyAnyCAD.new_AxPathElement())
    __swig_destroy__ = _PyAnyCAD.delete_AxPathElement

    def GetPointIds(self):
        return _PyAnyCAD.AxPathElement_GetPointIds(self)

    def SetPointIds(self, val):
        return _PyAnyCAD.AxPathElement_SetPointIds(self, val)
    PID_Geometry = _PyAnyCAD.AxPathElement_PID_Geometry

    def SetVisible(self, bVisible):
        return _PyAnyCAD.AxPathElement_SetVisible(self, bVisible)

    def GetStartPoint(self):
        return _PyAnyCAD.AxPathElement_GetStartPoint(self)

    def GetEndPoint(self):
        return _PyAnyCAD.AxPathElement_GetEndPoint(self)

# Register AxPathElement in _PyAnyCAD:
_PyAnyCAD.AxPathElement_swigregister(AxPathElement)
EnumWorkstageType_Unknown = _PyAnyCAD.EnumWorkstageType_Unknown
EnumWorkstageType_MachiningPath = _PyAnyCAD.EnumWorkstageType_MachiningPath
EnumWorkstageType_TransitionPath = _PyAnyCAD.EnumWorkstageType_TransitionPath
class Workstage(EntityElement):
    r"""
    Author: CAM

    工序基类

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.Workstage_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.Workstage_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.Workstage_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.Workstage_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.Workstage_swiginit(self, _PyAnyCAD.new_Workstage())
    __swig_destroy__ = _PyAnyCAD.delete_Workstage

    def GetOrder(self):
        return _PyAnyCAD.Workstage_GetOrder(self)

    def SetOrder(self, val):
        return _PyAnyCAD.Workstage_SetOrder(self, val)

    def GetPathId(self):
        return _PyAnyCAD.Workstage_GetPathId(self)

    def SetPathId(self, val):
        return _PyAnyCAD.Workstage_SetPathId(self, val)

    def GetToolId(self):
        return _PyAnyCAD.Workstage_GetToolId(self)

    def SetToolId(self, val):
        return _PyAnyCAD.Workstage_SetToolId(self, val)

    def GetWorkstageType(self):
        return _PyAnyCAD.Workstage_GetWorkstageType(self)

# Register Workstage in _PyAnyCAD:
_PyAnyCAD.Workstage_swigregister(Workstage)
class MachiningWorkstage(Workstage):
    r"""
    Author: CAM

    加工工序
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.MachiningWorkstage_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.MachiningWorkstage_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.MachiningWorkstage_Cast(obj)

    def __init__(self):
        _PyAnyCAD.MachiningWorkstage_swiginit(self, _PyAnyCAD.new_MachiningWorkstage())
    __swig_destroy__ = _PyAnyCAD.delete_MachiningWorkstage

    def GetPathHostId(self):
        return _PyAnyCAD.MachiningWorkstage_GetPathHostId(self)

    def SetPathHostId(self, val):
        return _PyAnyCAD.MachiningWorkstage_SetPathHostId(self, val)

    def GetInPathId(self):
        return _PyAnyCAD.MachiningWorkstage_GetInPathId(self)

    def SetInPathId(self, val):
        return _PyAnyCAD.MachiningWorkstage_SetInPathId(self, val)

    def GetOutPathId(self):
        return _PyAnyCAD.MachiningWorkstage_GetOutPathId(self)

    def SetOutPathId(self, val):
        return _PyAnyCAD.MachiningWorkstage_SetOutPathId(self, val)

    def GetToolOffsetIn(self):
        return _PyAnyCAD.MachiningWorkstage_GetToolOffsetIn(self)

    def SetToolOffsetIn(self, val):
        return _PyAnyCAD.MachiningWorkstage_SetToolOffsetIn(self, val)

    def GetToolOffsetOut(self):
        return _PyAnyCAD.MachiningWorkstage_GetToolOffsetOut(self)

    def SetToolOffsetOut(self, val):
        return _PyAnyCAD.MachiningWorkstage_SetToolOffsetOut(self, val)

    def GetWorkstageType(self):
        return _PyAnyCAD.MachiningWorkstage_GetWorkstageType(self)

    def GetStartPoint(self):
        r"""
        获取工序起始点
        :rtype: :py:class:`AxPointElement`
        :return: 起始点
        """
        return _PyAnyCAD.MachiningWorkstage_GetStartPoint(self)

    def GetEndPoint(self):
        r"""
        获取工序终点
        :rtype: :py:class:`AxPointElement`
        :return: 终点
        """
        return _PyAnyCAD.MachiningWorkstage_GetEndPoint(self)

    @staticmethod
    def Create(*args):
        r"""
        根据工具、加工特征创建工序
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        :type toolId: :py:class:`ObjectId`
        :param toolId: 工具ID
        :type featureId: :py:class:`PickedId`
        :param featureId: 加工特征
        :rtype: :py:class:`MachiningWorkstage`
        :return: 工序对象
        """
        return _PyAnyCAD.MachiningWorkstage_Create(*args)

# Register MachiningWorkstage in _PyAnyCAD:
_PyAnyCAD.MachiningWorkstage_swigregister(MachiningWorkstage)
class TransitionWorkstage(Workstage):
    r"""
    Author: CAM

    过度工序
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def GetStaticClassId():
        return _PyAnyCAD.TransitionWorkstage_GetStaticClassId()

    def GetClassId(self):
        return _PyAnyCAD.TransitionWorkstage_GetClassId(self)

    @staticmethod
    def Cast(obj):
        return _PyAnyCAD.TransitionWorkstage_Cast(obj)

    @staticmethod
    def Create(pDoc):
        return _PyAnyCAD.TransitionWorkstage_Create(pDoc)

    def __init__(self):
        _PyAnyCAD.TransitionWorkstage_swiginit(self, _PyAnyCAD.new_TransitionWorkstage())
    __swig_destroy__ = _PyAnyCAD.delete_TransitionWorkstage

    def GetWorkstageType(self):
        return _PyAnyCAD.TransitionWorkstage_GetWorkstageType(self)

    @staticmethod
    def ConnectMachiningWorkstages(pDoc):
        r"""
        自动在加工工序之间添加过度路径
        :type pDoc: :py:class:`Document`
        :param pDoc: 文档
        """
        return _PyAnyCAD.TransitionWorkstage_ConnectMachiningWorkstages(pDoc)

# Register TransitionWorkstage in _PyAnyCAD:
_PyAnyCAD.TransitionWorkstage_swigregister(TransitionWorkstage)

