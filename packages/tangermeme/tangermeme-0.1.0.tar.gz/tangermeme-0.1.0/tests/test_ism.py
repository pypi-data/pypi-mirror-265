# test_ism.py
# Contact: Jacob Schreiber <jmschreiber91@gmail.com>

import numpy
import torch
import pytest

from tangermeme.utils import one_hot_encode
from tangermeme.utils import random_one_hot

from tangermeme.ism import _edit_distance_one
from tangermeme.ism import saturation_mutagenesis

from .toy_models import SumModel
from .toy_models import FlattenDense
from .toy_models import Conv
from .toy_models import Scatter
from .toy_models import ConvDense

from numpy.testing import assert_raises
from numpy.testing import assert_array_almost_equal


@pytest.fixture
def X():
	return random_one_hot((2, 4, 10), random_state=0)


###


def test_edit_distance_one(X):
	X_one = _edit_distance_one(X[0], 0, -1)

	assert X_one.dtype == torch.int8
	assert X_one.shape == (40, 4, 10)
	assert X_one.sum() == 400

	assert_array_almost_equal(X_one[:4], [
		[[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]]])

	assert_array_almost_equal(X_one[-4:], [
		[[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 1, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]]])


def test_edit_distance_one_start_end(X):
	X_one = _edit_distance_one(X[0], 2, 5)
	assert X_one.shape == (12, 4, 10)

	assert_array_almost_equal(X_one, [
		[[1, 0, 1, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 1, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 1, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 1, 0, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 1, 1, 1, 1, 1, 0, 1]],

        [[1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 1, 1, 1, 1, 0, 1]]])


###


def test_saturation_mutagenesis_sum_model(X):
	model = SumModel()
	y0, y_hat = saturation_mutagenesis(model, X, device='cpu')

	assert y0.shape == (2, 4)
	assert y_hat.shape == (2, 4, 10, 4)

	assert_array_almost_equal(y0, [[2, 2, 0, 6], [4, 2, 3, 1]])
	assert_array_almost_equal(y_hat[:, :, :3], [
		[[[2, 2, 0, 6],
		  [3, 2, 0, 5],
		  [3, 1, 0, 6]],

		 [[1, 3, 0, 6],
		  [2, 3, 0, 5],
		  [2, 2, 0, 6]],

		 [[1, 2, 1, 6],
		  [2, 2, 1, 5],
		  [2, 1, 1, 6]],

		 [[1, 2, 0, 7],
		  [2, 2, 0, 6],
		  [2, 1, 0, 7]]],


		[[[5, 1, 3, 1],
		  [5, 2, 2, 1],
		  [4, 2, 3, 1]],

		 [[4, 2, 3, 1],
		  [4, 3, 2, 1],
		  [3, 3, 3, 1]],

		 [[4, 1, 4, 1],
		  [4, 2, 3, 1],
		  [3, 2, 4, 1]],

		 [[4, 1, 3, 2],
		  [4, 2, 2, 2],
		  [3, 2, 3, 2]]]])

