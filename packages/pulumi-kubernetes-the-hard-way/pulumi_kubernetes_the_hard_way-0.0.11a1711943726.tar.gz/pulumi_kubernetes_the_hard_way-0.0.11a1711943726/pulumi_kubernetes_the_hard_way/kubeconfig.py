# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import config
from . import config as _config
from . import tls as _tls

__all__ = ['KubeconfigArgs', 'Kubeconfig']

@pulumi.input_type
class KubeconfigArgs:
    def __init__(__self__, *,
                 options: Union[pulumi.Input['_config.KubeconfigAdminOptionsArgs'], pulumi.Input['_config.KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['_config.KubeconfigKubeProxyOptionsArgs'], pulumi.Input['_config.KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['_config.KubeconfigWorkerOptionsArgs']],
                 pki: '_tls.ClusterPki'):
        """
        The set of arguments for constructing a Kubeconfig resource.
        :param '_tls.ClusterPki' pki: The PKI containing certificate data.
        """
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "pki", pki)

    @property
    @pulumi.getter
    def options(self) -> Union[pulumi.Input['_config.KubeconfigAdminOptionsArgs'], pulumi.Input['_config.KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['_config.KubeconfigKubeProxyOptionsArgs'], pulumi.Input['_config.KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['_config.KubeconfigWorkerOptionsArgs']]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Union[pulumi.Input['_config.KubeconfigAdminOptionsArgs'], pulumi.Input['_config.KubeconfigKubeControllerManagerOptionsArgs'], pulumi.Input['_config.KubeconfigKubeProxyOptionsArgs'], pulumi.Input['_config.KubeconfigKubeSchedulerOptionsArgs'], pulumi.Input['_config.KubeconfigWorkerOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def pki(self) -> '_tls.ClusterPki':
        """
        The PKI containing certificate data.
        """
        return pulumi.get(self, "pki")

    @pki.setter
    def pki(self, value: '_tls.ClusterPki'):
        pulumi.set(self, "pki", value)


class Kubeconfig(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 options: Optional[Union[pulumi.Input[pulumi.InputType['_config.KubeconfigAdminOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeControllerManagerOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeProxyOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeSchedulerOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigWorkerOptionsArgs']]]] = None,
                 pki: Optional['_tls.ClusterPki'] = None,
                 __props__=None):
        """
        Kubeconfig

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param '_tls.ClusterPki' pki: The PKI containing certificate data.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubeconfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Kubeconfig

        :param str resource_name: The name of the resource.
        :param KubeconfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubeconfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 options: Optional[Union[pulumi.Input[pulumi.InputType['_config.KubeconfigAdminOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeControllerManagerOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeProxyOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigKubeSchedulerOptionsArgs']], pulumi.Input[pulumi.InputType['_config.KubeconfigWorkerOptionsArgs']]]] = None,
                 pki: Optional['_tls.ClusterPki'] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubeconfigArgs.__new__(KubeconfigArgs)

            if options is None and not opts.urn:
                raise TypeError("Missing required property 'options'")
            __props__.__dict__["options"] = options
            if pki is None and not opts.urn:
                raise TypeError("Missing required property 'pki'")
            __props__.__dict__["pki"] = pki
            __props__.__dict__["type"] = None
            __props__.__dict__["value"] = None
            __props__.__dict__["yaml"] = None
        super(Kubeconfig, __self__).__init__(
            'kubernetes-the-hard-way:index:Kubeconfig',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional['config.KubeconfigType']]:
        """
        The type of config this resource is intended for.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output['_config.outputs.Kubeconfig']:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def yaml(self) -> pulumi.Output[str]:
        """
        The yaml representation of the kubeconfig.
        """
        return pulumi.get(self, "yaml")

