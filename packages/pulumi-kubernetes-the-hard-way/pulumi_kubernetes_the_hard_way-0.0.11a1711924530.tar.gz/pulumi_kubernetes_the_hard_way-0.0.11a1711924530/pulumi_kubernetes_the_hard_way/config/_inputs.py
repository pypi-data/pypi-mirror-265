# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'KubeconfigAdminOptionsArgs',
    'KubeconfigKubeControllerManagerOptionsArgs',
    'KubeconfigKubeProxyOptionsArgs',
    'KubeconfigKubeSchedulerOptionsArgs',
    'KubeconfigWorkerOptionsArgs',
]

@pulumi.input_type
class KubeconfigAdminOptionsArgs:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", 'admin')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeControllerManagerOptionsArgs:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", 'kube-controller-manager')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeProxyOptionsArgs:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", 'kube-proxy')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeSchedulerOptionsArgs:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", 'kube-scheduler')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigWorkerOptionsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 public_ip: pulumi.Input[str],
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip", public_ip)
        if type is not None:
            pulumi.set(__self__, "type", 'worker')

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


